function urlB64ToUint8Array(t) {
for (var t = (t + "=".repeat((4 - t.length % 4) % 4)).replace(/\-/g, "+").replace(/_/g, "/"), e = window.atob(t), i = new Uint8Array(e.length), n = 0; n < e.length; ++n) i[n] = e.charCodeAt(n);
return i;
}

Client.Plugins = Client.Plugins || {}, Client.Plugins.Notification = function(t) {
this.shellEmulator = t, this.reqMap = {}, "serviceWorker" in navigator && (navigator.serviceWorker.onmessage = function(t) {
var e;
t.data.reqId && this.reqMap[t.data.reqId] && ((e = this.reqMap[t.data.reqId]).result = t.data.result, 
this.shellEmulator.sendEvent(e, t.data.eventName));
}.bind(this));
}, Client.Plugins.Notification.prototype.initialiseServiceWorker = function(e) {
if ("serviceWorker" in navigator) {
if (this.registration) return e(!0);
navigator.serviceWorker.register("/app/client/objects/base/shellEmulator/plugins/notifications/serviceworker.js").then(function(t) {
if (this.registration = t, e) return e(!0);
}.bind(this)).catch(function(t) {
if (e) return e(!1, t);
});
} else if (e) return e(!1, "Service workers aren't supported in this browser.");
}, Client.Plugins.Notification.prototype.prepareNotification = function(t) {
var e = {
title: t.title,
options: {
icon: t.icon,
image: t.image,
body: t.body,
actions: t.actions,
data: {
payload: t.payload,
default: {
openUrl: t.openURL,
webRequestUrl: t.webRequestUrl,
webRequestOpt: t.webRequestOpt
},
reqId: t.reqId
}
}
};
t.actions = t.actions || [];
for (var i = 0; i < t.actions.length; i++) {
var n = t.actions[i];
e.options.data[n.action] = {
openUrl: n.openURL,
webRequestUrl: n.webRequestUrl,
webRequestOpt: n.webRequestOpt
};
}
t.webOptions = t.webOptions || {};
for (var o = Object.keys(t.webOptions), i = 0; i < o.length; i++) e.options[o[i]] = t.webOptions[o[i]];
return e;
}, Client.Plugins.Notification.prototype.getMaxActions = function(t) {
t.setResult("Notification" in window ? Notification.maxActions : 0);
}, Client.Plugins.Notification.prototype.alert = function(t) {
window.alert(t.params.message), t.setResult();
}, Client.Plugins.Notification.prototype.confirm = function(t) {
t.setResult(confirm(t.params.message) ? 2 : 1);
}, Client.Plugins.Notification.prototype.prompt = function(t) {
var e = prompt(t.params.message, t.params.defaultText);
t.setResult({
buttonIndex: e ? 2 : 1,
input1: e
});
}, Client.Plugins.Notification.prototype.beep = function(t) {}, Client.Plugins.Notification.prototype.hasPermission = function(t) {
"Notification" in window ? t.setResult("granted" === Notification.permission) : t.setError("This browser does not support desktop notification");
}, Client.Plugins.Notification.prototype.schedule = function(e) {
"Notification" in window || e.setError("This browser does not support desktop notification");
var t = function() {
var t = (Math.random() + "").substring(2), t = ((this.reqMap[t] = e).params.notification = e.params.notification || {}, 
e.params.notification.reqId = t, this.prepareNotification(e.params.notification));
this.registration.showNotification(t.title, t.options);
}.bind(this);
"granted" !== Notification.permission && e.setError("User denied permissions for notifications"), 
this.initialiseServiceWorker(t);
}, Client.Plugins.Notification.prototype.update = function(t) {
t.setResult();
}, Client.Plugins.Notification.prototype.clear = function(t) {}, Client.Plugins.Notification.prototype.clearAll = function(t) {}, 
Client.Plugins.Notification.prototype.cancel = function(t) {}, Client.Plugins.Notification.prototype.cancelAll = function(t) {}, 
Client.Plugins.Notification.prototype.register = function(i) {
"Notification" in window ? Notification.requestPermission(function(t) {
"granted" !== t ? i.setError("User denied permissions for Notifications") : (i.params.options.keys = i.params.options.keys || {}, 
this.initialiseServiceWorker(function(t, e) {
if (e) i.setError(e); else {
if (!i.params.options.keys || !i.params.options.keys.publicKey || !i.params.options.keys.privateKey) return i.setResult();
this.registration.pushManager.getSubscription().then(function(t) {
var e;
!t || i.params.options.resubscribe ? (e = function() {
var t = {
userVisibleOnly: !0
}, e = urlB64ToUint8Array(i.params.options.keys.publicKey);
t.applicationServerKey = e, this.registration.pushManager.subscribe(t).then(function(t) {
this.subscription = t, i.setResult({
token: this.subscription,
keys: i.params.options.keys
});
}).catch(function(t) {
i.setError(t);
});
}.bind(this), t ? t.unsubscribe().then(function(t) {
t ? e() : i.setError("Unable to subscribe to push notifications");
}).catch(function(t) {
i.setError(t);
}) : e()) : (this.subscription = t, i.setResult({
token: this.subscription,
keys: i.params.options.keys
}));
}.bind(this)).catch(function(t) {
i.setError(t);
});
}
}.bind(this)));
}.bind(this)) : i.setError("This browser does not support desktop notification");
}, Client.Plugins.Notification.prototype.push = function(t) {
t.setResult();
}, Client.Plugins.Notification.prototype.getBadge = function(t) {
t.setResult(0);
}, Client.Plugins.Notification.prototype.setBadge = function(t) {}, Client.Plugins = Client.Plugins || {}, 
Client.Plugins.Accelerometer = function(t) {
this.shellEmulator = t;
}, Client.Plugins.Accelerometer.prototype.getCurrentAcceleration = function(t) {
if (this.shellEmulator.isNotSlave) {
if (!window.Accelerometer) return t.setError("Accelerometer not supported");
this.acl = new Accelerometer();
var e = setTimeout(function() {
t.setResult({
x: null,
y: null,
z: null,
timestamp: new Date()
});
}, 1e3);
this.acl.addEventListener("reading", function() {
clearTimeout(e), t.setResult({
x: this.acl.x,
y: this.acl.y,
z: this.acl.z,
timestamp: new Date()
}), this.acl.stop();
}.bind(this)), this.acl.start();
}
}, Client.Plugins.Accelerometer.prototype.watchAcceleration = function(t) {
return this.shellEmulator.isNotSlave ? window.Accelerometer ? (this.acl = new Accelerometer({
frequency: t.params.frequency || 1e3
}), this.acl.addEventListener("reading", function() {
t.result = {
x: this.acl.x,
y: this.acl.y,
z: this.acl.z,
timestamp: new Date()
}, this.shellEmulator.sendEvent(t, "Acceleration");
}.bind(this)), void this.acl.start()) : t.setError("Accelerometer not supported") : null;
}, Client.Plugins.Accelerometer.prototype.clearWatch = function() {
this.acl && this.acl.stop();
}, Client.Plugins = Client.Plugins || {}, Client.Plugins.BackgroundLocation = function(t) {
this.shellEmulator = t, this.locations = [], this.enabled = !1, this.options = {
desiredAccuracy: 0,
maxLocations: null
};
}, Client.Plugins.BackgroundLocation.prototype.start = function(e) {
this.enabled = !0, this.watch = navigator.geolocation.watchPosition(function(t) {
t = {
accuracy: t.coords.accuracy,
altitude: t.coords.altitude,
altitudeAccuracy: t.coords.altitudeAccuracy,
heading: t.coords.heading,
latitude: t.coords.latitude,
longitude: t.coords.longitude,
speed: t.coords.speed,
timeStamp: new Date(),
id: new Date().getUTCMilliseconds().toString()
};
e.result = t, this.shellEmulator.sendEvent(e, "Location"), this.options.maxLocations = this.options.maxLocations || null, 
(!this.options.maxLocations || this.options.maxLocations < this.locations.length) && this.locations.push(t);
}.bind(this), function(t) {
this.enabled = !1, e.result = {
error: this.getErrorMsg(t)
}, this.shellEmulator.sendEvent(e, "Location");
}.bind(this), {
enableHighAccuracy: !!(this.options.desiredAccuracy && 80 < this.options.desiredAccuracy)
});
}, Client.Plugins.BackgroundLocation.prototype.stop = function() {
this.enabled = !1, navigator.geolocation.clearWatch(this.watch);
}, Client.Plugins.BackgroundLocation.prototype.getErrorMsg = function(t) {
var e = "";
switch (t.code) {
case t.PERMISSION_DENIED:
e = "User denied the request for Geolocation.";
break;

case t.POSITION_UNAVAILABLE:
e = "Location information is unavailable.";
break;

case t.TIMEOUT:
e = "The request to get user location timed out.";
break;

case t.UNKNOWN_ERROR:
e = "An unknown error occurred.";
}
return e;
}, Client.Plugins.BackgroundLocation.prototype.configure = function(t) {
t.params.options = t.params.options || {}, this.options.maxLocations = t.params.options.maxLocations, 
this.options.desiredAccuracy = t.params.options.desiredAccuracy;
}, Client.Plugins.BackgroundLocation.prototype.isLocationEnabled = function(t) {
t.setResult(this.enabled);
}, Client.Plugins.BackgroundLocation.prototype.showAppSettings = function(t) {}, 
Client.Plugins.BackgroundLocation.prototype.showLocationSettings = function(t) {}, 
Client.Plugins.BackgroundLocation.prototype.getLocations = function(t) {
t.setResult(this.locations);
}, Client.Plugins.BackgroundLocation.prototype.getValidLocations = function(t) {
t.setResult(this.locations);
}, Client.Plugins.BackgroundLocation.prototype.deleteLocation = function(e) {
this.locations = this.locations.filter(function(t) {
return t.id !== e.params.locationId;
});
}, Client.Plugins.BackgroundLocation.prototype.deleteAllLocations = function() {
this.locations = [];
}, Client.Plugins.BackgroundLocation.prototype.getLogEntries = function(t) {
t.setResult([]);
}, Client.Plugins.BackgroundLocation.prototype.checkStatus = function(t) {
t.setResult({
isRunning: this.enabled
});
}, Client.Plugins = Client.Plugins || {}, Client.Plugins.BarcodeScanner = function(t) {
this.useBrowserDetector = "BarcodeDetector" in window, this.shellEmulator = t;
}, Client.Plugins.BarcodeScanner.prototype.scan = function(t) {
return this.shellEmulator.isNotSlave ? this.useBrowserDetector || Client.mainFrame.loadRequirements({
"objects/base/shellEmulator/plugins/barcodeScanner/zxing.min.js": {
name: "ZXing",
type: "jc"
}
}) ? void (this.useBrowserDetector || window.ZXing ? (this.scanCB = function(t, e, i) {
i ? t.setError(i) : t.setResult(e || ""), this.useBrowserDetector ? this.video.srcObject.getVideoTracks().forEach(t => {
t.stop(), this.video.srcObject.removeTrack(t);
}) : this.barcodeDetector && this.barcodeDetector.reset(), document.body.removeChild(this.mainContainer), 
this.mainContainer = null, this.video = null, this.shadowDiv = null, this.webcamId = null;
}.bind(this, t), this.useBrowserDetector ? BarcodeDetector.getSupportedFormats().then(function(t) {
this.barcodeDetector = new BarcodeDetector({
formats: t
}), this.createStructure();
}.bind(this)) : (this.barcodeDetector = new ZXing.BrowserMultiFormatReader(), this.createStructure())) : setTimeout(function(t) {
this.scan(t);
}.bind(this, t), 10)) : this.scan(t) : null;
}, Client.Plugins.BarcodeScanner.prototype.startDetecting = function() {
this.barcodeDetector.detect(this.video).then(function(t) {
if (0 < t.length && t[0].rawValue) return this.scanCB(t[0].rawValue);
this.startDetecting();
}.bind(this)).catch(function(t) {
this.scanCB(void 0, t);
}.bind(this));
}, Client.Plugins.BarcodeScanner.prototype.createStructure = function() {
this.mainContainer = document.createElement("div"), this.mainContainer.id = "getPicture-overlay";
var e = document.createElement("div"), i = (e.id = "getPicture-container", document.createElement("div")), n = (i.id = "getPicture-buttons-cell", 
this.video = document.createElement("video"), this.video.id = "device-camera-video", 
this.useBrowserDetector && (this.video.onplay = function() {
this.startDetecting();
}.bind(this)), this.shadowDiv = document.createElement("div"), document.createElement("div")), o = (n.className = "barcode-scanning-line", 
document.createElement("span"));
o.id = "getPicture-cancel-button", o.className = "barcode-cancel-button", o.innerText = "Cancel", 
o.onclick = function() {
this.scanCB();
}.bind(this), this.video.onloadedmetadata = function() {
this.shadowDiv.appendChild(n), i.appendChild(o), e.appendChild(this.video), e.appendChild(this.shadowDiv), 
e.appendChild(i), this.mainContainer.appendChild(e), document.body.appendChild(this.mainContainer);
var t = .5 * this.video.clientWidth;
this.shadowDiv.style.width = t + "px", this.shadowDiv.style.height = t + "px", this.shadowDiv.style.top = "calc(50% - " + t / 2 + "px - 28px)", 
this.shadowDiv.className = "barcode-shadow", n.style.width = t + "px", this.useBrowserDetector && this.video.play();
}.bind(this);
let s = function(t) {
var e = t.getVideoTracks()[0].getSettings().deviceId;
this.useBrowserDetector ? this.video.srcObject = t : this.barcodeDetector.decodeFromVideoDevice(e, this.video, function(t, e) {
t ? this.scanCB(t.text) : !e || e instanceof ZXing.NotFoundException || this.scanCB(void 0, e);
}.bind(this));
}.bind(this);
navigator.mediaDevices.getUserMedia({
video: {
facingMode: {
exact: "environment"
}
}
}).then(function(t) {
s(t);
}).catch(function() {
navigator.mediaDevices.getUserMedia({
video: {
facingMode: "user"
}
}).then(function(t) {
s(t);
}).catch(function(t) {
this.scanCB(void 0, t);
}.bind(this));
}.bind(this));
}, Client.Plugins = Client.Plugins || {}, Client.Plugins.Beacon = function(t) {
this.shellEmulator = t;
}, Client.Plugins.Beacon.prototype.init = function(t) {}, Client.Plugins.Beacon.prototype.getAuthorizationStatus = function(t) {
t.setResult("");
}, Client.Plugins.Beacon.prototype.requestWhenInUseAuthorization = function(t) {}, 
Client.Plugins.Beacon.prototype.requestAlwaysAuthorization = function(t) {}, Client.Plugins.Beacon.prototype.isAdvertisingAvailable = function(t) {
t.setResult(!0);
}, Client.Plugins.Beacon.prototype.isAdvertising = function(t) {
t.setResult(!0);
}, Client.Plugins.Beacon.prototype.startAdvertising = function(t) {}, Client.Plugins.Beacon.prototype.stopAdvertising = function(t) {}, 
Client.Plugins.Beacon.prototype.startMonitoringForRegion = function(t) {}, Client.Plugins.Beacon.prototype.stopMonitoringForRegion = function(t) {}, 
Client.Plugins.Beacon.prototype.requestStateForRegion = function(t) {
t.result = {}, this.shellEmulator.sendEvent(t, "RegionState");
}, Client.Plugins.Beacon.prototype.getMonitoredRegions = function(t) {
t.setResult([]);
}, Client.Plugins.Beacon.prototype.startRangingBeaconsInRegion = function(t) {}, 
Client.Plugins.Beacon.prototype.stopRangingBeaconsInRegion = function(t) {}, Client.Plugins.Beacon.prototype.isRangingAvailable = function(t) {
t.setResult(!0);
}, Client.Plugins.Beacon.prototype.getRangedRegions = function(t) {
t.setResult([]);
}, Client.Plugins.Beacon.prototype.isBluetoothEnabled = function(t) {
t.setResult(!0);
}, Client.Plugins.Beacon.prototype.enableBluetooth = function(t) {}, Client.Plugins.Beacon.prototype.disableBluetooth = function(t) {}, 
Client.Plugins = Client.Plugins || {}, Client.Plugins.Ble = function(t) {
this.shellEmulator = t;
}, Client.Plugins.Ble.prototype.initialize = function(t) {
t.setResult({});
}, Client.Plugins.Ble.prototype.enable = function(t) {}, Client.Plugins.Ble.prototype.disable = function(t) {}, 
Client.Plugins.Ble.prototype.getAdapterInfo = function(t) {
t.setResult({});
}, Client.Plugins.Ble.prototype.isInitialized = function(t) {
t.setResult(!0);
}, Client.Plugins.Ble.prototype.isEnabled = function(t) {
t.setResult(!0);
}, Client.Plugins.Ble.prototype.hasPermission = function(t) {
t.setResult(!0);
}, Client.Plugins.Ble.prototype.requestPermission = function(t) {
t.setResult(!0);
}, Client.Plugins.Ble.prototype.isLocationEnabled = function(t) {
t.setResult(!0);
}, Client.Plugins.Ble.prototype.requestLocation = function(t) {
t.setResult({});
}, Client.Plugins.Ble.prototype.startScan = function(t) {
t.setResult();
}, Client.Plugins.Ble.prototype.stopScan = function(t) {
t.setResult();
}, Client.Plugins.Ble.prototype.retrieveConnected = function(t) {
t.setResult({});
}, Client.Plugins.Ble.prototype.isScanning = function(t) {
t.setResult({});
}, Client.Plugins.Ble.prototype.connect = function(t) {
t.setResult({});
}, Client.Plugins.Ble.prototype.reconnect = function(t) {
t.setResult({});
}, Client.Plugins.Ble.prototype.disconnect = function(t) {
t.setResult({});
}, Client.Plugins.Ble.prototype.close = function(t) {
t.setResult({});
}, Client.Plugins.Ble.prototype.rssi = function(t) {
t.setResult({});
}, Client.Plugins.Ble.prototype.mtu = function(t) {
t.setResult({});
}, Client.Plugins.Ble.prototype.requestConnectionPriority = function(t) {
t.setResult({});
}, Client.Plugins.Ble.prototype.wasConnected = function(t) {
t.setResult(!0);
}, Client.Plugins.Ble.prototype.isConnected = function(t) {
t.setResult(!0);
}, Client.Plugins.Ble.prototype.bond = function(t) {
t.setResult();
}, Client.Plugins.Ble.prototype.unbond = function(t) {
t.setResult();
}, Client.Plugins.Ble.prototype.isBonded = function(t) {
t.setResult(!0);
}, Client.Plugins.Ble.prototype.discover = function(t) {
t.setResult({});
}, Client.Plugins.Ble.prototype.services = function(t) {
t.setResult({});
}, Client.Plugins.Ble.prototype.characteristics = function(t) {
t.setResult({});
}, Client.Plugins.Ble.prototype.descriptors = function(t) {
t.setResult({});
}, Client.Plugins.Ble.prototype.isDiscovered = function(t) {
t.setResult({});
}, Client.Plugins.Ble.prototype.read = function(t) {
t.setResult({});
}, Client.Plugins.Ble.prototype.subscribe = function(t) {
t.setResult({});
}, Client.Plugins.Ble.prototype.unsubscribe = function(t) {
t.setResult({});
}, Client.Plugins.Ble.prototype.write = function(t) {
t.setResult({});
}, Client.Plugins.Ble.prototype.readDescriptor = function(t) {
t.setResult({});
}, Client.Plugins.Ble.prototype.writeDescriptor = function(t) {
t.setResult({});
}, Client.Plugins = Client.Plugins || {}, Client.Plugins.Calendar = function(t) {
this.shellEmulator = t;
}, Client.Plugins.Calendar.prototype.hasPermission = function(t) {
t.setResult(!0);
}, Client.Plugins.Calendar.prototype.requestPermission = function(t) {
t.setResult(!0);
}, Client.Plugins.Calendar.prototype.listCalendars = function(t) {
t.setResult([]);
}, Client.Plugins.Calendar.prototype.createCalendar = function(t) {
t.setResult("");
}, Client.Plugins.Calendar.prototype.deleteCalendar = function(t) {
t.setResult("");
}, Client.Plugins.Calendar.prototype.openCalendar = function(t) {
t.setResult("");
}, Client.Plugins.Calendar.prototype.listEventsInRange = function(t) {
t.setResult([]);
}, Client.Plugins.Calendar.prototype.findAllEventsInNamedCalendar = function(t) {
t.setResult([]);
}, Client.Plugins.Calendar.prototype.createEvent = function(t) {
t.setResult("");
}, Client.Plugins.Calendar.prototype.findEvent = function(t) {
t.setResult([]);
}, Client.Plugins.Calendar.prototype.deleteEvent = function(t) {
t.setResult("");
}, Client.Plugins.Calendar.prototype.modifyEvent = function(t) {
t.setResult("");
}, Client.Plugins = Client.Plugins || {}, Client.Plugins.Camera = function(t) {
this.shellEmulator = t;
}, Client.Plugins.Camera.sourceType = {
camera: "camera",
photolibrary: "photolibrary",
savedphotoalbum: "savedphotoalbum"
}, Client.Plugins.Camera.prototype.getPicture = function(e) {
var t;
this.params = e.params.options || {}, this.video = document.createElement("video"), 
this.video.id = "device-camera-video", delete this.height, delete this.width, this.sourceType = this.params.sourceType || Client.Plugins.Camera.sourceType.camera, 
this.params.sourceType === Client.Plugins.Camera.sourceType.photolibrary || this.params.sourceType === Client.Plugins.Camera.sourceType.savedphotoalbum ? new Client.Plugins.Camera.picturePopup(this, e) : (this.params.targetWidth ? this.width = this.params.targetWidth : this.params.targetHeight ? this.height = this.params.targetHeight : this.width = 640, 
this.quality = this.params.quality ? this.params.quality / 100 : 1, t = {
video: !0,
audio: !1
}, this.params.cameraDirection && (t.video = {
facingMode: "front" === this.params.cameraDirection ? "user" : "environment"
}), navigator.mediaDevices.getUserMedia(t).then(t => {
this.video.srcObject = t, this.video.play();
}).catch(t => {}), this.video.addEventListener("canplay", t => {
new Client.Plugins.Camera.picturePopup(this, e);
}));
}, Client.Plugins.Camera.prototype.takeSnapshot = function() {
var t = this.canvas.toDataURL("image/jpeg", this.quality || 1), e = Client.Utils.base64FileDecode(t);
return this.video && this.video.srcObject.getVideoTracks().forEach(t => {
t.stop(), this.video.srcObject.removeTrack(t);
}), [ e, t ];
}, Client.Plugins.Camera.prototype.uploadSnapshot = function(o, t, s, a) {
if (Client.isOffline()) {
let n = function(e, i, n) {
e.close(t => {
if (t) return n(t);
i.result = e, this.shellEmulator.sendEvent(i, "Upload"), n();
});
}.bind(this);
App.sessionMap.S1.fs.directory("uploaded").create(() => {
var t = new Date().toISOString().substr(0, 19).replace(":", "_").replace(":", "_") + ".jpg";
let i = App.sessionMap.S1.fs.file("uploaded/" + t);
i.originalName = o.name, i.create(void 0, (t, e) => {
i.write(o, void 0, void 0, void 0, t => {
this.params.upload ? this.postRequest(o, () => n(i, s, a)) : n(i, s, a);
});
});
});
} else this.postRequest(o, a);
}, Client.Plugins.Camera.prototype.postRequest = function(t, e) {
let i = this.params.upload?.url || "";
var n = this.params.upload?.cmd || "";
if (i) i += "?mode=rest" + (n ? "&cmd=" + n : ""); else {
if (Client.isOffline()) return e();
i = Client.Utils.getRESTQueryString({
msgType: "device-camera",
id: "picId"
});
}
t instanceof Array || (t = [ t ]);
let o = new FormData(), s = (t.forEach(t => o.append("file", t, t.name)), new XMLHttpRequest());
s.open("POST", i, !0), s.onreadystatechange = () => {
s.readyState === XMLHttpRequest.DONE && e();
}, s.send(o);
}, Client.Plugins.Camera.picturePopup = function(t, n) {
var e = t.sourceType === Client.Plugins.Camera.sourceType.camera;
if (this.cameraObj = t, e && (this.quality = t.quality, this.cameraObj.canvas = document.createElement("canvas"), 
this.context = this.cameraObj.canvas.getContext("2d"), this.height = t.height, this.width = t.width, 
this.video = t.video, this.pictureTaken = !1), this.overlay = document.createElement("div"), 
this.overlay.id = "getPicture-overlay", this.overlay.onclick = t => {
t.target === this.overlay && this.closePopup();
}, this.container = document.createElement("div"), this.container.id = "getPicture-container", 
this.vidCell = document.createElement("div"), this.vidCell.id = "video-container", 
e) {
var e = document.createElement("div"), i = (e.id = "getPicture-buttons-cell", document.createElement("span")), o = (i.id = "getPicture-confirm-button", 
i.textContent = t.params.snapBtnLabel || "Snap", i.onclick = () => this.takePicture(n), 
document.createElement("span"));
o.id = "getPicture-cancel-button", o.textContent = t.params.cancelBtnLabel || "Cancel", 
o.onclick = () => this.closePopup(), this.vidCell.style.position = "relative", this.flash = document.createElement("div"), 
this.flash.id = "getPicture-flash", this.vidCell.appendChild(this.flash), this.vidCell.appendChild(t.video), 
e.appendChild(o), e.appendChild(i), this.container.appendChild(this.vidCell), this.container.appendChild(e);
} else {
this.container.style.padding = "5%";
let e = document.createElement("input"), i = (e.setAttribute("type", "file"), e.style.opacity = "0", 
e.style.height = "0", e.style.width = "0", e.onchange = () => {
var t;
0 !== e.files.length && (t = e.files[0], this.cameraObj.uploadSnapshot(t, null, n, () => this.closePopup()));
}, document.createElement("div"));
i.id = "getPicture-dropzone";
t = document.createElement("h6"), o = 0 <= (navigator.language || navigator.userLanguage).indexOf("it");
t.innerText = o ? "Trascina un'immagine o clicca per selezionare" : "Drop image or click on the box below to select it", 
this.container.appendChild(t), i.onclick = () => e.click(), [ "dragenter", "dragover", "dragleave", "drop" ].forEach(t => {
i.addEventListener(t, t => {
t.preventDefault(), t.stopPropagation();
});
}), [ "dragenter", "dragover" ].forEach(t => {
i.addEventListener(t, () => i.style.backgroundColor = "aliceblue");
}), [ "dragleave", "drop" ].forEach(t => {
i.addEventListener(t, () => i.style.backgroundColor = "");
}), i.addEventListener("drop", t => {
e.files = t.dataTransfer.files, e.onchange();
}), i.appendChild(e), this.container.appendChild(i);
}
i = document.createElement("span");
i.id = "fromLibrary-cancel-button", i.textContent = "Cancel", i.onclick = () => this.closePopup(), 
this.container.appendChild(i), this.overlay.appendChild(this.container), document.body.appendChild(this.overlay);
}, Client.Plugins.Camera.picturePopup.prototype.takePicture = function(i) {
if (!this.pictureTaken && (this.flash.style.opacity = 1, setTimeout(() => {
this.vidCell.style.opacity = 0 === this.vidCell.style.opacity ? 1 : 0;
}, 50), this.pictureTaken = !0, this.height ? this.width = this.video.videoWidth / (this.video.videoHeight / this.height) : this.height = this.video.videoHeight / (this.video.videoWidth / this.width), 
this.width) && this.height) {
this.cameraObj.canvas.width = this.width, this.cameraObj.canvas.height = this.height, 
this.context.drawImage(this.video, 0, 0, this.width, this.height), this.flash.style.display = "block";
let t = this.cameraObj.takeSnapshot(), e = t[0];
setTimeout(() => this.flash.style.display = "none", 200), setTimeout(() => {
this.closePopup(), this.cameraObj.uploadSnapshot(e, t, i, t => {
t && i.setError(t);
});
}, 400);
}
}, Client.Plugins.Camera.picturePopup.prototype.closePopup = function() {
this.overlay.remove(), delete this.overlay, delete this.container, this.video && this.video.srcObject.getVideoTracks().forEach(t => {
t.stop(), this.video.srcObject.removeTrack(t);
});
}, Client.Plugins.Camera.prototype.saveImageToGallery = function(t) {
t.setResult(!0);
}, Client.Plugins = Client.Plugins || {}, Client.Plugins.Compass = function(t) {
this.shellEmulator = t;
}, Client.Plugins.Compass.prototype.getCurrentHeading = function(e) {
var t;
this.shellEmulator.isNotSlave && (t = function(t) {
this.clearWatch(), e.setResult({
magneticHeading: t.alpha,
trueHeading: t.alpha,
headingAccuracy: 0,
timestamp: new Date()
});
}.bind(this), "ondeviceorientation" in window && "Chrome" !== Client.mainFrame.device.browserName ? window.ondeviceorientation = t : "ondeviceorientationabsolute" in window && (window.ondeviceorientationabsolute = t));
}, Client.Plugins.Compass.prototype.watchHeading = function(e) {
if (!this.shellEmulator.isNotSlave) return null;
function t(t) {
e.result = {
magneticHeading: t.alpha,
trueHeading: t.alpha,
headingAccuracy: 0,
timestamp: new Date()
};
}
"ondeviceorientation" in window && "Chrome" !== Client.mainFrame.device.browserName ? window.ondeviceorientation = t : "ondeviceorientationabsolute" in window && (window.ondeviceorientationabsolute = t), 
e.result = {
magneticHeading: 0,
trueHeading: 0,
headingAccuracy: 0,
timestamp: new Date()
}, this.watch = window.setInterval(function() {
this.shellEmulator.sendEvent(e, "Heading");
}.bind(this), e.params.frequency);
}, Client.Plugins.Compass.prototype.clearWatch = function() {
window.ondeviceorientation = void 0, window.ondeviceorientationabsolute = void 0, 
this.watch && window.clearInterval(this.watch);
}, Client.Plugins = Client.Plugins || {}, Client.Plugins.Contacts = function(t) {
this.shellEmulator = t;
}, Client.Plugins.Contacts.prototype.find = function(t) {
t.setResult([]);
}, Client.Plugins.Contacts.prototype.create = function(t) {
t.setResult();
}, Client.Plugins.Contacts.prototype.read = function(t) {
t.setResult(null);
}, Client.Plugins.Contacts.prototype.update = function(t) {
t.setResult(null);
}, Client.Plugins.Contacts.prototype.delete = function(t) {
t.setResult(null);
}, Client.Plugins = Client.Plugins || {}, Client.Plugins.Facebook = function(t) {
this.shellEmulator = t, this.timeOut = 3e4;
}, Client.Plugins.Facebook.prototype.checkInitialization = function() {
if (!window.FB) return "The plugin was not correctly initialized";
}, Client.Plugins.Facebook.prototype.init = function(t) {
var e, i;
this.timeOut = t.params.timeOut || this.timeOut, document.getElementById("facebook-jssdk") ? t.setResult() : (e = document.getElementsByTagName("script")[0], 
(i = document.createElement("script")).id = "facebook-jssdk", i.src = "https://connect.facebook.net/en_US/sdk.js", 
e.parentNode.insertBefore(i, e), window.fbAsyncInit = function() {
FB.init({
appId: t.params.appId,
cookie: !0,
status: !0,
xfbml: !0,
version: "v19.0"
}), t.setResult();
}.bind(this));
}, Client.Plugins.Facebook.prototype.login = function(e) {
var t, i, n = this.checkInitialization();
n ? e.setError(n) : (n = {}, e.params.permissions && 0 < e.params.permissions.length && (-1 < (t = e.params.permissions.indexOf("rerequest")) && (e.params.permissions.splice(t, 1), 
n.auth_type = "rerequest"), n.scope = e.params.permissions.join(",")), i = setTimeout(function() {
e.setError("Timeout");
}, this.timeOut), FB.login(function(t) {
clearTimeout(i), e.setResult(t);
}, n));
}, Client.Plugins.Facebook.prototype.logout = function(e) {
this.checkInitialization() || FB.logout(function(t) {
e.setResult(t);
});
}, Client.Plugins.Facebook.prototype.getLoginStatus = function(e) {
var i, t = this.checkInitialization();
t ? e.setError(t) : (i = setTimeout(function() {
e.setError("Timeout");
}, this.timeOut), FB.getLoginStatus(function(t) {
clearTimeout(i), e.setResult(t);
}, !0));
}, Client.Plugins.Facebook.prototype.api = function(e) {
var i, t = this.checkInitialization();
t ? e.setError(t) : (i = setTimeout(function() {
e.setError("Timeout");
}, this.timeOut), FB.api(e.params.path, function(t) {
clearTimeout(i), t.error ? e.setError(t.error) : e.setResult(t);
}));
}, Client.Plugins.Facebook.prototype.showDialog = function(e) {
e.params.options = e.params.options || {}, e.params.options.display = e.params.options.display || "popup";
var t = this.checkInitialization(), i = (t && e.setError(t), setTimeout(function() {
e.setError("Timeout");
}, this.timeOut));
FB.ui(e.params.options, function(t) {
clearTimeout(i), t.error_message ? e.setError(t.error_message) : e.setResult(t);
});
}, Client.Plugins = Client.Plugins || {}, Client.Plugins.Geolocation = function(t) {
this.shellEmulator = t;
}, Client.Plugins.Geolocation.prototype.getCurrentPosition = function(e) {
this.shellEmulator.isNotSlave && navigator.geolocation.getCurrentPosition(function(t) {
t = {
accuracy: t.coords.accuracy,
altitude: t.coords.altitude,
altitudeAccuracy: t.coords.altitudeAccuracy,
heading: t.coords.heading,
latitude: t.coords.latitude,
longitude: t.coords.longitude,
speed: t.coords.speed
};
e.setResult(t);
}.bind(this), function(t) {
e.setError(this.getErrorMsg(t));
}.bind(this), e.params.options);
}, Client.Plugins.Geolocation.prototype.watchPosition = function(e) {
if (!this.shellEmulator.isNotSlave) return null;
this.watch = navigator.geolocation.watchPosition(function(t) {
t = {
accuracy: t.coords.accuracy,
altitude: t.coords.altitude,
altitudeAccuracy: t.coords.altitudeAccuracy,
heading: t.coords.heading,
latitude: t.coords.latitude,
longitude: t.coords.longitude,
speed: t.coords.speed
};
e.result = t, this.shellEmulator.sendEvent(e, "Position");
}.bind(this), function(t) {
e.result = {
error: this.getErrorMsg(t)
}, this.shellEmulator.sendEvent(e, "Position");
}.bind(this), e.params.options);
}, Client.Plugins.Geolocation.prototype.clearWatch = function() {
navigator.geolocation.clearWatch(this.watch);
}, Client.Plugins.Geolocation.prototype.getErrorMsg = function(t) {
var e = "";
switch (t.code) {
case t.PERMISSION_DENIED:
e = "User denied the request for Geolocation.";
break;

case t.POSITION_UNAVAILABLE:
e = "Location information is unavailable.";
break;

case t.TIMEOUT:
e = "The request to get user location timed out.";
break;

case t.UNKNOWN_ERROR:
e = "An unknown error occurred.";
}
return e;
}, Client.Plugins = Client.Plugins || {}, Client.Plugins.Haptic = function(t) {
this.shellEmulator = t;
}, Client.Plugins.Haptic.prototype.feedback = function(t) {}, Client.Plugins = Client.Plugins || {}, 
Client.Plugins.Keyboard = function(t) {
this.shellEmulator = t;
}, Client.Plugins.Keyboard.prototype.hide = function(t) {
let e = document.createElement("textarea");
e.style.position = "absolute", e.style.padding = 0, e.style.background = "transparent", 
e.style.outline = "none", e.style.left = "-100%", e.onfocus = function() {
setTimeout(function() {
e.blur(), document.body.removeChild(e);
}, 100);
}, document.body.appendChild(e), e.focus();
}, Client.Plugins.Keyboard.prototype.hideViewAccessoryBar = function(t) {
var e;
document.activeElement && ((e = document.activeElement).setAttribute("autocomplete", "off"), 
e.setAttribute("autocorrect", "off"), e.setAttribute("autocapitalize", "off"), e.setAttribute("spellcheck", "false"));
}, Client.Plugins.Keyboard.prototype.copy = function(t) {
var e, i;
navigator.clipboard && navigator.clipboard.writeText ? navigator.clipboard.writeText(t.params.text).then(function() {}).catch(function(t) {}) : (e = document.activeElement, 
(i = document.createElement("textarea")).setAttribute("readonly", !0), i.style.position = "absolute", 
i.style.padding = 0, i.style.background = "transparent", i.style.outline = "none", 
i.style.left = "-100%", i.value = t.params.text, document.body.appendChild(i), i.onfocus = function() {
i.select(), document.execCommand("copy"), document.body.removeChild(i), e && e.focus();
}, i.focus());
}, Client.Plugins.Keyboard.prototype.paste = function(e) {
navigator.clipboard && navigator.clipboard.readText ? navigator.clipboard.readText().then(function(t) {
e.setResult(t);
}).catch(function(t) {
e.setError(t.message);
}) : e.setError("Cannot paste");
}, Client.Plugins = Client.Plugins || {}, Client.Plugins.Lscookies = function(t) {
this.shellEmulator = t, this.storage = window.localStorage;
}, Client.Plugins.Lscookies.prototype.setCookie = function(t) {
var e = 24 * t.params.exdays * 60 * 60 + new Date().getTime() / 1e3;
this.storage["lscookie-" + t.params.name] = JSON.stringify({
value: t.params.value,
expiry: e
}), t.setResult();
}, Client.Plugins.Lscookies.prototype.getCookies = function(t) {
for (var e, i = "lscookie-", n = {}, o = 0; o < this.storage.length; o++) if ((e = this.storage.key(o)).substr(0, i.length) === i) try {
var s = JSON.parse(this.storage.getItem(e));
s.expiry > new Date().getTime() / 1e3 ? n[e.substr(i.length)] = s.value : this.storage.removeItem(e);
} catch (t) {
this.storage.removeItem(e);
}
t.params.mode ? t.setResult(null, {
client: !0,
id: t.params.mode,
cnt: n
}) : t.setResult(n);
}, Client.Plugins = Client.Plugins || {}, Client.Plugins.Media = function(t) {
this.shellEmulator = t, this.mediaMap = {};
}, Client.Plugins.Media.prototype.play = function(t) {
this.getMedia(t)?.play();
}, Client.Plugins.Media.prototype.pause = function(t) {
this.getMedia(t)?.pause();
}, Client.Plugins.Media.prototype.stop = function(t) {
this.getMedia(t)?.stop();
}, Client.Plugins.Media.prototype.release = function(t) {}, Client.Plugins.Media.prototype.seekTo = function(t) {
this.getMedia(t)?.seekTo(t.params.milliseconds);
}, Client.Plugins.Media.prototype.setVolume = function(t) {
this.getMedia(t)?.setVolume(t.params.volume);
}, Client.Plugins.Media.prototype.startRecord = function(t) {
this.getMedia(t)?.startRecord();
}, Client.Plugins.Media.prototype.stopRecord = function(t) {
this.getMedia(t)?.stopRecord();
}, Client.Plugins.Media.prototype.pauseRecord = function(t) {
this.getMedia(t)?.pauseRecord();
}, Client.Plugins.Media.prototype.resumeRecord = function(t) {
this.getMedia(t)?.resumeRecord();
}, Client.Plugins.Media.prototype.getCurrentPosition = function(t) {
t.setResult(this.getMedia(t)?.getCurrentPosition());
}, Client.Plugins.Media.prototype.getDuration = function(t) {
t.setResult(this.getMedia(t)?.getDuration());
}, Client.Plugins.Media.prototype.getRecordLevels = function(t) {
t.setResult();
}, Client.Plugins.Media.prototype.remove = function(t) {
delete this.mediaMap[t.params.src], t.setResult(!0);
}, Client.Plugins.Media.prototype.size = function(t) {
t.setResult(this.getMedia(t)?.size);
}, Client.Plugins.Media.prototype.exists = function(t) {
t.setResult(!!this.mediaMap[t.params.src]);
}, Client.Plugins.Media.prototype.download = function(t) {
t.setResult();
}, Client.Plugins.Media.prototype.initStorage = function(t) {
t.setResult(!0);
}, Client.Plugins.Media.prototype.url = function(t) {
t.setResult(this.getMedia(t)?.audioObj.src);
}, Client.Plugins.Media.prototype.upload = function(t) {
t.setResult();
}, Client.Plugins.Media.prototype.getMedia = function(e) {
if (!e.params.src) return e.setError("No media specified");
let t = this.mediaMap[e.params.src];
return t || (t = new Client.Plugins.Media.MediaObj(e, t => {
e.result = t, this.shellEmulator.sendEvent(e, "Error");
}, t => {
e.result = {
src: e.params.src,
status: t
}, this.shellEmulator.sendEvent(e, "StatusChange");
}), this.mediaMap[e.params.src] = t), t;
}, Client.Plugins.Media.createAudioNode = function(e) {
var t = new Audio();
return t.onloadstart = () => e.statusCallback(Client.Plugins.Media.status.STARTING), 
t.onplaying = () => e.statusCallback(Client.Plugins.Media.status.RUNNING), t.onpause = () => e.statusCallback(Client.Plugins.Media.status.PAUSED), 
t.onended = () => e.statusCallback(Client.Plugins.Media.status.STOPPED), t.onerror = t => {
t = t.target.error.code === Client.Plugins.Media.errors.NOT_SUPPORTED ? {
code: Client.Plugins.Media.errors.ABORTED
} : t.target?.error || "Media not found";
e.errorCallback(t);
}, t;
}, Client.Plugins.Media.MediaObj = function(t, e, i) {
this.src = t.params.src, this.errorCallback = e, this.statusCallback = i, this.audioObj = Client.Plugins.Media.createAudioNode(this), 
this.size = 0, this._duration = 0, this._position = 0;
}, Client.Plugins.Media.status = {
STARTING: 1,
RUNNING: 2,
PAUSED: 3,
STOPPED: 4
}, Client.Plugins.Media.errors = {
ABORTED: 1,
NETWORK: 2,
DECODE: 3,
NOT_SUPPORTED: 4
}, Client.Plugins.Media.MediaObj.prototype.play = function() {
this.audioObj.src || (this.audioObj.src = this.src), this.audioObj.play();
}, Client.Plugins.Media.MediaObj.prototype.pause = function() {
this.audioObj.pause();
}, Client.Plugins.Media.MediaObj.prototype.stop = function() {
this.audioObj.pause(), this.audioObj.currentTime = 0, this.statusCallback(Client.Plugins.Media.status.STOPPED);
}, Client.Plugins.Media.MediaObj.prototype.startRecord = function() {
if (!navigator.mediaDevices) return this.errorCallback("No supported");
navigator.mediaDevices.getUserMedia({
audio: !0
}).then(t => {
this.mediaRecorder = new MediaRecorder(t), this.mediaRecorder.start(), this.mediaRecorder.chunks = [], 
this.mediaRecorder.ondataavailable = t => this.mediaRecorder.chunks.push(t.data);
}).catch(this.errorCallback);
}, Client.Plugins.Media.MediaObj.prototype.stopRecord = function() {
this.mediaRecorder.stop(), this.mediaRecorder.onstop = t => {
var e = "Safari" === Client.mainFrame.device.browserName ? "audio/mp3" : "audio/ogg; codecs=opus";
this.blob = new Blob(this.mediaRecorder.chunks, {
type: e
}), this.size = this.blob.size, this.audioObj.src = URL.createObjectURL(this.blob);
};
}, Client.Plugins.Media.MediaObj.prototype.pauseRecord = function() {
this.mediaRecorder.pause();
}, Client.Plugins.Media.MediaObj.prototype.resumeRecord = function() {
this.mediaRecorder.resume();
}, Client.Plugins.Media.MediaObj.prototype.seekTo = function(t) {
this.audioObj.currentTime = t / 1e3;
}, Client.Plugins.Media.MediaObj.prototype.getDuration = function() {
return this.audioObj.src || (this.audioObj.src = this.src), this.audioObj.duration;
}, Client.Plugins.Media.MediaObj.prototype.getCurrentPosition = function() {
return this.audioObj.src || (this.audioObj.src = this.src), this.audioObj.currentTime;
}, Client.Plugins.Media.MediaObj.prototype.setVolume = function(t) {
this.audioObj.volume = t;
}, Client.Plugins = Client.Plugins || {}, Client.Plugins.Nfc = function(t) {
this.ndefReaderAvailable = "undefined" != typeof NDEFReader, this.shellEmulator = t;
}, Client.Plugins.Nfc.prototype.listen = function(i) {
var n;
this.ndefReaderAvailable && ((n = this).ndef = new NDEFReader(), this.ndef.scan().then(function() {
n.ndef.onreading = function(t) {
if (t.ndefMessage = t.message, t.id = t.serialNumber.replaceAll(":", ""), t.message.records && 0 < t.message.records.length) {
t.textMessage = [];
for (var e = 0; e < t.message.records.length; e++) t.textMessage.push(String.fromCharCode.apply(null, new Uint8Array(t.message.records[e].data.buffer)));
}
i.result = t, n.shellEmulator.sendEvent(i, "Tag");
};
}).catch(function(t) {
i.result = {
error: t.message
}, n.shellEmulator.sendEvent(i, "Tag");
}));
}, Client.Plugins.Nfc.prototype.unListen = function(t) {
this.ndef && (this.ndef.onreading = void 0);
}, Client.Plugins.Nfc.prototype.isAvailable = function(t) {
t.setResult(this.ndefReaderAvailable);
}, Client.Plugins = Client.Plugins || {}, Client.Plugins.Oidc = function(t) {
this.shellEmulator = t;
}, Client.Plugins.Oidc.prototype.init = function(t) {
t.setResult();
}, Client.Plugins.Oidc.prototype.authorize = function(t) {
this.createBackdrop();
var e = t.params.options, i = (i = (i = (i = "" + e.authorizationEndpoint) + ("?client_id=" + e.clientId) + ("&redirect_uri=" + e.redirectUrl)) + ("&response_type=" + e.responseType) + ("&scope=" + e.scope)) + ("&state=" + e.state) + ("&prompt=" + e.prompt);
let n = e.windowParams;
if (n || (e = (window.innerWidth - 600) / 2, n = `width=600,height=500,left=${e},top=${(window.innerHeight - 500) / 2},scrollbars=no,resizable=no,status=no,location=no,toolbar=no,menubar=no`), 
this.popup = window.open(i, "Login", n), !this.popup || this.popup.closed || void 0 === this.popup.closed) return t.setError("Popup blocked. Allow popups for this site to continue the authentication process");
this.isPopupClosed(), this.pendingAuthorizeReq = t;
}, Client.Plugins.Oidc.prototype.authorizeCallback = function(t) {
this.pendingAuthorizeReq.setResult(t.params);
}, Client.Plugins.Oidc.prototype.createBackdrop = function() {
this.backdrop = document.getElementById("oidc-backdrop"), this.backdrop || (this.backdrop = document.createElement("div"), 
this.backdrop.id = "oidc-backdrop", this.backdrop.className = "oidc-backdrop", this.backdrop.onclick = () => this.popup.focus(), 
document.body.appendChild(this.backdrop));
}, Client.Plugins.Oidc.prototype.isPopupClosed = function() {
this.isPopupClosedTimeout = setTimeout(() => {
clearTimeout(this.isPopupClosedTimeout), this.popup.closed ? this.backdrop.remove() : this.isPopupClosed();
}, 50);
}, Client.Plugins = Client.Plugins || {}, Client.Plugins.Pdf = function(t) {
this.shellEmulator = t;
}, Client.Plugins.Pdf.prototype.fromData = function(t) {
t.setResult();
}, Client.Plugins.Pdf.prototype.fromURL = function(t) {
t.setResult();
}, Client.Plugins = Client.Plugins || {}, Client.Plugins.Preferences = function(t) {
this.shellEmulator = t, this.storage = window.localStorage;
}, Client.Plugins.Preferences.prototype.show = function(t) {}, Client.Plugins.Preferences.prototype.fetch = function(t) {
t.setResult(this.storage.getItem(t.params.key));
}, Client.Plugins.Preferences.prototype.store = function(t) {
this.storage.setItem(t.params.key, t.params.value);
}, Client.Plugins.Preferences.prototype.isIgnoringBatteryOptimizations = function(t) {
t.setResult();
}, Client.Plugins.Preferences.prototype.isIgnoringDataSaver = function(t) {
t.setResult();
}, Client.Plugins.Preferences.prototype.ignoreBatteryOptimizations = function(t) {
t.setResult();
}, Client.Plugins.Preferences.prototype.displayOptimizationsMenu = function(t) {
t.setResult();
}, Client.Plugins.Preferences.prototype.displayDataSaverMenu = function(t) {
t.setResult();
}, Client.Plugins = Client.Plugins || {}, Client.Plugins.SignInWithApple = function(t) {
this.shellEmulator = t;
}, Client.Plugins.SignInWithApple.prototype.authJSAvailable = function(t) {
var e, i;
document.getElementById("appleid-auth-js") ? t() : (e = document.getElementsByTagName("script")[0], 
(i = document.createElement("script")).id = "appleid-auth-js", i.src = "https://appleid.cdn-apple.com/appleauth/static/jsapi/appleid/1/en_US/appleid.auth.js", 
e.parentNode.insertBefore(i, e), i.readyState ? i.onreadystatechange = function() {
"loaded" !== i.readyState && "complete" !== i.readyState || (i.onreadystatechange = null, 
t(!AppleID));
} : (i.onload = function() {
t();
}.bind(this), i.onerror = function() {
t(!0);
}.bind(this)));
}, Client.Plugins.SignInWithApple.prototype.isAvailable = function(e) {
this.authJSAvailable(function(t) {
e.setResult(!(t || !AppleID));
});
}, Client.Plugins.SignInWithApple.prototype.request = function(o) {
this.authJSAvailable(function(t) {
!t && AppleID ? (o.params.options = o.params.options || {}, (t = {}).clientId = o.params.options.clientId, 
t.scope = o.params.options.scope, t.redirectURI = o.params.options.redirectURI, 
t.state = o.params.options.state, t.usePopup = !0, AppleID.auth.init(t), AppleID.auth.signIn().then(function(t) {
var e = t.user || {}, t = (e.name = e.name || {}, t.authorization || {}), i = t.id_token.split("."), i = JSON.parse(atob(i[1])), n = {};
n.fullName = {
givenName: e.name.firstName,
familyName: e.name.lastName
}, n.email = e.email, n.user = i.sub, n.identityToken = t.id_token, o.setResult(n);
}).catch(function(t) {
o.setError("object" == typeof t ? t.error : t);
})) : o.setError("Plugin not available");
}.bind(this));
}, Client.Plugins.SignInWithApple.prototype.getCredentialState = function(t) {
t.setError("Plugin not available");
}, Client.Plugins = Client.Plugins || {}, Client.Plugins.Sms = function(t) {
this.shellEmulator = t;
}, Client.Plugins.Sms.prototype.send = function(t) {
t.setResult("OK");
}, Client.Plugins.Sms.prototype.hasPermission = function(t) {
t.setResult(!0);
}, Client.Plugins = Client.Plugins || {}, Client.Plugins.SocialSharing = function(t) {
this.shellEmulator = t;
}, Client.Plugins.SocialSharing.LinksMap = {
facebook: "https://www.facebook.com/sharer/sharer.php?u=",
twitter: "https://twitter.com/intent/tweet?",
linkedin: "http://www.linkedin.com/shareArticle?mini=true&url="
}, Client.Plugins.SocialSharing.prototype.createIcon = function(t, e) {
var i = document.createElementNS("http://www.w3.org/2000/svg", "svg"), t = (i.setAttribute("class", "socialSharing-svg " + t), 
i.style.width = "29px", i.style.height = "29px", document.createElementNS("http://www.w3.org/2000/svg", "path"));
return "facebook" === e ? t.setAttribute("d", "M26.4 0H2.6C1.714 0 0 1.715 0 2.6v23.8c0 .884 1.715 2.6 2.6 2.6h12.393V17.988h-3.996v-3.98h3.997v-3.062c0-3.746 2.835-5.97 6.177-5.97 1.6 0 2.444.173 2.845.226v3.792H21.18c-1.817 0-2.156.9-2.156 2.168v2.847h5.045l-.66 3.978h-4.386V29H26.4c.884 0 2.6-1.716 2.6-2.6V2.6c0-.885-1.716-2.6-2.6-2.6z") : "twitter" === e ? t.setAttribute("d", "M24.253 8.756C24.69 17.08 18.297 24.182 9.97 24.62a15.093 15.093 0 0 1-8.86-2.32c2.702.18 5.375-.648 7.507-2.32a5.417 5.417 0 0 1-4.49-3.64c.802.13 1.62.077 2.4-.154a5.416 5.416 0 0 1-4.412-5.11 5.43 5.43 0 0 0 2.168.387A5.416 5.416 0 0 1 2.89 4.498a15.09 15.09 0 0 0 10.913 5.573 5.185 5.185 0 0 1 3.434-6.48 5.18 5.18 0 0 1 5.546 1.682 9.076 9.076 0 0 0 3.33-1.317 5.038 5.038 0 0 1-2.4 2.942 9.068 9.068 0 0 0 3.02-.85 5.05 5.05 0 0 1-2.48 2.71z") : "linkedin" === e && t.setAttribute("d", "M25.424 15.887v8.447h-4.896v-7.882c0-1.98-.71-3.33-2.48-3.33-1.354 0-2.158.91-2.514 1.802-.13.315-.162.753-.162 1.194v8.216h-4.9s.067-13.35 0-14.73h4.9v2.087c-.01.017-.023.033-.033.05h.032v-.05c.65-1.002 1.812-2.435 4.414-2.435 3.222 0 5.638 2.106 5.638 6.632zM5.348 2.5c-1.676 0-2.772 1.093-2.772 2.54 0 1.42 1.066 2.538 2.717 2.546h.032c1.71 0 2.77-1.132 2.77-2.546C8.056 3.593 7.02 2.5 5.344 2.5h.005zm-2.48 21.834h4.896V9.604H2.867v14.73z"), 
i.appendChild(t), i;
}, Client.Plugins.SocialSharing.prototype.addSocialItem = function(i) {
var n = i.options.url ? encodeURI(i.options.url) : null, o = (!n && i.options.files && i.options.files.length && (n = encodeURI(i.options.files[0])), 
encodeURI(i.options.message)), t = document.createElement("li"), e = (t.className = "socialSharing-item", 
t.onclick = function(t) {
var e = Client.Plugins.SocialSharing.LinksMap[i.name];
switch (i.name) {
case "twitter":
n ? (e += "url=" + n, i.options.message && (e += "&text=" + o)) : i.options.message && (e += "status=" + o);
break;

case "facebook":
e += n;
break;

case "linkedin":
e += n, i.options.message && (e += "&summary=" + o);
}
window.open(e, "pop", "width=400,height=400"), this.closePopup(i.req, {
completed: !0,
app: i.name
});
}.bind(this), document.createElement("span")), s = (e.style = " text-align: center; margin-top:10px; font-weight: bolder; text-transform: capitalize", 
e.className = "rrssb-text", e.innerText = i.name, this.createIcon("socialSharing-svg-" + i.name, i.name));
return t.appendChild(s), t.appendChild(e), t;
}, Client.Plugins.SocialSharing.prototype.closePopup = function(t, e) {
document.body.removeChild(this.overlay), this.overlay = null, this.container = null, 
t.setResult(e);
}, Client.Plugins.SocialSharing.prototype.shareWithOptions = function(n) {
if ("android" === Client.mainFrame.device.operatingSystem) try {
var o = [], s = function() {
navigator.share({
files: o,
title: n.params.options.chooserTitle || "",
text: n.params.options.message || "",
url: n.params.options.url || ""
});
};
if (!n.params.options.files || 0 === n.params.options.files.length) return s();
for (var t = 0; t < n.params.options.files.length; t++) !function(i) {
fetch(i).then(function(t) {
t.blob().then(function(t) {
var e = i.match(/\/[\w-\s]+\.[A-Za-z\d]+$/)[0], e = new File([ t ], e, {
type: t.type
});
o.push(e), o.length === n.params.options.files.length && s();
});
});
}(n.params.options.files[t]);
} catch (t) {} else {
this.overlay = document.createElement("div"), this.overlay.id = "socialSharing-overlay", 
this.overlay.onclick = function(t) {
this.overlay && t.target.id === this.overlay.id && this.closePopup(n, {
completed: !1,
app: ""
});
}.bind(this), this.container = document.createElement("div"), this.container.id = "socialSharing-main-container";
var e = document.createElement("h4"), e = (e.innerText = n.params.options.chooserTitle || "Click an icon to share on", 
this.container.appendChild(e), document.createElement("div")), e = (e.id = "socialSharing-items-container", 
e.appendChild(this.addSocialItem({
name: "facebook",
options: n.params.options,
req: n
})), e.appendChild(this.addSocialItem({
name: "twitter",
options: n.params.options,
req: n
})), e.appendChild(this.addSocialItem({
name: "linkedin",
param: "summary",
options: n.params.options,
req: n
})), this.container.appendChild(e), document.createElement("div")), i = (e.id = "socialSharing-btn-container", 
document.createElement("span"));
i.id = "socialSharing-btn-cancel", i.innerText = "Cancel", i.onclick = function(t) {
this.closePopup(n, {
completed: !1,
app: ""
});
}.bind(this), e.appendChild(i), this.container.appendChild(e), this.overlay.appendChild(this.container), 
document.body.appendChild(this.overlay);
}
}, Client.Plugins.SocialSharing.prototype.checkAvailability = function(t) {
t.setResult(!0);
}, Client.Plugins = Client.Plugins || {}, Client.Plugins.Speech = function(t) {
this.shellEmulator = t, this.speechSynthesis = window.speechSynthesis, window.addEventListener("beforeunload", function() {
this.speechSynthesis.cancel();
}.bind(this)), window.SpeechRecognition ? this.listenObj = new window.SpeechRecognition() : window.webkitSpeechRecognition && (this.listenObj = new window.webkitSpeechRecognition()), 
this.timer;
}, Client.Plugins.Speech.prototype.isRecognitionAvailable = function(t) {
t.setResult(!!this.listenObj);
}, Client.Plugins.Speech.prototype.hasPermission = function(e) {
navigator.permissions ? navigator.permissions.query({
name: "microphone"
}).then(function(t) {
"granted" === t.state || "prompt" === t.state ? e.setResult(!0) : e.setResult(!1);
}).catch(function(t) {
this.requestPermission(e);
}.bind(this)) : this.requestPermission(e);
}, Client.Plugins.Speech.prototype.requestPermission = function(t) {
navigator.mediaDevices.getUserMedia({
audio: !0
}).then(function() {
t.setResult(!0);
}).catch(function() {
t.setResult(!1);
});
}, Client.Plugins.Speech.prototype.speak = function(e) {
e.params.msg = e.params.msg || {};
try {
this.speechSynthesis.cancel();
var t = new SpeechSynthesisUtterance();
if (t.text = e.params.msg.text || "", t.lang = e.params.msg.locale || "it-IT", e.params.msg.voice) for (var i = this.speechSynthesis.getVoices(), n = 0; n < i.length; n++) if (i[n].name === e.params.msg.voice) {
t.lang = i[n].lang, t.voice = i[n];
break;
}
t.rate = e.params.msg.rate || 1, this.speechSynthesis.speak(t), !function t() {
this.speechSynthesis.speaking ? setTimeout(t, 200) : e.setResult();
}();
} catch (t) {
e.setError(t.message);
}
}, Client.Plugins.Speech.prototype.stopSpeak = function(t) {
this.speechSynthesis.cancel();
}, Client.Plugins.Speech.prototype.startListening = function(i) {
i.params.options = i.params.options || {};
var n = !1, o = (i.params.options.continuos && !i.params.options.timeOut && i.setResult(), 
[]), s = [], a = (this.listenObj.continuous = i.params.options.continuos || !!i.params.options.timeOut, 
this.listenObj.interimResults = i.params.options.interimResults || !!i.params.options.timeOut, 
this.listenObj.lang = i.params.options.language || "it-IT", function() {
this.timer = setTimeout(function() {
this.listenObj.stop();
}.bind(this), i.params.options.timeOut);
}.bind(this));
this.listenObj.start(), this.listenObj.onresult = function(t) {
o = t.results, this.timer && clearTimeout(this.timer);
for (var e = 0; e < t.results.length; e++) (t.results[e].isFinal || i.params.options.interimResults) && s.push({
transcript: t.results[e][0].transcript,
confidence: t.results[e][0].confidence,
isFinal: t.results[e].isFinal
});
i.result = s, s = [], this.shellEmulator.sendEvent(i, "SpeechRecognized"), i.params.options.timeOut && a();
}.bind(this), this.listenObj.onError = function(t) {
i.setError(t.error);
}.bind(this), this.listenObj.onstart = function() {
n = !0, i.params.options.timeOut && a();
}.bind(this), this.listenObj.onspeechend = function() {
this.listenObj.stop();
}.bind(this), this.listenObj.onend = function() {
if (n || i.setError("Permission denied"), clearTimeout(this.timer), !this.listenObj.continuous || this.timer) {
for (var t = [], e = 0; e < o.length; e++) o[e].isFinal && t.push(o[e][0].transcript);
i.setResult(t);
}
}.bind(this);
}, Client.Plugins.Speech.prototype.stopListening = function(t) {
this.listenObj.stop(), t.setResult();
}, Client.Plugins.Speech.prototype.getSupportedLanguages = function(n) {
this.speechSynthesis.onvoiceschanged = function() {
for (var t = [], e = this.getVoices(), i = 0; i < e.length; i++) t.push({
voiceURI: e[i].voiceURI,
name: e[i].name,
lang: e[i].lang,
localService: e[i].localService,
default: e[i].default
});
n.setResult(t);
};
}, Client.Plugins = Client.Plugins || {}, Client.Plugins.Sqlite = function(t) {
this.shellEmulator = t, this.databases = {};
}, Client.Plugins.Sqlite.prototype.openDatabase = function(e) {
var t = (Math.random() + "").substring(2);
try {
var i = openDatabase(e.params.name, "1.0", "", 2097152);
this.databases[t] = {
id: t,
name: e.params.name,
db: i
}, e.setResult(t);
} catch (t) {
e.setError(t);
}
}, Client.Plugins.Sqlite.prototype.deleteDatabase = function(t) {
t.setResult();
}, Client.Plugins.Sqlite.prototype.closeDatabase = function(t) {
t.setResult();
}, Client.Plugins.Sqlite.prototype.query = function(t) {
t.setResult({});
}, Client.Plugins = Client.Plugins || {}, Client.Plugins.StatusBar = function(t) {
this.shellEmulator = t;
}, Client.Plugins.StatusBar.prototype.show = function(t) {}, Client.Plugins.StatusBar.prototype.hide = function(t) {}, 
Client.Plugins.StatusBar.prototype.setBackgroundColor = function(t) {}, Client.Plugins.StatusBar.prototype.overlaysWebView = function(t) {}, 
Client.Plugins = Client.Plugins || {}, Client.Plugins.TouchID = function(t) {
this.shellEmulator = t, this.keys = {};
}, Client.Plugins.TouchID.prototype.isAvailable = function(t) {
t.setResult(!0);
}, Client.Plugins.TouchID.prototype.verify = function(t) {
t.setResult(this.keys[t.params.key]);
}, Client.Plugins.TouchID.prototype.save = function(t) {
this.keys[t.params.key] = t.params.password, t.setResult();
}, Client.Plugins.TouchID.prototype.has = function(t) {
this.keys && this.keys[t.params.key] ? t.setResult(!0) : t.setResult(!1);
}, Client.Plugins.TouchID.prototype.delete = function(t) {
this.keys && this.keys[t.params.key] ? (delete this.keys[t.params.key], t.setResult(!0)) : t.setResult(!1);
}, Client.Plugins = Client.Plugins || {}, Client.Plugins.Vibration = function(t) {
this.shellEmulator = t;
}, Client.Plugins.Vibration.prototype.vibrate = function(t) {
navigator.vibrate && navigator.vibrate(t.params.time);
};
//# sourceMappingURL=shellemulator-plugins.min.js.map