var Client = Client || {}, InDe = InDe || {}, Client = (Client.transCmdMap = {
ue: "updateElement",
rc: "removeChild",
ib: "insertBefore",
ls: "loadStyle",
cv: "closeView",
ov: "openView"
}, Client.transPropMap = {
v: "value",
s: "style",
d: "visible",
n: "name",
cn: "className",
c: "class",
rn: "rownum",
t: "innerText",
h: "innerHTML"
}, Client.transStyleMap = {
b: "background",
bc: "backgroundColor",
c: "color",
fs: "fontStyle"
}, [ Element.prototype, CharacterData.prototype, DocumentType.prototype ].forEach(function(e) {
e.hasOwnProperty("remove") || Object.defineProperty(e, "remove", {
configurable: !0,
enumerable: !0,
writable: !0,
value: function() {
this.parentNode.removeChild(this);
}
});
}), Client.createApp = async function() {
if (this.eleMap = {}, this.mainFrame = new this.MainFrame(), this.id = Math.random().toString().substr(2, 6), 
!this.proxy) {
var t = Client.resourceName || location.pathname.split("/")[1] || "";
let e = Client.Utils.getQueryVariable("sid"), i = (e = (e = e || sessionStorage.getItem("sid")) || Client.Utils.getCookie("sid"), 
Client.Utils.getQueryVariable("cid"));
i = (i = i || sessionStorage.getItem("cid")) || Client.Utils.getCookie("cid"), top === window && (Client.exitUrl = sessionStorage.getItem("exitUrl")), 
Client.exitUrl = Client.exitUrl || decodeURIComponent(Client.Utils.getCookie("exitUrl"));
try {
sessionStorage.setItem("sid", e), sessionStorage.setItem("cid", i), sessionStorage.setItem("exitUrl", Client.exitUrl);
} catch (e) {}
Client.Utils.deleteCookie("sid", t), Client.Utils.deleteCookie("cid", t), Client.Utils.deleteCookie("exitUrl", t);
var t = Client.Utils.getQueryVariable("acid"), n = Client.Utils.getQueryVariable("appid");
if (!e && !location.href.includes("/app/")) {
let t = location.href;
location.pathname.endsWith("/client/index.html") ? t = location.origin + location.pathname.substring(0, location.pathname.length - "/client/index.html".length) + location.search : location.pathname.endsWith("/client/indexLocal.html") && (t = location.origin + location.pathname.substring(0, location.pathname.length - "/client/indexLocal.html".length) + location.search);
try {
await this.fetchSID(t), e = sessionStorage.getItem("sid"), i = sessionStorage.getItem("cid");
} catch (e) {
console.error("Error while fetching SID:", e), t !== location.href && (location = t);
}
}
e && (this.mainFrame.sid = e, this.initSocket(e, i, t, n));
}
this.proxy && this.mainFrame.start();
}, Client.fetchSID = async function(e) {
var t = location.search ? "&" : "?", e = (t += "addsid", await fetch(e + t));
if (!e.ok) throw new Error("Network response was not ok");
t = new URLSearchParams(new URL(e.url).search), e = t.get("sid"), t = t.get("cid");
if (!e || !t) throw new Error("SID is not contained in response url");
sessionStorage.setItem("sid", e), sessionStorage.setItem("cid", t);
}, Client.initSocket = function(i, t, n, s) {
var o = this, l = Client.resourceName || window.location.pathname.split("/")[1] || "";
this.socket = io(Client.resourceOrigin), this.socket.send = function(e, t) {
o.sentMsgs = o.sentMsgs || [], o.sentMsgs.push(t), this.emit("appmsg", {
appid: s,
sid: i,
appurl: window.location.href,
events: t
}, function() {
var e = o.sentMsgs.indexOf(t);
-1 < e && o.sentMsgs.splice(e, 1);
}), o.disconnected && Client.realizeOfflineScreen(3e3);
}, this.socket.on("redirect", function(e) {
sessionStorage.clear(), Client.Utils.deleteCookie("sid"), Client.Utils.deleteCookie("cid"), 
Client.Utils.deleteCookie("exitUrl"), window.location = e;
}), this.socket.on("appmsg", function(e, t) {
this.lastMsg = JSON.parse(JSON.stringify(e)), o.mainFrame.processRequest(e.content), 
t && t();
}.bind(this)), this.socket.on("ping", function() {
this.emit("pong");
}), this.socket.on("disconnect", function() {
if (!Client.terminating) {
if (n || s) return o.mainFrame.terminate();
o.disconnected = !0, Client.realizeOfflineScreen(1 < (o.sentMsgs || []).length ? 3e3 : 15e3), 
Client.disconnectTimeoutID = setTimeout(function() {
window.location.reload();
}, 3e4);
}
}), this.socket.io.on("reconnect", function(e) {
if (Client.disconnectTimeoutID && (clearTimeout(Client.disconnectTimeoutID), delete Client.disconnectTimeoutID), 
delete o.disconnected, Client.removeOfflineScreen(), this.socket.emit("asid", {
sid: i,
acid: n,
cid: t,
appname: l,
appurl: window.location.href,
lastMsg: this.lastMsg
}), this.sentMsgs) for (let e = 0; e < this.sentMsgs.length; e++) {
let t = this.sentMsgs[e];
this.socket.emit("appmsg", {
appid: s,
sid: i,
appurl: window.location.href,
events: t
}, function() {
var e = this.sentMsgs.indexOf(t);
-1 < e && (this.sentMsgs.splice(e, 1), 0 === this.sentMsgs.length) && delete this.sentMsgs;
}.bind(this));
}
}.bind(this)), this.proxy = this.socket, this.socket.emit("asid", {
sid: i,
acid: n,
cid: t,
appname: l,
appurl: window.location.href
});
}, Client.setProxy = function(e) {
this.proxy = e;
}, Client.callback = function() {
this.mainFrame.reqComplete("callback");
}, Client.MainFrame = function() {
this.views = [], this.requireMap = {}, this.cmdCache = [], this.device = new Client.Device(), 
this.head = new Client.HeaderList(), this.attachEvents(), this.addedObjects = [], 
this.appStarted = !1, this.cmdSeq = 0, this.windows = {}, this.lastHeadObject = document.head.lastChild, 
this.hammerEnabled = !0, Client.useAnimationFrame = !0;
try {
Client.isTestAuto = window.top && -1 < window.top.location.pathname.indexOf("client/testautoPreview.html");
} catch (e) {}
}, Client.fireProcessCache = function() {
!Client.mainFrame || Client.rafId || 0 < Client.mainFrame.cmdCache.length && (Client.rafId = requestAnimationFrame(Client.mainFrame.processCache.bind(Client.mainFrame)));
}, Client.MainFrame.prototype.purgeCmdCache = function(e) {
if (this.cmdCache.length && !this.paused) for (var t = 0; t < e.length; t++) {
var i = e[t];
if ("insertBefore" === i.id || "removeChild" === i.id) return;
if ("updateElement" === i.id) for (var n = 0; n < this.cmdCache.length; n++) {
var s = this.cmdCache[n];
if ("insertBefore" === s.id || "removeChild" === s.id) return;
if (s.obj === i.obj && "updateElement" === s.id && !s.cnt.clid) {
for (var o = Object.keys(i.cnt), l = 0; l < o.length; l++) "data" !== o[l] && delete s.cnt[o[l]];
(o = Object.keys(s.cnt)).length || (this.cmdCache.splice(n, 1), n--);
}
}
}
}, Client.MainFrame.prototype.processRequest = function(t) {
this.translate(t);
var e, i = 0 < this.cmdCache.length;
let n = !1;
if (!t.length || (e = t[t.length - 1]).obj || "terminate" !== e.id || (n = !0, this.cmdCache.push(e)), 
!n) {
this.purgeCmdCache(t);
for (let e = 0; e < t.length; e++) t[e].obj?.startsWith("device-") ? this.device.processRequest(t[e]) : this.cmdCache.push(t[e]);
}
i || (Client.useAnimationFrame && !this.isEditing() && Client.mainFrame.appStarted && !document.hidden ? Client.fireProcessCache() : this.processCache());
}, Client.MainFrame.prototype.processCache = function() {
if (delete Client.rafId, !this.paused) {
this.sendChg = !0;
for (var e = new Date(), t = !this.isEditing() && this.appStarted, i = !0; 0 < this.cmdCache.length; ) {
var n = this.cmdCache[0];
Client.logcmd && console.warn(++this.cmdSeq, n.obj, n.id, JSON.parse(JSON.stringify(n.cnt || null)));
try {
this.processCommand(n);
} catch (e) {
if (i) {
i = !1;
if ("object" == typeof (s = e.message || e)) try {
s = JSON.stringify(s);
} catch (e) {}
var s = "FE: " + s, s = {
id: n.id,
error: {
message: s,
stack: e.stack
}
};
Client.mainFrame.sendEvents([ {
id: "onUpdateElementError",
content: s
} ]);
}
Client.mainFrame.isIDF && console.error(e);
}
if (this.paused) break;
if (this.cmdCache.splice(0, 1), !t || "insertBefore" !== n.id && "removeChild" !== n.id || (t = !1), 
(t = Client.eleMap[n.obj] instanceof Client.Widget ? !0 : t) && Client.useAnimationFrame && 10 < new Date() - e) {
Client.fireProcessCache();
break;
}
}
this.sendChg = !1;
}
}, Client.MainFrame.prototype.processCommand = function(e) {
var t;
e.obj ? "app-academy" === e.obj && parent && parent.postMessage ? parent.postMessage({
type: e.id,
txt: e.txt
}, "*") : "preview" === e.obj && parent && parent.postMessage ? parent.postMessage({
type: e.type,
cnt: e.cnt
}, "*") : (t = Client.eleMap[e.obj]) && t[e.id] && (e.cnt && e.cnt.params ? t[e.id].apply(t, e.cnt.params) : e.content ? t[e.id](e.content) : t[e.id](e.cnt)) : this[e.id](e.cnt);
}, Client.MainFrame.prototype.translate = function(e) {
for (var t = 0; t < e.length; t++) {
var i = e[t].id, i = Client.transCmdMap[i];
i && (e[t].id = i), "updateElement" === i && this.translateProperties(e[t].cnt, Client.transPropMap);
}
}, Client.MainFrame.prototype.translateProperties = function(e, t) {
for (var i = Object.keys(e), n = 0; n < i.length; n++) {
var s = i[n], o = t[s];
o && (e[o] = e[s], delete e[s], "style" === o) && this.translateProperties(e[o], Client.transStyleMap);
}
}, Client.MainFrame.prototype.activateView = function(e) {
e = Client.eleMap[e.id];
e && e.activate();
}, Client.MainFrame.prototype.sendEvents = function(i) {
for (let t = 0; t < i.length; t++) {
var n = i[t], s = n.content?.srcEvent;
let e = n.obj;
Client.mainFrame.isIDF && e && e.startsWith("device-") && (e = "device-ui");
var o = Client.eleMap[e];
if (o && o.parentWidget && !(o instanceof Client.Widget)) {
var l = o.parentWidget.onEvent(n);
if (Client.mainFrame.isIDF) for (let e = 0; e < l.length; e++) {
var a = l[e];
s && (s.altKey || s.shiftKey || s.ctrlKey) && (a.content = a.content || {}, a.content.atp = s.altKey ? -1 : 0, 
a.content.shp = s.shiftKey ? -1 : 0, a.content.ctp = s.ctrlKey ? -1 : 0);
}
i.splice.apply(i, [ t, 1 ].concat(l)), i.length && (t += l.length - 1);
}
delete n.content?.srcEvent;
}
i.length && (this.waitingForCookies && i && i.length && "shell" === i[0].source && "getCookiesCB" === i[0].id && i[0].content ? this.startWithCookies(i[0].content.result) : (Client.logcmd && i.forEach(e => console.warn("<--", e.id, e.content)), 
Client.proxy ? Client.proxy.send(this, i) : console.log("no proxy set")));
}, Client.MainFrame.prototype.openView = function(e) {
if (this.loadClientRequirements(e)) try {
var t = new Client.View(e);
this.views.push(t), Client.eleMap[t.id] = t, this.isEditing() && Client.eleMap.editm.editProxy.onOpenView();
} finally {
this.sendAppStart();
}
}, Client.MainFrame.prototype.closeView = function(e) {
e = Client.eleMap[e.id];
e && e.close();
}, Client.MainFrame.prototype.alert = function(e) {
alert(e);
}, Client.MainFrame.prototype.popup = function(e) {
e.cbId && this.sendEvents([ {
id: "popupBoxReturn",
content: {
res: void 0,
cbId: e.cbId
}
} ]);
}, Client.MainFrame.prototype.eval = function(cnt) {
try {
var res = eval(cnt.jscode), e = [ {
id: "popupBoxReturn",
content: {
res: res,
cbId: cnt.cbId
}
} ];
this.sendEvents(e);
} catch (ex) {
var e = [ {
id: "popupBoxReturn",
content: {
err: ex.message || ex,
cbId: cnt.cbId
}
} ];
this.sendEvents(e);
}
}, Client.MainFrame.prototype.loadResources = function(e) {
this.loadRequirements(e.resList) && (e = [ {
id: "popupBoxReturn",
content: {
res: !0,
cbId: e.cbId
}
} ], this.sendEvents(e));
}, Client.MainFrame.prototype.setCookie = function(e) {
var t = new Date(), t = (t.setTime(t.getTime() + 24 * e.options.exdays * 60 * 60 * 1e3), 
"; expires=" + t.toUTCString()), i = "; path=" + (e.options.path || "/"), n = e.options.secure ? "; secure=true" : "", s = e.options.samesite ? "; samesite=" + e.options.samesite : "";
Client.isOffline() || "ios" === this.device.operatingSystem ? this.device.shell.postMessage({
obj: "device-lscookies",
id: "setCookie",
cnt: {
name: e.name,
value: e.value,
exdays: e.options.exdays
}
}, "*") : document.cookie = e.name + "=" + e.value + t + i + n + s;
}, Client.MainFrame.prototype.open = function(i) {
if (i.href) {
i.target && (i.target += ""), i.href && (i.href = Client.Utils.abs(i.href));
var e, t = this.device.isMobile && this.device.shell && !(this.device.shell instanceof Client.ShellEmulator);
if (!i.target) for (var n, s = [ "tel:", "mailto:", "sms:", "geo:", "itms:", "itms-apps:", "market:", "http://maps.apple.com" ], o = 0; o < s.length; o++) if (i.href.startsWith(s[o])) {
i.target = t || this.device.isMobilePreview ? "_system" : "_self", "android" === this.device.operatingSystem && 0 < i.href.indexOf("maps") && 0 < (n = i.href.indexOf("?q=")) && (i.href = "geo:0,0" + i.href.substring(n)), 
"ios" !== this.device.operatingSystem && t || !i.href.startsWith("geo") || 0 < (n = i.href.indexOf("?q=")) && (i.href = "http://maps.apple.com/" + i.href.substring(n));
break;
}
if (t) this.device.shell.postMessage({
obj: "device-inappbrowser",
id: "open",
cnt: i
}, "*"), e = !0; else if ("close" === i.options) (h = this.windows[i.target]) && (e = !0, 
h.close()); else if ("save" === i.options) {
var l = document.createElement("a");
l.download = i.target, l.href = i.href, l.style.display = "none", document.body.appendChild(l), 
l.click(), document.body.removeChild(l);
} else {
if ("print" === i.options) {
if (void 0 === window.printJS && (i.loaded || (i.loaded = !0, this.loadScript("objects/print/print.min.js"), 
this.loadCss("objects/print/print.min.css")), !i.waitop || i.waitop < 10)) return i.waitop = (i.waitop || 0) + 1, 
void setTimeout(function() {
this.open(i);
}.bind(this), 100);
var a = function(e) {
return console.error(e.message), e.preventDefault(), e.stopPropagation(), i.cbId && this.sendEvents([ {
id: "popupBoxReturn",
content: {
res: !1,
cbId: i.cbId
}
} ]), window.removeEventListener("error", a), !1;
}.bind(this);
window.addEventListener("error", a);
try {
var r = {};
(r = i.target ? JSON.parse(i.target) : r).printable = i.href, r.onPrintDialogClose = function(e) {
window.removeEventListener("error", a), i.cbId && this.sendEvents([ {
id: "popupBoxReturn",
content: {
res: !0,
cbId: i.cbId
}
} ]);
}.bind(this), window.printJS(r);
let t = () => {
window.removeEventListener("mousemove", t), r.onPrintDialogClose();
var e = document.getElementById("printJS");
e && e.remove();
};
setTimeout(() => {
window.addEventListener("mousemove", t);
}, 1e3);
} catch (e) {
console.error(e), window.removeEventListener("error", a), i.cbId && this.sendEvents([ {
id: "popupBoxReturn",
content: {
res: !1,
cbId: i.cbId
}
} ]);
}
return;
}
var d = JSON.parse(JSON.stringify(sessionStorage)), h = (sessionStorage.clear(), 
setTimeout(function() {
for (var e in d) sessionStorage.setItem(e, d[e]);
}, 0), window.open(i.href, i.target, i.options));
if (h && (e = !0, i.target) && !i.target.startsWith("_")) {
this.windows[i.target] = h;
try {
h.onclose = function() {
this.windows[i.target] = void 0;
}.bind(this);
} catch (e) {}
}
}
i.cbId && this.sendEvents([ {
id: "popupBoxReturn",
content: {
res: e,
cbId: i.cbId
}
} ]);
} else i.cbId && this.sendEvents([ {
id: "popupBoxReturn",
content: {
res: !1,
cbId: i.cbId
}
} ]);
}, Client.MainFrame.prototype.confirm = function(e) {
e = [ {
id: "popupBoxReturn",
content: {
res: confirm(e.txt),
cbId: e.cbId
}
} ];
this.sendEvents(e);
}, Client.MainFrame.prototype.prompt = function(e) {
e = [ {
id: "popupBoxReturn",
content: {
res: prompt(e.txt, e.def),
cbId: e.cbId
}
} ];
this.sendEvents(e);
}, Client.MainFrame.prototype.terminate = function(e) {
var t, i;
e = e || {}, Client.terminating = !0, Client.isOffline() && Client.Proxy.stopApplication(), 
!this.device.shell || this.device.shell instanceof Client.ShellEmulator ? (sessionStorage.removeItem("sid"), 
sessionStorage.removeItem("cid"), sessionStorage.removeItem("exitUrl"), "reload" === this.theme.exitUrl ? -1 < (i = (t = window.location.href + "").indexOf("client/index.html")) ? window.location = t.substring(0, i) : window.location.reload(!0) : this.theme.exitUrl ? window.location = this.theme.exitUrl : (e.skipClose || window.top.close(), 
Client.exitUrl && (window.location = Client.exitUrl))) : this.device.shell.postMessage("appStopped", "*");
}, Client.MainFrame.prototype.postMessage = function(e, t, i) {
t = t ? window[t] || this.windows[t] : window.parent || window.opener;
t && t.postMessage(e, i || "*");
}, Client.MainFrame.prototype.removeAddedObjects = function() {
for (var e = 0; e < this.addedObjects.length; e++) {
var t = this.addedObjects[e];
try {
t.parentNode.removeChild(t);
} catch (e) {
console.log(e);
}
}
this.addedObjects = [];
}, Client.MainFrame.prototype.start = function() {
var e;
Client.skipStart || (Client.isOffline() || "ios" === this.device.operatingSystem ? (this.waitingForCookies = !0, 
this.device.shell.postMessage({
obj: "device-lscookies",
id: "getCookies",
cnt: {
mode: "startWithCookies"
}
}, "*")) : (e = [ {
id: "onStart",
content: this.device.getProp()
}, {
id: "defineStyle"
} ], this.sendEvents(e)));
}, Client.MainFrame.prototype.startWithCookies = function(e) {
Client.skipStart || (this.waitingForCookies = !1, e = [ {
id: "onStart",
content: this.device.getProp(),
cookies: e
}, {
id: "defineStyle"
} ], this.sendEvents(e));
}, Client.MainFrame.prototype.onTerminate = function() {
var e = !0;
try {
var t = document.activeElement, i = window.event;
t && "A" === t.tagName && -1 === t.href.indexOf("http") && i && new Date() - i.timeStamp < 100 && (e = !1);
} catch (e) {}
e && this.sendEvents([ {
id: "onTerminate"
} ]);
}, Client.MainFrame.onPageShow = function(e) {
e.persisted && window.location.reload();
}, Client.MainFrame.prototype.historyPush = function(e) {
var t;
e.replace ? window.history.replaceState(e, e.title, e.url) : window.history.pushState(e, e.title, e.url), 
e.title && ((t = document.getElementsByTagName("title")[0]) || (t = document.createElement("title"), 
document.head.appendChild(t)), t.innerHTML = e.title);
}, Client.MainFrame.prototype.historyPop = function(e) {
Client.mainFrame.sendEvents([ {
id: "onHistoryPop",
content: e
} ]);
}, Client.MainFrame.prototype.loadStyle = function(e) {
if (this.loadClientRequirements(e)) {
var t, i;
if ("" !== e.css && (t = document.head || document.getElementsByTagName("head")[0], 
(i = document.createElement("style")).type = "text/css", Client.resourceHome && (e.css = this.absStyle2(e.css)), 
i.styleSheet ? i.styleSheet.cssText = e.css : i.appendChild(document.createTextNode(e.css)), 
this.mystyle && t.removeChild(this.mystyle), t.appendChild(i), this.addedObjects.push(i), 
this.mystyle = i), e.svg) for (var n = document.body, s = 0; s < e.svg.length; s++) {
var o = document.createElement("x");
o.innerHTML = e.svg[s];
for (var l = 0; l < o.childNodes.length; l++) if ("svg" === o.childNodes[l].tagName) {
this.addedObjects.push(o.childNodes[l]), n.insertBefore(o.childNodes[l], n.firstChild);
break;
}
}
this.theme = e.theme || {}, this.device.updateAppuiClasses();
}
}, Client.MainFrame.prototype.updateTheme = function(e) {
if (this.theme) {
for (var t in e.theme) this.theme[t] = e.theme[t];
this.device.updateAppuiClasses();
}
}, Client.MainFrame.prototype.absStyle = function(e) {
var t = e.sheet.rules;
if (t) for (var i = 0; i < t.length; i++) {
var n = t[i].style;
if (n) for (var s = 0; s < n.length; s++) {
var o = n[s];
Client.Utils.requireAbs(o) && (n[o] = Client.Utils.absStyle(n[o]));
}
}
}, Client.MainFrame.prototype.absStyle2 = function(e) {
for (var t, i = -1; i = e.indexOf("url('", i + 1), t = e.indexOf("')", i + 1), -1 !== i && -1 !== t; ) {
var n = e.substring(i, t + 2), s = Client.Utils.absStyle(n);
n !== s && (e = e.substring(0, i) + s + e.substring(t + 2));
}
return e;
}, Client.MainFrame.prototype.loadRequirements = function(t) {
let i = !0;
var n = Object.keys(t);
for (let e = 0; e < n.length; e++) {
var s = n[e];
void 0 === this.requireMap[s] && (this.paused = !0, i = !1, this.requireMap[s] = t[s].type);
}
return this.processRequirements(), i;
}, Client.MainFrame.prototype.processRequirements = function() {
this.fileContents = this.fileContents || {};
var e = Object.keys(this.requireMap).map(async e => {
if (void 0 === this.fileContents[e]) {
this.fileContents[e] = !1;
try {
await fetch(Client.Utils.abs(e), {
mode: "no-cors"
});
} catch (e) {}
this.fileContents[e] = !0;
}
});
Promise.all(e).then(() => {
let i = Object.keys(this.requireMap);
for (let e = 0; e < i.length; e++) {
var t = i[e];
if ("loading" === this.requireMap[t]) return !1;
}
i = Object.keys(this.requireMap);
for (let t = 0; t < i.length; t++) {
var n = i[t];
if (!0 !== this.fileContents[n]) break;
let e = !1;
switch (this.requireMap[n]) {
case "jc":
this.loadScript(n), e = !0;
break;

case "cs":
case "fo":
this.loadCss(n), e = !0;
break;

case "svg":
case "sv":
this.loadSvg(n), e = !0;
}
if (e) {
this.requireMap[n] = "loading";
break;
}
}
});
}, Client.MainFrame.prototype.reqComplete = function(e, i) {
if ("callback" === e) {
var t = Object.keys(this.requireMap);
for (let e = 0; e < t.length; e++) {
var n = t[e];
("loading" === this.requireMap[n] || "callback" === this.requireMap[n]) && -1 < n.indexOf("callback") && (this.requireMap[n] = "complete");
}
} else !i && "loading" === this.requireMap[e] && -1 < e.indexOf("callback") ? this.requireMap[e] = "callback" : this.requireMap[e] = "complete";
if (!i && "complete" === this.requireMap[e]) {
i = e.split("/").pop().split(".")[0];
if (Client[i] && Client[i].getRequirements) {
let t = Client[i].getRequirements();
Object.keys(t).forEach(e => this.requireMap[e] = t[e].type);
}
}
var s = Object.keys(this.requireMap);
for (let e = 0; e < s.length; e++) {
var o = s[e];
if ("complete" !== this.requireMap[o]) return this.processRequirements(), !1;
}
this.paused = !1, this.processCache();
}, Client.MainFrame.prototype.sendAppStart = function() {
this.appStarted || setTimeout(function() {
this.cmdCache.length ? (this.processCache(), this.sendAppStart()) : (this.appStarted = !0, 
this.device.shell && this.device.shell.postMessage({
viewmsg: "appStarted",
params: {
sid: this.sid
}
}, "*"));
}.bind(this), 100);
}, Client.MainFrame.prototype.loadScript = function(e) {
var t = this, i = document.createElement("script");
i.type = "text/javascript", i.readyState ? i.onreadystatechange = function() {
"loaded" !== i.readyState && "complete" !== i.readyState || (i.onreadystatechange = null, 
t.reqComplete(e));
} : (i.onload = function() {
t.reqComplete(e);
}, i.onerror = function() {
t.reqComplete(e, !0);
}), i.src = Client.Utils.abs(e), document.body.appendChild(i), this.addedObjects.push(i);
}, Client.MainFrame.prototype.loadCss = function(e) {
var t = this, i = document.createElement("link");
i.type = "text/css", i.rel = "stylesheet", i.readyState ? i.onreadystatechange = function() {
"loaded" !== i.readyState && "complete" !== i.readyState || (i.onreadystatechange = null, 
t.reqComplete(e));
} : (i.onload = function() {
t.reqComplete(e);
}, i.onerror = function() {
t.reqComplete(e, !0);
}), i.href = Client.Utils.abs(e), document.head.insertBefore(i, this.lastHeadObject.nextSibling), 
this.addedObjects.push(i);
}, Client.MainFrame.prototype.loadSvg = function(n) {
var s = this, o = new XMLHttpRequest();
o.open("GET", Client.Utils.abs(n)), o.onload = function() {
var e = document.body, t = document.createElement("x");
t.innerHTML = o.responseText;
for (var i = 0; i < t.childNodes.length; i++) if ("svg" === t.childNodes[i].tagName) {
s.addedObjects.push(t.childNodes[i]), e.insertBefore(t.childNodes[i], e.firstChild);
break;
}
s.reqComplete(n);
}, o.onerror = function() {
s.reqComplete(n, !0);
}, o.send();
}, Client.MainFrame.prototype.attachEvents = function() {
var e, s = this, n = document.getElementById("app-ui");
window.onresize = function(i) {
s.device.updateProp(), s.resizeTimeout && clearTimeout(s.resizeTimeout), s.resizeTimeout = setTimeout(function() {
s.resizeTimeout = void 0;
for (var e = 0; e < s.views.length; e++) s.views[e].onResize(i);
var t = [ {
id: "onResize",
content: {
width: n.clientWidth,
height: n.clientHeight
}
} ];
Client.mainFrame.sendEvents(t), "android" === s.device.operatingSystem && Client.Utils.isNodeEditable(document.activeElement) && document.activeElement.scrollIntoViewIfNeeded();
}, i ? 100 : 0);
}, Client.isOffline() || (e = e => {
let t = e.error ?? e.reason;
e = {
error: {
message: (t = "string" == typeof t ? {
message: t,
stack: e.filename + ":" + e.lineno + "." + e.colno
} : t).message,
stack: t.stack
}
};
Client.mainFrame.sendEvents([ {
id: "onUpdateElementError",
content: e
} ]);
}, window.addEventListener("error", e), window.addEventListener("unhandledrejection", e)), 
window.addEventListener("popstate", function(e) {
!e.state && s.device.isMobile && parent !== window ? s.terminate() : s.historyPop(e.state);
}, !0), n.addEventListener("focus", function(e) {
e = Client.Utils.findElementFromDomObj(e.target);
e?.view?.setActiveElement(e), Client.Element.lastFocusedElement = e;
}, !0), n.tabIndex = "0", n.addEventListener("keydown", function(e) {
try {
"Shift" !== e.key && tippy.hideAll();
} catch (e) {}
var t = Client.Utils.getKey(e), i = Client.Utils.findElementFromDomObj(e.target);
!i || i.handleKeyDown && i.handleKeyDown(e) || (i = (i.view || i).findElementToActivate(t)) && (e.preventDefault(), 
i.activate());
}, !1), n.addEventListener("scroll", function(e) {
var t = new Date().getTime();
s.lastScrollEvent = {
srcElement: e.srcElement,
timeStamp: t
}, s.lastTouchEvent && t - s.lastTouchEvent.timeStamp < 100 && s.lastScrollEvent.srcElement.contains(s.lastTouchEvent.srcElement) && s.preventClick();
}, {
passive: !0,
capture: !0
}), n.addEventListener("touchstart", function(e) {
var t, i = new Date().getTime(), n = void 0;
void 0 === s.edgeStart && 1 === e.touches.length && ((t = e.touches[0].screenX) < 30 && (n = 0), 
window.screen.width - t < 30) && (n = window.screen.width), s.lastTouchEvent = {
srcElement: e.srcElement,
timeStamp: i,
edge: n
}, s.lastScrollEvent && i - s.lastScrollEvent.timeStamp < 100 && s.lastScrollEvent.srcElement.contains(e.srcElement) && s.preventClick(), 
s.dirtyInput && e.target.id !== s.dirtyInput && (t = Client.eleMap[s.dirtyInput]) && t.commit(e);
}, {
passive: !0,
capture: !0
}), n.addEventListener("touchmove", function(e) {
void 0 !== s.lastTouchEvent.edge && 1 === e.changedTouches.length && (e = e.changedTouches[0].screenX, 
60 < Math.abs(e - s.lastTouchEvent.edge)) && new Date() - s.lastTouchEvent.timeStamp < 200 && (s.edgeGesture(0 === s.lastTouchEvent.edge ? "left" : "right"), 
s.lastTouchEvent.edge = void 0);
}, {
passive: !0,
capture: !0
}), n.addEventListener("mouseup", function(e) {
var t = new Date().getTime();
s.lastScrollEvent && t - s.lastScrollEvent.timeStamp < 200 && s.lastScrollEvent.srcElement.contains(e.srcElement) && s.preventClick();
}, {
passive: !0,
capture: !0
}), this.device.isMobile && this.device.shell && !(this.device.shell instanceof Client.ShellEmulator) && (e = this.getHammerManager()) && (e.add(new Hammer.Swipe({
event: "exitswipe",
pointers: 2,
direction: Hammer.DIRECTION_DOWN,
threshold: 10,
velocity: .3
})), e.on("exitswipe", function() {
this.device.rootApp || this.terminate();
}.bind(this))), n.addEventListener("keydown", function(e) {
Client.Utils.findElementFromDomObj(e.target)?.handleMask(e);
}, !0), n.addEventListener("focus", function(e) {
Client.Utils.findElementFromDomObj(e.target)?.handleMask(e);
}, !0), n.addEventListener("blur", function(e) {
Client.Utils.findElementFromDomObj(e.target)?.handleMask(e);
}, !0);
}, Client.MainFrame.prototype.setDirtyInput = function(e) {}, Client.MainFrame.prototype.getDirtyInput = function() {
return this.dirtyInput;
}, Client.MainFrame.prototype.isEditing = function() {
return !1;
}, Client.MainFrame.prototype.setClientProperties = function(e) {
var t, i, n;
this.loadRequirements({
"objects/base/webrtc.js": {
name: "Webrtc",
type: "jc"
},
"objects/base/peer.js": {
name: "Peer",
type: "jc"
}
}) && !Client.clientType && (void 0 === Client.clientType && (Client.clientType = e.client, 
"guest" === Client.clientType) && (Client.clientRole = e.settings.clientRole), i = t = !0, 
-1 === (n = "guest" === Client.clientType ? e.settings.guestStream : e.settings.ownerStream).indexOf("v") && (i = !1), 
-1 === n.indexOf("a") && (t = !1), (i || t) && (this.createWebRTC({
sendVideo: i,
sendAudio: t
}, e.settings.webRTCsettings), e.settings.ownerPeerId)) && this.callOwner(e.settings.ownerPeerId);
}, Client.MainFrame.prototype.createWebRTC = function(e, t) {
this.rtc = new Client.WebRTC(e), this.rtc.prepareMultiClientPopup(this, t);
}, Client.MainFrame.prototype.callOwner = function(e) {
"owner" !== Client.clientType && (this.rtc.updateElement({
peerId: e
}), this.rtc.startCall());
}, Client.MainFrame.prototype.closeGuest = function() {
this.rtc.endCall(), this.rtc.removePopup(), this.rtc = void 0, "guest" === Client.clientType && (window.location = Client.exitUrl);
}, Client.MainFrame.prototype.closeOwnerRtc = function() {
"owner" === Client.clientType && (this.rtc.endCall(), this.rtc.removePopup(), this.rtc = void 0);
}, Client.MainFrame.prototype.getHammerManager = function() {
var e;
return this.hammer || (e = !0, "ios" === this.device.operatingSystem && this.device.operatingSystemVersion && "9.2" === this.device.operatingSystemVersion.trim() && (this.hammerEnabled = e = !1), 
e && (this.hammer = new Hammer.Manager(document.getElementById("app-ui")))), this.hammer || (this.hammer = {}, 
this.hammer.on = function() {}, this.hammer.off = function() {}, this.hammer.add = function() {}, 
this.hammer.get = function() {}), this.hammer;
}, Client.isOffline = function() {
return void 0 !== Client.Proxy;
}, Client.MainFrame.prototype.setWebRTCProperties = function(e) {
var t;
e && e.parent && this.rtcParent !== e.parent && (t = document.getElementById(e.parent)) && this.rtc && (this.rtc.dialog.parentNode.removeChild(this.rtc.dialog), 
t.appendChild(this.rtc.dialog), this.rtc.dialog.classList.remove("rtc-popup-default"), 
this.rtc.dialog.classList.add("rtc-popup-custom"), this.rtcParent && this.restoreCall(), 
this.rtcParent = e.parent);
}, Client.MainFrame.prototype.restoreCall = function() {
this.rtc && this.rtc.restoreCall(Client.clientType);
}, Client.MainFrame.prototype.setPhDevice = function(e) {
Client.phDeviceConnected = e.device || "";
}, Client.MainFrame.prototype.sendMessageToTestAuto = function(e) {
parent.postMessage && parent.postMessage(e, "*");
}, Client.MainFrame.prototype.getTaggingDataResults = function(e) {
this.sendMessageToTestAuto({
type: "testAutoMsg",
content: {
id: "taggingDataResults",
taggingData: e
}
});
}, Client.MainFrame.prototype.consoleTest = function(e, t) {}, Client.MainFrame.prototype.sendExceptionToTestAuto = function(e, t) {}, 
Client.MainFrame.prototype.setTaggingData = function(e) {
this.sendEvents([ {
id: "saveTaggingData",
content: e
} ]);
}, Client.MainFrame.prototype.closePopup = function(e) {}, Client.MainFrame.prototype.edgeGesture = function(e) {}, 
Client.realizeOfflineScreen = function(e) {
var t, i, n = document.getElementById("app-ui"), s = n.getElementsByClassName("app-offline-screen")[0];
s || e && Client.offScr && e === Client.offScr.delay || (Client.offScr && Client.offScr.TimerID && (clearTimeout(Client.offScr.TimerID), 
delete Client.offScr), e ? (Client.offScr = {
delay: e
}, Client.offScr.TimerID = setTimeout(function() {
Client.realizeOfflineScreen();
}, e)) : ((s = document.createElement("DIV")).className = "app-offline-screen", 
(e = document.createElement("DIV")).className = "app-screencover-content", s.appendChild(e), 
(i = document.createElementNS("http://www.w3.org/2000/svg", "svg")).setAttribute("class", "screencover-icon"), 
(t = document.createElementNS("http://www.w3.org/2000/svg", "use")).setAttributeNS("http://www.w3.org/1999/xlink", "xlink:href", "#icon-offlinestate"), 
i.appendChild(t), e.appendChild(i), (t = document.createElement("H1")).textContent = "You're offline", 
(i = document.createElement("H2")).innerHTML = "Check your connection<br>to continue the session", 
e.appendChild(t), e.appendChild(i), n.appendChild(s), window.setTimeout(function() {
s.classList.add("visible");
}, 10)));
}, Client.removeOfflineScreen = function() {
Client.offScr && Client.offScr.TimerID && (clearTimeout(Client.offScr.TimerID), 
delete Client.offScr);
var e = document.getElementById("app-ui").getElementsByClassName("app-offline-screen")[0];
e && e.parentNode.removeChild(e);
}, Client.MainFrame.prototype.getIP = function() {
var e = function(e) {
this.sendEvents([ {
id: "onIPAddress",
content: e
} ]);
}.bind(this), t = new XMLHttpRequest();
t.open("GET", "https://api.ipify.org"), t.onload = function() {
e(t.responseText);
}, t.onerror = function() {
e();
}, t.send();
}, Client.MainFrame.prototype.preventClick = function(e) {
if (e = e || 0, this._preventClick = new Date().getTime() + e, this._preventListeners) for (var t in this._preventListeners) this._preventListeners[t]();
}, Client.MainFrame.prototype.isClickPrevented = function(e) {
return void 0 === e && (e = 250), this._preventClick && new Date() - this._preventClick < e;
}, Client.MainFrame.prototype.registerPreventListener = function(e, t) {
this._preventListeners || (this._preventListeners = {}), this._preventListeners[e] = t;
}, Client.MainFrame.prototype.unregisterPreventListener = function(e) {
this._preventListeners && delete this._preventListeners[e];
}, Client.MainFrame.prototype.feedbackRequest = function() {
Client.mainFrame.sendEvents([ {
id: "feedbackCommand",
content: {
op: "list",
filter: ""
}
} ]);
}, Client.MainFrame.prototype.feedbackCommandResponse = function(e) {
e.err ? console.error("Error sending the feedback: check if the feedback service is enabled on the server.\nError: " + JSON.stringify(e.err)) : parent && parent.postMessage && parent.postMessage({
type: "feedbackResponse",
op: e.op,
res: e.res
}, "*"), this.feedbackClient.updateAddFeedbackPopup(e);
}, Client.MainFrame.prototype.isFeedbackEnabledResponse = function(e) {
this.feedbackClient ? this.feedbackClient.setProps({
enabled: e.enabled,
serverUrl: e.serverUrl,
ide: e.ide,
showInPreview: e.showInPreview
}) : this.feedbackClient = new Client.feedbackClient({
enabled: e.enabled,
serverUrl: e.serverUrl,
ide: e.ide,
showInPreview: e.showInPreview
}), this.showFeedbackPopupOptions && (this.showAddFeedbackPopup(this.showFeedbackPopup), 
delete this.showFeedbackPopupOptions);
}, Client.MainFrame.prototype.showAddFeedbackPopup = function(e) {
this.feedbackClient ? this.feedbackClient.showAddFeedbackPopup(e) : (this.showFeedbackPopupOptions = e, 
Client.mainFrame.sendEvents([ {
id: "isFeedbackEnabled"
} ]));
}, Client.MainFrame.prototype.generateCounter = function() {
return this.counter = this.counter || 0, (this.counter++).toString(36);
}, Client.MainFrame.prototype.getRequirements = function(e, t) {
if (e) {
var i, n, s, o = e.req || {};
for (n in e.theme && e.theme.idfTheme && (this.idfTheme = e.theme.idfTheme, this.idfMobile = "true" === e.theme.idfMobile, 
i = Client.Widget.getThemeUrl(e.theme.idfTheme, e.theme.idfUrl)) && (o[i] = {
type: "cs",
name: "theme"
}), o = "view" !== e.type && Client[e.c] && Client[e.c].getRequirements ? Object.assign(o, Client[e.c].getRequirements(e)) : o) t[n] || (t[n] = o[n]);
if (e.elements) for (s = 0; s < e.elements.length; s++) this.getRequirements(e.elements[s], t);
if (e.children) for (s = 0; s < e.children.length; s++) this.getRequirements(e.children[s], t);
e.child && this.getRequirements(e.child, t);
}
}, Client.MainFrame.prototype.loadClientRequirements = function(e) {
var t = [];
return this.getRequirements(e, t), this.loadRequirements(t);
}, Client || {}), Client = (Client.View = function(e, t) {
this.id = e.id, Client.eleMap[this.id] = this, t ? (this.parent = t, this.domObj = t.domObj) : e.options && "popup" === e.options.mode ? (this.domObj = document.getElementById("app-ui"), 
t = {
name: "dialog",
id: this.id + "-modal",
class: Client.View.dialogClass,
options: e.options
}, this.dialog = this.createElement(t, this, this), this.domObj = this.dialog.domObj) : this.domObj = document.getElementById("app-ui"), 
this.elements = [];
for (var i, n = 0; n < e.elements.length; n++) e.elements[n].child ? (e.elements[n].child.startHidden = !0, 
this.insertBefore(e.elements[n])) : (e.elements[n].startHidden = !0, i = this.createElement(e.elements[n], this, this), 
this.elements.push(i));
if (this.dialog && (this.dialog.positionElement(), e.options?.draggable) && this.elements) {
let e = this.dialog.wrapperObj.querySelector(".modal-drag-area");
e || (e = this.dialog.wrapperObj.querySelector("ion-navbar")) && e.classList.add("modal-drag-area"), 
(e = e || this.elements[0].getRootObject()).id || (e.id = "drag-modal-" + this.id), 
this.dragTargetId = e.id, "smartphone" !== (Client.mainFrame.device.isMobilePreview ? Client.mainFrame.device.viewportParams.devicetype : Client.mainFrame.device.type) && Client.IonHelper.registerPointerEvents(this.dialog.rootObj, null, this, !0, "pspmpe");
}
for (n = 0; n < this.ne(); n++) this.elements[n].startHidden && (delete this.elements[n].startHidden, 
this.elements[n].updateElement({
visible: !0
}));
Client.mainFrame.feedbackEnabled && parent && parent.postMessage && parent.postMessage({
type: "viewChanged",
viewId: this.id
}, "*");
}, Client.View.dialogClass = "Dialog", Client.View.prototype.createElement = function(e, t, i) {
if ("view" === e.type) return new Client.View(e, t);
for (var n = Object.keys(e), s = 0; s < n.length; s++) {
var o = n[s];
if ((d = Client.transPropMap[o]) && (e[d] = e[o], delete e[o]), "style" === d) for (var l = e[d], a = Object.keys(l), r = 0; r < a.length; r++) {
var d, h = a[r];
(d = Client.transStyleMap[h]) && (l[d] = l[h], delete l[h]);
}
}
if (e.events || (e.events = []), void 0 === Client[e.class]) {
if (Client.mainFrame.isEditing()) throw "Class " + e.class + " not found";
console.error("Class " + e.class + " not found");
}
t = new Client[e.class](e, t, i);
return Client.mainFrame.device.fullscreen && t.handleFullscreen(), t;
}, Client.View.prototype.close = function() {
if (Client.eleMap[this.id]) if (this.parent && this.parent.onRemoveChildObject(this), 
this.dialog) this.dialog.close(); else {
for (var e = 0; e < this.ne(); e++) this.elements[e].close(!0);
delete Client.eleMap[this.id], 0 <= (e = Client.mainFrame.views.indexOf(this)) && Client.mainFrame.views.splice(e, 1), 
Client.mainFrame.lastScrollEvent && !document.body.contains(Client.mainFrame.lastScrollEvent.srcElement) && (Client.mainFrame.lastScrollEvent = void 0), 
Client.mainFrame.lastTouchEvent && !document.body.contains(Client.mainFrame.lastTouchEvent.srcElement) && (Client.mainFrame.lastTouchEvent = void 0), 
Client.mainFrame.feedbackEnabled && parent && parent.postMessage && parent.postMessage({
type: "viewChanged"
}, "*");
}
}, Client.View.prototype.activate = function() {
this.activeElement && this.activeElement.activate();
}, Client.View.prototype.appendChild = function(e) {
e = this.createElement(e, this, this);
this.elements.push(e);
}, Client.View.prototype.insertBefore = function(e) {
if (Client.mainFrame.loadClientRequirements(e.child)) {
var t;
"view" === e.child.type ? (t = new Client.View(e.child, this), e.id && (delete Client.eleMap[t.id], 
t.id = e.id), Client.eleMap[t.id] = t) : t = this.createElement(e.child, this, this);
for (var i = 0; i < this.ne(); i++) if (this.elements[i].id === e.sib) {
this.elements.splice(i, 0, t);
var n = this.domObj.childNodes.item(i);
this.domObj.insertBefore(t.domObj, n);
break;
}
i >= this.ne() && this.elements.push(t);
}
}, Client.View.prototype.removeChild = function(e) {
for (var t = 0; t < this.ne(); t++) if (this.elements[t].id === e) {
this.elements[t].close(!0), this.elements.splice(t, 1);
break;
}
}, Client.View.prototype.findElementToActivate = function(e, t) {
var i;
if ((t = t || {})[this.id] = !0, this.activeElement && this.activeElement.cmdKey === e) {
if (!1 === this.activeElement.visible || !1 === this.activeElement.enabled) return;
i = this.activeElement;
}
if (!i) {
this.activeElement && (t[this.activeElement.id] = !0);
for (var n = 0; n < this.ne() && !(i = this.elements[n].findElementToActivate(e, t)); n++);
}
if (!i) {
var s = this.parent;
if (s) {
for (var o = s.view || s; o && t[o.id]; ) (o = o.parent) && o.view && (o = o.view);
o && (i = o.findElementToActivate(e, t));
}
}
return i;
}, Client.View.prototype.setActiveElement = function(e) {
this.activeElement = e;
}, Client.View.prototype.onResize = function(e) {
for (var t = 0; t < this.ne(); t++) this.elements[t].onResize(e);
}, Client.View.prototype.appendChildObject = function(e, t) {
this.parent && this.parent.appendChildObject ? this.parent.appendChildObject(e, t) : this.domObj.appendChild(t);
}, Client.View.prototype.onRemoveChildObject = function(e) {}, Client.View.prototype.ne = function() {
return this.elements.length;
}, Client.View.prototype.getElements = function(e) {
var t = [];
if ((!e || this instanceof e) && t.push(this), this.elements) for (var i = 0; i < this.elements.length; i++) for (var n = this.elements[i].getElements(e), s = 0; s < n.length; s++) t.push(n[s]);
return t;
}, Client.View.prototype.getRootObject = function() {
return this.elements && this.elements[0] ? this.elements[0].getRootObject() : void 0;
}, Client.View.prototype.getRootView = function() {
return this.parent && this.parent.view && this.parent.view !== this ? this.parent.view.getRootView() : this;
}, Client.View.prototype.visibilityChanged = function(e) {
if (this.elements) for (var t = 0; t < this.elements.length; t++) this.elements[t].visibilityChanged(e);
}, Client.View.prototype.canAutoFocus = function() {
return !Client.mainFrame.device.isMobile && !this.alreadyAutoFocused && (this.alreadyAutoFocused = !0);
}, Client.View.prototype.pointerStart = function(e) {
var t = e.target;
if (Client.Utils.isMyParent(t, this.dragTargetId)) return this.startY = (e.touches ? e.touches[0] : e).screenY, 
this.startX = (e.touches ? e.touches[0] : e).screenX, this.startRect = this.dialog.wrapperObj.getBoundingClientRect(), 
!0;
}, Client.View.prototype.pointerMove = function(e) {
var t;
void 0 !== this.startY && (Client.mainFrame.isClickPrevented() ? (delete this.startX, 
delete this.startY, delete this.startRect) : (t = (e.touches ? e.touches[0] : e).screenY, 
e = (e.touches ? e.touches[0] : e).screenX, t = t - this.startY, e = e - this.startX, 
this.dialog.wrapperObj.style.top = this.startRect.top + t + "px", this.dialog.wrapperObj.style.left = this.startRect.left + e + "px"));
}, Client.View.prototype.pointerEnd = function(e) {
var t;
void 0 !== this.startY && (t = this.dialog.wrapperObj.getBoundingClientRect(), Client.mainFrame.sendEvents([ {
obj: this.id,
id: "onResize",
content: {
left: t.left,
top: t.top
}
} ]), delete this.startX, delete this.startY, delete this.startRect);
}, Client || {}), Client = (Client.Element = function(e, t, i) {
void 0 !== e && void 0 !== i && (void 0 === e.id && (e.id = Client.mainFrame.generateCounter() + "_"), 
this.name = e.name, this.id = e.id, this.class = e.class, this.view = i, this.parent = t, 
this.parentWidget = e.parentWidget, this.cloned = e.cloned, delete e.parentWidget, 
delete e.cloned, Client.eleMap[this.id] = this);
}, Client.Element.EventProperties = {
y: 1,
x: 1,
offsetY: 1,
offsetX: 1,
button: 1,
metaKey: 1,
altKey: 1,
shiftKey: 1,
ctrlKey: 1,
clientY: 1,
clientX: 1,
screenY: 1,
screenX: 1,
which: 1,
charCode: 1,
keyCode: 1,
pageY: 1,
pageX: 1,
layerY: 1,
layerX: 1,
detail: 1,
target: 2,
relatedTarget: 2,
key: 1
}, Client.Element.ExcludedProp = {
name: !0,
ds: !0,
clid: !0,
visible: !0,
animations: !0,
pid: !0,
children: !0,
events: !0,
class: !0,
startHidden: !0
}, Client.Element.fakeEmptyValue = String.fromCharCode(160), Client.Element.prototype.updateElement = function(t) {
if (this.domObj) {
this.purgeMyProp(t);
var e = Client.mainFrame.isEditing();
if (void 0 !== t.itemSide && (this.itemSide = t.itemSide, delete t.itemSide), e && this.domObj && this.domObj.classList && this.domObj.classList.contains("emptycontainer") && this.domObj.classList.remove("emptycontainer"), 
e && this.ne() && (void 0 !== t.innerText || void 0 !== t.textContent || void 0 !== t.innerHTML)) {
void 0 !== t.innerText && (this.domObj.innerText = t.innerText, delete t.innerText), 
void 0 !== t.textContent && (this.domObj.textContent = t.textContent, delete t.textContent), 
void 0 !== t.innerHTML && (this.domObj.innerHTML = t.innerHTML, delete t.innerHTML);
for (var i = 0; i < this.ne(); i++) if (this.elements[i] instanceof Client.View) for (var n = this.elements[i], s = 0; s < n.ne(); s++) n.elements[s].domObj && this.domObj.appendChild(n.elements[s].domObj); else this.elements[i].domObj && this.domObj.appendChild(this.elements[i].domObj);
}
for (var o = Object.keys(t), l = 0; l < o.length; l++) {
var a = o[l];
if (!Client.Element.ExcludedProp[a] && (!e || "id" !== a)) {
if ("exception" === a) throw t[a];
if ("rownum" === a && this[a] !== t[a]) this[a] = t[a], this.updateListPosition(); else if ("usePopupError" === a) this[a] = t[a]; else if ("errorText" === a) this.setError(t.errorText, !0); else if ("debouncingTimeout" === a) this.debouncingTimeout = t[a]; else if ("animate" === a) this.animate = t.animate; else if ("tooltip" === a) this.addTooltip(t.tooltip); else if ("rowpos" === a) this.rowPosition = t.rowpos; else {
if ("innerHTML" === a && Client.resourceHome) {
for (var r = t[a], d = -1; ;) {
if (!(0 <= (d = r.indexOf("/resources/", d + 1)))) break;
var h = r.lastIndexOf("'", d), h = Math.max(r.lastIndexOf('"', d), h), c = r.indexOf("'", d), c = Math.max(r.indexOf('"', d), c), p = Client.Utils.abs(r.substring(h + 1, c));
r = r.substring(0, h + 1) + p + r.substring(c), d = h + p.length;
}
t[a] = r;
}
if ("style" === a) if ("" !== t.style) {
if ("string" == typeof t.style) try {
t.style = JSON.parse(t.style);
} catch (e) {
this.domObj.style.cssText = t.style;
continue;
}
!e || t.fromanim || this.parentWidget || (this.domObj.style.cssText = "");
for (var u = Object.keys(t.style), d = 0; d < u.length; d++) {
var f = u[d], r = t.style[f], m = (Client.Utils.requireAbs(f) && (r = Client.Utils.absStyle(r)), 
this.domObj);
t.fromanim && (m = this.getRootObject()), r && r.indexOf && 0 < r.indexOf("!important") ? m.style.setProperty(f, r.replace("!important", ""), "important") : m.style[f] = r;
}
} else this.domObj.style.cssText = ""; else "autoFocus" === a && !0 === t[a] ? this.view && this.view.canAutoFocus() && this.focus() : "customNavigation" === a ? this.customNavigation = t.customNavigation : "customid" === a ? this.domObj.setAttribute(a, t[a]) : (r = t[a], 
"src" !== a && "href" !== a || (r = Client.Utils.abs(r)), this.domObj[a] = r, !this.changeTrigger || "innerText" !== a && "textContent" !== a && "innerHTML" !== a || this.onAnimationTrigger(null, "change"));
}
}
}
t.animations && (this.attachAnimations(t.animations), delete t.animations), void 0 !== t.mask && (Client.Utils.isNodeEditable(this.domObj) && this.setMask(t.mask), 
delete t.mask), void 0 !== t.maskType && (this.maskType = t.maskType, delete t.maskType), 
t.startHidden && this.enterTrigger && t.visible && (this.startHidden = !(t.visible = !1));
var C, g, b, I = this.getRootObject();
e && t.visible && !t.forhighlight && I.classList.remove("element-hidden-highlighted"), 
void 0 !== t.visible && t.visible !== this.visible && (this.visible = t.visible, 
!1 === t.visible ? "none" !== I.style.display && (!1 !== this.animate && this.exitTrigger && I.parentNode && !this.startHidden ? this.onAnimationTrigger(null, "exit") : (this.oldDisplay = I.style.display, 
I.style.display = "none")) : void 0 !== (C = I.style.display) && "none" !== C || C === this.oldDisplay || (!1 !== this.animate && this.enterTrigger && I.parentNode ? this.onAnimationTrigger(null, "enter") : (I.style.display = void 0 === this.oldDisplay ? "" : this.oldDisplay, 
delete this.oldDisplay)), this.visibilityChanged(this.visible)), this.hilightObj && (document.getElementById("hlo-" + this.id) && (g = this, 
window.setTimeout(function() {
Client.eleMap[g.id] && g.hilightObj(!0);
}, 0)), e) && (this.domObj.id || (this.domObj.id = "dmo_" + this.id), this.domObj.setAttribute("readonly", "true")), 
e && (b = this, window.setTimeout(function() {
var e = !1;
if (b.elements) for (var t = 0; t < b.elements.length && !e; t++) !b.elements[t].visible && void 0 !== b.elements[t].visible || (e = !0);
e || b.domObj && b.domObj.classList && (0 !== b.domObj.clientWidth && 0 !== b.domObj.clientHeight || "" !== b.domObj.className && "hilightClass" !== b.domObj.className || b.domObj.textContent && "" !== b.domObj.textContent || b.domObj.getAttribute("src") || "none" === b.domObj.style.display || (b.domObj.classList.add("emptycontainer"), 
b.hilighted && b.hilightObj(!0)));
}, 50)), 1 === this.widgetLevel && this.createDropTargets && window.setTimeout(function() {
this.createDropTargets();
}.bind(this), 15);
}
}, Client.Element.prototype.attachEvents = function(t) {
if (t) {
var e = (this.events = t).indexOf("onEndAnimation"), i = (0 <= e && (t.splice(e, 1), 
this.sendEndAnimation = !0), 0 <= (e = t.indexOf("onKey")) && t.splice(e, 1), []);
Client.mainFrame.hammerEnabled && (Client.mainFrame.device.isMobile && (i.push({
ideName: "onDblclick",
constr: "Tap",
name: "doubleTap",
opt: {
event: "doubleTap",
taps: 2
}
}), i.push({
ideName: "onContextmenu",
constr: "Press",
name: "press"
})), i.push({
ideName: "onSwipe",
constr: "Swipe",
name: "swipe",
opt: {
event: "swipe",
velocity: .1
}
}), i.push({
ideName: "onPinch",
constr: "Pinch",
name: "pinch"
}), i.push({
ideName: "onRotate",
constr: "Rotate",
name: "rotate"
}), i.push({
ideName: "onPan",
constr: "Pan",
name: "pan"
}));
for (let e = 0; e < i.length; e++) {
var n = i[e], s = t.indexOf(n.ideName);
0 <= s && (t.splice(s, 1), s = Client.mainFrame.getHammerManager(), this.addTouchEvent(s, n.ideName, n.constr, n.name, n.opt));
}
var o = this.onEvent.bind(this);
for (let e = 0; e < t.length; e++) {
var l = t[e].toLowerCase();
"onclick" === l && this.domObj.setAttribute("click-delay", 40), void 0 === this.domObj[l] ? this.domObj.addEventListener(l.substring(2).toLowerCase(), o) : this.domObj[l] = o;
}
this.domObj.addEventListener("focus", () => {
this.errorPopup || !0 !== this.usePopupError || this.drawErrorPopup();
}, {
passive: !0,
capture: !1
}), this.domObj.addEventListener("blur", () => {
this.errorPopup && (this.errorPopup.close(), delete this.errorPopup);
}, {
passive: !0,
capture: !1
});
}
}, Client.Element.prototype.onEvent = function(e) {
if (("click" !== e.type && "dblclick" !== e.type || !this.domObj.disabled) && ("click" !== e.type && "dblclick" !== e.type || !Client.mainFrame.isClickPrevented())) {
if ("click" === e.type && this.debouncingTimeout) {
var t = new Date().getTime();
if (t - this.lastClickTime < this.debouncingTimeout) return;
this.lastClickTime = t;
}
var t = [], i = ("scroll" !== e.type || this.rowCount || (t.push({
obj: this.id,
id: "chgProp",
content: {
name: "clientWidth",
value: this.domObj.clientWidth,
clid: Client.id
}
}), t.push({
obj: this.id,
id: "chgProp",
content: {
name: "clientHeight",
value: this.domObj.clientHeight,
clid: Client.id
}
}), t.push({
obj: this.id,
id: "chgProp",
content: {
name: "scrollTop",
value: this.domObj.scrollTop,
clid: Client.id
}
})), "on" + e.type.substring(0, 1).toUpperCase() + e.type.substr(1));
"onContextmenu" == i && e.preventDefault(), "click" !== e.type && "dblclick" !== e.type || (this.preventClickPolicy && "prevent" === this.preventClickPolicy() ? Client.mainFrame.preventClick() : this.parent && this.parent.parentWidget || (e.stopPropagation(), 
Client.mainFrame.isEditing() && Client.eleMap.editm.onClick(e))), t.push({
obj: this.id,
id: i,
content: this.saveEvent(e)
}), Client.mainFrame.sendEvents(t);
}
}, Client.Element.prototype.clone = function(t, e, n) {
t = t || {};
var i, s = new (this instanceof Client.Widget ? Client.Widget : Client.Element)(Object.assign({
cloned: !0
}, t), void 0, this.view), o = (Object.setPrototypeOf(s, Object.getPrototypeOf(this)), 
Object.keys(this));
e || (n = new Map(), Client.Utils.cloneDomObj(this.getRootObject(), n));
for (let e = 0; e < o.length; e++) if (i = o[e], ![ "id", "name", "cloned", "elements", "mainObjects" ].includes(i) && !(t && void 0 !== t[i] || this[i] instanceof Client.Element || this[i] instanceof Client.View)) if (this[i] instanceof HTMLElement) s[i] = n.get(this[i]), 
s[i] || (s[i] = Client.Utils.cloneDomObj(this[i], n)), "domObj" === i && s.domObj.id && (s.domObj.id = s.id); else if ("events" === i) s.events = JSON.parse(JSON.stringify(this.events)); else if ("animations" === i) s.animations = JSON.parse(JSON.stringify(this.animations)); else if ("object" == typeof this[i]) try {
s[i] = JSON.parse(JSON.stringify(this[i]));
} catch (e) {} else s[i] = this[i];
if (s.parent = e, this.elements) {
s.elements = [];
for (let i = 0; i < this.elements.length; i++) {
var l = this.elements[i];
let e, t;
l instanceof Client.Widget ? (t = n.get(l.mainObjects[0]?.domObj), (e = Client.eleMap[t?.id]) && e !== l && (e = e.parentWidget)) : (t = n.get(l.domObj), 
e = Client.eleMap[t?.id]), e?.cloned && e !== l || (e = l.clone(void 0, s, n)), 
s.elements.push(e), s instanceof Client.Widget && (e.parentWidget = s), e.parent = s;
}
}
return s.events?.length && s.attachEvents(s.events), s.animations?.length && s.attachAnimations(s.animations), 
s.addEventsListeners(), s;
}, Client.Element.prototype.addEventsListeners = function() {}, Client.Element.prototype.addTouchEvent = function(e, l, t, a, i) {
var r = a, d = (i && i.event && (r = i.event), e.get(r) || (t = new Hammer[t](i), 
e.add(t)), this.touchEventsList || (this.touchEventsList = []), this.touchEventsList.push(a), 
this);
e.on(r, function(e) {
if ("pinch" !== e.type || !e.srcEvent || "touchend" !== e.srcEvent.type && "pointerup" !== e.srcEvent.type || (e.isFinal = !0), 
"doubleTap" !== r || !d.domObj.disabled) {
var t, i, n = e.target.id;
if (n === d.domObj.id) t = n; else for (var s = e.target.parentNode; s; ) {
if (s.id === d.domObj.id) {
var o = Client.eleMap[n];
o && o.touchEventsList && -1 !== o.touchEventsList.indexOf(a) || (t = s.id);
break;
}
s = s.parentNode;
}
!t || Client.mainFrame.isClickPrevented() && !e.isFinal || (i = d.saveEvent(e.srcEvent), 
e = d.saveTouchEvent(e, i), Client.mainFrame.sendEvents([ {
obj: t,
id: l,
content: e
} ]));
}
});
}, Client.Element.prototype.appendChildObject = function(e, t) {
this.domObj.appendChild(t);
}, Client.Element.prototype.drawErrorPopup = function() {
var e, t = this.domObj.validationMessage || this.errorMessage;
t && 0 < t.length && (this.errorPopup = new Client.Dialog({
options: {
ref: {
id: this.id,
whisker: !0
}
}
}, this, this.view), this.errorPopup.domObj.classList.add("error-popup"), (e = document.createElement("div")).className = "error-popup-img", 
this.errorPopup.domObj.appendChild(e), (e = document.createElement("div")).innerText = t, 
this.errorPopup.domObj.appendChild(e), this.errorPopup.positionElement());
}, Client.Element.prototype.closePopup = function() {
this.errorPopup && (this.errorPopup.close(), this.errorPopup = null);
}, Client.Element.prototype.purgeMyProp = function(e) {
if (e.clid) for (var t in e.clid) e.clid[t] === Client.id && delete e[t];
}, Client.Element.prototype.saveEvent = function(e) {
if (void 0 !== e) {
if (!(e instanceof Event)) return e;
var t, i = {
srcEvent: e
};
for (t in e) {
var n = Client.Element.EventProperties[t];
if (1 === n && (i[t] = e[t]), 2 === n) {
for (var s = e[t]; s && !s.id; ) s = s.parentNode;
s && s !== window && (i[t] = s.id);
}
if (i.target && !Client.eleMap[i.target]) {
for (s = e.target; s && !Client.eleMap[s.id]; ) s = s.parentNode;
s && (i.targetElement = s.id);
}
}
return i;
}
}, Client.Element.prototype.saveTouchEvent = function(e, t) {
for (var i in t = t || {}, e) "srcEvent" !== i && "center" !== i && "preventDefault" !== i && "target" !== i && "changedPointers" !== i && "pointers" !== i && (t[i] = e[i]);
return t;
}, Client.Element.prototype.createChildren = function(e) {
if (e.children) {
this.elements = [];
for (var t, i = 0; i < e.children.length; i++) e.children[i].child ? this.insertBefore(e.children[i]) : (t = this.view.createElement(e.children[i], this, this.view), 
this.elements.push(t));
}
}, Client.Element.prototype.close = function(e, t) {
this.clearPendingFocus(), Client.Element.lastFocusedElement === this && delete Client.Element.lastFocusedElement, 
this.view?.activeElement === this && delete this.view.activeElement, this.parent?.onRemoveChildObject(this);
for (let e = 0; e < this.ne(); e++) this.elements[e].close(!1);
delete Client.eleMap[this.id];
var i = this.getRootObject();
e && i?.parentNode && (!1 !== this.animate && this.removeTrigger && t ? this.onAnimationTrigger(null, "remove") : !1 !== this.animate && this.exitTrigger ? (this.removeElement = !0, 
this.onAnimationTrigger(null, "exit")) : i.remove()), this.focusTimeout && (clearTimeout(this.focusTimeout), 
delete this.focusTimeout), this.tooltip && (this.tooltip.destroy(), delete this.tooltip), 
this.slipInstance && (this.slipInstance.detach(), delete this.slipInstance), this.hedown && this.enableKeyEvent({
type: "down",
enable: !1
}), this.heup && this.enableKeyEvent({
type: "up",
enable: !1
}), this.hepress && this.enableKeyEvent({
type: "press",
enable: !1
});
}, Client.Element.prototype.insertBefore = function(e) {
if (Client.mainFrame.loadClientRequirements(e.child)) {
var t, i;
if ("view" === e.child.type) t = new Client.View(e.child, this), e.id && (delete Client.eleMap[t.id], 
t.id = e.id), Client.eleMap[t.id] = t; else {
for (i = 0; i < this.ne(); i++) if (this.elements[i] && this.elements[i].id && this.elements[i].id === e.child.id) {
t = this.elements[i], this.elements.splice(i, 1);
break;
}
if (!t && (t = Client.eleMap[e.child.id])) {
for (t.parent.onRemoveChildObject(e.child), i = 0; i < t.parent.ne(); i++) if (t.parent.elements[i].id === e.child.id) {
t.parent.elements.splice(i, 1);
break;
}
this.appendChildObject(t, t.getRootObject()), t.parent = this;
}
t || (e.child.startHidden = !0, t = this.view.createElement(e.child, this, this.view));
}
if (void 0 === this.elements && (this.elements = []), e.sib) for (i = 0; i < this.ne(); i++) {
var n = this.elements[i];
if (n.id === e.sib) {
this.elements.splice(i, 0, t);
var s, o = (s = n instanceof Client.View ? n.elements[0] && n.elements[0].getRootObject ? n.elements[0].getRootObject() : n.domObj : t instanceof Client.IdfFrame ? n.mainObjects[0]?.domObj : n.getRootObject()).parentNode;
if (o) if (t instanceof Client.IdfFrame) o.insertBefore(t.mainObjects[0]?.domObj, s); else if (t instanceof Client.Element) o.insertBefore(t.getRootObject(), s); else for (var l = 0; l < t.ne(); l++) o.insertBefore(t.elements[l].getRootObject(), s);
this.onPositionChildObject(i);
break;
}
}
return (!e.sib || i >= this.ne()) && this.elements.push(t), Client.mainFrame.isEditing() && this.domObj && this.domObj.classList && this.domObj.classList.contains("emptycontainer") && this.domObj.classList.remove("emptycontainer"), 
t && t.startHidden && (delete t.startHidden, t.updateElement({
visible: !0
})), t;
}
}, Client.Element.prototype.removeChild = function(e) {
for (var t = e.id, i = 0; i < this.ne(); i++) if (this.elements[i].id === t) {
this.elements[i].close(!0, e.triggerAnimation), this.elements.splice(i, 1);
break;
}
}, Client.Element.prototype.updateListPosition = function() {
for (var e = this.parent; e; ) {
if (e.rowCount) {
e.moveToListPosition(this);
break;
}
e = e.parent;
}
}, Client.Element.prototype.setRownum = function(e) {
this.rownum = e, this.updateListPosition();
}, Client.Element.prototype.clearPendingFocus = function() {
Client.Element.lastFocusedElement?.focusTimeout && this.getRootObject().contains(Client.Element.lastFocusedElement.getRootObject()) && (clearTimeout(Client.Element.lastFocusedElement.focusTimeout), 
delete Client.Element.lastFocusedElement.focusTimeout, delete Client.Element.lastFocusedElement);
}, Client.Element.prototype.hasFocus = function(e) {
return !!this.getRootObject().contains(document.activeElement) || !(!e || !Client.Element.lastFocusedElement?.focusTimeout) && this.getRootObject().contains(Client.Element.lastFocusedElement.getRootObject());
}, Client.Element.prototype.focus = function(i) {
if (!(this.focusTimeout || i?.retry && Client.Element.lastFocusedElement && Client.Element.lastFocusedElement !== this)) {
if ((Client.Element.lastFocusedElement = this).domObj) {
let e = !0;
var n = new Map(), s = document.getElementById("app-ui");
let t = this.domObj;
for (;t && t !== s && t !== document; ) {
var o, l = t.style;
t.parentNode && "none" !== l.display ? i?.skipAnimationCheck || (o = (window.getComputedStyle ? getComputedStyle(t) : t.currentStyle).transform, 
l.transform && n.set(t, o)) : e = !1, t = t.parentNode;
}
if (e && n.size) if (this.focusBlockedTransform) if (n.size === this.focusBlockedTransform.size) {
for (var [ a, r ] of n) if (!this.focusBlockedTransform.has(a) || this.focusBlockedTransform.get(a) !== r) {
e = !1;
break;
}
} else e = !1; else e = !1;
if (this.focusBlockedTransform = n, e) {
delete this.focusBlockedTransform, delete this.nFocusTry;
let e = this.getFocusableObj();
var d = () => {
if (document.activeElement !== e) {
if (document.activeElement?.blur(), e.focus({
preventScroll: i?.skipScroll
}), document.activeElement !== e) return;
i?.skipScroll || e.scrollIntoView({
block: "nearest",
inline: "nearest"
});
}
return this.isSelectable() && void 0 !== i?.selectionStart && void 0 !== i?.selectionEnd && (e.selectionStart = i.selectionStart, 
e.selectionEnd = i.selectionEnd), Client.lastActiveElement = e, !0;
};
return d() || setTimeout(d, 0), void (this.focusTimeout && (clearTimeout(this.focusTimeout), 
delete this.focusTimeout));
}
}
this.focusTimeout || (this.nFocusTry ? this.nFocusTry++ : this.nFocusTry = 0, 15 < this.nFocusTry ? delete this.nFocusTry : this.focusTimeout = setTimeout(() => {
delete this.focusTimeout, i = Object.assign({
retry: !0
}, i), this.focus(i);
}, 100));
}
}, Client.Element.prototype.getFocusableObj = function() {
let t = this.domObj;
if (!Client.Utils.isNodeEditable(t)) {
let e = t.getElementsByTagName("INPUT");
(e = (e = (e = (e = e.length ? e : t.getElementsByTagName("TEXTAREA")).length ? e : t.querySelectorAll("span[contenteditable=true]")).length ? e : t.querySelectorAll("button.item-cover")).length ? e : t.querySelectorAll("div.range-knob-handle")).length && (t = e[0]);
}
return t;
}, Client.Element.prototype.blur = function() {
this.domObj && this.domObj.blur(), this.focusTimeout && (clearTimeout(this.focusTimeout), 
delete this.focusTimeout, delete this.focusBlockedTransition, delete this.nFocusTry);
}, Client.Element.prototype.click = function() {
this.domObj && this.domObj.click();
}, Client.Element.prototype.sendProp = function() {
for (var e = [], t = 0; t < arguments.length; t++) {
var i = this[arguments[t]];
void 0 === i && (i = this.domObj[arguments[t]]), e.push({
obj: this.id,
id: "chgProp",
content: {
name: arguments[t],
value: i,
clid: Client.id
}
});
}
return e;
}, Client.Element.prototype.onResize = function(e) {
if (this.elements) for (var t = 0; t < this.ne(); t++) this.elements[t].onResize(e);
void 0 !== this.rownum && this.updateListPosition();
}, Client.Element.prototype.activate = function() {
this.domObj.focus(), ("button" === this.domObj.type || -1 < this.domObj.tagName.indexOf("BUTTON")) && this.domObj.click();
}, Client.Element.prototype.findElementToActivate = function(e, t) {
var i;
if (!(t = t || {})[this.id] && !(t[this.id] = !0) !== this.visible && !1 !== this.enabled) {
if (this.cmdKey === e) i = this; else if (this.elements) for (var n = 0; n < this.ne() && !(i = this.elements[n].findElementToActivate(e, t)); n++);
return i;
}
}, Client.Element.prototype.handleKeyDown = function(e) {
var t, i = !1;
return Client.Utils.isNodeEditable(this.domObj) && (e.ctrlKey || e.metaKey ? -1 < [ "A", "Y", "Z", "X", "C", "V" ].indexOf(String.fromCharCode(e.keyCode)) && (i = !0) : 37 !== e.keyCode && 39 !== e.keyCode || !(0 < (t = Client.Utils.getCursorPos(this.domObj)) && t < this.domObj.value.length || 0 === t && 37 !== e.keyCode || t === this.domObj.value.length && 39 !== e.keyCode) || (i = !0)), 
i;
}, Client.Element.prototype.getFirstFocusableElement = function() {
for (var e, t = 0; t < this.ne(); t++) if (Client.Utils.isNodeEditable(this.elements[t].domObj)) {
e = this.elements[t];
break;
}
return e;
}, Client.Element.prototype.getLastFocusableElement = function() {
for (var e, t = this.ne() - 1; 0 <= t; t--) if (Client.Utils.isNodeEditable(this.elements[t].domObj)) {
e = this.elements[t];
break;
}
return e;
}, Client.Element.prototype.getPrevFocusableElement = function(e) {
for (var t, i = 0; i < this.ne() && this.elements[i] !== e; i++) t = this.elements[i];
return t;
}, Client.Element.prototype.getNextFocusableElement = function(e) {
for (var t, i = 0; i < this.ne(); i++) if (this.elements[i] === e) {
i + 1 < this.ne() && (t = this.elements[i + 1]);
break;
}
return t;
}, Client.Element.prototype.setError = function(t, e) {
if (!t && this.errorPopup && this.errorPopup.close(), this.errorMessage !== t && (this.errorMessage = t, 
this.errorMessage ? this.domObj.classList.add("element-invalid") : this.domObj.classList.remove("element-invalid")), 
e) if (t) {
let e = (void 0 !== this.domObj.value ? this.domObj : this).value;
("date" === this.domObj.type || "datetime-local" === this.domObj.type) && !this.domObj.value && this.domObj.validationMessage && this.domObj.validity && this.domObj.validity.badInput && (e = "badinput"), 
this.srvError = {
message: t,
value: e
};
} else delete this.srvError;
}, Client.Element.prototype.checkError = function(t) {
if (this.srvError && this.domObj.value === this.srvError.value) this.setError(this.srvError.message); else {
let e = t ? this.domObj.validationMessage : "";
!t || "date" !== this.domObj.type && "datetime-local" !== this.domObj.type || document.activeElement !== this.domObj || this.domObj.value || (e = ""), 
this.setError(e, t);
}
}, Client.Element.prototype.playAnimation = function(e) {
this.currentAnimation && this.currentAnimation.stop();
var t = e;
"string" == typeof e && (t = JSON.parse(e)), this.currentAnimation = new Client.ClientAnimation(t, this), 
this.currentAnimation.play(!1);
}, Client.Element.prototype.revertAnimation = function(e) {
var t;
this.currentAnimation && this.currentAnimation.stop(), e && "" !== e && ("string" == typeof (t = e) && (t = JSON.parse(e)), 
this.currentAnimation = new Client.ClientAnimation(t, this)), this.currentAnimation && this.currentAnimation.play(!0);
}, Client.Element.prototype.pauseAnimation = function() {
this.currentAnimation && this.currentAnimation.pause();
}, Client.Element.prototype.stopAnimation = function(e) {
this.currentAnimation && this.currentAnimation.stop(e);
}, Client.Element.prototype.resumeAnimation = function() {
this.currentAnimation && this.currentAnimation.resume();
}, Client.Element.prototype.resetAnimation = function() {
this.currentAnimation && this.currentAnimation.reset();
}, Client.Element.prototype.onEndAnimation = function(e, t, i, n) {
!this.sendEndAnimation || void 0 !== Client.clientType && "owner" !== Client.clientType || (e = [ {
obj: this.id,
id: "onEndAnimation",
content: {
segment: e,
final: t,
stopped: i,
id: void 0 === n ? "" : n
}
} ], Client.mainFrame.sendEvents(e));
}, Client.Element.prototype.attachAnimations = function(e) {
this.animations || (this.animations = []);
for (var t = 0; t < e.length; t++) {
var i, n = e[t], s = ("string" == typeof n && (n = JSON.parse(n)), this);
switch (n.trigger) {
case "hover":
this.overTrigger || this.domObj.addEventListener("mouseover", function(e) {
s.onAnimationTrigger(e, "mouseover");
}), this.outTrigger || this.domObj.addEventListener("mouseout", function(e) {
s.onAnimationTrigger(e, "mouseout");
}), this.overTrigger = !0, this.outTrigger = !0;
break;

case "active":
this.downTrigger || (Client.mainFrame.device.isMobile ? this.domObj.addEventListener("touchstart", function(e) {
var t, i, n;
Client.mainFrame.isClickPrevented() || (t = e.targetTouches && 0 < e.targetTouches.length ? e.targetTouches[0].clientX : -1, 
i = e.targetTouches && 0 < e.targetTouches.length ? e.targetTouches[0].clientY : -1, 
-1 !== t && -1 !== i && s.domObj.getBoundingClientRect && (n = s.domObj.getBoundingClientRect(), 
e.offsetX = t - n.left, e.offsetY = i - n.top), s.onAnimationTrigger(e, "mousedown"));
}, {
passive: !0
}) : this.domObj.addEventListener("mousedown", function(e) {
Client.mainFrame.isClickPrevented() || s.onAnimationTrigger(e, "mousedown");
}, {
passive: !0
})), this.upTrigger || "ripple" === n.type || (Client.mainFrame.device.isMobile ? this.domObj.addEventListener("touchend", function(e) {
Client.mainFrame.isClickPrevented() || s.onAnimationTrigger(e, "mouseup");
}, {
passive: !0
}) : this.domObj.addEventListener("mouseup", function(e) {
Client.mainFrame.isClickPrevented() || s.onAnimationTrigger(e, "mouseup");
}, {
passive: !0
})), this.downTrigger = !0, this.upTrigger = !0;
break;

case "change":
this.addChangeTrigger(n);
break;

case "scroll":
this.scrollTrigger || this.domObj.addEventListener("scroll", function(e) {
s.onAnimationTrigger(e, "scroll");
}, {
passive: !0
}), this.scrollTrigger = !0;
break;

case "enter":
this.enterTrigger = !0, n.autoreverse && (this.exitTrigger = !0);
break;

case "exit":
this.exitTrigger = !0;
break;

case "remove":
this.removeTrigger = !0;
break;

case "changeprop":
this.changePropTrigger = !0, this.changePropTriggerList || (this.changePropTriggerList = []), 
this.changePropTriggerList.push(n.prop);
break;

case "click":
this.clickTrigger || (Client.mainFrame.device.isMobile && Client.mainFrame.hammerEnabled ? ((i = Client.mainFrame.getHammerManager()).get("tap") || i.add(new Hammer.Tap({
threshold: 20,
time: 500
})), i.on("tap", function(e) {
var t, i, n;
!Client.Utils.isMyParent(e.target, s.id) && e.target !== s.getRootObject() || (i = t = 0, 
e.pointers && 0 < e.pointers.length && (n = s.getRootObject().getBoundingClientRect(), 
e.pointers[0].clientX > n.left && (t = e.pointers[0].clientX - n.left), e.pointers[0].clientY > n.top) && (i = e.pointers[0].clientY - n.top), 
e.offsetX = t, e.offsetY = i, Client.mainFrame.isClickPrevented()) || s.onAnimationTrigger(e, "click");
})) : this.domObj.addEventListener("click", function(e) {
Client.mainFrame.isClickPrevented() || s.onAnimationTrigger(e, "click");
})), this.domObj.setAttribute("click-delay", 40), this.clickTrigger = !0;
break;

case "dblclick":
this.dblClickTrigger || (Client.mainFrame.device.isMobile && Client.mainFrame.hammerEnabled ? ((i = Client.mainFrame.getHammerManager()).get("press") || i.add(new Hammer.Press()), 
i.on("press", function(e) {
var t, i, n;
!Client.Utils.isMyParent(e.target, s.id) && e.target !== s.getRootObject() || (i = t = 0, 
e.pointers && 0 < e.pointers.length && (n = s.getRootObject().getBoundingClientRect(), 
e.pointers[0].clientX > n.left && (t = e.pointers[0].clientX - n.left), e.pointers[0].clientY > n.top) && (i = e.pointers[0].clientY - n.top), 
e.offsetX = t, e.offsetY = i, Client.mainFrame.isClickPrevented()) || s.onAnimationTrigger(e, "dblclick");
})) : this.domObj.addEventListener("dblclick", function(e) {
Client.mainFrame.isClickPrevented() || s.onAnimationTrigger(e, "dblclick");
})), this.dblClickTrigger = !0;
break;

case "animation":
this.domObj.setAttribute(n.prop, "handle"), this.domObj.addEventListener("animationstart", function(e) {
if ("handle" === e.target.getAttribute(e.animationName) && "collapseElement" === e.animationName) {
if ("0px" === e.target.style.maxHeight) return;
e.target.style.transition = "", e.target.style.maxHeight = e.target.offsetHeight + "px";
var t = void 0 !== n.duration ? n.duration : 250;
e.target.style.transition = `max-height ${t}ms`, e.target.offsetHeight;
e.target.style.maxHeight = "0px";
}
var i;
"handle" === e.target.getAttribute(e.animationName) && "expandElement" === e.animationName && "0px" === e.target.style.maxHeight && (e.target.style.transition = "", 
e.target.style.maxHeight = "", t = this?.parentWidget?.maxHeight ? this.parentWidget.maxHeight : e.target.offsetHeight, 
e.target.style.maxHeight = "0px", i = void 0 !== n.duration ? n.duration : 250, 
e.target.style.transition = `max-height ${i}ms`, e.target.offsetHeight, e.target.style.maxHeight = t + "px");
}.bind(this)), this.domObj.addEventListener("animationend", function(e) {
let t = "";
t = this.parentWidget && this.parentWidget.isLeaf && !this.parentWidget.isLeaf() ? this?.parentWidget?.hasMaxHeight() ? this.parentWidget.getMaxHeight() + "px" : "" : this?.parentWidget?.maxHeight ? this.parentWidget.maxHeight + "px" : "", 
"handle" === e.target.getAttribute(e.animationName) && "collapseElement" === e.animationName && (e.target.style.transition = ""), 
"handle" === e.target.getAttribute(e.animationName) && "expandElement" === e.animationName && e.target.style.maxHeight !== t && this.domObj === e.target && (e.target.style.transition = "", 
e.target.style.maxHeight = t);
}.bind(this));
}
this.animations.push(n);
}
}, Client.Element.prototype.addChangeTrigger = function(e) {
var t;
this.changeTrigger || ((t = this).domObj.addEventListener("change", function(e) {
t.onAnimationTrigger(e, "change");
}), this.changeTrigger = !0);
}, Client.Element.prototype.onAnimationTrigger = function(e, t, i) {
if (!1 !== this.animate) {
var n, s = t;
switch (t) {
case "mouseover":
case "mouseout":
s = "hover";
break;

case "mousedown":
case "mouseup":
s = "active";
}
for (var o = !1, l = !1, a = 0; a < this.animations.length; a++) if (this.animations[a].trigger === s || "exit" === s && "enter" === this.animations[a].trigger && !0 === this.animations[a].autoreverse) {
var r, d, h, c, p, u, f, m = this.animations[a], C = this;
if (void 0 === m.target || "this" === m.target || (C = Client.eleMap[m.target])) {
switch ("enter" === t && C === this && (o = !0), "exit" === t && C === this && (l = !0), 
m.type) {
case "slide":
m.movelength ? "exit" === t || "mouseout" === t || "mouseup" === t ? ("exit" === t && "enter" === m.trigger && !0 === m.autoreverse && (m.startPosition = d = m.movelength, 
m.movelength = 0), r = Client.ClientAnimation.translate(m), "exit" === t && "enter" === m.trigger && !0 === m.autoreverse && (m.startPosition = 0, 
m.movelength = d)) : r = Client.ClientAnimation.translate(m) : r = "exit" === t || "mouseout" === t || "mouseup" === t ? Client.ClientAnimation.slideOut(m, C) : Client.ClientAnimation.slideIn(m, C);
break;

case "fade":
"exit" === t ? (m.from || (m.from = 1), m.to || (m.to = 0)) : "enter" === t && (m.from || (m.from = 0), 
m.to || (m.to = 1)), r = Client.ClientAnimation.fade(m, C), ("mouseout" === t || "mouseup" === t || "exit" === t && "enter" === m.trigger && !0 === m.autoreverse || "enter" === t && "exit" === m.trigger && !0 === m.autoreverse) && (n = r.segments[0].from, 
r.segments[0].from = r.segments[0].to, r.segments[0].to = n);
break;

case "zoom":
"exit" === t || "remove" === t ? (m.from || (m.from = 1), m.to || (m.to = 0)) : "enter" === t && (m.from || (m.from = 0), 
m.to || (m.to = 1)), r = Client.ClientAnimation.zoom(m, C), "mouseout" !== t && "mouseup" !== t || (n = r.segments[0].from, 
r.segments[0].from = r.segments[0].to, r.segments[0].to = n);
break;

case "flip":
"exit" === t ? (m.from = 0, m.to = 180) : "enter" === t && (m.from = 180, m.to = 0), 
r = Client.ClientAnimation.flip(m, C), "mouseout" !== t && "mouseup" !== t || (n = r.segments[0].from, 
r.segments[0].from = r.segments[0].to, r.segments[0].to = n);
break;

case "expand":
"exit" === t || "remove" === t ? (m.from || (m.from = "100%"), m.to || (m.to = "0px"), 
C.oldExpandedHeigh = C.domObj.style.height, C.oldExpandedWidth = C.domObj.style.width) : "enter" === t && (m.from || (m.from = "0px"), 
m.to || (m.to = "100%")), "exit" === t && "enter" === m.trigger && !0 === m.autoreverse && (h = m.to, 
m.to = m.from, m.from = h), r = Client.ClientAnimation.expand(m, C), "exit" === t && "enter" === m.trigger && !0 === m.autoreverse && (h = m.to, 
m.to = m.from, m.from = h), "enter" === t && (delete C.oldExpandedHeigh, delete C.oldExpandedWidth), 
"mouseout" !== t && "mouseup" !== t || (n = r.segments[0].from, r.segments[0].from = r.segments[0].to, 
r.segments[0].to = n);
break;

case "ripple":
"mouseup" !== t && "mouseout" !== t && ("mousedown" !== t && "click" !== t && "dblclick" !== t || (Client.mainFrame.device.isMobile && Client.mainFrame.hammerEnabled ? (m.posX = e.offsetX, 
m.posY = e.offsetY) : (c = this.domObj.getBoundingClientRect(), m.posX = e.clientX - c.left, 
m.posY = e.clientY - c.top)), C.executeRipple) && C.executeRipple(m);
break;

case "change":
r = Client.ClientAnimation.change(m, C), "mouseout" !== t && "mouseup" !== t || (n = r.segments[0].from, 
r.segments[0].from = r.segments[0].to, r.segments[0].to = n);
break;

case "custom":
r = Client.ClientAnimation.custom(m, C), "mouseout" !== t && "mouseup" !== t || (n = r.segments[0].from, 
r.segments[0].from = r.segments[0].to, r.segments[0].to = n);
break;

case "class":
window.setTimeout(function() {
var e;
"exit" === t && "enter" === m.trigger && !0 === m.autoreverse && (e = m.addclasses, 
m.addclasses = m.removeclasses, m.removeclasses = e), C.domObj.classList && C.domObj.classList.add && m.addclasses && C.domObj.classList.add(m.addclasses), 
C.domObj.classList && C.domObj.classList.remove && m.removeclasses && C.domObj.classList.remove(m.removeclasses), 
"exit" === t && "enter" === m.trigger && !0 === m.autoreverse && (e = m.addclasses, 
m.addclasses = m.removeclasses, m.removeclasses = e), C === this && "exit" === t && (C.domObj.style.display = "none"), 
C === this && "enter" === t && (C.domObj.style.display = "");
}, m.delay), m.restore && 0 < m.duration && window.setTimeout(function() {
var e;
"exit" === t && "enter" === m.trigger && !0 === m.autoreverse && (e = m.addclasses, 
m.addclasses = m.removeclasses, m.removeclasses = e), C.domObj.classList && C.domObj.classList.remove && m.addclasses && C.domObj.classList.remove(m.addclasses), 
C.domObj.classList && C.domObj.classList.add && m.removeclasses && C.domObj.classList.add(m.removeclasses), 
"exit" === t && "enter" === m.trigger && !0 === m.autoreverse && (e = m.addclasses, 
m.addclasses = m.removeclasses, m.removeclasses = e);
}, m.delay + m.duration);
}
r && (p = "style_transform", "exit" === t && C === this && (r.finalState = {
style_display: "none",
style_opacity: ""
}, m.restore && (r.finalState[p] = ""), "expand" === m.type && (u = C.getRootObject(), 
"vertical" === m.expanddirection ? (r.finalState.style_height = u.getAttribute("originalH"), 
r.finalState.style_minHeight = u.style.minHeight || "") : (r.finalState.style_width = u.getAttribute("originalW"), 
r.finalState.style_minWidth = u.style.minWidth || "")), "expand" === m.type && (r.startingState = "vertical" === m.expanddirection ? {
style_minHeight: "0px"
} : {
style_minWidth: "0px"
}), C.oldDisplay = C.domObj.style.display), "enter" === t && C === this && (r.startingState = {
style_display: this.oldDisplay
}, m.restore && (r.finalState = {
style_opacity: ""
}, r.finalState[p] = ""), u = C.getRootObject(), m.restore && "expand" === m.type && ("vertical" === m.expanddirection ? r.finalState.style_height = u.getAttribute("originalH") : r.finalState.style_width = u.getAttribute("originalW")), 
delete C.oldDisplay, "expand" === m.type) && (r.finalState || (r.finalState = {}), 
"vertical" === m.expanddirection ? (r.startingState.style_minHeight = "0px", r.finalState.style_height = u.getAttribute("originalH"), 
r.finalState.style_minHeight = u.style.minHeight || "") : (r.startingState.style_minWidth = "0px", 
r.finalState.style_width = u.getAttribute("originalW"), r.finalState.style_minWidth = u.style.minWidth || "")), 
"remove" !== t && !this.removeElement || (f = C, r.endcallback = function() {
f.domObj.parentNode.removeChild(f.domObj);
}), r.id = m.id, new Client.ClientAnimation(r, C).play(!1));
}
}
"enter" !== t || o || (this.domObj.style.display = void 0 === this.oldDisplay ? "" : this.oldDisplay, 
delete this.oldDisplay), "exit" !== t || l || (this.oldDisplay = this.domObj.style.display, 
this.domObj.style.display = "none");
}
}, Client.Element.prototype.executeRipple = function(t) {
var e = t.easing || "easeOutQuad", i = t.duration || 400, n = t.radius || 150, s = t.color || "rgba(255,255,255,0.3)", o = t.posX || "50%", l = t.posY || "50%";
"ease-out" === (e = "ease-in-out" === (e = "ease-in" === (e = "ease" === e ? "easeOutQuad" : e) ? "easeFrom" : e) ? "easeFrom" : e) && (e = "easeTo"), 
this.rippleAnimation && (this.rippleAnimation.stop(), this.rippleAnimation = null), 
this.rippleElement && (this.rippleElement.parentNode.removeChild(this.rippleElement), 
this.rippleElement = null), this.oldRipplePos && (this.domObj.style.position = this.oldRipplePos, 
delete this.oldRipplePos), this.rippleElement = document.createElement("SVG"), this.domObj.firstChild ? this.domObj.insertBefore(this.rippleElement, this.domObj.firstChild) : this.domObj.appendChild(this.rippleElement), 
this.rippleElement.outerHTML = "<SVG width='100%' height='100%' class='animation-ripple-container' ><CIRCLE cx='" + o + "' cy='" + l + "' r='0%' fill='" + s + "'></CIRCLE></SVG>";
for (var a = 0; a < this.domObj.childNodes.length; a++) if ("svg" === this.domObj.childNodes.item(a).tagName && "animation-ripple-container" === this.domObj.childNodes.item(a).getAttribute("class")) {
this.rippleElement = this.domObj.childNodes.item(a);
break;
}
var r = this.rippleElement.firstChild, o = "static";
try {
o = window.getComputedStyle(this.domObj, null).position;
} catch (e) {}
"static" === o && (this.oldRipplePos = this.domObj.style.position, this.domObj.style.position = "relative");
var d = this, l = (this.rippleAnimation = new Tweenable(), {
from: {
r: "0%",
o: 1
},
to: {
r: n,
o: 0
},
duration: i,
easing: e,
step: function(e) {
r.setAttribute("r", e.r), d.rippleElement.style.opacity = e.o;
},
finish: function(e) {
d.rippleAnimation && (d.rippleAnimation = null), d.rippleElement && (d.rippleElement.parentNode.removeChild(d.rippleElement), 
d.rippleElement = null), d.oldRipplePos && (d.domObj.style.position = d.oldRipplePos, 
delete d.oldRipplePos), d.onEndAnimation(1, !0, !1, t.id || "ripple");
}
});
this.rippleAnimation.tween(l);
}, Client.Element.prototype.getRootObject = function() {
return this.domObj;
}, Client.Element.prototype.changeTag = function(e) {
if (!this.domObj || e.toLowerCase() !== this.domObj.tagName.toLowerCase()) {
var t = this.domObj;
for (this.domObj = document.createElement(e); t && t.firstChild; ) this.domObj.appendChild(t.firstChild);
t.className && (this.domObj.className = t.className);
e = t.getAttribute("style");
e && this.domObj.setAttribute("style", e), this.domObj.id = t.id, t.parentNode && t.parentNode.replaceChild(this.domObj, t);
}
}, Client.Element.prototype.getBoundingClientRect = function(e) {
var t = this.getRootObject().getBoundingClientRect(), t = {
left: t.left,
top: t.top,
right: t.right,
bottom: t.bottom,
width: t.width,
height: t.height
}, t = [ {
obj: this.id,
id: "cb",
content: {
res: t,
cbId: e
}
} ];
Client.mainFrame.sendEvents(t);
}, Client.Element.prototype.onRemoveChildObject = function(e) {}, Client.Element.prototype.onPositionChildObject = function(e) {}, 
Client.Element.prototype.addTooltip = function(e) {
var t;
this.tooltip && this.tooltip.destroy(), e && (t = {
inlinePositioning: !0,
duration: 100,
delay: [ 750, 100 ]
}, Object.assign(t, Client.mainFrame.theme.tippy), "string" == typeof e ? t.content = e : "object" == typeof e && (e.text ? (t.content = e.text, 
t.placement = e.position || "auto", "false" == e.animate && (t.duration = 0)) : Object.assign(t, e)), 
this.tooltip = tippy(this.domObj, t));
}, Client.Element.prototype.ne = function() {
return this.elements ? this.elements.length : 0;
}, Client.Element.prototype.getElements = function(e) {
var t = [];
if ((!e || this instanceof e) && t.push(this), this.elements) for (var i = 0; i < this.elements.length; i++) for (var n = this.elements[i].getElements(e), s = 0; s < n.length; s++) t.push(n[s]);
return t;
}, Client.Element.prototype.isVisible = function() {
let e = !(!1 === this.visible);
return !!(e = !e && this.currentAnimation?.status === Client.ClientAnimation.statusMap.ONGOING && "none" !== this.getRootObject().style.display || e) && (!this.parent || Client.Element.prototype.isVisible.call(this.parent));
}, Client.Element.prototype.visibilityChanged = function(e) {
if (Client.mainFrame.device.fullscreen && e && this.handleFullscreen(), this.elements) for (var t = 0; t < this.elements.length; t++) this.elements[t].visibilityChanged(e);
}, Client.Element.prototype.getTestProperties = function() {
return [ "innerText", "innerHTML", "value", "src", "visible", "className", "disabled", "enabled", "style" ];
}, Client.Element.prototype.getDefaultProp = function() {
var e;
return e = this.domObj ? "INPUT" === this.domObj.tagName || 0 < this.domObj.getElementsByTagName("INPUT").length ? "value" : "IMG" === this.domObj.tagName || 0 < this.domObj.getElementsByTagName("IMG").length ? "src" : "innerText" : e;
}, Client.Element.prototype.setProperty = function(e) {
var t = (e = e || {}).events || [], i = e.domObj || this.domObj, n = e.propName || "", e = e.propValue || "";
if (i && n) {
if (i["on" + n]) t.push(n); else {
if (-1 === [ "value", "checked" ].indexOf(n)) return;
var s = {};
s[n] = e, this.updateElement(s);
}
for (var o, l = 0; l < t.length; l++) o = new Event(t[l], {
bubbles: !0,
cancelable: !0
}), i.dispatchEvent(o);
}
}, Client.Element.prototype.handleRegisteredEvent = function(e) {}, Client.Element.prototype.setClassName = function(e) {
this.domObj.className = e;
}, Client.Element.prototype.setAttribute = function(e, t) {
var i, n = e.split(" "), s = [ this.domObj ];
1 < n.length && (e = n[n.length - 1], "HTML" === (i = n[0]) || "BODY" === i ? s = document.getElementsByTagName(i) : i.startsWith("#") ? s = [ document.getElementById(i.substring(1)) ] : (s = this.domObj.getElementsByTagName(n[0])).length || (s = this.domObj.getElementsByClassName(n[0])));
for (var o = 0; o < s.length; o++) {
var l = s[o];
l && (null == t ? l.removeAttribute(e) : "class+" === e ? l.classList.add(t) : "style+" === e ? l.style.cssText += t : l.setAttribute(e, t));
}
}, Client.Element.prototype.handleCustomNavigation = function() {
return !this.parentWidget && (void 0 !== this.customNavigation ? this.customNavigation : !this.parent || !this.parent.handleCustomNavigation || (this.customNavigation = this.parent.handleCustomNavigation(), 
this.customNavigation));
}, Client.Element.prototype.enableKeyEvent = function(s) {
var e;
if (e = "self" === (s = s || {}).target || void 0 === s.target ? this.domObj : "app" === s.target ? document.getElementById("app-ui") : "body" === s.target ? document.body : document.getElementById(s.target)) {
s.keys && (s.keys = s.keys.split(","));
var t = function(e) {
var t, i = !0, n = Client.Utils.isNodeEditable(document.activeElement);
if (!s.keys || ("," === (t = e.key) && (t = "Comma"), (e.ctrlKey || e.metaKey) && (t = "^" + t), 
e.shiftKey && (t = "|" + t), i = s.keys.includes(t = e.altKey ? "/" + t : t)) || s.keys.includes("@" + t) && !n && (i = !0), 
(i = 1 != s.inputs && n ? !1 : i) && ((t = this.saveEvent(e)).type = o, t.input = n, 
Client.mainFrame.sendEvents([ {
obj: this.id,
id: "onKey",
content: t
} ])), i && s.cancel) return e.preventDefault(), e.stopPropagation(), !1;
}.bind(this), o = "key" + (s.type || "press");
if (0 == s.enable) {
if (this["he" + o]) for (var i = 0; i < this["he" + o].length; i++) e.removeEventListener(o, this["he" + o][i], {
capture: !0
}), e.removeEventListener(o, this["he" + o][i], {
capture: !1
});
delete this["he" + o];
} else e.addEventListener(o, t, {
capture: s.capture
}), this["he" + o] || (this["he" + o] = []), this["he" + o].push(t);
}
}, Client.Element.prototype.setMask = function(e, t) {
this.mask = e, this.maskType = this.getMaskType(t), ">" === this.mask ? this.domObj.style.textTransform = "uppercase" : "<" === this.mask ? this.domObj.style.textTransform = "lowercase" : this.mask || (this.domObj.style.textTransform = "");
}, Client.Element.prototype.getMaskType = function() {
return "A";
}, Client.Element.prototype.handleMask = function(e) {
if (Client.Utils.isNodeEditable(e.target)) {
var t = this.parentWidget && this.parentWidget instanceof Client.IdfControl, i = ">" === this.mask || "<" === this.mask;
if (this.mask && !i && (!t || this.parentWidget.enabled)) switch (e.type) {
case "keydown":
hk(e) || e.preventDefault();
break;

case "focus":
e.target.disabled || mc(this.mask, this.maskType, e);
break;

case "blur":
e.target.disabled || (umc(e), e.target.getAttribute("idmaskoldvalue") !== e.target.value && e.target.onchange(e), 
e.target.setAttribute("idmaskoldvalue", e.target.value));
}
}
}, Client.Element.prototype.applyStyleProp = function(n, e, t) {
this.appliedStyle || (this.appliedStyle = {}), this.appliedStyle[e] || (this.appliedStyle[e] = {});
var s = this.appliedStyle[e];
if (Client.mainFrame?.isEditing() && s) {
let i = Object.keys(s);
for (let t = 0; t < i.length; t++) n.forEach(e => {
e && e.getRootObject() && (e.getRootObject().style[i[t]] = "");
}), delete s[i[t]];
}
if ("" !== t) {
if ("string" == typeof t) {
try {
t = JSON.parse(t);
} catch (e) {
t = {};
}
var i = Object.keys(t);
for (let e = 0; e < i.length; e++) {
var o = i[e], l = t[o];
Client.Utils.requireAbs(o) && (l = Client.Utils.absStyle(l)), n.forEach(e => {
e && e.getRootObject() && (e.getRootObject().style[o] = l);
}), s[o] = l;
}
}
} else {
let i = Object.keys(s);
for (let t = 0; t < i.length; t++) n.forEach(e => {
e && e.getRootObject() && (e.getRootObject().style[i[t]] = "");
}), delete s[i[t]];
}
}, Client.Element.isSelectable = function(e) {
return "number" == typeof e.selectionStart;
}, Client.Element.prototype.isSelectable = function() {
return Client.Element.isSelectable(this.domObj);
}, Client.Element.simulateInput = function(e) {
let {
domObj: t,
showHTML: i,
fixEmpty: n
} = e, s = () => i ? t.innerHtml : t.textContent, o = e => {
i ? t.innerHtml = e : t.textContent = e;
}, l = () => {
if (s() === Client.Element.fakeEmptyValue) return o(""), !0;
};
e = () => {
s() || o(Client.Element.fakeEmptyValue);
};
Object.defineProperty(t, "value", {
get: function() {
var e = s();
return e === Client.Element.fakeEmptyValue ? "" : e;
},
set: function(e) {
o(e);
}
}), Object.defineProperty(t, "selectionStart", {
get: function() {
let e = Client.Element.getSelection(t).start;
return e = 1 === e && s() === Client.Element.fakeEmptyValue ? 0 : e;
},
set: function(e) {
t.selStart = e;
}
}), Object.defineProperty(t, "selectionEnd", {
get: function() {
let e = Client.Element.getSelection(t).end;
return e = 1 === e && s() === Client.Element.fakeEmptyValue ? 0 : e;
},
set: function(e) {
Client.Element.setSelection(t, t.selStart, e);
}
}), t.select = function() {}, t.onchange = function() {}, n && (t.addEventListener("beforeinput", e => {
e.data && l() && "ios" === Client.mainFrame.device.operatingSystem && (e.preventDefault(), 
o(e.data), t.selectionStart = 1 / 0, t.selectionEnd = 1 / 0);
}), t.addEventListener("input", e), t.addEventListener("focus", e), t.addEventListener("blur", l));
}, Client.Element.getSelection = function(e) {
e = e.childNodes;
let i = 0, n = 0;
var s = document.getSelection();
if (s.rangeCount) {
var o, l = s.getRangeAt(0);
let t = !1;
for (o of e) {
let e = 0;
switch (o.nodeName) {
case "#text":
e = o.nodeValue === Client.Element.fakeEmptyValue ? 0 : o.length;
break;

case "BR":
e = 1;
}
if (t || (l.startContainer === o ? (t = !0, i += l.startOffset) : i += e), t && l.endContainer === o) {
n += l.endOffset;
break;
}
n += e;
}
}
return {
start: i,
end: n
};
}, Client.Element.setSelection = function(e, l, a) {
var r = e.childNodes;
if (-1 !== l && -1 !== a && 0 !== r.length) {
var d, e = e.innerText.length, e = (e < l && (l = e), e < a && (a = e), document.createRange());
let t, i, n, s, o = 0;
for (d of r) {
let e;
switch (d.nodeName) {
case "#text":
d.nodeValue === Client.Element.fakeEmptyValue ? a = l = e = 0 : e = d.length;
break;

case "BR":
e = 1;
}
if (l >= o && l <= o + e && (t = d, n = l - o), a >= o && (i = d, s = a - o), a < (o += e)) break;
}
e.setStart(t, n), e.setEnd(i, Math.min(i.length, s));
r = document.getSelection();
r.removeAllRanges(), r.addRange(e);
}
}, Client.Element.prototype.handleFullscreen = function() {
if (Client[this.class]?.needsFullscreenPadding) {
var t = this.getRootObject(), i = {
top: 0,
bottom: 0,
left: 0,
right: 0
}, n = document.body.getBoundingClientRect();
let e = t;
for (;i.top += e.offsetTop, i.left += e.offsetLeft, e = e.offsetParent; );
i.right = i.left + t.offsetWidth, i.bottom = i.top + t.offsetHeight, Client.mainFrame.device.safeAreaInsets.top && i.top - n.top <= Client.mainFrame.device.safeAreaInsets.top ? t.classList.add("fullscreen-padding-top") : t.classList.remove("fullscreen-padding-top"), 
Client.mainFrame.device.safeAreaInsets.left && i.left - n.left <= Client.mainFrame.device.safeAreaInsets.left ? t.classList.add("fullscreen-padding-left") : t.classList.remove("fullscreen-padding-left"), 
Client.mainFrame.device.safeAreaInsets.right && n.right - i.right <= Client.mainFrame.device.safeAreaInsets.right ? t.classList.add("fullscreen-padding-right") : t.classList.remove("fullscreen-padding-right"), 
Client.mainFrame.device.safeAreaInsets.bottom && n.bottom - i.bottom <= Client.mainFrame.device.safeAreaInsets.bottom ? t.classList.add("fullscreen-padding-bottom") : t.classList.remove("fullscreen-padding-bottom"), 
this.updateElement({
className: Array.from(t.classList).join(" ")
});
}
}, Client || {}), Client = (Client.Utils = function() {}, Client.Utils.getQueryVariable = function(e) {
for (var t = (Client.resourceQuery || window.location.search.substring(1)).split("&"), i = 0; i < t.length; i++) {
var n = t[i].split("=");
if (decodeURIComponent(n[0]) === e) return decodeURIComponent(n[1]);
}
}, Client.Utils.abs = function(e) {
var t = e;
if (e) {
var i = !1;
if (i = (i = Client.resourceHome ? -1 === e.indexOf("://") || "url(file:///" === e.substring(0, 12) : i) && 0 <= e.indexOf("data:") ? !1 : i) for (var n = [ "tel:", "mailto:", "sms:", "geo:", "itms:", "itms-apps:", "market:" ], s = 0; s < n.length && i; s++) e.startsWith(n[s]) && (i = !1);
i && (t = this.absUrl(e));
}
return t;
}, Client.Utils.requireAbs = function(e) {
return Client.resourceHome && Client.Utils.absProperties[e];
}, Client.Utils.absProperties = {
"background-image": !0,
backgroundImage: !0,
background: !0,
"border-image": !0,
borderImage: !0,
"mask-image": !0,
maskImage: !0,
"-webkit-mask-image": !0,
webkitMaskImage: !0,
"list-style-image": !0,
listStyleImage: !0,
src: !0
}, Client.Utils.absStyle = function(e) {
if (e) for (var t = e.indexOf("url("); 0 <= t; ) var i, n, s = e.indexOf(")", t + 1), t = (e = 0 <= s && (i = e.substring(t, s + 1), 
n = !1, n = !((n = Client.resourceHome ? -1 === i.indexOf("://") || "url(file:///" === i.substring(0, 12) : n) && 0 <= i.indexOf("data:")) && n) ? e.substring(0, t) + this.absUrl(i) + e.substring(s + 1) : e).indexOf("url(", t + 1);
return e;
}, Client.Utils.absUrl = function(e) {
var t, i, n, s;
return e && (i = t = "", (s = (n = (e = 0 === e.indexOf("url(") && (t = "url('", 
i = "')", "file://" === (e = "'" !== (e = "'" !== (e = e.substr(4, e.length - 5)).substring(0, 1) && '"' !== e.substring(0, 1) ? e : e.substring(1)).substr(e.length - 1) && '"' !== e.substr(e.length - 1) ? e : e.substring(0, e.length - 1)).substring(0, 7)) ? e.substring(7) : e).indexOf("/resources/")) <= 2) || e.startsWith("/var/containers/") && (s = !0, 
e = ".." + e.substring(n)), s ? t + Client.resourceHome + e + i : t + Client.resourceOrigin + e + i);
}, Client.Utils.findElemPos = function(e, t, i) {
var n, s = {}, e = e.getBoundingClientRect();
return (t = t || document.getElementById("app-ui")) ? (n = t.getBoundingClientRect(), 
s.top = i ? e.top - (n.top - t.scrollTop) : e.top - n.top, s.left = i ? e.left - (n.left - t.scrollLeft) : e.left - n.left, 
s.bottom = i ? e.bottom - (n.top - t.scrollTop) : e.bottom - n.top, s.right = i ? e.right - (n.left - t.scrollLeft) : e.right - n.left) : s = e, 
s;
}, Client.Utils.capitalize = function(e) {
return e.charAt(0).toUpperCase() + e.slice(1);
}, Client.Utils.getCookie = function(e) {
for (var t = e + "=", i = document.cookie.split(";"), n = 0; n < i.length; n++) {
for (var s = i[n]; " " === s.charAt(0); ) s = s.substring(1);
if (s.startsWith(t)) return s.substring(t.length, s.length);
}
return "";
}, Client.Utils.deleteCookie = function(e, t) {
document.cookie = e + "=;expires=Thu, 01 Jan 1970 00:00:01 GMT" + (t ? ";path=/" + t : "");
}, Client.Utils.getKey = function(e) {
var t = "";
return (e.ctrlKey || e.metaKey) && (t += "CTRL-"), e.altKey && (t += "ALT-"), e.shiftKey && (t += "SHIFT-"), 
t += 112 <= e.keyCode && e.keyCode <= 123 ? "F" + (e.keyCode - 111 + (e.shiftKey ? 12 : 0) + (e.ctrlKey || e.metaKey ? 24 : 0)) : 27 === e.keyCode ? "ESC" : 13 === e.keyCode ? "ENTER" : 46 === e.keyCode ? "DEL" : 8 === e.keyCode ? "BACK" : String.fromCharCode(e.keyCode);
}, Client.Utils.findElementFromDomObj = function(e) {
for (;e; ) {
if (e.id) {
var t = Client.eleMap[e.id];
if (t) return t;
}
e = e.parentNode;
}
}, Client.Utils.findParentElementFromDomObj = function(e) {
if (e) {
for (var t, i, n; e; ) {
if (e.classList.contains("alert-wrapper") || e.classList.contains("popover-content") || e.classList.contains("action-sheet-container") || e.classList.contains("loading-wrapper")) return {
id: "popup",
domObj: e
};
if (e.id) {
t = e;
break;
}
var s = e.getAttribute("for");
if (s) {
t = document.getElementById(s);
break;
}
e = e.parentNode;
}
for (n in Client.eleMap) {
var o = Client.eleMap[n];
if (o && o.domObj === t) {
i = o;
break;
}
}
return i;
}
}, Client.Utils.getScrollableParent = function(e) {
let t = e;
for (;t && "app-ui" !== t.id; ) {
var i = getComputedStyle(t);
if (!i) return;
if ("auto" === i.overflowY || "scroll" === i.overflowY || "overlay" === i.overflowY) return t;
t = t.parentNode;
}
}, Client.Utils.isLastFocusableNode = function(e) {
e = e.nextSibling;
return !e || !Client.Utils.isNodeEditable(e) && this.isLastFocusableNode(e);
}, Client.Utils.isFirstFocusableNode = function(e) {
e = e.previousSibling;
return !e || !Client.Utils.isNodeEditable(e) && this.isFirstFocusableNode(e);
}, Client.Utils.getCursorPos = function(e) {
if (void 0 !== e.selectionStart) return e.selectionStart;
try {
for (var t = document.selection.createRange(), i = e.createTextRange(), n = 0; i.compareEndPoints("StartToStart", t); ) n++, 
i.moveStart("character");
return n;
} catch (e) {
return -1;
}
}, Client.Utils.setCursorPos = function(e, t) {
try {
var i;
void 0 !== e.selectionStart ? (e.select(), e.selectionStart = t, e.selectionEnd = t) : ((i = e.createTextRange()).move("character", t), 
i.select());
} catch (e) {}
}, Client.Utils.base64FileDecode = function(e) {
for (var t = (0 <= e.split(",")[0].indexOf("base64") ? atob : unescape)(e.split(",")[1]), e = e.split(",")[0].split(":")[1].split(";")[0], i = new Uint8Array(t.length), n = 0; n < t.length; n++) i[n] = t.charCodeAt(n);
return new Blob([ i ], {
type: e
});
}, Client.Utils.getRESTQueryString = function(e, t) {
void 0 === t && (t = !0);
var i, n = (Client.mainFrame ? Client.mainFrame.sid : "") || Client.Utils.getQueryVariable("sid") || Client.Utils.getCookie("sid"), s = Client.Utils.getQueryVariable("appid") || Client.Utils.getCookie("appid"), o = window.location.origin;
for (i in !!s ? o += "/" + encodeURIComponent(n) + "/" + encodeURIComponent(s.replace(/\//g, "-")) + "/run?mode=rest" : (o += "/" + window.location.pathname.split("/")[1] + "/?mode=rest", 
t && (o += "&sid=" + encodeURIComponent(n))), e) o += "&" + encodeURIComponent(i) + "=" + encodeURIComponent(e[i]);
return o;
}, Client.Utils.isMyParent = function(e, t) {
return !(!e || "app-ui" === e.id) && ((-1 !== e.id?.indexOf("dmo_") ? e.id?.substring(4, e.id.length) : e.id) === t || Client.Utils.isMyParent(e.parentNode, t));
}, Client.Utils.isMyParentEl = function(e, t) {
if (t) {
if (e === t) return !0;
for (;e; ) {
if (e.parent === t) return !0;
e = e.parent;
}
}
return !1;
}, Client.Utils.getParentWithClass = function(e, t) {
for (;e; ) {
if (e.className && -1 < e.className.indexOf(t)) return e;
e = e.parentNode;
}
}, Client.Utils.isChildOfTag = function(e, t) {
for (;e; ) {
if (e.tagName && e.tagName === t) return !0;
e = e.parentNode;
}
}, Client.Utils.getDomObjByCursorPos = function(e, t) {
var i, n, s = document.getElementById("tagPanel");
return s && (n = s.parentNode) && (s.remove(), i = document.elementFromPoint(e, t), 
n.appendChild(s)), i;
}, Client.Utils.getRelatedDomObj = function(e) {
var t, e = document.querySelectorAll('[for="' + e + '"');
return t = e && e[0] ? e[0] : t;
}, Client.Utils.isNodeEditable = function(e) {
return e && ("INPUT" === e.tagName || "TEXTAREA" === e.tagName || "true" === e.contentEditable);
}, Client.Utils.getCSSVarValue = function(e) {
return getComputedStyle(document.documentElement).getPropertyValue(e)?.trim()?.replace(/"/g, "");
}, Client.Utils.generateRandomId = function() {
return (1e3 * Math.random() + 13999 * Math.random()).toString(36);
}, Client.Utils.cloneDomObj = function(t, i) {
if (t) {
var n = t.cloneNode();
i?.set(t, n);
for (let e = 0; e < t.childNodes.length; e++) {
var s = t.childNodes[e], s = Client.Utils.cloneDomObj(s, i);
n.appendChild(s);
}
return n;
}
}, Element.prototype.__querySelector = Element.prototype.querySelector, Element.prototype.editQuerySelector = function(e) {
var t = "";
if (25 !== e.length && -1 === e.indexOf("#dmo_")) t = e; else for (var i = 0; i < e.length; i++) {
var n = e.charAt(i);
-1 !== ":.#".indexOf(n) && 0 < i || -1 !== "!\"$%&'()*+,/;<=>?@[]^`{|}~".indexOf(n) ? t += "\\" + n : t += n;
}
return this.__querySelector(t);
}, Client || {}), Client = (Client.ViewEdit = function() {
this.id = "editm", (Client.eleMap[this.id] = this).appDiv = document.getElementById("app-ui"), 
this.appDiv.style.visibility = "", this.msButton = -1, this.editMode = !1, window.onerror = function(e, t, i) {
return alert(t + ":" + i + "\n" + e), !1;
};
}, Client.MainFrame.prototype.setEditMode = function(e, t, i) {
for (var n = Client.eleMap.editm, s = (Client.eleMap.editm || (n = new Client.ViewEdit()), 
Element.prototype.querySelector = e ? Element.prototype.editQuerySelector : Element.prototype.__querySelector, 
n.editMode = e, n.editProxy = t, void 0 !== i && (n.readOnly = i), n), o = (e ? (this.mdf = function(e) {
s.onMouseDown(e);
}, this.muf = function(e) {
s.onMouseUp(e);
}, this.movrf = function(e) {
s.onMouseOver(e);
}, this.mmf = function(e) {
s.onMouseMove(e);
}, this.moutf = function(e) {
s.onMouseOut(e);
}, this.odsf = function(e) {
s.onDragStart(e);
}, this.odef = function(e) {
s.onDragEnter(e);
}, this.odlf = function(e) {
s.onDragLeave(e);
}, this.odrf = function(e) {
s.onDrop(e);
}, this.octxm = function(e) {
s.onContextMenu(e);
}, this.okdf = function(e) {
s.keyHandler(e);
}, this.clk = function(e) {
s.onClick(e);
}, this.dblck = function(e) {
s.onDoubleClick(e);
}, document.body.classList.add("editing"), n.appDiv.onmousedown = this.mdf, document.body.onmouseup = this.muf, 
n.appDiv.onmouseover = this.movrf, n.appDiv.onmousemove = this.mmf, n.appDiv.onmouseout = this.moutf, 
n.appDiv.ondblclick = this.dblck, document.onclick = this.clk, document.body.ondragstart = this.odsf, 
document.body.ondragenter = this.odef, document.body.ondragover = this.odef, document.body.ondragleave = this.odlf, 
document.body.ondrop = this.odrf, document.body.oncontextmenu = this.octxm, document.body.onkeydown = this.okdf) : (delete n.appDiv.onmousedown, 
delete this.mdf, delete document.body.onmouseup, delete this.muf, delete n.appDiv.onmouseover, 
delete this.movrf, delete n.appDiv.onmousemove, delete this.mmf, delete n.appDiv.onmouseout, 
delete this.moutf, delete n.appDiv.ondblclick, delete this.dblck, delete document.onclick, 
delete this.clk, delete document.body.ondragstart, delete this.odsf, delete document.body.ondragenter, 
delete document.body.ondragover, delete this.odef, delete document.body.ondragleave, 
delete this.odlf, delete document.body.ondrop, delete this.odrf, delete document.body.oncontextmenu, 
delete this.octxm, delete document.body.onkeydown, delete this.okdf, this.mdf = function(e) {
s.onVisualHint(e, "mouseDown"), s.onMouseDown(e);
}, this.mmf = function(e) {
s.onVisualHint(e, "mouseMove");
}, document.body.classList.remove("editing"), n.appDiv.onmousedown = this.mdf, n.appDiv.onmousemove = this.mmf), 
Object.keys(Client.eleMap)), l = 0; l < o.length; l++) Client.eleMap[o[l]].domObj && Client.eleMap[o[l]].domObj.id && "app-ui" !== Client.eleMap[o[l]].domObj.id && (Client.eleMap[o[l]].domObj.id = (e ? "dmo_" : "") + Client.eleMap[o[l]].id);
}, Client.MainFrame.prototype.isEditing = function() {
return !(!Client.eleMap.editm || !1 === Client.eleMap.editm.editMode);
}, Client.MainFrame.prototype.clearHilight = function() {
for (var e = document.getElementsByClassName("hilightClass"); 0 < e.length; ) (t = Client.eleMap[e.item(0).id]) && (t.hilighted = !1), 
e.item(0).classList.remove("hilightClass");
for (e = document.getElementsByClassName("element-hidden-highlighted"); 0 < e.length; ) {
var t, i = e.item(0).id;
0 === i.indexOf("dmo_") && (i = i.substring(4)), (t = Client.eleMap[i]) && !0 === t.visible && t.updateElement({
visible: !1
}), t && !0 === t.parentWidget?.visible && t.parentWidget.updateElement({
visible: !1
}), e.item(0).classList.remove("element-hidden-highlighted");
}
for (var n = document.getElementsByClassName("widget-selected"); 0 < n.length; ) n[0].classList.remove("widget-selected");
for (n = document.getElementsByClassName("subwidget-selected"); 0 < n.length; ) n[0].classList.remove("subwidget-selected");
}, Client.MainFrame.prototype.updateHilight = function() {}, Client.MainFrame.prototype.getStyle = function(e) {
var t = {
cs: {},
st: {}
}, e = Client.eleMap[e];
if (e) {
var i = e.domObj || e.getRootObject();
if (!i) return t;
t.cs = window.getComputedStyle(i, null), t.st = i.style;
}
return e instanceof Client.IdfField && (t.layout = e.parent.layout === Client.IdfPanel.layouts.list ? "list" : "form"), 
t;
}, Client.Element.prototype.hilightObj = function(e) {
if (this.domObj || this.getRootObject()) if (e) {
if (document.getElementsByClassName("hilightClass").length < 2) for (var t, i = this.parent, n = this; i; ) (i instanceof Client.AltContainer || Client.IonTabs && i instanceof Client.IonTabs) && -1 < (t = i.elements ? i.elements.indexOf(n) : -1) && t !== i.selectedPage && i.updateElement({
selectedPage: t
}), i = (n = i).parent;
this.getEditorHilightObject().classList.add("hilightClass");
for (var s = this; s; ) !1 === s.visible && s.updateElement && (s.updateElement({
visible: !0,
forhighlight: !0
}), s.domObj ? s.domObj.classList.add("element-hidden-highlighted") : s instanceof Client.Widget && s.getRootObject().classList.add("element-hidden-highlighted")), 
s = s.parent;
this.hilighted = !0;
} else {
this.getEditorHilightObject().classList.remove("hilightClass");
for (s = this; s; ) !0 === s.visible && s.getRootObject && s.getEditorHilightObject().classList.contains("element-hidden-highlighted") && (s.updateElement({
visible: !1
}), s.getEditorHilightObject().classList.remove("element-hidden-highlighted")), 
s = s.parent;
this.hilighted = !1;
}
}, Client.Element.prototype.getEditorHilightObject = function() {
return this.getRootObject();
}, Client.Element.prototype.scrollIntoView = function() {
(this.domObj || this.getRootObject()) && this.getEditorHilightObject().scrollIntoView({
block: "nearest",
inline: "nearest"
});
}, Client.ViewEdit.prototype.onDragStart = function(e) {
if (this.editMode && this.editProxy && !this.readOnly) {
var t = this.getElementObj(e.target);
if (t) {
var i = -1 !== t.id.indexOf("dmo_") ? t.id.substring(4, t.id.length) : t.id, n = Client.eleMap[i];
if (n instanceof Client.Widget) e.preventDefault(); else {
this.drtobj = [ n ];
for (var s = "absolute" === window.getComputedStyle(t, null).position, o = document.getElementsByClassName("hilightClass"), l = 0; l < o.length; l++) {
var a, r, d = o[l].id;
if (!d) for (var h = o[l].firstChild; h && !d; ) h && h.id && (d = h.id), h = h.nextSibling;
d && (a = -1 !== d.indexOf("dmo_") ? d.substring(4, d.length) : d, r = !!(a = Client.eleMap[a]) && "absolute" === window.getComputedStyle(a.domObj, null).position, 
a) && a.domObj !== t && s == r && (this.drtobj.push(a), i += " " + a.id);
}
this.drtobj && 0 < this.drtobj.length ? (e.dataTransfer.setData("objid", i.trim()), 
e.dataTransfer.setDragImage(t, 0, 0)) : e.preventDefault();
}
}
} else e.preventDefault();
}, Client.ViewEdit.prototype.onDragEnter = function(e) {
if (this.editMode && this.editProxy && !this.readOnly && !(0 <= e.dataTransfer.types.indexOf("Files"))) {
var t = this.getElementObj(e.target);
if (t = -1 !== e.dataTransfer.types.indexOf("tooldrop") && "app-ui" === e.target.id ? e.target : t) {
var i, n = null;
for (i in Client.eleMap) if (Client.eleMap[i] && Client.eleMap[i].domObj === t) {
n = Client.eleMap[i];
break;
}
if (n) {
if (e.preventDefault(), -1 !== e.dataTransfer.types.indexOf("objid")) {
var s = !0;
if (this.drtobj && (h = this.drtobj[0].domObj, s = "absolute" === window.getComputedStyle(h, null).position), 
s) {
for (var o = n; o && !(o instanceof Client.Container || o instanceof Client.AltContainer || o instanceof Client.View); ) o = o.parent;
return o.domObj.classList.add("drop-over"), void (this.drtype = 0);
}
}
t.classList.remove("drop-left"), t.classList.remove("drop-right"), t.classList.remove("drop-top"), 
t.classList.remove("drop-bottom"), t.classList.remove("drop-over");
for (var l = t.scrollLeft, a = t.scrollTop, r = document.getElementById("app-ui"), d = t; d && d !== r; ) a += d.offsetTop - d.scrollTop + d.clientTop, 
l += d.offsetLeft - d.scrollLeft + d.clientLeft, d = d.offsetParent;
a += document.body.scrollTop, l += document.body.scrollLeft;
var h = e.clientY - a, s = e.clientX - l, c = 10 < t.offsetWidth / 3 ? 10 : t.offsetWidth / 3, p = t.offsetWidth / 3 * 2 < t.offsetWidth - 10 ? t.offsetWidth - 10 : t.offsetWidth / 3 * 2, u = 10 < t.offsetHeight / 3 ? 10 : t.offsetHeight / 3, f = t.offsetHeight / 3 * 2 < t.offsetHeight - 10 ? t.offsetHeight - 10 : t.offsetHeight / 3 * 2, m = 0, c = (s < c ? (m = -2, 
t.classList.add("drop-left")) : p < s ? (m = 2, t.classList.add("drop-right")) : h < u ? (m = -1, 
t.classList.add("drop-top")) : f < h && (m = 1, t.classList.add("drop-bottom")), 
this.drtype = m, n instanceof Client.View && (this.drtype = 0, t.classList.remove("drop-left"), 
t.classList.remove("drop-right"), t.classList.remove("drop-top"), t.classList.remove("drop-bottom")), 
0 === this.drtype && t.classList.add("drop-over"), -1 !== e.dataTransfer.types.indexOf("tooldrop") ? 1 : 2), p = this.drtobj && 0 < this.drtobj.length ? this.drtobj[0].id : null, s = e.ctrlKey || e.metaKey;
e.dataTransfer.dropEffect = this.editProxy.isObjectDraggable(c, n.id, this.drtype, p, s, e.altKey, e.shiftKey);
}
}
}
}, Client.ViewEdit.prototype.onDragLeave = function(e) {
for (var e = this.getElementObj(e.target), t = (e && (e.classList.remove("drop-left"), 
e.classList.remove("drop-right"), e.classList.remove("drop-top"), e.classList.remove("drop-bottom")), 
this.drtype = void 0, document.getElementsByClassName("drop-over")); 0 < t.length; ) t[0].classList.remove("drop-over");
}, Client.ViewEdit.prototype.onDrop = function(e) {
if (this.editMode && this.editProxy && void 0 !== this.drtype && !this.readOnly) {
e.preventDefault();
var t = this.getElementObj(e.target);
if (t = -1 !== e.dataTransfer.types.indexOf("tooldrop") && "app-ui" === e.target.id ? e.target : t) {
var i, n = null;
for (i in Client.eleMap) if (Client.eleMap[i] && Client.eleMap[i].domObj === t) {
n = Client.eleMap[i];
break;
}
if (-1 !== e.dataTransfer.types.indexOf("objid")) {
var s = e.dataTransfer.getData("objid");
if (n && "" !== s) {
for (var o = n; o && !(o instanceof Client.Container || o instanceof Client.AltContainer || o instanceof Client.View); ) o = o.parent;
var l = [];
if (this.drtobj) {
for (var a = "absolute" === o.layout || "absolute" === window.getComputedStyle(this.drtobj[0].domObj, null).position, r = 0; r < this.drtobj.length; r++) if (a) {
for (var d = this.drtobj[r]; d && !(d instanceof Client.Container || d instanceof Client.AltContainer || d instanceof Client.View); ) d = d.parent;
d !== o && l.push({
dragid: this.drtobj[r].id,
dropid: o.id,
op: this.drtype,
c: "ondrop",
alt: e.altKey,
ctr: e.ctrlKey || e.metaKey,
sht: e.shiftKey
});
var h = o.domObj.getBoundingClientRect(), c = e.clientX - h.left;
l.push({
rsid: this.drtobj[r].id,
l: c + "px",
t: e.clientY - h.top + "px",
c: "resize",
alt: e.altKey,
ctr: e.ctrlKey || e.metaKey,
sht: e.shiftKey
});
} else l.push({
dragid: this.drtobj[r].id,
dropid: n.id,
op: this.drtype,
c: "ondrop",
alt: e.altKey,
ctr: e.ctrlKey || e.metaKey,
sht: e.shiftKey
});
this.editProxy.appCmd(l);
} else this.editProxy.appCmd([ {
dragid: s,
dropid: o.id,
op: this.drtype,
c: "ondrop",
alt: e.altKey,
ctr: e.ctrlKey || e.metaKey,
sht: e.shiftKey
} ]);
}
} else -1 !== e.dataTransfer.types.indexOf("tooldrop") && n && this.editProxy.appCmd([ {
toolid: e.dataTransfer.getData("tooldrop"),
dropid: n.id,
op: this.drtype,
c: "ontooldrop",
alt: e.altKey,
ctr: e.ctrlKey || e.metaKey,
sht: e.shiftKey
} ]);
this.drtobj = void 0, this.msButton = -1, this.onDragLeave(e);
}
}
}, Client.ViewEdit.prototype.onMouseDown = function(e) {
if (this.editProxy) {
var t = this.getElementObj(e.target), i = null, n = !0;
if (this.msButton = e.button, this.msCoordX = e.clientX, this.msCoordY = e.clientY, 
this.msAlreadySel = !1, t) {
var s, o, l = -1 !== t.id.indexOf("dmo_") ? t.id.substring(4, t.id.length) : t.id;
if (!(i = Client.eleMap[l]) && l) try {
i = Client.eleMap[atob(l)];
} catch (e) {}
i && (o = s = !0, l = document.getElementById("hlo-" + l), this.msAlreadySel = null !== l, 
i.parentWidget && (s = !(this.msAlreadySel = !(n = !1)), (i = i.parentWidget) instanceof Client.IdfControl) && (i = i.parentWidget.parent), 
!t.draggable || i instanceof Client.Widget || (n = s = !1, this.msAlreadySel && (o = !1)), 
s && (e.preventDefault(), e.stopPropagation()), o = (!(i instanceof Client.Container || i instanceof Client.AltContainer) || "" !== t.style.cursor && "move" !== t.style.cursor) && o) && (l = [ {
id: i.id,
c: "mouseDown",
alt: e.altKey,
ctr: e.ctrlKey || e.metaKey,
sht: e.shiftKey,
button: this.msButton,
target: e.target,
offsetX: e.offsetX,
offsetY: e.offsetY
} ], this.editProxy.appCmd(l));
}
if (n && 0 === this.msButton && !this.readOnly) {
for (var a in e.preventDefault(), e.stopPropagation(), e.target.focus(), this.inSelection = !0, 
this.elasticX = e.clientX, this.elasticY = e.clientY, this.objRectMap = [], Client.eleMap) {
var r, a = Client.eleMap[a];
a instanceof Client.Element && a.domObj && (r = a.domObj.getBoundingClientRect(), 
this.objRectMap.push({
rectX: r.left,
rectY: r.top,
rectW: a.domObj.offsetWidth,
rectH: a.domObj.offsetHeight,
rectObj: a,
hil: a.hilighted
}));
}
if (!e.ctrlKey && !e.metaKey) for (var d = document.getElementsByClassName("hilightClass"); 0 < d.length; ) d.item(0).classList.remove("hilightClass");
}
}
}, Client.ViewEdit.prototype.onMouseUp = function(e) {
let t;
var i, n;
if (e && e.clientX > this.msCoordX - 2 && e.clientX < this.msCoordX + 2 && e.clientY > this.msCoordY - 2 && e.clientY < this.msCoordY + 2 && !this.resizing && 0 === this.msButton && ((i = this.getElementObj(e.target)) ? (i = -1 !== i.id.indexOf("dmo_") ? i.id.substring(4, i.id.length) : i.id, 
(n = Client.eleMap[i]) && (n.parentWidget && (n = n.parentWidget) instanceof Client.IdfControl && (n = n.parentWidget.parent), 
this.msAlreadySel || this.editProxy.appCmd([ {
id: n.id,
c: "mouseDown",
alt: e.altKey,
ctr: e.ctrlKey || e.metaKey,
sht: e.shiftKey,
button: this.msButton
} ]))) : e.target && "app-ui" === e.target.id ? this.editProxy.appCmd([ {
id: "",
c: "viewSelect",
alt: e.altKey,
ctr: !1,
sht: e.shiftKey
} ]) : this.editProxy.appCmd([ {
id: "",
c: "deselect",
alt: e.altKey,
ctr: !1,
sht: e.shiftKey
} ]), this.resizing = !1, this.resizeObj = null, delete this.deltaMovX, delete this.deltaMovY, 
t = n?.id), this.inSelection) {
this.inSelection = !1, this.elasticX = void 0, this.elasticY = void 0, this.objRectMap = null, 
this.rectSel && this.rectSel.parentNode && (this.rectSel.parentNode.removeChild(this.rectSel), 
this.rectSel = null);
for (var s = [], o = document.getElementsByClassName("hilightClass"), l = 0; l < o.length; l++) s.push({
id: o.item(l).id,
c: "mouseDown",
alt: e && e.altKey,
ctr: 0 !== l,
sht: e && e.shiftKey,
button: this.msButton
});
this.editProxy.appCmd(s), e && e.target && "device-ui" === e.target.id && (Client.mainFrame.device.stopRotation = !0);
}
this.msButton = -1, this.mousePosX = null, this.mousePosY = null, e && this.editProxy.appCmd([ {
c: "mouseUp",
alt: e.altKey,
ctr: e.ctrlKey || e.metaKey,
sht: e.shiftKey,
btn: e.button,
element: t
} ]);
}, Client.ViewEdit.prototype.onMouseOver = function(e) {
var t, e = this.getElementObj(e.target);
e && (t = -1 !== e.id.indexOf("dmo_") ? e.id.substring(4, e.id.length) : e.id, Client.eleMap[t]?.parentWidget || e.classList.add("overHilight"));
}, Client.ViewEdit.prototype.onMouseMove = function(e) {
var t = [ {
c: "mouseMove",
alt: e.altKey,
ctr: e.ctrlKey || e.metaKey,
sht: e.shiftKey,
pageX: e.pageX,
target: e.target,
offsetX: e.offsetX,
offsetY: e.offsetY
} ];
if (this.editProxy.appCmd(t), this.inSelection) {
var i = (p = document.body.style.zoom) ? parseInt(p) / 100 : 1, n = (this.rectSel || (this.rectSel = document.createElement("DIV"), 
this.rectSel.className = "rectSelection", document.body.appendChild(this.rectSel), 
this.rectSel.style.top = this.adaptForZoom(this.elasticY, i) + "px", this.rectSel.style.left = this.adaptForZoom(this.elasticX, i) + "px", 
this.rectSel.style.height = "0px", this.rectSel.style.width = "0px"), {});
e.clientX > this.elasticX ? (this.rectSel.style.width = this.adaptForZoom(e.clientX - this.elasticX, i) + "px", 
this.rectSel.style.left = this.adaptForZoom(this.elasticX + document.body.scrollLeft, i) + "px", 
n.rectX = this.adaptForZoom(this.elasticX, i), n.rectW = this.adaptForZoom(e.clientX - this.elasticX, i)) : (this.rectSel.style.left = this.adaptForZoom(e.clientX + document.body.scrollLeft, i) + "px", 
this.rectSel.style.width = this.adaptForZoom(this.elasticX - e.clientX, i) + "px", 
n.rectX = this.adaptForZoom(e.clientX, i), n.rectW = this.adaptForZoom(this.elasticX - e.clientX, i)), 
e.clientY > this.elasticY ? (this.rectSel.style.top = this.adaptForZoom(this.elasticY + document.body.scrollTop, i) + "px", 
this.rectSel.style.height = this.adaptForZoom(e.clientY - this.elasticY, i) + "px", 
n.rectY = this.adaptForZoom(this.elasticY, i), n.rectH = this.adaptForZoom(e.clientY - this.elasticY, i)) : (this.rectSel.style.top = this.adaptForZoom(e.clientY + document.body.scrollTop, i) + "px", 
this.rectSel.style.height = this.adaptForZoom(this.elasticY - e.clientY, i) + "px", 
n.rectY = this.adaptForZoom(e.clientY, i), n.rectH = this.adaptForZoom(this.elasticY - e.clientY, i));
for (var s = 0; s < this.objRectMap.length; s++) {
var o = this.objRectMap[s], l = !0, a = o.hil, r = o.rectX - document.body.scrollLeft, d = o.rectY - document.body.scrollTop, l = !1;
(l = n.rectY <= d && n.rectX <= r && d + o.rectH <= n.rectY + n.rectH && r + o.rectW <= n.rectX + n.rectW ? !0 : l) ? o.rectObj.hilightObj(!0) : a && (e.ctrlKey || e.metaKey) || o.rectObj.hilightObj(!1);
}
} else if (!this.resizing && !this.readOnly) {
t = this.getElementObj(e.target);
if (-1 === this.msButton && (t && "app-ui" !== t.id)) {
var h = "", c = -1 !== t.id.indexOf("dmo_") ? t.id.substring(4, t.id.length) : t.id, c = Client.eleMap[c];
if (!c?.parentWidget) {
if ("inline" === window.getComputedStyle(t, null).display) h = "move"; else {
var i = (p = document.body.style.zoom) ? parseInt(p) / 100 : 1, p = this.adaptForZoom(e.offsetY, i), i = this.adaptForZoom(e.offsetX, i), u = window.getComputedStyle(t, null).position, f = 10 < +t.offsetHeight / 3 ? 10 : +t.offsetHeight / 3, m = 10 < +t.offsetHeight / 3 ? t.offsetHeight - 10 : 2 * t.offsetHeight / 3, C = 10 < +t.offsetWidth / 3 ? 10 : +t.offsetWidth / 3, g = 10 < +t.offsetWidth / 3 ? t.offsetWidth - 10 : 2 * t.offsetWidth / 3, b = 0, b = p <= f ? -1 : m <= p ? 1 : 0;
switch (i <= C ? -1 : g <= i ? 1 : 0) {
case -1:
switch (b) {
case -1:
case 0:
case 1:
h = "absolute" !== u ? "move" : "";
}
break;

case 0:
switch (b) {
case -1:
h = "absolute" !== u ? "move" : "";
break;

case 0:
h = "move";
break;

case 1:
h = "";
}
break;

case 1:
switch (b) {
case -1:
h = "absolute" !== u ? "move" : "";
break;

case 0:
case 1:
h = "";
}
}
}
(c instanceof Client.Container || c instanceof Client.AltContainer) && "move" === h && (h = ""), 
t.style.cursor = h, t.draggable = "move" === h;
}
}
}
}, Client.ViewEdit.prototype.onMouseOut = function(e) {
e = this.getElementObj(e.target);
e && (e.removeAttribute("draggable"), e.style.cursor = "", e.classList.remove("overHilight"));
}, Client.ViewEdit.prototype.onClick = function(e) {
e = [ {
c: "onclick",
alt: e.altKey,
ctr: e.ctrlKey || e.metaKey,
sht: e.shiftKey
} ];
this.editProxy.appCmd(e);
}, Client.ViewEdit.prototype.onDoubleClick = function(e) {
if (this.editMode && this.editProxy && !this.readOnly) {
for (var t, i = this.getElementObj(e.target), n = null; i && (!i.id || -1 === i.id.indexOf("dmo_")); ) i = i.parentElement;
i && (t = -1 !== i.id.indexOf("dmo_") ? i.id.substring(4, i.id.length) : i.id, null !== (n = Client.eleMap[t])) && (n.showEditor ? n.showEditor() : (n = [ {
id: t,
c: "doubleClick",
alt: e.altKey,
ctr: e.ctrlKey || e.metaKey,
sht: e.shiftKey,
button: e.button
} ], this.editProxy.appCmd(n)));
}
}, Client.ViewEdit.prototype.onContextMenu = function(e) {
e.preventDefault(), e.stopPropagation();
var t = this.getElementObj(e.target);
t && (t = [ {
id: -1 !== t.id.indexOf("dmo_") ? t.id.substring(4, t.id.length) : t.id,
c: "oncontext",
alt: e.altKey,
ctr: e.ctrlKey || e.metaKey,
sht: e.shiftKey,
x: e.clientX,
y: e.clientY
} ], this.editProxy.appCmd(t));
}, Client.ViewEdit.prototype.keyHandler = function(e) {
var t;
this.readOnly ? e.preventDefault() : (t = !1, !e.ctrlKey && !e.metaKey || 90 !== e.keyCode && 89 !== e.keyCode || (t = !0), 
(e.ctrlKey || e.metaKey) && 83 === e.keyCode && (t = !0), 116 === e.keyCode && (t = !0), 
112 === e.keyCode && (t = !0), (e.ctrlKey || e.metaKey) && 70 === e.keyCode && (t = !0), 
(t = 65 === e.keyCode && (e.ctrlKey || e.metaKey) ? !0 : t) && e.preventDefault(), 
this.editProxy.appCmd([ {
key: e.keyCode,
c: "keydown",
alt: e.altKey,
ctr: e.ctrlKey || e.metaKey,
sht: e.shiftKey
} ]));
}, Client.ViewEdit.prototype.getElementObj = function(e) {
for (var t = e; t; ) {
if (t.id) return t;
t = t.parentNode;
}
return null;
}, Client.ViewEdit.prototype.adaptForZoom = function(e, t) {
return e / (t = t || (document.body.style.zoom ? parseInt(document.body.style.zoom) : 100) / 100);
}, Client.ViewEdit.prototype.onVisualHint = function(e, t) {
t = [ {
c: t,
target: e.target,
offsetX: e.offsetX,
offsetY: e.offsetY,
readOnly: !0
} ];
this.editProxy.appCmd(t);
}, Client.ViewEdit.prototype.openWidgetEditor = function(e) {
e = Client.eleMap[e];
e && e.showEditor && e.showEditor();
}, Client.ViewEdit.getEditorSelectedElements = function(t) {
var i = t ? [ t ] : [], n = document.getElementsByClassName("hilightClass");
for (let e = 0; e < n.length; e++) {
var s = Client.eleMap[n[e].id?.replace("dmo_", "")];
(s = s?.parentWidget ? s.parentWidget : s) && !i.includes(s) && s !== t && i.push(s);
}
return i;
}, Client.MainFrame.prototype.getClientState = function(e) {
for (var t in Client.eleMap) Client.eleMap[t]?.getClientState && Client.eleMap[t].getClientState(e);
}, Client.MainFrame.prototype.restoreClientState = function(t) {
for (let e = 0; e < t.length; e++) {
var i = Client.eleMap[t[e].id];
i?.restoreClientState && i.restoreClientState(t[e]);
}
}, Client || {}), Client = (Client.Widget = function(e, t, i) {
if (e) {
for (var n in Client.Widget.ddOperationInited || (Client.Widget.initDDOperations(), 
Client.Widget.ddOperationInited = !0), void 0 === e.id && (e.id = Client.mainFrame.generateCounter() + "_"), 
this.realizing = !0, this.name = e.name, this.id = e.id, this.view = i, this.parent = t, 
this.elements = [], this.mainObjects = [], e) e[n]?.constructor === Array ? this[n] = e[n].slice() : e[n]?.constructor === Object ? this[n] = Object.assign({}, e[n]) : this[n] = e[n];
(Client.eleMap[this.id] = this).cloned || (this.realize(e, t, i), this.updateElement(e)), 
delete this.realizing;
}
}, Client.Widget.prototype = new Client.Element(), Client.Widget.transPropMap = {
cap: "caption",
wid: "width",
hei: "height",
maw: "maxWidth",
mah: "maxHeight",
sty: "visualStyle",
bdg: "badge",
cln: "className",
tip: "tooltip",
hks: "handledKeys",
clk: "clickEventDef"
}, Client.Widget.transXmlNodeMap = {
start: "start",
open: "open",
wep: "IdfWebEntryPoint",
cmh: "IdfCommandList",
cms: "IdfCommand",
cmd: "IdfCommand",
vis: "IdfVisualStyle",
vsl: "IdfVisualStyleList",
tmh: "IdfTimerList",
tim: "IdfTimer",
frm: "IdfView",
suf: "IdfFrame",
wfr: "IdfFrame",
bbr: "IdfButtonBar",
pan: "IdfPanel",
ppg: "IdfPage",
grp: "IdfGroup",
lsg: "IdfRowsGroup",
fld: "IdfField",
fvl: "IdfField",
val: "IdfFieldValue",
tbv: "IdfTabbedView",
tab: "IdfTab",
gra: "IdfChart",
tre: "IdfTree",
trn: "IdfTreeNode",
book: "IdfBook",
pag: "IdfBookPage",
sec: "IdfSection",
box: "IdfBox",
spn: "IdfSpan",
msg: "IdfMessage",
cse: "IdfCustomElement",
inh: "IdfIndicatorList",
ind: "IdfIndicator"
}, Client.Widget.themes = {
ZEN: "zen",
CUSTOM: "custom"
}, Client.Widget.transUpdatingPropMap = {
tooltip: "tooltipContent"
}, Client.Widget.keyClasses = {
ENTERESC: 1,
MOVEMENT: 2,
ALPHANUMERICAL: 4
}, Client.Widget.transformOperation = {
NONE: 0,
DRAG: 1,
MOVE: 2,
MOVEX: 12,
MOVEY: 13,
RESIZETOP: 3,
RESIZELEFT: 4,
RESIZERIGHT: 5,
RESIZEBOTTOM: 6,
RESIZETOPLEFT: 7,
RESIZETOPRIGHT: 8,
RESIZEBOTTOMLEFT: 10,
RESIZEBOTTOMRIGHT: 11
}, Client.Widget.msgTypes = {
ALERT: 0,
CONFIRM: 1,
INPUT: 2
}, Client.Widget.visRegEx = /^vis\d+.*/, Client.Widget.convertPropValues = function(e) {
for (var t in e = e || {}) switch (t) {
case Client.Widget.transPropMap.wid:
case Client.Widget.transPropMap.hei:
case Client.Widget.transPropMap.maw:
case Client.Widget.transPropMap.mah:
case Client.Widget.transPropMap.sty:
case Client.Widget.transPropMap.hks:
case Client.Widget.transPropMap.clk:
e[t] = parseInt(e[t]);
}
}, Client.Widget.createConfigFromXml = function(i) {
var e = Client.Widget.transXmlNodeMap[i.nodeName];
if (e) {
var n = {}, s = [], t = i.attributes;
for (let e = 0; e < t.length; e++) {
var o = t[e];
n[o.nodeName] = o.nodeValue;
}
[ "start", "open" ].includes(e) ? (n.id = "start" === e ? "MainView" : "view-" + n.id, 
n.type = "view", n.elements = s) : (n.c = e, n.children = s);
for (let t = 0; t < i.childNodes.length; t++) {
var l = i.childNodes[t];
let e = l.nodeName;
"#text" !== (e = "val" === e && "spn" === l.parentNode.nodeName ? "vls" : e) && ("vls" === e || "vnl" === e ? n.valueList = Client.Widget.createValueList(l) : (l = Client.Widget.createConfigFromXml(l)) && s.push(l));
}
if (Client[e]) {
if (Client[e].createConfigFromXml) {
var a, r = Client[e].createConfigFromXml(i);
for (a in r) n[a] = r[a];
}
Client.mainFrame.translateProperties(n, Client[e].transPropMap || {}), Client.mainFrame.translateProperties(n, Client.Widget.transPropMap), 
Client[e].convertPropValues && Client[e].convertPropValues(n), Client.Widget.convertPropValues(n);
}
return n;
}
}, Client.Widget.prototype.createElementConfig = function(t) {
var e, i = {};
if (i.id = t.id || Client.mainFrame.generateCounter() + "_", Client.mainFrame.isIDF || t.id || (i.id = this.id + "_" + i.id), 
i.parentWidget = this, i.children = [], t.children) {
for (let e = 0; e < t.children.length; e++) i.children.push(this.createElementConfig(t.children[e]));
delete t.children;
}
for (e in t) i[e] = t[e];
return i;
}, Object.defineProperty(Client.Widget.prototype, "parentIdfView", {
get: function() {
return this.parent instanceof Client.IdfView ? this.parent : this.parent instanceof Client.Widget ? this.parent.parentIdfView : this.parent?.parentWidget?.parentIdfView;
}
}), Object.defineProperty(Client.Widget.prototype, "parentIdfFrame", {
get: function() {
return this.parent instanceof Client.IdfFrame ? this.parent : this.parent instanceof Client.Widget ? this.parent.parentIdfFrame : this.parent?.parentWidget?.parentIdfFrame;
}
}), Object.defineProperty(Client.Widget.prototype, "parentWidget", {
get: function() {
return this.parent instanceof Client.Widget ? this.parent : this.parent?.parentWidget;
}
}), Client.Widget.prototype.realize = function(e, t, i) {}, Client.Widget.prototype.updateElement = function(t) {
if (!this.realizing) {
var i = Object.keys(t);
for (let e = 0; e < i.length; e++) {
var n = i[e];
"id" !== n && "subFrameConf" !== n && "config" !== n && Client.Widget.isEqual(this[n], t[n]) && delete t[n];
}
}
void 0 !== t.visualStyle && (this.visualStyle = t.visualStyle, t.skipWidgetApplyVisualStyle ? (delete t.skipWidgetApplyVisualStyle, 
t.applyVisualStyle = !0) : this.applyVisualStyle && this.applyVisualStyle()), void 0 !== t.caption && (this.caption = t.caption), 
void 0 !== t.badge && (this.badge = t.badge), void 0 !== t.tooltip && (this.tooltip = t.tooltip), 
void 0 !== t.valueList && t.valueList && !t.valueList.items && (t.valueList = {
items: t.valueList.map(e => ({
value: e.v,
name: e.n
}))
}), void 0 !== t.handledKeys && this.setHandledKeys(t.handledKeys), void 0 !== t.clickEventDef && (this.clickEventDef = t.clickEventDef);
}, Client.Widget.prototype.updateClassName = function(e) {
let t = e.el || this.getRootObject(!0), i = (e.oldClassName || "").split(" "), n = (e.newClassName || "").split(" ");
i.filter(e => !n.includes(e)).forEach(e => Client.Widget.updateElementClassName(t, e, !0)), 
n.filter(e => !i.includes(e)).forEach(e => Client.Widget.updateElementClassName(t, e));
}, Client.Widget.prototype.onEvent = function(e) {
var t = [];
return "onKey" === e.id && t.push(...this.handleKeyPress(e)), t;
}, Client.Widget.prototype.clone = function(e, t, i) {
var n = Client.Element.prototype.clone.call(this, e, t, i);
if (this.mainObjects) {
n.mainObjects = [];
for (var s of this.mainObjects) {
var o = i.get(s.domObj);
let e = Client.eleMap[o.id];
((e = e?.cloned && e !== s ? e : s.clone(void 0, t, i)).parentWidget = n).mainObjects.push(e);
}
}
return n;
}, Client.Widget.prototype.handleKeyPress = function(t) {
var i = [];
if (!t.content.srcEvent.justHandled) {
var n = t.content.type, s = t.content.keyCode;
let e = -1;
13 === s ? "keyup" === n && (e = Client.Widget.keyClasses.ENTERESC) : 27 === s || 112 <= s && s <= 123 ? e = Client.Widget.keyClasses.ENTERESC : 8 === s || 9 === s || 46 === s || 33 <= s && s <= 40 ? e = Client.Widget.keyClasses.MOVEMENT : "keyup" === n && (e = Client.Widget.keyClasses.ALPHANUMERICAL), 
-1 !== e && this.handledKeys & e && (t.content.srcEvent.justHandled = !0, Client.mainFrame.isIDF) && i.push({
id: "keypress",
def: Client.IdfMessagesPump.eventTypes.ACTIVE,
delayCopies: !0,
content: {
oid: this.id,
obn: s,
par1: e
}
});
}
return i;
}, Client.Widget.prototype.setHandledKeys = function(e) {
this.handledKeys = e, this.handledKeys && this.mainObjects.forEach(e => {
e.updateElement({
tabIndex: 0
}), e.enableKeyEvent({
inputs: !0,
type: "down"
}), e.enableKeyEvent({
inputs: !0,
type: "up"
});
});
}, Client.Widget.getThemeUrl = function(e, t) {
let i;
return e === Client.Widget.themes.CUSTOM ? i = t : e && (i = (Client.mainFrame.isIDF ? "fluid/" : "") + "objects/fluid/themes/" + e + ".css"), 
i;
}, Client.Widget.prototype.getRootObject = function(e) {
return e ? this.mainObjects[0] : this.mainObjects[0]?.domObj;
}, Client.Widget.prototype.findElementToActivate = function() {}, Client.Widget.prototype.getElements = function(e) {
return this.getRootObject(!0)?.getElements(e) || [];
}, Client.Widget.prototype.createChildren = function(n) {
if (n.children) for (let i = 0; i < n.children.length; i++) {
let e = Client.eleMap[n.children[i].id];
if (e) e.createChildren(n.children[i]), e.updateElement(n.children[i]); else {
let t = n.children[i].previd;
var s, o;
delete n.children[i].previd, delete n.children[i].parid, e = this.view.createElement(n.children[i], this, this.view), 
t ? (s = this.elements.findIndex(e => e.id === t), o = this.elements[s], this.getRootObject(!0).insertBefore({
child: e.getRootObject(!0),
sib: o.getRootObject(!0).id
}), this.elements.splice(s, 0, e)) : this.elements.push(e);
}
}
}, Client.Widget.prototype.appendChildObject = function(e, t) {
var i = this.getRootObject(!0);
i instanceof Client.IonContent ? i.scrollContent.appendChild(t) : i.appendChildObject(e, t), 
i.elements.push(e), e.parent = i;
}, Client.Widget.prototype.removeChild = function(e) {
try {
this.getRootObject(!0).removeChild(Client.eleMap[e.id].getRootObject(!0));
} catch (e) {}
Client.Element.prototype.removeChild.call(this, e);
}, Client.Widget.prototype.removeFromParent = function() {
this.parent?.removeChild(this);
}, Client.Widget.prototype.close = function(t, e) {
for (this.parent?.onRemoveChildObject(this), this.elements.slice().forEach(e => e.close(t)); this.mainObjects.length; ) this.mainObjects[0].close(t), 
this.mainObjects.splice(0, 1);
delete Client.eleMap[this.id];
}, Client.Widget.prototype.getVisualStyle = function() {
return this.visualStyle;
}, Client.Widget.prototype.addVisualStyleClasses = function(n, s) {
if (n) {
void 0 !== (s = s || {}).alignment && [ "left", "center", "right", "justify" ].forEach(e => {
var t = e + "-aligned";
s.alignment !== e ? Client.Widget.updateElementClassName(n, t, !0) : s.alignment && Client.Widget.updateElementClassName(n, t);
}), "field" === s.objType ? (s.list && Client.Widget.updateElementClassName(n, "panel-active-row", !s.activeRow || s.qbe), 
Client.Widget.updateElementClassName(n, "panel-qbe-row", !s.qbe), Client.Widget.updateElementClassName(n, "field-disabled-value", !s.readOnly)) : "rowsgroup" === s.objType && (Client.Widget.updateElementClassName(n, "panel-active-row", !0), 
Client.Widget.updateElementClassName(n, "field-disabled-value", !0));
let i = (n.className || "").split(" ");
var e = i.filter(e => Client.Widget.visRegEx.test(e)), o = s.visualStyleIndex || this.getVisualStyle(), o = (delete s.visualStyleIndex, 
Client.IdfVisualStyle.getByIndex(o));
if (o) {
let t = (o.getCssClasses(s) || "").trim().split(" ");
o = e.filter(e => !t.includes(e)).join(" "), e = t.filter(e => !i.includes(e)).join(" ");
Client.Widget.updateElementClassName(n, o, !0), Client.Widget.updateElementClassName(n, e);
}
}
}, Client.Widget.getHTMLTooltip = function(t, i, n, s) {
if (t || i) {
let e = "<div>";
return t && (e += "<div class='tooltip-title'>" + Client.Widget.getHTMLForCaption(t) + "</div>"), 
i && (e += "<div class='tooltip-content'>" + Client.Widget.getHTMLForCaption(i + Client.Widget.getFKTip(n, s)) + "</div>"), 
{
content: e += "</div>"
};
}
}, Client.Widget.getFKTip = function(e, t) {
if (!e && !t) return "";
let i = "";
return e ? (24 < e && (i += "Ctrl+", e -= 24), 12 < e && (i += "Shift+", e -= 12), 
i += "F" + e) : i += t, " (" + i + ")";
}, Client.Widget.prototype.getXMLNodeByClass = function() {
if ("IdfCommand" === this.class) return this.type;
var t = Object.keys(Client.Widget.transXmlNodeMap);
for (let e = 0; e < t.length; e++) if (Client.Widget.transXmlNodeMap[t[e]] === this.class) return t[e];
}, Client.Widget.prototype.getPopupTarget = function() {
return this.getRootObject();
}, Client.Widget.createValueList = function(t) {
let i = {
hdr: "headers",
dcc: "decodeColumn",
typ: "type",
popup: "popup"
};
var n = {
items: [],
qbe: "vnl" === t.nodeName
};
let s = t.attributes;
for (let t = 0; t < s.length; t++) {
var o = i[s[t].nodeName];
let e = s[t].nodeValue;
"decodeColumn" !== o && "type" !== o || (e = parseInt(s[t].nodeValue)), n[o] = e;
}
i = {
txt: "name",
val: "value",
img: "image",
tip: "tooltip",
ena: "enabled",
gru: "group",
rval: "rValue",
lkes: "lkeSel"
};
for (let e = 0; e < t.childNodes.length; e++) {
var l = t.childNodes[e];
if ("vli" === l.nodeName) {
var a = {};
s = l.attributes;
for (let t = 0; t < s.length; t++) {
var r = i[s[t].nodeName];
let e = s[t].nodeValue;
"lkeSel" === r && (e = "-1" === s[t].nodeValue), a[r] = e;
}
a.enabled = "0" !== a.enabled, n.items.push(a);
}
}
return n;
}, Client.Widget.isFrameClass = function(e) {
return [ Client.Widget.transXmlNodeMap.wfr, Client.Widget.transXmlNodeMap.book, Client.Widget.transXmlNodeMap.bbr, Client.Widget.transXmlNodeMap.gra, Client.Widget.transXmlNodeMap.pan, Client.Widget.transXmlNodeMap.tbv, Client.Widget.transXmlNodeMap.tre ].includes(e);
}, Client.Widget.isFieldClass = function(e) {
return [ Client.Widget.transXmlNodeMap.fld, Client.Widget.transXmlNodeMap.fvl ].includes(e);
}, Client.Widget.isIconImage = function(e) {
return !e?.includes(".");
}, Client.Widget.setIconImage = function(e) {
var {
image: e,
el: t,
innerObj: i,
color: n
} = e, s = {}, e = Client.Widget.extractCaptionData(e)?.icon || e, o = Client.Widget.isIconImage(e);
let l = "";
o ? (s.icon = e, void 0 !== n && (s.color = n)) : (s.icon = "trash", e && (l = `url(${encodeURI((Client.mainFrame.isIDF ? "images/" : "") + e)})`)), 
Client.Widget.updateObject(t, s), o && t instanceof Client.IonButton && n && e && t.iconObj.setAttribute(n, ""), 
(i = i || t.iconObj) && t.lastInnerImage !== l && (i.style.backgroundImage = l, 
t.lastInnerImage = l), t instanceof Client.IonTab ? o ? t.linkObj.classList.remove("image") : t.linkObj.classList.add("image") : Client.Widget.updateElementClassName(t, "image", o);
}, Client.Widget.getIconString = function(e) {
let {
icon: t,
format: i
} = e;
if ("combo" === i) {
let e = "ion:";
t.startsWith("fa ") ? e = "fai:" : t.startsWith("icon-vela ") && (e = "vel:"), t = e + t;
} else t = t.startsWith("fa-") ? "fa " + t : t.startsWith("vela-") ? "icon-vela " + t.replace("vela", "icon") : "html" === i ? `icon-${Client.Ionic.platform} ion-${Client.Ionic.platform}-` + t : t;
return t;
}, Client.Widget.extractCaptionData = function(e) {
let t = "", i = "";
return (e = (e || "").toString()).includes("{{icon-") && (t = e.substring(e.indexOf("{{") + 7, e.indexOf("}}")), 
e = e.replace("{{icon-" + t + "}}", "").trim(), (t = Client.Widget.getIconString({
icon: t
})).includes("|")) && (i = t.substring(t.indexOf("|") + 1), t = t.substring(0, t.indexOf("|"))), 
{
caption: e,
icon: t,
color: i
};
}, Client.Widget.extractGridClasses = function(e) {
if (!e.includes("{{") || !e.includes("}}")) return {
className: e,
gridClass: ""
};
let t = e.substring(e.indexOf("{{") + 2, e.indexOf("}}"));
return e = e.replace("{{" + t + "}}", "").trim(), 0 <= t.indexOf("col-xs-") ? t = "col-xs-12" : 0 <= t.indexOf("col-sm-") ? t = "col-sm-12" : 0 <= t.indexOf("col-md-") ? t = "col-md-12" : 0 <= t.indexOf("col-lg-") && (t = "col-lg-12"), 
{
className: e,
gridClass: t
};
}, Client.Widget.getHTMLForCaption = function(e) {
let i = e || "";
for (;i.indexOf && -1 != i.indexOf("{{icon-"); ) {
var n = i.indexOf("{{"), s = i.indexOf("}}", n + 2);
if (s < 0) break;
let e = i.substring(n + 7, s), t = "";
e.includes("|") && (t = e.substring(e.indexOf("|") + 1), e = e.substring(0, e.indexOf("|"))), 
e = Client.Widget.getIconString({
icon: e,
format: "html"
}), i = i.substring(0, n) + `<ion-icon class='${e}'${t ? " " + t : ""}></ion-icon>` + i.substring(s + 2);
}
return i;
}, Client.Widget.prototype.getHTMLIcon = function(e, t) {
var {
caption: i,
icon: n,
color: s
} = Client.Widget.extractCaptionData(e);
if (!n) return e;
let o = this.getRootObject(!0);
o = o || this.parentIdfFrame.getRootObject(!0);
var e = this.createElementConfig({
c: "IonButton",
className: "generic-btn field-value-btn",
visible: !1
}), l = o.insertBefore({
child: e
});
return o.removeChild(e), l.updateElement({
visible: !0
}), Client.Widget.setIconImage({
image: n,
el: l,
color: s || "primary"
}), l.getRootObject().outerHTML + (i && !t ? " " + i : "");
}, Client.Widget.isEqual = function(e, t) {
let i = !1;
return i = t && "object" == typeof t && Object.getPrototypeOf(t) === Object.prototype ? JSON.stringify(e) === JSON.stringify(t) : e === t;
}, Client.Widget.updateElementClassName = function(e, t, s) {
if (e && t) {
let i;
var o = e.getRootObject();
let n = (e.className || o.className).trim().split(" ");
(t = t.trim().split(" ")).forEach(e => {
var t = n.includes(e);
s && t ? (n.splice(n.indexOf(e), 1), i = !0) : s || t || (n.push(e), i = !0);
}), i && Client.Widget.updateObject(e, {
className: n.join(" ").trim()
});
}
}, Client.Widget.updateObject = function(i, n) {
if (i) {
n = n || {};
var s = {}, o = Object.keys(n);
let t = o.length;
for (let e = 0; e < o.length; e++) {
var l = o[e], a = Client.Widget.transUpdatingPropMap[l] || l;
Client.Widget.isEqual(i[a], n[l]) ? (delete n[l], t--) : s[a] = n[l];
}
if (t) for (var e in i.updateElement(n), s) i[e] = s[e];
}
}, Client.Widget.updateStyle = function(e, t, i) {
if (t && i) {
var n, s = {};
for (n in i) t[n] !== i[n] && (t[n] = i[n], s[n] = i[n]);
Object.keys(s).length && e?.updateElement({
style: s
});
}
}, Client.Widget.updateCustomStyle = function(e) {
var t = e?.styleToUpdate;
let i = e?.newStyle;
"string" == typeof (i = i || {}) && (i = JSON.parse(i));
var n = Client.mainFrame.isEditing();
for (p in t) n ? t[p] = "" : i[p] = i[p] || "";
Client.Widget.updateStyle(void 0, t, i);
}, Client.Widget.prototype.saveScrollbarPosition = function(e) {
e ? (this.scrolledElements.forEach(e => {
e.e.scrollTop = e.scrollTop, e.e.scrollLeft = e.scrollLeft;
}), delete this.scrolledElements) : (this.scrolledElements = [], this.getRootObject()?.querySelectorAll("*").forEach(e => {
(e.scrollTop || e.scrollLeft) && this.scrolledElements.push({
e: e,
scrollTop: e.scrollTop,
scrollLeft: e.scrollLeft
});
}));
}, Client.Widget.initDDOperations = function() {
document.addEventListener("touchmove", Client.Widget.ddMouseMove), document.addEventListener("mousemove", Client.Widget.ddMouseMove), 
document.addEventListener("touchstart", Client.Widget.ddMouseDown), document.addEventListener("mousedown", Client.Widget.ddMouseDown), 
document.addEventListener("touchend", Client.Widget.ddMouseUp), document.addEventListener("mouseup", Client.Widget.ddMouseUp), 
document.addEventListener("touchcancel", Client.Widget.ddClearOperation), document.addEventListener("keydown", Client.Widget.globalKeyDown), 
document.addEventListener("selectionchange", Client.Widget.onSelectionChange);
}, Client.Widget.ddMouseDown = function(t, i) {
var n = (t.targetTouches?.[0]?.clientX ?? t.clientX) + (i ? i.x : 0), i = (t.targetTouches?.[0]?.clientY ?? t.clientY) + (i ? i.y : 0), {
el: s,
widget: o
} = Client.Widget.getDDTargetWidget(t);
if (o) {
var l, a, r = o.getSupportedTransformOperation(n, i, s);
let e = o.getTransformOperationTargetObj(r, s);
e = e || t.target, r && (l = (o = o.getTransformOperationTargetWidget(r, s)).getGritUnit(), 
a = o.getGritUnit(!0), Client.Widget.ddOperation = {
startx: n,
starty: i,
operation: r,
startWidget: o,
el: s,
startDomObj: e,
startRect: e.getBoundingClientRect(),
started: !1,
unit: l,
unitV: a
}, t.preventDefault());
}
}, Client.Widget.ddMouseMove = function(s, e) {
if (Client.mainFrame) {
var o = (s.targetTouches?.[0]?.clientX ?? s.clientX) + (e ? e.x : 0), l = (s.targetTouches?.[0]?.clientY ?? s.clientY) + (e ? e.y : 0), {
el: a,
widget: r
} = Client.Widget.getDDTargetWidget(s);
if (Client.Widget.ddOperation) {
var t, i, d = o - Client.Widget.ddOperation.startx, h = l - Client.Widget.ddOperation.starty;
if (!Client.Widget.ddOperation.started && (6 <= Math.abs(d) || 6 <= Math.abs(h)) && (e = Client.Widget.ddOperation.operation, 
t = Client.Widget.ddOperation.startDomObj, i = Client.Widget.ddOperation.startRect, 
e === Client.Widget.transformOperation.DRAG || e === Client.Widget.transformOperation.MOVE || e === Client.Widget.transformOperation.MOVEX || e === Client.Widget.transformOperation.MOVEY ? (Client.Widget.ddOperation.cloneObj = t.cloneNode(!0), 
Client.Widget.ddOperation.cloneObj.classList.add("dd-dragging-element"), e === Client.Widget.transformOperation.DRAG ? t.classList.add("dd-dragged-element") : t.classList.add("dd-moved-element")) : (Client.Widget.ddOperation.cloneObj = document.createElement("DIV"), 
Client.Widget.ddOperation.cloneObj.classList.add("dd-resizing-element"), (t.style.paddingLeft || t.style.paddingRight) && (Client.Widget.ddOperation.cloneObj.style.paddingLeft = t.style.paddingLeft, 
Client.Widget.ddOperation.cloneObj.style.paddingRight = t.style.paddingRight, Client.Widget.ddOperation.cloneObj.setAttribute("pad", "pad"))), 
Client.Widget.ddOperation.cloneObj.style.top = i.top + "px", Client.Widget.ddOperation.cloneObj.style.left = i.left + "px", 
Client.Widget.ddOperation.cloneObj.style.width = i.width + "px", Client.Widget.ddOperation.cloneObj.style.height = i.height + "px", 
document.body.appendChild(Client.Widget.ddOperation.cloneObj), Client.Widget?.initDDMultipleClones(Client.Widget.ddOperation), 
Client.Widget.ddOperation.started = !0, document.body.classList.add("dd-operation-in-progress")), 
Client.Widget.ddOperation.started) {
switch (Client.Widget.ddOperation.operation) {
case Client.Widget.transformOperation.DRAG:
Client.Widget.checkScrollbar({
domTarget: s.target,
x: o,
y: l,
event: s
});
for (var c = document.getElementsByClassName("dd-droppable-element"); 0 < c.length; ) c[0].classList.remove("dd-droppable-element");
Client.Widget.ddOperation.cloneObj.style.top = Client.Widget.gridValue(Client.Widget.ddOperation.startRect.top + h) + "px", 
Client.Widget.ddOperation.cloneObj.style.left = Client.Widget.gridValue(Client.Widget.ddOperation.startRect.left + d) + "px", 
r?.acceptsDrop(Client.Widget.ddOperation.startWidget, a) && Client.Widget.ddOperation.startWidget.canBeDroppedOn(r, a, Client.Widget.ddOperation.startElement) && r.getTransformOperationTargetObj(Client.Widget.ddOperation.operation, a).classList.add("dd-droppable-element");
break;

case Client.Widget.transformOperation.MOVE:
case Client.Widget.transformOperation.MOVEX:
case Client.Widget.transformOperation.MOVEY:
Client.Widget.ddOperation.operation !== Client.Widget.transformOperation.MOVE && Client.Widget.ddOperation.operation !== Client.Widget.transformOperation.MOVEY || (Client.Widget.ddOperation.cloneObj.style.top = Client.Widget.ddOperation.startRect.top + h + "px"), 
Client.Widget.ddOperation.operation !== Client.Widget.transformOperation.MOVE && Client.Widget.ddOperation.operation !== Client.Widget.transformOperation.MOVEX || (Client.Widget.ddOperation.cloneObj.style.left = Client.Widget.ddOperation.startRect.left + d + "px");
break;

case Client.Widget.transformOperation.RESIZETOP:
case Client.Widget.transformOperation.RESIZELEFT:
case Client.Widget.transformOperation.RESIZERIGHT:
case Client.Widget.transformOperation.RESIZEBOTTOM:
case Client.Widget.transformOperation.RESIZETOPLEFT:
case Client.Widget.transformOperation.RESIZETOPRIGHT:
case Client.Widget.transformOperation.RESIZEBOTTOMLEFT:
case Client.Widget.transformOperation.RESIZEBOTTOMRIGHT:
let e, t, i, n;
Client.Widget.ddOperation.operation !== Client.Widget.transformOperation.RESIZETOP && Client.Widget.ddOperation.operation !== Client.Widget.transformOperation.RESIZETOPLEFT && Client.Widget.ddOperation.operation !== Client.Widget.transformOperation.RESIZETOPRIGHT || (e = Client.Widget.gridValue(Client.Widget.ddOperation.startRect.top + h, Client.Widget.ddOperation.unitV), 
t = Client.Widget.gridValue(Client.Widget.ddOperation.startRect.height - h, Client.Widget.ddOperation.unitV)), 
Client.Widget.ddOperation.operation !== Client.Widget.transformOperation.RESIZEBOTTOM && Client.Widget.ddOperation.operation !== Client.Widget.transformOperation.RESIZEBOTTOMLEFT && Client.Widget.ddOperation.operation !== Client.Widget.transformOperation.RESIZEBOTTOMRIGHT || (t = Client.Widget.gridValue(Client.Widget.ddOperation.startRect.height + h, Client.Widget.ddOperation.unitV)), 
Client.Widget.ddOperation.operation !== Client.Widget.transformOperation.RESIZELEFT && Client.Widget.ddOperation.operation !== Client.Widget.transformOperation.RESIZETOPLEFT && Client.Widget.ddOperation.operation !== Client.Widget.transformOperation.RESIZEBOTTOMLEFT || (n = Client.Widget.gridValue(Client.Widget.ddOperation.startRect.left + d, Client.Widget.ddOperation.unitH), 
i = Client.Widget.gridValue(Client.Widget.ddOperation.startRect.width - d, Client.Widget.ddOperation.unitH)), 
Client.Widget.ddOperation.operation !== Client.Widget.transformOperation.RESIZERIGHT && Client.Widget.ddOperation.operation !== Client.Widget.transformOperation.RESIZETOPRIGHT && Client.Widget.ddOperation.operation !== Client.Widget.transformOperation.RESIZEBOTTOMRIGHT || (i = Client.Widget.gridValue(Client.Widget.ddOperation.startRect.width + d, Client.Widget.ddOperation.unitH)), 
e && (Client.Widget.ddOperation.cloneObj.style.top = e + "px"), t && (Client.Widget.ddOperation.cloneObj.style.height = t + "px"), 
i && (Client.Widget.ddOperation.cloneObj.style.width = i + "px"), n && (Client.Widget.ddOperation.cloneObj.style.left = n + "px"), 
Client.Widget.ddOperation.cloneObj.setAttribute("dims", Client.Widget.ddOperation.startWidget.getResizeTooltip(i, t));
}
Client.Widget?.handleDDMultipleClones(Client.Widget.ddOperation, d, h);
}
} else !s.targetTouches?.[0] && r && (e = r.getSupportedTransformOperation(o, l, a), 
r.getTransformOperationTargetWidget(e, a).applyDragDropCursor([ "", "move", "move", "n-resize", "w-resize", "e-resize", "s-resize", "nw-resize", "ne-resize", "sw-resize", "sw-resize", "se-resize", "move", "move" ][e]));
}
}, Client.Widget.ddMouseUp = function(i, n) {
var s, o = (i.targetTouches?.[0]?.clientX ?? i.clientX) + (n ? n.x : 0), n = (i.targetTouches?.[0]?.clientY ?? i.clientY) + (n ? n.y : 0);
let {
el: l,
widget: a
} = Client.Widget.getDDTargetWidget(i);
if (Client.Widget.ddOperation?.started) {
document.body.classList.remove("dd-operation-in-progress");
let e = o - Client.Widget.ddOperation.startx, t = n - Client.Widget.ddOperation.starty;
switch (Client.Widget.ddOperation.operation) {
case Client.Widget.transformOperation.DRAG:
a && (s = Client.Widget.gridValue(Client.Widget.ddOperation.startRect.top + t), 
r = Client.Widget.gridValue(Client.Widget.ddOperation.startRect.left + e), (a = a.getTransformOperationTargetWidget(Client.Widget.ddOperation, l)).acceptsDrop(Client.Widget.ddOperation.startWidget, l)) && Client.Widget.ddOperation.startWidget.canBeDroppedOn(a, l, Client.Widget.ddOperation.startElement) && a.handleDrop(Client.Widget.ddOperation.startWidget, l, r, s, i, {
deltaX: Client.Widget.gridValue(e),
deltaY: Client.Widget.gridValue(t)
}) && Client.Widget.onGenericDrop(Client.Widget.ddOperation.startWidget, a, r, s, i, {
deltaX: Client.Widget.gridValue(e),
deltaY: Client.Widget.gridValue(t)
});
break;

case Client.Widget.transformOperation.MOVE:
case Client.Widget.transformOperation.MOVEX:
case Client.Widget.transformOperation.MOVEY:
Client.Widget.ddOperation.operation === Client.Widget.transformOperation.MOVEY && (e = 0), 
Client.Widget.ddOperation.operation === Client.Widget.transformOperation.MOVEX && (t = 0), 
Client.Widget.ddOperation.startWidget.onTransform({
x: Client.Widget.ddOperation.startRect.left + e,
y: Client.Widget.ddOperation.startRect.top + t,
w: Client.Widget.ddOperation.startRect.width,
h: Client.Widget.ddOperation.startRect.height,
operation: Client.Widget.ddOperation.operation
});
break;

case Client.Widget.transformOperation.RESIZETOP:
case Client.Widget.transformOperation.RESIZELEFT:
case Client.Widget.transformOperation.RESIZERIGHT:
case Client.Widget.transformOperation.RESIZEBOTTOM:
case Client.Widget.transformOperation.RESIZETOPLEFT:
case Client.Widget.transformOperation.RESIZETOPRIGHT:
case Client.Widget.transformOperation.RESIZEBOTTOMLEFT:
case Client.Widget.transformOperation.RESIZEBOTTOMRIGHT:
var r = Client.Widget.ddOperation.cloneObj.getBoundingClientRect();
Client.Widget.ddOperation.startWidget.onTransform({
x: r.x,
y: r.y,
w: r.width,
h: r.height,
operation: Client.Widget.ddOperation.operation,
ox: Client.Widget.ddOperation.startRect.left,
oy: Client.Widget.ddOperation.startRect.top,
ow: Client.Widget.ddOperation.startRect.width,
oh: Client.Widget.ddOperation.startRect.height
});
}
}
Client.Widget.ddClearOperation();
}, Client.Widget.ddClearOperation = function() {
Client.mainFrame.scrollTimerID && (clearInterval(Client.mainFrame.scrollTimerID), 
Client.mainFrame.scrollTimerID = 0), Client.Widget.ddOperation?.startWidget && (Client.Widget.ddOperation.startWidget?.clearResizeTooltip(), 
delete Client.Widget.ddOperation.startWidget), Client.Widget.ddOperation?.cloneObj && document.body.removeChild(Client.Widget.ddOperation.cloneObj), 
Client.Widget?.clearDDMultipleClones(Client.Widget.ddOperation), delete Client.Widget.ddOperation;
let e = document.getElementsByClassName("dd-droppable-element");
for (;0 < e.length; ) e[0].classList.remove("dd-droppable-element");
for (e = document.getElementsByClassName("dd-dragged-element"); 0 < e.length; ) e[0].classList.remove("dd-dragged-element");
for (e = document.getElementsByClassName("dd-moved-element"); 0 < e.length; ) e[0].classList.remove("dd-moved-element");
for (e = document.getElementsByClassName("system-cursor"); 0 < e.length; ) e[0].style.cursor = "", 
e[0].setAttribute("opnt", ""), e[0].onmouseleave = null, e[0].classList.remove("system-cursor");
}, Client.Widget.ddClearPointer = function(e) {
e.target.getAttribute("opnt") && (e.target.style.cursor = "", e.target.setAttribute("opnt", ""), 
e.target.classList.remove("system-cursor")), e.target.onmouseleave = null;
}, Client.Widget.prototype.getSupportedTransformOperation = function(i, n, s, o) {
if (this.isTransformable(s) || this.isDraggable(s)) {
o = (o ?? this.getRootObject()).getBoundingClientRect();
if (o.left <= i && i <= o.right && o.top <= n && n <= o.bottom) if (this.isResizable(s)) {
let e = 0, t = 0;
switch (i <= o.left + 10 && (e = -1), i >= o.right - 10 && (e = 1), n <= o.top + 10 && (t = -1), 
n >= o.bottom - 10 && (t = 1), 1 !== e && -1 !== e || this.canResizeW(s) || (e = 0), 
1 !== t && -1 !== t || this.canResizeH(s) || (t = 0), e) {
case -1:
switch (t) {
case -1:
return Client.Widget.transformOperation.RESIZETOPLEFT;

case 0:
return Client.Widget.transformOperation.RESIZELEFT;

case 1:
return Client.Widget.transformOperation.RESIZEBOTTOMLEFT;
}
break;

case 0:
switch (t) {
case -1:
return Client.Widget.transformOperation.RESIZETOP;

case 0:
if (this.isDraggable(s)) return Client.Widget.transformOperation.DRAG;
if (this.isMoveable(s)) return this.canMoveX() && this.canMoveY() ? Client.Widget.transformOperation.MOVE : this.canMoveX() ? Client.Widget.transformOperation.MOVEX : Client.Widget.transformOperation.MOVEY;
break;

case 1:
return Client.Widget.transformOperation.RESIZEBOTTOM;
}
break;

case 1:
switch (t) {
case -1:
return Client.Widget.transformOperation.RESIZETOPRIGHT;

case 0:
return Client.Widget.transformOperation.RESIZERIGHT;

case 1:
return Client.Widget.transformOperation.RESIZEBOTTOMRIGHT;
}
}
} else {
if (this.isDraggable(s)) return Client.Widget.transformOperation.DRAG;
if (this.isMoveable(s)) return this.canMoveX() && this.canMoveY() ? Client.Widget.transformOperation.MOVE : this.canMoveX() ? Client.Widget.transformOperation.MOVEX : Client.Widget.transformOperation.MOVEY;
}
}
return Client.Widget.transformOperation.NONE;
}, Client.Widget.prototype.canResizeW = function(e) {
return !1;
}, Client.Widget.prototype.canResizeH = function(e) {
return !1;
}, Client.Widget.prototype.canMoveX = function() {
return !1;
}, Client.Widget.prototype.canMoveY = function() {
return !1;
}, Client.Widget.prototype.isMoveable = function(e) {
return this.canMoveX() || this.canMoveY();
}, Client.Widget.prototype.isResizable = function(e) {
return this.canResizeW(e) || this.canResizeH(e);
}, Client.Widget.prototype.isDraggable = function(e) {
return !1;
}, Client.Widget.prototype.isTransformable = function(e) {
return this.isResizable(e) || this.isMoveable(e);
}, Client.Widget.prototype.canBeDroppedOn = function(e, t, i) {
return !0;
}, Client.Widget.prototype.acceptsDrop = function(e, t) {
return !1;
}, Client.Widget.prototype.handleDrop = function(e, t, i, n, s, o) {
return !0;
}, Client.Widget.prototype.onTransform = function(e) {
return !1;
}, Client.Widget.prototype.applyDragDropCursor = function(e) {}, Client.Widget.prototype.getTransformOperationTargetWidget = function(e, t) {
return this;
}, Client.Widget.prototype.getTransformOperationTargetObj = function(e, t) {
return this.getRootObject();
}, Client.Widget.getDDTargetWidget = function(t) {
var i = {};
if (Client.eleMap) {
let e = t.target;
("touchmove" === t.type || "touchend" === t.type) && 0 < t.targetTouches?.length && 3 === (e = document.elementFromPoint(t.targetTouches[0].clientX, t.targetTouches[0].clientY))?.nodeType && (e = e.parentNode), 
i.el = Client.Widget.getElementByObj(e), i.widget = Client.Widget.getWidgetByElement(i.el);
}
return i;
}, Client.Widget.onGenericDrop = function(e, t, i, n, s) {
let o = t.id, l = e.id;
var s = s.button, a = i, r = n;
let d = a, h = r;
t instanceof Client.IdfFieldValue && (o = t.parentField.id + (t.parentIdfFrame.layout === Client.IdfPanel.layouts.list ? ":lv" + (t.index - t.parentIdfFrame.actualPosition) : ":fv")), 
e instanceof Client.IdfFieldValue && (l = e.parentField.id + (e.parentIdfFrame.layout === Client.IdfPanel.layouts.list ? ":lv" + (e.index - t.parentIdfFrame.actualPosition) : ":fv")), 
t instanceof Client.IdfControl && t.parentWidget instanceof Client.IdfFieldValue && (o = t.parentWidget.parentField.id + (t.parentWidget.parentIdfFrame.layout === Client.IdfPanel.layouts.list ? ":lv" + (t.parentWidget.index - t.parentWidget.parentIdfFrame.actualPosition) : ":fv")), 
e instanceof Client.IdfControl && e.parentWidget instanceof Client.IdfFieldValue && (l = e.parentWidget.parentField.id + (e.parentWidget.parentIdfFrame.layout === Client.IdfPanel.layouts.list ? ":lv" + (e.parentWidget.index - e.parentWidget.parentIdfFrame.actualPosition) : ":fv")), 
h = t instanceof Client.IdfBox ? (e = t.getRootObject().getBoundingClientRect(), 
c = t.page.unitOfMeasure, d = Client.IdfBookPage.convertFromPx(a, c) - Client.IdfBookPage.convertFromPx(e.x, c), 
Client.IdfBookPage.convertFromPx(r, c) - Client.IdfBookPage.convertFromPx(e.y, c)) : (e = (t instanceof Client.IdfFrame ? t : t.parentIdfFrame)?.getClickDetail({
content: {
clientX: i,
clientY: n
}
}) ?? {
x: i,
y: n
}, d = e.x, e.y);
var c = [];
Client.mainFrame.isIDF && c.push({
id: "gdd",
def: Client.IdfMessagesPump.eventTypes.ACTIVE,
content: {
oid: o,
obn: l,
par1: s,
par2: Math.floor(a),
par3: Math.floor(r),
par4: Math.floor(d),
par5: Math.floor(h),
par6: null
}
}), Client.mainFrame.sendEvents(c);
}, Client.Widget.checkScrollbar = function(i) {
var {
x: n,
y: s,
event: o
} = i;
if (void 0 === o?.targetTouches?.[0]) {
Client.mainFrame.scrollTimerID && (clearInterval(Client.mainFrame.scrollTimerID), 
Client.mainFrame.scrollTimerID = 0);
let e = i.domTarget, t = Client.Widget.transformOperation.NONE;
for (;e; ) {
if (e.scrollWidth !== e.offsetWidth || e.scrollHeight !== e.offsetHeight) {
var l = e.getBoundingClientRect();
if (l.left <= n && n <= l.left + 25 && e.scrollWidth >= e.offsetWidth && 0 < e.scrollLeft) {
t = Client.Widget.transformOperation.RESIZELEFT;
break;
}
if (l.right - 25 <= n && n <= l.right && e.scrollWidth >= e.offsetWidth) {
t = Client.Widget.transformOperation.RESIZERIGHT;
break;
}
if (l.top <= s && s <= l.top + 25 && e.scrollHeight >= e.offsetHeight && 0 < e.scrollTop) {
t = Client.Widget.transformOperation.RESIZETOP;
break;
}
if (l.bottom - 25 <= s && s <= l.bottom && e.scrollHeight >= e.offsetHeight) {
t = Client.Widget.transformOperation.RESIZEBOTTOM;
break;
}
}
e = e.parentNode;
}
e && t !== Client.Widget.transformOperation.NONE && (o = Client.Widget.getElementByObj(e), 
(i = Client.Widget.getWidgetByElement(o)) instanceof Client.IdfFrame) && !(i instanceof Client.IdfTabbedView) && (Client.mainFrame.scrollTimerID = setInterval(() => {
switch (t) {
case Client.Widget.transformOperation.RESIZELEFT:
e.scrollLeft = e.scrollLeft - 12;
break;

case Client.Widget.transformOperation.RESIZERIGHT:
e.scrollLeft = e.scrollLeft + 12;
break;

case Client.Widget.transformOperation.RESIZETOP:
e.scrollTop = e.scrollTop - 12;
break;

case Client.Widget.transformOperation.RESIZEBOTTOM:
e.scrollTop = e.scrollTop + 12;
}
}, 25));
}
}, Client.Widget.gridValue = function(e, t) {
return t ? Math.round(e / t) * t : 4 * Math.round(e / 4);
}, Client.Widget.prototype.getGritUnit = function(e) {
return 4;
}, Client.Widget.prototype.getParentWidgetByClass = function(e) {
let t = this;
for (;t && !(t instanceof e); ) t = t.parentWidget;
return t;
}, Client.Widget.getElementByObj = function(e) {
for (;e; ) {
if (e?.getAttribute && e?.getAttribute("for")) {
var t = Client.eleMap[e?.getAttribute("for")];
if (t) return t;
}
if (e.id) {
var t = -1 !== e.id.indexOf("dmo_") ? e.id.substring(4, e.id.length) : e.id, i = Client.eleMap[t];
if (i) return i;
}
e = e.parentNode;
}
}, Client.Widget.getWidgetByElement = function(e) {
for (;e; ) {
if (e instanceof Client.View && e.elements[0] instanceof Client.IdfView) return e.elements[0];
if (e instanceof Client.Widget) return e;
if (e.parentWidget) return e.parentWidget;
e = e.parent;
}
}, Client.Widget.globalKeyDown = function(e) {
"Escape" === e.key && Client.Widget.ddOperation && Client.Widget.ddClearOperation();
}, Client.Widget.onSelectionChange = function(e) {
var t = Client.Widget.getElementByObj(document.getSelection().focusNode), t = Client.Widget.getWidgetByElement(t);
t && Client.mainFrame.sendEvents(t.handleSelectionChange(e));
}, Client.Widget.prototype.handleSelectionChange = function(e) {
return [];
}, Client.Widget.prototype.focusNearControl = function(e) {
return [];
}, Client.Widget.showMessageBox = function(n, s) {
let e = "", t = n.text, o = (n.text.startsWith("cls=") && n.text.includes(",") && (e = n.text.split(",")[0].substring(4), 
t = n.text.split(",")[1]), {
type: "alert",
message: t = Client.Widget.getHTMLForCaption(t),
style: e
});
o.style += (0 < o.style.length ? " " : "") + "class-alertbox";
let i;
switch (n.type) {
case Client.Widget.msgTypes.ALERT:
i = Client.IdfWebEntryPoint?.soundDef.info, o.title = Client.IdfResources.t("MSG_POPUP_MsgBoxCaption"), 
o.buttons = [ {
text: Client.IdfResources.t("MSG_POPUP_OkButton")
} ];
break;

case Client.Widget.msgTypes.CONFIRM:
if (i = Client.IdfWebEntryPoint?.soundDef.warning, o.title = Client.IdfResources.t("MSG_POPUP_MsgConfirmCaption"), 
n.buttons) {
o.buttons = [];
var l = n.buttons;
for (let e = 0; e < l.length; e++) {
var a = l[e];
a.cssClass = a.cssClass || (0 !== e || a.destructive ? "" : "alert-button-primary"), 
o.buttons.push(a);
}
} else o.buttons = [ {
text: Client.IdfResources.t("MSG_POPUP_YesButton"),
cssClass: "alert-button-primary"
}, {
text: Client.IdfResources.t("MSG_POPUP_NoButton")
} ];
break;

case Client.Widget.msgTypes.INPUT:
i = Client.IdfWebEntryPoint?.soundDef.warning, o.title = Client.IdfResources.t("MSG_POPUP_MsgInputCaption"), 
o.inputs = [ {
id: "result",
type: "text",
focus: !0,
value: n.defaultValue
} ], o.buttons = [ {
text: Client.IdfResources.t("MSG_POPUP_OkButton"),
cssClass: "alert-button-primary",
defaultClick: !0
}, {
text: Client.IdfResources.t("MSG_POPUP_CancelButton")
} ];
}
Client.IonHelper.createAlert(o, (e, t) => {
let i;
switch (n.type) {
case Client.Widget.msgTypes.CONFIRM:
i = !n.buttons && n.server ? 0 === e ? "Y" : "N" : null !== e ? e + 1 : o.buttons.length;
break;

case Client.Widget.msgTypes.INPUT:
i = 0 === e ? t.result : "";
}
s && s(i, n.text);
}), Client.mainFrame.wep?.soundAction(i);
}, Client.Widget.showPreview = function(e, t) {
e = e || Client.IdfResources.t("SRV_MSG_ShowDoc");
let n = "POPUP" + Math.floor(100 * Math.random());
e = {
type: "alert",
title: e,
message: `<iframe id="${n}" ></iframe>`,
style: "frame-preview-popup",
buttons: [ {
text: Client.IdfResources.t("TIP_TITLE_ChiudiForm"),
cancel: !0
} ]
};
Client.IonHelper.createAlert(e, () => {}), setTimeout(() => {
let i = document.getElementById(n);
i.src = t, i.onload = () => {
let e, t = -1;
try {
e = i.contentWindow.document.body.scrollWidth, t = i.contentWindow.document.body.scrollHeight;
} catch (e) {}
(e <= 0 || isNaN(e)) && (e = 400), (t <= 0 || isNaN(t)) && (t = 400), i.style.width = e + "px", 
i.style.height = t + "px";
};
}, 100);
}, Client.Widget.initDDMultipleClones = function(s) {
if (Client.mainFrame?.isEditing() && s?.startWidget instanceof Client.IdfControl) {
s.clonesNodes = [];
let e = s.startWidget.parentWidget.parent;
let i = e.parent.layout === Client.IdfPanel.layouts.list;
var t = Client.ViewEdit.getEditorSelectedElements();
let n = s.operation;
t.sort((e, t) => e[i ? "listTop" : "formTop"] - t[i ? "listTop" : "formTop"]), t.forEach((t, i) => {
if (t === e) 0 === i || n !== Client.Widget.transformOperation.DRAG && n !== Client.Widget.transformOperation.MOVE && n !== Client.Widget.transformOperation.MOVEX && n !== Client.Widget.transformOperation.MOVEY || (s.cloneObj.style.opacity = "0.3"); else {
t = t.getEditorHilightObject();
let e;
n === Client.Widget.transformOperation.DRAG || n === Client.Widget.transformOperation.MOVE || n === Client.Widget.transformOperation.MOVEX || n === Client.Widget.transformOperation.MOVEY ? ((e = t.cloneNode(!0)).classList.add("dd-dragging-element"), 
0 !== i && (e.style.opacity = "0.3")) : ((e = document.createElement("DIV")).classList.add("dd-resizing-element"), 
(t.style.paddingLeft || t.style.paddingRight) && (e.style.paddingLeft = t.style.paddingLeft, 
e.style.paddingRight = t.style.paddingRight, e.cloneObj.setAttribute("pad", "pad")));
i = t.getBoundingClientRect();
e.style.left = i.left + "px", e.style.top = i.top + "px", e.style.width = i.width + "px", 
e.style.height = i.height + "px", document.body.appendChild(e), s.clonesNodes.push({
clone: e,
startRect: i
});
}
});
}
}, Client.Widget.handleDDMultipleClones = function(t, i, n) {
Client.mainFrame?.isEditing() && t?.clonesNodes?.length && t.clonesNodes.forEach(e => {
switch (t.operation) {
case Client.Widget.transformOperation.DRAG:
e.clone.style.top = Client.Widget.gridValue(e.startRect.top + n, t.unitV) + "px", 
e.clone.style.left = Client.Widget.gridValue(e.startRect.left + i, t.unitH) + "px";
break;

case Client.Widget.transformOperation.MOVE:
case Client.Widget.transformOperation.MOVEX:
case Client.Widget.transformOperation.MOVEY:
t.operation !== Client.Widget.transformOperation.MOVE && t.operation !== Client.Widget.transformOperation.MOVEY || (e.clone.style.top = e.startRect.top + n + "px"), 
t.operation !== Client.Widget.transformOperation.MOVE && t.operation !== Client.Widget.transformOperation.MOVEX || (e.clone.style.left = e.startRect.left + i + "px");
break;

case Client.Widget.transformOperation.RESIZETOP:
case Client.Widget.transformOperation.RESIZELEFT:
case Client.Widget.transformOperation.RESIZERIGHT:
case Client.Widget.transformOperation.RESIZEBOTTOM:
case Client.Widget.transformOperation.RESIZETOPLEFT:
case Client.Widget.transformOperation.RESIZETOPRIGHT:
case Client.Widget.transformOperation.RESIZEBOTTOMLEFT:
case Client.Widget.transformOperation.RESIZEBOTTOMRIGHT:
t.operation !== Client.Widget.transformOperation.RESIZETOP && t.operation !== Client.Widget.transformOperation.RESIZETOPLEFT && t.operation !== Client.Widget.transformOperation.RESIZETOPRIGHT || (e.clone.style.top = Client.Widget.gridValue(e.startRect.top + n, t.unitV) + "px", 
e.clone.style.height = Client.Widget.gridValue(e.startRect.height - n, t.unitV) + "px"), 
t.operation !== Client.Widget.transformOperation.RESIZEBOTTOM && t.operation !== Client.Widget.transformOperation.RESIZEBOTTOMLEFT && t.operation !== Client.Widget.transformOperation.RESIZEBOTTOMRIGHT || (e.clone.style.height = Client.Widget.gridValue(e.startRect.height + n, t.unitV) + "px"), 
t.operation !== Client.Widget.transformOperation.RESIZELEFT && t.operation !== Client.Widget.transformOperation.RESIZETOPLEFT && t.operation !== Client.Widget.transformOperation.RESIZEBOTTOMLEFT || (e.clone.style.left = Client.Widget.gridValue(e.startRect.left + i, t.unitH) + "px", 
e.clone.style.width = Client.Widget.gridValue(e.startRect.width - i, t.unitH) + "px"), 
t.operation !== Client.Widget.transformOperation.RESIZERIGHT && t.operation !== Client.Widget.transformOperation.RESIZETOPRIGHT && t.operation !== Client.Widget.transformOperation.RESIZEBOTTOMRIGHT || (e.clone.style.width = Client.Widget.gridValue(e.startRect.width + i, t.unitH) + "px");
}
});
}, Client.Widget.clearDDMultipleClones = function(e) {
Client.mainFrame?.isEditing() && e?.clonesNodes?.length && (e.clonesNodes.forEach(e => {
document.body.removeChild(e.clone), e.clone = null, e.startRect = null;
}), delete e.clonesNodes);
}, Client.Widget.prototype.getResizeTooltip = function(e, t) {
return (t ? "height: " + t : "") + " " + (e ? "width: " + e : "");
}, Client.Widget.prototype.clearResizeTooltip = function() {}, Client.Widget.prototype.getWidgetFormRow = function() {
var e = Client.eleMap[this instanceof Client.IdfGroup ? this.formContainerId : this.formControlId]?.getRootObject();
if (!e) return null;
let t = e;
for (;t && "ION-COL" !== t.tagName; ) t = t.parentNode;
let i = t;
for (;i && "ION-ROW" !== i.tagName; ) i = i.parentNode;
return i;
}, Client.Widget.prototype.getAnimationRoot = function() {
return this.getRootObject();
}, Client.Widget.prototype.isBackgroundApplied = function() {}, Client || {}), Client = (Client.feedbackClient = function(e) {
e = e || {};
this.feedbackEnabled = e.enabled, this.feedbackServerUrl = e.serverUrl, this.feedbackIde = e.ide, 
this.showInPreview = e.showInPreview, this.appui = document.getElementById("app-ui"), 
this.langIt = 0 <= (navigator.language || navigator.userLanguage).indexOf("it"), 
parent && parent.postMessage && parent.postMessage({
type: "isFeedbackEnabledResponse",
enabled: this.feedbackEnabled,
serverUrl: this.feedbackServerUrl,
ide: this.feedbackIde,
showInPreview: this.showInPreview
}, "*");
}, Client.feedbackClient.cookieParts = {
AUTHOR: 0,
EMAIL: 1
}, Client.feedbackClient.prototype.setProps = function(t) {
var i = Object.keys(t);
for (let e = 0; e < i.length; e++) {
var n = i[e], s = t[n];
void 0 !== s && s !== this[n] && (this[n] = s);
}
t.serverUrl && (this.feedbackServerUrl = t.serverUrl), parent && parent.postMessage && (t.type = "isFeedbackEnabledResponse", 
parent.postMessage(t, "*"));
}, Client.feedbackClient.prototype.showAddFeedbackPopup = function(s) {
var o = Client.mainFrame.device.isMobile && Client.mainFrame.device.shell && !(Client.mainFrame.device.shell instanceof Client.ShellEmulator), s = s && s.opt ? s.opt : {};
if (this.cloak = document.createElement("div"), this.cloak.className = "feedbackscreen feedbackclose visible", 
this.form = document.createElement("div"), this.form.className = "feedbackform", 
this.messageCnt = document.createElement("div"), this.messageCnt.className = "feedback-message-cnt feedback-invisible", 
p = s.successMessage && "string" == typeof s.successMessage ? s.successMessage : s.successMessage && s.successMessage.caption ? s.successMessage.caption : this.langIt ? "Feedback inviato con successo" : "Feedback sent successfully", 
this.messageCnt.innerHTML = p, this.successMessageOpt = {}, this.successMessageOpt.style = s.successMessage && s.successMessage.style ? s.successMessage.style : {}, 
this.sendingMessageOpt = {}, s.sendingMessage && (this.sendingMessageOpt.caption = "string" == typeof s.sendingMessage ? s.sendingMessage : s.sendingMessage.caption), 
this.sendingMessageOpt.style = s.sendingMessage && s.sendingMessage.style ? s.sendingMessage.style : {}, 
this.form.appendChild(this.messageCnt), this.title = document.createElement("h2"), 
p = s.title && "string" == typeof s.title ? s.title : s.title && s.title.caption ? s.title.caption : this.langIt ? "Lascia un feedback" : "Leave a feedback", 
this.title.textContent = p, s.title && s.title.style) for (var e = Object.keys(s.title.style), t = 0; t < e.length; t++) {
var i = e[t];
this.title.style[i] = s.title.style[i];
}
this.form.appendChild(this.title), this.name = document.createElement("input"), 
this.name.type = "text", this.name.setAttribute("dontholdcaret", !0);
var n = s.author || {}, l = "string" == typeof n ? n : n.caption || Client.feedbackClient.getCookieInfo(Client.feedbackClient.cookieParts.AUTHOR);
if (l ? this.name.value = l : this.name.placeholder = s.author && s.author.placeholder ? s.author.placeholder : this.langIt ? "Il tuo nome" : "Your name", 
n.style) for (e = Object.keys(n.style), t = 0; t < e.length; t++) {
i = e[t];
this.name.style[i] = n.style[i];
}
this.form.appendChild(this.name), this.msg = document.createElement("textarea"), 
this.msg.className = "feedback-textarea", "ios" === Client.mainFrame.device.operatingSystem && this.msg.classList.add("ios-feedback-textarea"), 
this.msg.rows = 5, this.msg.setAttribute("dontholdcaret", !0);
var a = s.description || {}, l = "string" == typeof a ? a : a.caption || this.feedbackDescr;
if (l ? this.msg.textContent = l : this.msg.placeholder = a.placeholder || (this.langIt ? "Il tuo feedback" : "Your feedback"), 
a.style) for (e = Object.keys(a.style), t = 0; t < e.length; t++) {
i = e[t];
this.msg.style[i] = a.style[i];
}
this.form.appendChild(this.msg);
var l = document.createElement("div"), r = (l.className = "feedback-checks", document.createElement("div")), d = (r.className = "feedback-formrow", 
l.appendChild(r), this.ssLabel = document.createElement("label"), this.ssLabel.className = "screenshot-checkbox", 
this.ssCheck = document.createElement("input"), this.ssCheck.type = "checkbox", 
this.ssLabel.appendChild(this.ssCheck), document.createElement("span")), h = (this.ssLabel.appendChild(d), 
d = s.screenshot && "string" == typeof s.screenshot ? s.screenshot : s.screenshot && s.screenshot.caption ? s.screenshot.caption : this.langIt ? "Allega uno screenshot" : "Attach screenshot", 
document.createTextNode(d)), h = (this.ssLabel.appendChild(h), r.appendChild(this.ssLabel), 
this.ssCheck.checked = s.screenshot && s.screenshot.checked, function() {
this.ssLabel.classList.contains("checked") ? this.ssLabel.classList.remove("checked") : this.ssLabel.classList.add("checked");
}.bind(this)), r = (this.ssCheck.addEventListener("change", h), s.screenshot && s.screenshot.checked && h(), 
document.createElement("div")), h = (r.className = "feedback-formrow", l.appendChild(r), 
this.kiLabel = document.createElement("label"), this.kiLabel.className = "screenshot-checkbox", 
this.kiCheck = document.createElement("input"), this.kiCheck.type = "checkbox", 
this.kiLabel.appendChild(this.kiCheck), document.createElement("span")), h = (this.kiLabel.appendChild(h), 
d = s.notification && "string" == typeof s.notification ? s.notification : s.notification && s.notification.caption ? s.notification.caption : this.langIt ? "Tienimi informato" : "Keep me informed", 
document.createTextNode(d)), c = (this.kiLabel.appendChild(h), r.appendChild(this.kiLabel), 
this.kiCheck.checked = s.notification && s.screenshot.notification, s.notification && s.notification.checked && f(), 
this.form.appendChild(l), this.email = document.createElement("input"), this.email.type = "text", 
this.email.className = "feedback-invisible", this.email.setAttribute("dontholdcaret", !0), 
s.email || {}), d = "string" == typeof c ? c : c.caption || Client.feedbackClient.getCookieInfo(Client.feedbackClient.cookieParts.EMAIL);
if (d ? this.email.value = d : this.email.placeholder = s.email && s.email.placeholder ? s.email.placeholder : (this.langIt, 
"Email"), c.style) for (e = Object.keys(c.style), t = 0; t < e.length; t++) {
i = e[t];
this.email.style[i] = c.style[i];
}
this.form.appendChild(this.email);
var p, h = function() {
clearTimeout(this.blurTimeout), o && "ios" === Client.mainFrame.device.operatingSystem && setTimeout(function() {
var e;
this.cachedHeight || (e = this.form.getBoundingClientRect(), this.cachedHeight = e.height, 
e = window.innerHeight - Client.mainFrame.device.keyboardHeight, this.form.style.minHeight = e + "px", 
this.form.style.alignSelf = "flex-start", 0 < (e = this.form.getBoundingClientRect().height - e) && (this.msg.style.height = (50 < 96 - e ? 96 - e : 50) + "px"));
}.bind(this), 100);
}.bind(this), r = (this.name.addEventListener("focus", h), this.msg.addEventListener("focus", h), 
this.email.addEventListener("focus", h), function() {
o && "ios" === Client.mainFrame.device.operatingSystem && (this.blurTimeout = setTimeout(function() {
this.form.style.minHeight = this.cachedHeight + "px", this.form.style.alignSelf = "unset", 
this.msg.style.height = "auto", delete this.cachedHeight;
}.bind(this), 100));
}.bind(this)), l = (this.name.addEventListener("blur", r), this.msg.addEventListener("blur", r), 
this.email.addEventListener("blur", r), document.createElement("div")), u = (l.className = "feedback-buttons", 
this.submit = document.createElement("button"), this.submit.className = "feedback-submit", 
function() {
var e, t;
this.name && this.msg && (e = !(0 < this.name.value.length && 0 < this.msg.value.length), 
t = this.kiCheck.checked && 0 === this.email.value.length, this.submit.disabled = e || t);
}.bind(this)), f = function() {
this.kiLabel.classList.contains("checked") ? (this.kiLabel.classList.remove("checked"), 
this.email.classList.add("feedback-invisible")) : (this.kiLabel.classList.add("checked"), 
this.email.classList.remove("feedback-invisible")), u();
}.bind(this);
if (this.kiCheck.addEventListener("change", f), this.name.addEventListener("input", u), 
this.msg.addEventListener("input", u), this.email.addEventListener("input", u), 
u(), p = "string" == typeof s.submit ? s.submit : s.submit && s.submit.caption ? s.submit.caption : this.langIt ? "Invia il feedback" : "Add feedback", 
this.submit.textContent = p, s.submit && s.submit.style) for (e = Object.keys(s.submit.style), 
t = 0; t < e.length; t++) {
i = e[t];
this.submit.style[i] = s.submit.style[i];
}
if (l.appendChild(this.submit), this.close = document.createElement("button"), this.close.className = "feedback-close", 
p = s.cancel && "string" == typeof s.cancel ? s.cancel : s.cancel && s.cancel.caption ? s.cancel.caption : this.langIt ? "Chiudi" : "Close", 
this.close.textContent = p, s.cancel && s.cancel.style) for (e = Object.keys(s.cancel.style), 
t = 0; t < e.length; t++) {
i = e[t];
this.updateCloseOpt.style[i] = this.updateCloseOpt.style[i] || this.close.style[i], 
this.close.style[i] = s.cancel.style[i];
}
this.updateCloseOpt = s.close || {}, this.updateCloseOpt.style = s.close && s.close.style ? s.close.style : {}, 
l.appendChild(this.close), this.form.appendChild(l), this.cloak.appendChild(this.form), 
this.appui.appendChild(this.cloak);
var m, C = function() {
this.touchListener && (this.appui.removeEventListener("touchstart", this.touchStartHandler), 
this.appui.ontouchstart = this.touchListenerBck), this.appui.removeChild(this.cloak);
}.bind(this), d = (this.close.addEventListener("click", C), this.cloak.addEventListener("click", function(e) {
this.blockAutoclose || !e.target.classList.contains("feedbackclose") || this.submit && !this.submit.classList.contains("feedback-invisible") && !this.submit.disabled || C();
}.bind(this)), function() {
var e, t = {
fromApp: !0,
op: "addticket"
}, i = (t.authorname = this.name.value, t.authorlanguage = this.langIt ? "it" : "en", 
t.description = this.msg.value, this.kiCheck.checked && (t.notificationemails = this.email.value), 
{}), i = (i.viewId = s.viewId || this.getCurrentViewId(), t.sourceObj = JSON.stringify(i), 
this.ssCheck.checked ? (this.cloak.classList.add("feedback-invisible"), this.blockAutoclose = !0, 
o ? (e = {
cmd: "msgType=feedback-screenshot",
feedback: t
}, this.feedbackServerUrl ? e.serverUrl = this.feedbackServerUrl : Client.isOffline() || (i = Client.Utils.getRESTQueryString({
msgType: "feedback-screenshot"
}), e.serverUrl = i.substring(0, i.indexOf("?"))), setTimeout(function() {
Client.mainFrame.sendEvents([ {
id: "getFeedbackScreenshot",
content: e
} ]);
}, 200)) : (this.feedbackParams = t, this.takeScreenshot())) : Client.mainFrame.sendEvents([ {
id: "feedbackCommand",
content: t
} ]), t.notificationemails || this.email.value), n = {
exdays: 999
};
"https:" === window.location.protocol && (n.secure = !0), Client.mainFrame.setCookie({
name: "feedbackPopupAuthor",
value: t.authorname + "$$$" + i,
options: n
}), this.feedbackDescr = this.msg.value;
}.bind(this));
this.submit.addEventListener("click", d), this.feedbackEnabled || (m = this.langIt ? "Il servizio di feedback non è abilitato" : "Feedback service not enabled", 
this.updateAddFeedbackPopup({
err: m
})), this.feedbackIde && !Client.isOffline() && (m = this.langIt ? "Il servizio di feedback può essere usato solo nelle applicazioni offline o in applicazioni installate" : "The feedback service can be used only in offline application or in installed applications", 
this.updateAddFeedbackPopup({
err: m
}));
}, Client.feedbackClient.prototype.updateAddFeedbackPopup = function(e) {
if (this.form) {
if ("ios" === Client.mainFrame.device.operatingSystem && (this.form.style.minHeight = "50px"), 
e.err) this.messageCnt.innerHTML = "string" == typeof e.err ? e.err : this.langIt ? "Errore nell'invio del feedback" : "Error sending feedback", 
this.close.classList.remove("feedback-invisible"); else if (e.msg) {
this.finalMessage = this.messageCnt.innerHTML, this.messageCnt.innerHTML = e.msg, 
this.close.classList.add("feedback-invisible");
for (var t = Object.keys(this.sendingMessageOpt.style), i = 0; i < t.length; i++) {
var n = t[i];
this.messageCnt.style[n] = this.sendingMessageOpt.style[n];
}
} else if (this.close.classList.add("feedback-positive"), this.successMessageOpt.style) {
this.finalMessage && (this.messageCnt.innerHTML = this.finalMessage, this.close.classList.remove("feedback-invisible"), 
delete this.finalMessage, delete this.blockAutoclose);
for (t = Object.keys(this.successMessageOpt.style), i = 0; i < t.length; i++) {
n = t[i];
this.messageCnt.style[n] = this.successMessageOpt.style[n];
}
delete this.feedbackDescr;
}
if (this.updateCloseOpt && (this.close.textContent = "string" == typeof this.updateCloseOpt ? this.updateCloseOpt : this.updateCloseOpt.caption || (this.langIt ? "Chiudi" : "Close"), 
this.updateCloseOpt.style)) for (t = Object.keys(this.updateCloseOpt.style), i = 0; i < t.length; i++) {
n = t[i];
this.close.style[n] = this.updateCloseOpt.style[n];
}
this.form.classList.add("feedback-popup-small"), this.title.classList.add("feedback-invisible"), 
this.name.classList.add("feedback-invisible"), this.msg.classList.add("feedback-invisible"), 
this.submit.classList.add("feedback-invisible"), this.ssLabel.classList.add("feedback-invisible"), 
this.kiLabel.classList.add("feedback-invisible"), this.email.classList.add("feedback-invisible"), 
this.messageCnt.classList.remove("feedback-invisible"), this.cloak.classList.remove("feedback-invisible");
}
}, Client.feedbackClient.prototype.takeScreenshot = function() {
try {
if (!chrome.runtime) return t = this.langIt ? 'Installa l\'estensione di Chrome <a href="https://chrome.google.com/webstore/detail/cbhgfhmihejgdpfeclnhkjmmjhhfmdom" target="_blank">Instant Developer Chrome screenshot extension</a> per catturare gli screenshot' : 'Install the <a href="https://chrome.google.com/webstore/detail/cbhgfhmihejgdpfeclnhkjmmjhhfmdom" target="_blank">Instant Developer Chrome screenshot extension</a> to take a screenshot', 
void this.screenshotCallback({
err: t
});
} catch (e) {
var t = this.langIt ? "È possibile catturare gli screenshot solo se si utilizza Chrome con l'estensione <a href='https://chrome.google.com/webstore/detail/cbhgfhmihejgdpfeclnhkjmmjhhfmdom' target='_blank'>Instant Developer Chrome screenshot extension</a> installata" : "You can only take screenshots with Chrome after installing the <a href='https://chrome.google.com/webstore/detail/cbhgfhmihejgdpfeclnhkjmmjhhfmdom' target='_blank'>Instant Developer Chrome screenshot extension</a>";
return void this.screenshotCallback({
err: t
});
}
t = function() {
chrome.runtime.sendMessage("cbhgfhmihejgdpfeclnhkjmmjhhfmdom", {
op: "screenshot"
}, {}, function(e) {
var t, i, n = this.sendingMessageOpt.caption || (this.langIt ? "Invio del feedback in corso..." : "Sending feedback...");
if (this.updateAddFeedbackPopup({
msg: n
}), e) {
if (Client.isOffline()) {
if (!this.feedbackServerUrl) return i = this.langIt ? "Url del server mancante" : "Server url missing", 
void this.screenshotCallback({
err: i
});
t = this.feedbackServerUrl + "?mode=rest&msgType=feedback-screenshot";
} else t = Client.Utils.getRESTQueryString({
msgType: "feedback-screenshot"
});
var n = Client.Utils.base64FileDecode(e.data), e = new FormData(), s = (e.append("file", n, "test.jpg"), 
new XMLHttpRequest());
s.open("POST", t, !0), s.onreadystatechange = function() {
var e;
4 === s.readyState && (e = JSON.parse(s.responseText), this.screenshotCallback({
url: e[0]._publicUrl
}));
}.bind(this), s.send(e);
} else i = this.langIt ? 'Installa l\'estensione di Chrome <a href="https://chrome.google.com/webstore/detail/cbhgfhmihejgdpfeclnhkjmmjhhfmdom" target="_blank">Instant Developer Chrome screenshot extension</a> per catturare gli screenshot' : 'Install the <a href="https://chrome.google.com/webstore/detail/cbhgfhmihejgdpfeclnhkjmmjhhfmdom" target="_blank">Instant Developer Chrome screenshot extension</a> to take a screenshot', 
this.screenshotCallback({
err: i
});
}.bind(this));
}.bind(this);
setTimeout(t, 500);
}, Client.feedbackClient.prototype.screenshotCallback = function(e) {
var t;
e.url ? (this.feedbackParams.screenshot = e.url, t = [ {
id: "feedbackCommand",
content: this.feedbackParams
} ], Client.mainFrame.sendEvents(t)) : this.updateAddFeedbackPopup(e);
}, Client.feedbackClient.prototype.getCurrentViewId = function() {
for (var e, t = Object.keys(Client.eleMap), i = 0; i < t.length; i++) {
var n = Client.eleMap[t[i]];
n instanceof Client.View && (!e || n.parent) && (e = n);
}
return e.id;
}, Client.feedbackClient.getCookieInfo = function(e) {
var t = Client.Utils.getCookie("feedbackPopupAuthor").split("$$$");
return t.length > e ? t[e] : null;
}, Client || {}), glbDecSep = (Client.ClientAnimation = function(e, t) {
this.animationDef = e, this.element = t, this.currentSegment = -1, this.currentRepetition = 1, 
this.status = Client.ClientAnimation.statusMap.STOPPED, this.reverted = !1;
}, Client.ClientAnimation.statusMap = {
ONGOING: "o",
STOPPED: "s"
}, Client.ClientAnimation.prototype.setState = function(e) {
var t, i = null, n = {};
for (t in e) "style_" === t.substring(0, 6) ? (i = i || {})[t.substring(6, t.length)] = e[t] : n[t] = e[t];
i && (n.style = i), n.fromanim = !0, this.element.updateElement(n);
}, Client.ClientAnimation.prototype.endFunction = function() {
var e = !1;
(e = this.currentRepetition <= 1 && (!this.reverted && this.currentSegment === this.animationDef.segments.length - 1 || this.reverted && 0 === this.currentSegment) ? !0 : e) || (this.animationDef.endcallback ? this.animationDef.endcallback() : this.element.onEndAnimation(this.currentSegment, e, !1, this.animationDef.id)), 
this.reverted ? this.currentSegment-- : this.currentSegment++, e ? (this.status = Client.ClientAnimation.statusMap.STOPPED, 
this.currentSegment = -1, this.currentRepetition = 1, this.animationDef.finalState && this.setState(this.animationDef.finalState), 
this.clearCSS(), this.animationDef.autoreset && this.reset(), this.animationDef.endcallback ? this.animationDef.endcallback() : this.element.onEndAnimation(this.currentSegment, e, !1, this.animationDef.id)) : ((!this.reverted && this.currentSegment >= this.animationDef.segments.length || this.reverted && this.currentSegment <= 0) && 0 < this.currentRepetition && (this.currentRepetition--, 
this.currentSegment = this.reverted ? this.animationDef.segments.length - 1 : 0), 
this.executeCSS(this.reverted));
}, Client.ClientAnimation.prototype.executeCSS = function(e) {
var t = "transitionDuration", i = "transitionProperty", n = this.element.getRootObject(), s = ((n = this.element instanceof Client.Widget ? this.element.getAnimationRoot() : n).style[t] = "0ms", 
""), o = e ? this.animationDef.segments[this.currentSegment].to : this.animationDef.segments[this.currentSegment].from, l = e ? this.animationDef.segments[this.currentSegment].from : this.animationDef.segments[this.currentSegment].to;
for (var a in o) {
var r = "style_" === a.substring(0, 6) ? a.substring(6, a.length) : a;
s += (0 === s.length ? "" : ",") + r, n.style[r] = o[a];
}
n.offsetTop, n.offsetHeight;
for (a in n.style[i] = "" !== n.style[i] ? n.style[i] + ", " + s : s, n.style.transitionTimingFunction = "bounce" === this.animationDef.segments[this.currentSegment].easing ? "cubic-bezier(0, 1.8, 1, 1.8)" : this.animationDef.segments[this.currentSegment].easing, 
this.animationDef.segments[this.currentSegment].delay && 0 < this.animationDef.segments[this.currentSegment].delay && (n.style.transitionDelay = this.animationDef.segments[this.currentSegment].delay + "ms"), 
n.style[t] = this.animationDef.segments[this.currentSegment].duration + "ms", l) {
r = "style_" === a.substring(0, 6) ? a.substring(6, a.length) : a;
n.style[r] = l[a];
}
var d = this;
this.endingFunction || (this.endingFunction = function(e) {
e.target === n && d.endFunction(e);
}), n.addEventListener("transitionend", this.endingFunction);
}, Client.ClientAnimation.prototype.clearCSS = function() {
var e = this.element.getRootObject();
(e = this.element instanceof Client.Widget ? this.element.getAnimationRoot() : e).removeEventListener("transitionend", this.endingFunction), 
e.style.transitionTimingFunction = "", e.style.transitionDuration = "", e.style.transitionDelay = "", 
e.style.transitionProperty = "";
}, Client.ClientAnimation.prototype.play = function(e) {
this.status === Client.ClientAnimation.statusMap.STOPPED && this.animationDef && this.animationDef.segments && 0 !== this.animationDef.segments.length && (this.currentRepetition = this.animationDef.repetitions, 
this.reverted = e, this.currentSegment = e ? this.animationDef.segments.length - 1 : 0, 
this.animationDef.startingState && this.setState(this.animationDef.startingState), 
this.status = Client.ClientAnimation.statusMap.ONGOING, this.executeCSS(e));
}, Client.ClientAnimation.prototype.stop = function() {
this.clearCSS(), this.status !== Client.ClientAnimation.statusMap.STOPPED && this.endFunction(), 
this.status !== Client.ClientAnimation.statusMap.STOPPED && this.element.onEndAnimation(this.currentSegment, !1, !0), 
this.status = Client.ClientAnimation.statusMap.STOPPED, this.currentSegment = -1, 
this.currentRepetition = 1;
}, Client.ClientAnimation.prototype.reset = function() {
if (this.status !== Client.ClientAnimation.statusMap.STOPPED && this.stop(), 0 !== this.animationDef.segments.length) for (var e = this.animationDef.segments.length - 1; 0 <= e; e--) this.setState(this.animationDef.segments[e].from);
}, Client.ClientAnimation.slideIn = function(e, t) {
var i, n = void 0 !== e.from ? e.from : "left", s = void 0 !== e.easing ? e.easing : "easeTo", o = void 0 !== e.duration ? e.duration : 250, e = void 0 !== e.delay ? e.delay : 0, l = t.getRootObject(), a = (t instanceof Client.Widget && (l = t.getAnimationRoot()), 
void 0 !== t.oldDisplay && (i = l.style.visibility, l.style.visibility = "hidden", 
l.style.display = t.oldDisplay), l.offsetTop), r = l.offsetLeft, d = 0, h = 0;
try {
var c = window.getComputedStyle(l, null);
a -= parseInt(c.borderTopWidth), r -= parseInt(c.borderLeftWidth);
} catch (e) {}
var c = l.parentNode, p = document.getElementById("app-ui"), h = (c ? (d = c.offsetWidth, 
c) : (d = p.offsetWidth, p)).offsetHeight, c = (0 < l.offsetTop && l.offsetParent !== l.parentNode && (c ? (a -= c.scrollTop + c.offsetTop, 
r -= c.scrollLeft + c.offsetLeft) : (a -= p.scrollTop, r -= p.scrollLeft)), {}), u = {}, f = "style_transform";
switch (u[f] = c[f] = "translate3d(0px, 0px ,0px)", n) {
case "top":
a = 0 - a - l.offsetHeight, u[f] = "translate3d(0px, " + a + "px, 0px)";
break;

case "bottom":
u[f] = "translate3d(0px, " + (h - a) + "px, 0px)";
break;

case "left":
r = 0 - r - l.offsetWidth, u[f] = "translate3d(" + r + "px, 0px , 0px)";
break;

case "right":
u[f] = "translate3d(" + (d - r) + "px, 0px, 0px)";
}
return void 0 !== t.oldDisplay && (l.style.visibility = i, l.style.display = "none"), 
{
repetitions: 1,
segments: [ {
from: u,
to: c,
duration: o,
easing: s,
delay: e
} ]
};
}, Client.ClientAnimation.slideOut = function(e, t) {
e = Client.ClientAnimation.slideIn(e, t), t = e.segments[0].from;
return e.segments[0].from = e.segments[0].to, e.segments[0].to = t, e;
}, Client.ClientAnimation.translate = function(e) {
var t = void 0 !== e.from ? e.from : "left", i = void 0 !== e.easing ? e.easing : "easeTo", n = void 0 !== e.duration ? e.duration : 250, s = void 0 !== e.delay ? e.delay : 0, o = void 0 !== e.startPosition ? e.startPosition : "0px", l = void 0 !== e.movelength ? e.movelength : "100px", a = {}, r = {}, d = "style_transform";
switch (r[d] = a[d] = "translate3d(0px, 0px ,0px)", t) {
case "top":
case "bottom":
r[d] = "translate3d(0px, " + o + ", 0px)", a[d] = "translate3d(0px, " + l + ", 0px)";
break;

case "left":
r[d] = "translate3d(" + o + ", 0px , 0px)", a[d] = "translate3d(" + l + ", 0px , 0px)";
break;

case "right":
r[d] = "translate3d(" + o + ", 0px, 0px)", a[d] = "translate3d(" + l + ", 0px, 0px)";
}
return {
repetitions: 1,
segments: [ {
from: r,
to: a,
duration: n,
easing: i,
delay: s
} ]
};
}, Client.ClientAnimation.fade = function(e) {
var t = void 0 !== e.easing ? e.easing : "easeTo";
return {
repetitions: 1,
segments: [ {
from: {
style_opacity: void 0 !== e.from ? e.from : 0
},
to: {
style_opacity: void 0 !== e.to ? e.to : 1
},
duration: void 0 !== e.duration ? e.duration : 250,
easing: t,
delay: void 0 !== e.delay ? e.delay : 0
} ]
};
}, Client.ClientAnimation.zoom = function(e) {
var t = void 0 !== e.easing ? e.easing : "easeTo", i = void 0 !== e.duration ? e.duration : 250, n = void 0 !== e.delay ? e.delay : 0, s = void 0 !== e.from ? e.from : 1, o = void 0 !== e.to ? e.to : 1.2, e = void 0 !== e.axis ? e.axis : "xy", l = {}, a = {}, r = "style_transform";
return l[r] = "scale(" + (-1 !== e.indexOf("x") ? s : "1") + "," + (-1 !== e.indexOf("y") ? s : "1") + ") perspective(1px)", 
a[r] = "scale(" + (-1 !== e.indexOf("x") ? o : "1") + "," + (-1 !== e.indexOf("y") ? o : "1") + ") perspective(1px)", 
{
repetitions: 1,
segments: [ {
from: l,
to: a,
duration: i,
easing: t,
delay: n
} ]
};
}, Client.ClientAnimation.flip = function(e) {
var t = void 0 !== e.easing ? e.easing : "easeTo", i = void 0 !== e.duration ? e.duration : 250, n = void 0 !== e.delay ? e.delay : 0, s = void 0 !== e.to ? e.to : 180, o = void 0 !== e.origin ? e.origin : "50%, 50%, 0px", l = void 0 !== e.rotation ? e.rotation : "horizontal", a = {}, r = {}, d = "style_transform", h = "style_transformOrigin";
return a[d] = ("vertical" === l ? "rotateY(" : "rotateX(") + (void 0 !== e.from ? e.from : 180) + ")", 
a[h] = o, r[d] = ("vertical" === l ? "rotateY(" : "rotateX(") + s + ")", r[h] = o, 
{
repetitions: 1,
segments: [ {
from: a,
to: r,
duration: i,
easing: t,
delay: n
} ]
};
}, Client.ClientAnimation.expand = function(t, e) {
var i = void 0 !== t.easing ? t.easing : "easeTo", n = void 0 !== t.duration ? t.duration : 250, s = void 0 !== t.delay ? t.delay : 0, o = void 0 !== t.expanddirection ? t.expanddirection : "horizontal", l = void 0 !== t.from ? t.from : "100%", t = void 0 !== t.to ? t.to : "100%", a = e.getRootObject();
if ((a = e instanceof Client.Widget ? e.getAnimationRoot() : a).setAttribute("originalH", a.style.height), 
a.setAttribute("originalW", a.style.width), l.indexOf && 0 < l.indexOf("%") || t.indexOf && 0 < t.indexOf("%")) {
void 0 !== e.oldDisplay && (r = a.style.visibility, a.style.visibility = "hidden", 
a.style.display = e.oldDisplay), void 0 !== e.oldExpandedHeigh && (d = a.style.height, 
a.style.height = e.oldExpandedHeigh), void 0 !== e.oldExpandedWidth && (h = a.style.width, 
a.style.width = e.oldExpandedWidth);
var r, d, h, c = "0px";
try {
var p = window.getComputedStyle(a, null), c = "horizontal" === o ? p.width : p.height;
} catch (e) {}
if (l.indexOf && 0 < l.indexOf("%")) try {
l = parseFloat(c, 10) * parseFloat(l, 10) / 100 + "px";
} catch (e) {
l = c;
}
if (t.indexOf && 0 < t.indexOf("%")) try {
t = parseFloat(c, 10) * parseFloat(t, 10) / 100 + "px";
} catch (e) {
t = c;
}
void 0 !== e.oldExpandedHeigh && (a.style.height = d, a.style.height = h), void 0 !== e.oldDisplay && (a.style.visibility = r, 
a.style.display = "none");
}
p = {
style_width: l
}, c = {
style_width: t
};
return {
repetitions: 1,
segments: [ {
from: p = "vertical" === o ? {
style_height: l
} : p,
to: c = "vertical" === o ? {
style_height: t
} : c,
duration: n,
easing: i,
delay: s
} ]
};
}, Client.ClientAnimation.recolor = function(e, t) {
var i = void 0 !== e.easing ? e.easing : "easeTo", n = void 0 !== e.duration ? e.duration : 250, s = void 0 !== e.delay ? e.delay : 0, e = void 0 !== e.color ? e.color : "#FFFFFF", o = "#000000", l = t.getRootObject();
t instanceof Client.Widget && (l = t.getAnimationRoot());
try {
o = window.getComputedStyle(l, null).backgroundColor;
l.setAttribute("origcolor", o);
} catch (e) {}
return {
repetitions: 1,
segments: [ {
from: {
style_backgroundColor: e
},
to: {
style_backgroundColor: o
},
duration: n,
easing: i,
delay: s
} ]
};
}, Client.ClientAnimation.change = function(e) {
var t, i, n = void 0 !== e.easing ? e.easing : "easeTo", s = void 0 !== e.duration ? e.duration : 250, o = void 0 !== e.delay ? e.delay : 0, l = void 0 !== e.property ? e.property : null, a = void 0 !== e.from ? e.from : null, e = void 0 !== e.to ? e.to : null;
return l && a && e ? (i = {}, (t = {})["style_" + l] = a, i["style_" + l] = e, {
repetitions: 1,
segments: [ {
from: t,
to: i,
duration: s,
easing: n,
delay: o
} ]
}) : null;
}, Client.ClientAnimation.custom = function(e) {
e = void 0 !== e.segments ? e.segments : null;
return e ? {
repetitions: 1,
segments: e
} : null;
}, Client.Container = function(e, t, i) {
Client.Element.call(this, e, t, i), void 0 !== e && ("table" === e.layout ? this.domObj = document.createElement("table") : e.tag ? (this.domObj = document.createElement("" === e.tag ? "DIV" : e.tag), 
delete e.tag) : this.domObj = document.createElement("div"), (Client.isTestAuto || Client.clientType) && (e.events = e.events || [], 
e.events.push("onScroll")), this.updateElement(e), this.attachEvents(e.events), 
t.appendChildObject(this, this.domObj), this.createChildren(e));
}, Client.Container.prototype = new Client.Element(), Client.Container.prototype.updateElement = function(e) {
var t, i, n = this;
this.purgeMyProp(e), void 0 !== e.rowCount && (this.rowCount = e.rowCount, delete e.rowCount, 
this.r1 = -1, this.r2 = -1, setTimeout(function() {
n.updateListBox();
}, 0)), void 0 !== e.moreRows && (this.moreRowsGuard = e.moreRows ? Client.eleMap[e.moreRows] : void 0, 
void 0 === this.moreRows && setTimeout(() => {
Client.Utils.getScrollableParent(this.domObj)?.addEventListener("scroll", e => this.getNextPage(e));
}, 0), e.moreRows && !this.moreRowsTimer && (this.moreRowsTimer = setTimeout(function() {
this.moreRows = !0, delete this.moreRowsTimer, this.moreRowsElement || (this.moreRowsElement = document.createElement("div"), 
this.moreRowsElement.className = "more-rows", this.domObj.appendChild(this.moreRowsElement)), 
this.getNextPage();
}.bind(this), 30)), e.moreRows || (this.moreRows = !1, !this.moreRows && this.moreRowsElement && (this.domObj.removeChild(this.moreRowsElement), 
this.moreRowsElement = null)), delete e.moreRows), e.scrollDuration && (this.scrollDuration = e.scrollDuration, 
delete e.scrollDuration), e.templateName && (this.templateName = e.templateName, 
delete e.templateName), void 0 !== e.position && (delete this.posCounter, this.posInterval && (clearInterval(this.posInterval), 
delete this.posInterval), t = this.position, this.position = e.position, setTimeout(function() {
n.setPosition() ? n.handleFocus && (n.setFocus(t), n.handleFocus = !1) : (n.posCounter = 20, 
n.posInterval && (clearInterval(n.posInterval), delete n.posInterval), n.posInterval = setInterval(function() {
var e = n.setPosition();
e && n.handleFocus && (n.setFocus(t), n.handleFocus = !1), n.posCounter--, (e || n.posCounter <= 0) && (clearInterval(n.posInterval), 
delete n.posInterval, delete n.posCounter);
}, 100));
}, 0), delete e.position), (void 0 !== e.firstRec && e.firstRec !== this.firstRec || void 0 !== e.lastRec && e.lastRec !== this.lastRec) && (this.changeWindow((void 0 !== e.firstRec ? e : this).firstRec, (void 0 !== e.lastRec ? e : this).lastRec), 
delete e.firstRec, delete e.lastRec), void 0 === e.scrollLeft && void 0 === e.scrollTop || (this.scrollSetTime = new Date()), 
void 0 !== e.className && this.layout && (e.className = "container-" + this.layout + " " + e.className), 
Client.Element.prototype.updateElement.call(this, e), e.layout ? (i = this.layout, 
this.layout = e.layout, this.domObj.classList.remove("container-horizontal"), this.domObj.classList.remove("container-vertical"), 
this.domObj.classList.remove("container-absolute"), this.domObj.classList.remove("container-table"), 
"horizontal" === e.layout ? (this.domObj.classList.add("container-horizontal"), 
"table" === i && this.changeLayout()) : "vertical" === e.layout ? (this.domObj.classList.add("container-vertical"), 
"table" === i && this.changeLayout()) : "absolute" === e.layout ? (this.domObj.classList.add("container-absolute"), 
"table" === i && this.changeLayout()) : "table" === e.layout && (this.numCols = e.numCols || e.numRows, 
this.numCols || (this.numCols = 2), this.numRows = 0, this.columnsInserted = 0, 
delete e.layout, delete e.numCols, delete e.numRows, this.changeLayout())) : (e.numCols || e.numRows) && "table" === this.layout && (this.numCols = e.numCols || this.numCols, 
this.numRows = e.numRows || this.numRows, delete e.numCols, delete e.numRows, this.changeLayout()), 
0 === this.parent.rowCount && void 0 === this.rownum && (this.domObj.style.visibility = "hidden"), 
"horizontal" !== this.layout && "vertical" !== this.layout || !this.createDropTargets || window.setTimeout(function() {
this.createDropTargets();
}.bind(this), 15);
}, Client.Container.prototype.changeLayout = function() {
for (;this.domObj.lastChild; ) this.domObj.removeChild(this.domObj.lastChild);
for (var e = this.columnsInserted = 0; e < this.ne(); e++) this.appendChildObject(this, this.elements[e].domObj);
}, Client.Container.prototype.attachEvents = function(e) {
var i, t;
e && (i = this, 0 <= (t = e.indexOf("onScroll")) && (e.splice(t, 1), this.domObj.onscroll = function(e) {
var t;
(void 0 === i.scrollSetTime || 100 < new Date() - i.scrollSetTime) && (t = [], i.getScrollTop() !== this.lastScrollTop && t.push({
obj: i.id,
id: "chgProp",
content: {
name: "scrollTop",
value: i.getScrollTop(),
clid: Client.id
}
}), i.getScrollLeft() !== this.lastScrollLeft && t.push({
obj: i.id,
id: "chgProp",
content: {
name: "scrollLeft",
value: i.getScrollLeft(),
clid: Client.id
}
}), t.push({
obj: i.id,
id: "onScroll",
content: i.saveEvent(e)
}), Client.mainFrame.sendEvents(t), i.lastScrollTop = i.getScrollTop(), i.lastScrollLeft = i.getScrollLeft());
}, this.lastScrollTop = this.getScrollTop(), this.lastScrollLeft = this.getScrollLeft()), 
Client.Element.prototype.attachEvents.call(this, e));
}, Client.Container.prototype.appendChildObject = function(e, t) {
var i;
"table" === this.layout ? this.numCols && (0 === this.columnsInserted && (this.lastRowInserted = document.createElement("tr"), 
this.domObj.appendChild(this.lastRowInserted), this.numRows++), (i = document.createElement("td")).appendChild(t), 
this.lastRowInserted.appendChild(i), !1 === e.visible || "none" === t.style.display ? i.style.display = "none" : this.columnsInserted = (this.columnsInserted + 1) % this.numCols) : this.domObj.appendChild(t);
}, Client.Container.prototype.onRemoveChildObject = function(e) {
if ("table" === this.layout && this.domObj.lastChild) {
var t = e.getRootObject();
if (t && t.parentNode) {
for (var i = t.parentNode.parentNode; i; ) {
for (var n = i.lastChild; n; ) {
var s = n, n = n.previousSibling;
if (s.firstChild && s.firstChild !== t) break;
s.remove();
}
var o = i, i = i.previousSibling;
if (o.firstChild) break;
o.remove();
}
this.columnsInserted = 0, this.lastRowInserted = this.domObj.lastChild, this.lastRowInserted && (this.columnsInserted = this.lastRowInserted.childNodes.length % this.numCols);
}
}
}, Client.Container.prototype.getCell = function(e, t) {
if ("table" === this.layout) {
var i = this.domObj.getElementsByTagName("tr");
if (i && i.length >= e) {
i = i[e].getElementsByTagName("td");
if (i && i.length >= t) return i[t];
}
}
}, Client.Container.prototype.setRowSpan = function(e, t, i) {
var n = this.getCell(e, t);
if (n) {
n.rowSpan = i;
for (var s = 1; s < i; s++) this.removeCell(e + s, t);
}
}, Client.Container.prototype.setColSpan = function(e, t, i) {
var n = this.getCell(e, t);
if (n) {
n.colSpan = i;
for (var s = 1; s < i; s++) this.removeCell(e, t + s);
}
}, Client.Container.prototype.setCellContent = function(e, t, i, n) {
var s = this.getCell(t, i);
if (s) {
if ("replace" === n) for (;s.hasChildNodes(); ) s.removeChild(s.lastChild);
Client.eleMap[e]?.domObj && s.appendChild(Client.eleMap[e].domObj);
}
}, Client.Container.prototype.removeCellContent = function(e, t) {
var i = this.getCell(e, t);
if (i) for (;i.hasChildNodes(); ) {
var n = i.lastChild;
i.removeChild(n), Client.Utils.findElementFromDomObj(n).close();
}
}, Client.Container.prototype.removeCell = function(e, t) {
var i = this.getCell(e, t);
i && (this.removeCellContent(e, t), i.parentNode.removeChild(i));
}, Client.Container.prototype.addTableRow = function(e) {
if ("table" === this.layout) {
for (var t = document.createElement("tr"), i = 0; i < this.numCols; i++) {
var n = document.createElement("td");
t.appendChild(n);
}
void 0 !== e ? this.domObj.children.length >= e && this.domObj.insertBefore(t, this.domObj.children[e]) : this.domObj.appendChild(t), 
this.numRows++;
}
}, Client.Container.prototype.removeTableRow = function(e) {
var t = document.getElementsByTagName("tr");
if (t && t.length > e) for (var i = t[e], n = 0; n < i.length; n++) this.removeCell(e, n);
}, Client.Container.prototype.addTableColumn = function(e) {
var t, i;
if ("table" === this.layout) {
var n = document.getElementsByTagName("tr");
if (n) {
if (void 0 !== e) {
if (n.length >= e) for (t = 0; t < n.length; t++) i = document.createElement("td"), 
n[t].insertBefore(i, n[e]);
} else for (t = 0; t < n.length; t++) i = document.createElement("td"), n[t].appendChild(i);
this.numCols++;
}
}
}, Client.Container.removeTableColumn = function(e) {
var t = document.getElementsByTagName("tr");
if (t && t.length > e) for (var i = 0; i < t.length; i++) this.removeCell(i, e);
}, Client.Container.prototype.getScrollTop = function() {
return this.domObj.scrollTop + (this.offsetY || 0);
}, Client.Container.prototype.setScrollTop = function(e) {
this.domObj.scrollTop = e;
}, Client.Container.prototype.getScrollLeft = function() {
return this.domObj.scrollLeft;
}, Client.Container.prototype.setScrollLeft = function(e) {
this.domObj.scrollLeft = e;
}, Client.Container.prototype.updateListBox = function(e) {
var t, i, n, s, o, l;
this.skipUpdate ? this.skipUpdate = !1 : (this.initListBox(), t = Math.max(Math.floor(this.domObj_offsetWidth / this.recWidth), 1), 
i = Math.ceil(this.rowCount / t), this.rowCount === this.oldCount && !e || (l = this.scrollDiv.offsetHeight, 
this.scrollDiv.style.height = this.recHeight * i + "px", e && l && this.setScrollTop(this.getScrollTop() * (this.recHeight * i / l)), 
this.oldCount = this.rowCount), e = Math.floor(this.getScrollTop() / this.recHeight) * t, 
i = Math.ceil((this.getScrollTop() + this.domObj_clientHeight) / this.recHeight) * t, 
this.firstRec = e, this.lastRec = i, l = Math.floor(this.domObj_offsetHeight / this.recHeight), 
(e -= n = Math.floor(l * t * 1.33)) < 0 && (e = 0), (i += n) > this.rowCount && (i = this.rowCount), 
s = Math.abs(e - this.r1), s = (o = Math.abs(i - this.r2)) < s ? s : o, (o = Math.floor(1 + l * t * .33)) < 1 && (o = 1), 
this.rowCount <= n && (o = 1), (o = this.rowCount < o ? this.rowCount : o) < s && (this.r1 = e, 
this.r2 = i, (l = this.sendProp("firstRec", "lastRec")).push({
obj: this.id,
id: "onMissingRecord",
content: {
start: e,
end: i
}
}), Client.mainFrame.sendEvents(l)));
}, Client.Container.prototype.moveListBox = function(e) {
var t, i, n = Client.Utils.findElementFromDomObj(e.target);
if (n && !n.handleKeyDown || n && n.handleKeyDown && !n.handleKeyDown(e)) {
switch (e.keyCode) {
case 9:
e.shiftKey ? Client.Utils.isFirstFocusableNode(document.activeElement) ? t = "prev" : (this.moveFocus("prev"), 
e.preventDefault()) : Client.Utils.isLastFocusableNode(document.activeElement) ? t = "next" : (this.moveFocus("next"), 
e.preventDefault());
break;

case 33:
t = "pageup";
break;

case 34:
t = "pagedown";
break;

case 35:
(e.ctrlKey || e.metaKey) && (t = "last");
break;

case 36:
(e.ctrlKey || e.metaKey) && (t = "first");
break;

case 37:
Client.Utils.isFirstFocusableNode(document.activeElement) ? t = "prev" : (this.moveFocus("prev"), 
e.preventDefault());
break;

case 38:
t = "up";
break;

case 39:
Client.Utils.isLastFocusableNode(document.activeElement) ? t = "next" : (this.moveFocus("next"), 
e.preventDefault());
break;

case 40:
t = "down";
}
t && (e.preventDefault(), n = Math.max(Math.floor(this.domObj_offsetWidth / this.recWidth), 1), 
i = Math.floor(this.domObj_offsetHeight / this.recHeight), this.handleFocus = !0, 
this.domObj.onnavigate({
cmd: t,
columns: n,
rows: i,
type: "navigate"
}));
}
}, Client.Container.prototype.initListBox = function() {
var e;
this.scrollDiv || (this.scrollDiv = document.createElement("div"), this.scrollDiv.className = "window-scroller", 
"" === this.domObj.style.position && (this.domObj.style.position = "relative"), 
"" === this.domObj.style.overflow && "" === this.domObj.style.overflowY && (this.domObj.style.overflowY = "auto"), 
this.domObj.appendChild(this.scrollDiv), this.tmpl = this.elements[0], e = window.getComputedStyle(this.tmpl.domObj), 
this.recWidth = this.tmpl.domObj.offsetWidth + parseInt(e.marginLeft) + parseInt(e.marginRight), 
this.recHeight = this.tmpl.domObj.offsetHeight + parseInt(e.marginTop) + parseInt(e.marginBottom), 
this.cacheProp(), this.tmpl.domObj.style.display = "none", this.domObj.addEventListener("scroll", function() {
this.scrollStartTime || (this.scrollStartTime = new Date().getTime(), this.scrollPosition = this.getScrollTop(), 
requestAnimationFrame(this.fireScrollRaf.bind(this)), this.updateListBox());
}.bind(this)), this.domObj.tabIndex = "0", this.domObj.addEventListener("keydown", function(e) {
this.moveListBox(e);
}.bind(this), !0));
}, Client.Container.prototype.fireScrollRaf = function() {
var e = !0, t = this.getScrollTop(), i = new Date().getTime(), n = this.domObj.clientHeight, s = t - this.scrollPosition, o = i - this.scrollStartTime, l = Math.floor(1e3 * Math.abs(s) / o);
80 < o && o < 300 && 1e3 < l && (this.offsetY = s), t !== this.scrollPosition && 0 < n ? (this.scrollStartTime = i, 
this.scrollPosition = t) : (2e3 < o || 0 === n) && (e = !1, this.scrollStartTime = void 0, 
this.scrollPosition = void 0), e && requestAnimationFrame(this.fireScrollRaf.bind(this)), 
0 < n && this.updateListBox(), this.offsetY = 0;
}, Client.Container.prototype.cacheProp = function() {
this.domObj_offsetWidth = this.domObj.offsetWidth, this.domObj_offsetHeight = this.domObj.offsetHeight, 
this.domObj_clientHeight = this.domObj.clientHeight;
}, Client.Container.prototype.moveToListPosition = function(e) {
var t, i, n, s = this;
this.recWidth ? (i = Math.max(Math.floor(this.domObj_offsetWidth / this.recWidth), 1), 
t = Math.floor(e.rownum / i), i = e.rownum % i, "absolute" !== e.domObj.style.position && (e.domObj.style.position = "absolute", 
e.domObj.style.left = 0, e.domObj.style.top = 0), n = this.getListTopOffset(), e.domObj.style.transform = "translate3d(" + i * this.recWidth + "px," + (t * this.recHeight + n) + "px,0px)") : setTimeout(function() {
s.moveToListPosition(e);
}, 0);
}, Client.Container.prototype.onResize = function(e) {
this.updateTemplateSize(), this.moreRows && this.getNextPage(), Client.Element.prototype.onResize.call(this, e);
}, Client.Container.prototype.updateTemplateSize = function() {
var e;
void 0 !== this.rowCount && this.tmpl && (this.tmpl.domObj.style.display = "", e = window.getComputedStyle(this.tmpl.domObj), 
0 < this.tmpl.domObj.offsetWidth) && (this.recWidth = this.tmpl.domObj.offsetWidth + parseInt(e.marginLeft) + parseInt(e.marginRight), 
this.recHeight = this.tmpl.domObj.offsetHeight + parseInt(e.marginTop) + parseInt(e.marginBottom), 
this.tmpl.domObj.style.display = "none", this.cacheProp(), this.updateListBox(!0));
}, Client.Container.prototype.setPosition = function(e) {
var t = !0, i = this.domObj;
if (void 0 === e && (e = this.position, t = !1), this.recWidth) var n = Math.max(Math.floor(this.domObj_offsetWidth / this.recWidth), 1), s = Math.floor(e / n) * this.recHeight, o = this.recHeight; else {
for (var l = !1; i; ) {
if ("visible" !== window.getComputedStyle(i).overflowY) {
l = !0;
break;
}
if ("app-ui" === i.id) break;
i = i.parentNode;
}
l || (i = this.domObj);
var a = this.templateName || "";
if (!a) for (var r = 1; r < this.ne(); r++) if (this.elements[r].name === this.elements[r - 1].name) {
a = this.elements[r].name;
break;
}
if (a) for (var d = 0, r = 0; r < this.ne(); r++) {
var h = this.elements[r];
if (a === h.name) {
if (d === this.position) {
s = h.getRootObject().offsetTop, o = h.getRootObject().offsetHeight;
break;
}
d++;
}
}
}
return void 0 !== s && (e = void 0, t ? e = s : (s < i.scrollTop && (e = s), i.scrollTop + i.clientHeight < s + o && (e = s + o - i.clientHeight)), 
void 0 !== e && this.scrollWithAnimation(i, e), t) && (this.skipUpdate = !0), void 0 !== s;
}, Client.Container.prototype.scrollWithAnimation = function(t, e) {
if (this.domObj) {
for (var i = !0, n = document.getElementById("app-ui"), s = this.domObj; s && s !== n && s !== document; ) {
var o = s.style, l = (window.getComputedStyle ? window.getComputedStyle(s) : s.currentStyle).transition;
if (!s.parentNode || "none" === o.display || "" !== o.transition && "" !== l && l !== this.scrollBlockedTransition) {
this.scrollBlockedTransition = l, i = !1;
break;
}
s = s.parentNode;
}
if (!i) {
if (!this.scrollTimeout) {
if (this.nScrollTry ? this.nScrollTry++ : this.nScrollTry = 0, 15 < this.nScrollTry) return void delete this.nScrollTry;
this.scrollTimeout = setTimeout(function() {
delete this.scrollTimeout, this.scrollWithAnimation(t, e);
}.bind(this), 100);
}
return;
}
}
this.scrollTimeout && (clearTimeout(this.scrollTimeout), delete this.scrollTimeout), 
delete this.scrollBlockedTransition, delete this.nScrollTry;
var a = t.scrollHeight - t.clientHeight;
a < e && (e = a, (a = []).push({
obj: this.id,
id: "chgProp",
content: {
name: "scrollTop",
value: e,
clid: Client.id
}
}), Client.mainFrame.sendEvents(a)), this.scrollDuration && 0 < this.scrollDuration && !1 !== this.animate ? (this.tweenScroll ? this.tweenScroll.isPlaying() && this.tweenScroll.stop() : this.tweenScroll = new Tweenable(), 
a = {
from: {
scrollTop: t.scrollTop
},
to: {
scrollTop: e
},
duration: this.scrollDuration,
easing: "easeTo",
step: function(e) {
t.scrollTop = e.scrollTop;
},
finish: function(e) {
t.scrollTop = e.scrollTop;
}
}, this.tweenScroll.tween(a)) : t.scrollTop = e;
}, Client.Container.prototype.setFocus = function(e) {
var t, i, n = this.position, s = (void 0 === e && (e = 0), this.getElementToFocus());
if (s) e < n || 1 < e - n ? (t = s.getFirstFocusableElement(), i = 0) : n < e && (i = (t = s.getLastFocusableElement()).domObj.value.length); else {
for (var o, l = 0; l < this.ne(); l++) if (this.elements[l].rownum === n) {
o = this.elements[l];
break;
}
o && (t = o.getFirstFocusableElement());
}
t && (t.focus(), Client.Utils.setCursorPos(document.activeElement, i));
}, Client.Container.prototype.moveFocus = function(e) {
var t, i, n = this.getElementToFocus();
n && (t = document.activeElement, t = Client.Utils.findElementFromDomObj(t), "prev" === e ? (i = n.getPrevFocusableElement(t)) && (i.focus(), 
Client.Utils.setCursorPos(document.activeElement, document.activeElement.value.length)) : "next" === e && (i = n.getNextFocusableElement(t)) && (i.focus(), 
Client.Utils.setCursorPos(document.activeElement, 0)));
}, Client.Container.prototype.getElementToFocus = function() {
for (var e, t = document.activeElement, i = this.position, n = (void 0 === i && void 0 === (i = Client.Utils.findElementFromDomObj(t).rownum) && (i = 0), 
t.parentNode); n; ) {
if (n === this.domObj) {
for (var s = 0; s < this.ne(); s++) if (this.elements[s].rownum === i) {
e = this.elements[s];
break;
}
break;
}
n = n.parentNode;
}
return e;
}, Client.Container.prototype.changeWindow = function(e, t) {
this.firstRec = e, this.lastRec = t;
var i = this;
setTimeout(function() {
i.setPosition(e);
}, 0);
}, Client.Container.prototype.getNextPage = function(e) {
var i = (i = e?.srcElement) || Client.Utils.getScrollableParent(this.domObj);
if (this.moreRows) {
var e = !1;
if (this.moreRowsGuard) {
let t = this.moreRowsGuard.domObj || this.moreRowsElement;
if (t && t.offsetParent !== i) {
let e = t;
for (;e && e.offsetParent !== i; ) {
if ("app-ui" === e.id) {
e = void 0;
break;
}
e = e.parentNode;
}
e && (t = e);
}
t && t.offsetTop < i.scrollTop + 3 * i.clientHeight / 2 && (e = !0);
} else i.scrollTop + i.clientHeight >= i.scrollHeight - i.clientHeight / 2 && (e = !0);
e && (this.moreRows = !1, (e = []).push({
obj: this.id,
id: "chgProp",
content: {
name: "scrollTop",
value: i.scrollTop,
clid: Client.id
}
}), e.push({
obj: this.id,
id: "onNextPage",
content: {
pos: i.scrollTop
}
}), Client.mainFrame.sendEvents(e));
}
}, Client.Container.prototype.insertBefore = function(e) {
return this.moreRowsElement && (this.domObj.removeChild(this.moreRowsElement), this.moreRowsElement = null), 
Client.Element.prototype.insertBefore.call(this, e);
}, Client.Container.prototype.getListTopOffset = function() {
return 0;
}, Client.Container.prototype.visibilityChanged = function(e) {
e && this.updateTemplateSize(), Client.Element.prototype.visibilityChanged.call(this, e);
}, Client.Span = function(e, t, i) {
Client.Element.call(this, e, t, i), this.domObj = document.createElement("span"), 
this.updateElement(e), this.attachEvents(e.events), t.appendChildObject(this, this.domObj);
}, Client.Span.prototype = new Client.Element(), Client.Meter = function(e, t, i) {
Client.Element.call(this, e, t, i), this.domObj = document.createElement("meter"), 
this.updateElement(e), this.attachEvents(e.events), t.appendChildObject(this, this.domObj);
}, Client.Meter.prototype = new Client.Element(), Client.Button = function(e, t, i) {
void 0 !== e && void 0 !== i && (Client.Element.call(this, e, t, i), i = e.tag || "button", 
this.domObj = document.createElement(i), delete e.tag, this.updateElement(e), this.attachEvents(e.events), 
t.appendChildObject(this, this.domObj), this.createChildren(e));
}, Client.Button.prototype = new Client.Element(), Client.Button.prototype.updateElement = function(e) {
if (void 0 !== e.innerText) {
for (var t = [], i = 0; i < this.domObj.children.length; i++) t.push(this.domObj.children.item(i));
this.domObj.innerText = e.innerText;
for (i = 0; i < t.length; i++) this.domObj.appendChild(t[i]);
delete e.innerText;
}
e.cmdKey && (this.cmdKey = e.cmdKey.toUpperCase(), delete e.cmdKey), Client.Element.prototype.updateElement.call(this, e);
}, Client.Device = function() {
this.registeredEleMap = {}, this.deviceOrientation = "vertical", window.matchMedia && window.matchMedia("(orientation: landscape)").matches && (this.deviceOrientation = "horizontal"), 
this.language = navigator.language, this.platform = navigator.platform, this.userAgent = navigator.userAgent, 
navigator.userAgentData && navigator.userAgentData.getHighEntropyValues([ "model", "platformVersion" ]).then(function(e) {
this.model = e.model, this.operatingSystemVersion = e.platformVersion, Client.mainFrame.sendEvents([ {
id: "onSetDeviceProperties",
content: {
properties: {
model: this.model,
operatingSystemVersion: this.operatingSystemVersion
}
}
} ]);
}.bind(this)).catch(function(e) {}), moment.locale(this.language), this.screenWidth = screen.width, 
this.screenHeight = screen.height, this.clientWidth = window.innerWidth, this.clientHeight = window.innerHeight, 
this.isMobile = !1, -1 !== this.userAgent.indexOf("Mobile") || -1 !== this.userAgent.indexOf("IEMobile") || -1 !== this.userAgent.indexOf("Opera Mobi") || -1 !== this.userAgent.indexOf("Opera Tablet") || -1 !== this.userAgent.indexOf("Tablet") || -1 !== this.userAgent.indexOf("Android") ? this.isMobile = !0 : this.isMobile = "ontouchstart" in window || 0 < navigator.MaxTouchPoints || 0 < navigator.msMaxTouchPoints;
var e = !1;
try {
e = parent && parent !== window && parent.location && 0 < parent.location.pathname.indexOf("/preview.html");
} catch (e) {}
var t = -1 < this.userAgent.indexOf("like Mac OS X") && -1 < this.userAgent.indexOf("Safari"), t = (Client.resourceHome ? this.shell = window : !this.isMobile || parent === window || e || t ? this.shell = new Client.ShellEmulator(this) : this.shell = parent, 
this.isMobile && parent !== window && (window.history.replaceState(null, ""), window.history.pushState({
url: "base"
}, "")), this.isPWA = this.shell instanceof Client.ShellEmulator && Client.isOffline() && (navigator.standalone || window.matchMedia("display-mode: standalone").matches || .9 < window.innerHeight / window.outerHeight), 
this.isMobile && (this.userAgent = this.userAgent.replace("Intel Mac OS X", "like Mac OS X")), 
this.operatingSystem = this.userAgent.substr(this.userAgent.indexOf("(") + 1, this.userAgent.indexOf(";")), 
this.isMobile ? -1 !== this.userAgent.indexOf("Android") ? this.operatingSystem = "android" : -1 !== this.userAgent.indexOf("Windows") ? this.operatingSystem = "windows" : -1 !== this.userAgent.indexOf("like Mac OS X") || -1 !== this.userAgent.indexOf("Apple") ? this.operatingSystem = "ios" : -1 === this.userAgent.indexOf("BlackBerry") && -1 === this.userAgent.indexOf("BB10") && -1 === this.userAgent.indexOf("RIM") || (this.operatingSystem = "blackberry") : -1 !== this.userAgent.indexOf("Linux") ? this.operatingSystem = "linux" : -1 !== this.userAgent.indexOf("Windows") ? this.operatingSystem = "windows" : -1 !== this.userAgent.indexOf("Macintosh") && (this.operatingSystem = "macos"), 
this.operatingSystemVersion = "not available", this.isMobile ? "android" === this.operatingSystem ? -1 === this.userAgent.indexOf("Android;") && (i = this.userAgent.substr(this.userAgent.indexOf("Android ") + 8), 
this.operatingSystemVersion = i.substr(i, i.indexOf(";"))) : "ios" === this.operatingSystem ? this.isPWA ? (i = (e = this.userAgent.match(/Version\/\S+/)) && e[0] || "", 
this.operatingSystemVersion = i.replace("Version/", "")) : -1 !== (i = this.userAgent.substr(0, this.userAgent.indexOf(" like Mac OS X"))).indexOf("CPU") ? this.operatingSystemVersion = i.substr(i.indexOf("CPU ") + 4).replace("iPhone", "").replace("OS ", "").replace(/_/g, ".") : -1 !== this.userAgent.indexOf("Version/") ? this.operatingSystemVersion = this.userAgent.substr(this.userAgent.indexOf("Version/"), 12).replace("Version/", "") : -1 !== this.userAgent.indexOf("Mobile/") && (this.operatingSystemVersion = this.userAgent.substr(this.userAgent.indexOf("Mobile/"), 9).replace("Mobile/", "")) : "windows" === this.operatingSystem ? (i = this.userAgent.substr(this.userAgent.indexOf("Windows ") + 8), 
this.operatingSystemVersion = i.substr(i, i.indexOf(";")).replace("Phone", "").replace("NT", "")) : "blackberry" === this.operatingSystem && (-1 !== this.userAgent.indexOf("BB") ? this.operatingSystemVersion = this.userAgent.substr(this.userAgent.indexOf("BB") + 2, 2) : -1 !== this.userAgent.indexOf("RIM") && (i = this.userAgent.substr(this.userAgent.indexOf("RIM ") + 4), 
this.operatingSystemVersion = i.substr(0, i.indexOf(";")).replace("Tablet", "").replace("OS ", ""))) : "macos" === this.operatingSystem ? (t = (i = this.userAgent.substr(this.userAgent.indexOf("Mac OS X ") + 9)).indexOf(")"), 
e = i.indexOf(";"), this.operatingSystemVersion = i.substr(0, t = 0 < e && e < t ? e : t).replace(/_/g, ".")) : "windows" === this.operatingSystem && (i = this.userAgent.substr(this.userAgent.indexOf("Windows ") + 8), 
this.operatingSystemVersion = i.substr(i, i.indexOf(";")).replace("NT", "")), this.type = "desktop", 
this.isMobile && (this.type = "smartphone", /iPad/i.test(navigator.userAgent) && (this.type = "tablet"), 
"ios" !== this.operatingSystem || /iPhone/i.test(navigator.userAgent) || (this.type = "tablet"), 
/Android/i.test(navigator.userAgent) && !/Mobile/i.test(navigator.userAgent) && (this.type = "tablet"), 
/Crosswalk/i.test(navigator.userAgent)) && !/Mobile/i.test(navigator.userAgent) && (this.type = "tablet"), 
this.browserName = navigator.appName, -1 !== this.userAgent.indexOf("OPR") || -1 !== this.userAgent.indexOf("OPiOS") || -1 !== this.userAgent.indexOf("Opera") ? this.browserName = "Opera" : -1 !== this.userAgent.indexOf("Chrome") || -1 !== this.userAgent.indexOf("CriOS") ? this.browserName = "Chrome" : -1 !== this.userAgent.indexOf("Safari") ? this.browserName = "Safari" : -1 !== this.userAgent.indexOf("Firefox") ? this.browserName = "Firefox" : -1 !== this.userAgent.indexOf("Trident") && (this.browserName = "IE"), 
this.browserVersion = "not available", i = "", this.isMobile ? "Chrome" === this.browserName ? (e = "android" === this.operatingSystem ? "Chrome/" : "CriOS/", 
i = this.userAgent.substr(this.userAgent.indexOf(e) + e.length), this.browserVersion = i.substr(0, i.indexOf("."))) : "Opera" === this.browserName || "Safari" === this.browserName ? (i = "ios" === this.operatingSystem && "Opera" === this.browserName ? this.userAgent.substr(this.userAgent.indexOf("OPiOS/") + 6) : "android" === this.operatingSystem && "Opera" === this.browserName && -1 !== this.userAgent.indexOf("OPR") ? this.userAgent.substr(this.userAgent.indexOf("OPR/") + 4) : this.userAgent.substr(this.userAgent.indexOf("Version/") + 8), 
this.browserVersion = i.substr(0, i.indexOf("."))) : "IE" === this.browserName && (i = this.userAgent.substr(this.userAgent.indexOf("Trident/") + 8), 
this.browserVersion = parseInt(i.substr(0, i.indexOf("."))) + 4) : "IE" === this.browserName ? (i = this.userAgent.substr(this.userAgent.indexOf("Trident/") + 8), 
this.browserVersion = parseInt(i.substr(0, i.indexOf("."))) + 4) : "Opera" === this.browserName ? (i = this.userAgent.substr(this.userAgent.indexOf("OPR/") + 4), 
this.browserVersion = i.substr(0, i.indexOf("."))) : "Safari" === this.browserName && (i = this.userAgent.substr(this.userAgent.indexOf("Version/") + 8), 
this.browserVersion = i.substr(0, i.indexOf("."))), "not available" === this.browserVersion && -1 !== this.userAgent.indexOf(this.browserName) && (i = this.userAgent.substr(this.userAgent.indexOf(this.browserName) + this.browserName.length + 1), 
this.browserVersion = i.substr(0, i.indexOf("."))), this.isMobile && "ios" === this.operatingSystem && (this.browserName = "Safari", 
"not available" === this.browserVersion) && (i = this.operatingSystemVersion, this.browserVersion = i.substr(0, i.indexOf("."))), 
this.isMobile && "android" === this.operatingSystem && !this.isPWA && (this.browserName = "Chrome", 
"not available" === this.browserVersion) && (i = this.operatingSystemVersion, this.browserVersion = i.substr(0, i.indexOf("."))), 
this.ua = this.browserName.toLowerCase() + ("not available" !== this.browserVersion ? this.browserVersion : ""), 
this.locale = navigator.userLanguage || navigator.language, this.locale = this.locale ? this.locale.replace("-", "_") : void 0, 
moment().locale(this.language || "")), e = (this.dateFormat = t.localeData().longDateFormat("L"), 
this.timeFormat = t.localeData().longDateFormat("LT").replace("mm", "nn"), this.setBattery(), 
this.setNetworkState(), this.setMonthNames(), this.setDayNames(), this.firstDayOfWeek = this.dayNames[1], 
-1 !== this.operatingSystemVersion.indexOf(".") ? this.operatingSystemVersion.indexOf(".") : this.operatingSystemVersion.length), i = (this.version = this.operatingSystemVersion.substr(0, e).trim(), 
Intl.DateTimeFormat().resolvedOptions().timeZone), e = (this.timezone = moment().tz(i).zoneAbbr(), 
this.isDayLightSavingTime = new Date().getTimezoneOffset() === new Date(2021, 7, 1).getTimezoneOffset(), 
"android" === this.operatingSystem && "Chrome" === this.browserName && (t = (t = /\(([^)]+)\)/.exec(this.userAgent)[1] || "").split(";")[2] || "", 
this.model = t.replace(")", "").trim()), this.setNumberPattern(), this.setCurrencyPattern(), 
this.numberFormat = "#,###,###,###.####", this.currencyFormat = "#,###,###,##0.00", 
this.decimalDot = "." === new Intl.NumberFormat(this.language).format(.1).charAt(1), 
this.shell instanceof Client.ShellEmulator && this.setUUID(), this.viewportParams = {}, 
Client.eleMap["device-ui"] = this, document.getElementById("app-ui"));
e && ("ios" === this.operatingSystem && e.classList.add("platform-ios"), "android" === this.operatingSystem) && e.classList.add("platform-android"), 
window.addEventListener("message", function(e) {
var t = e.data, i = t && "shell" === t.source;
this.shell instanceof Client.ShellEmulator && ("device-oidc" === t.obj && "authorizeCallback" === t.id ? i = !0 : (i = Client.mainFrame.theme && ("true" == Client.mainFrame.theme.allowCrossDomainCommands || 1 == Client.mainFrame.theme.allowCrossDomainCommands)) && (t.mode = "client", 
t = {
id: "onCommand",
content: {
query: t
}
})), !i || e.data.destination && "app" !== e.data.destination || this.onMessage(t);
}.bind(this));
}, Client.Device.prototype.setProp = function(e) {
e.keyboardHeight && (this.keyboardHeight = e.keyboardHeight), e.rootApp && (this.rootApp = e.rootApp), 
void 0 !== e.keyboard && this.onChangeKeyboardVisibility(e.keyboard);
}, Client.Device.prototype.onChangeKeyboardVisibility = function(e) {}, Client.Device.prototype.setViewport = function(e, t, i, n) {
var s, o;
i !== Client.id && (s = !1, e && "none" !== e || ("none" === e && (s = !0), e = "desktop"), 
o = this, document.getElementById("app-ui").style.visibility = "", this.isMobile && !this.emulatorsAck ? (this.emulatorsAck = !0, 
"object" == typeof TH && "ios" === this.operatingSystem && TH.init(document.getElementById("app-ui")), 
t = o.getPhDevOrientation(), this.sendViewport(this.type, t), window.addEventListener("orientationchange", function(e) {
o.changeOrientation(e);
})) : (e && (this.viewportParams.devicetype = e), t && (this.viewportParams.orientation = t), 
"server" === i && !n || parent === window ? "server" === i && s && parent !== window && !n && parent.postMessage("getSelectedDevice", "*") : ("desktop" === e ? parent.postMessage("changedevice:desktop", "*") : parent.postMessage("changedevice:" + this.viewportParams.devicetype + "-" + this.viewportParams.orientation, "*"), 
n && parent.postMessage("blockui", "*"))));
}, Client.Device.prototype.sendViewport = function(e, t, i) {
Client.mainFrame.isEditing() || (e = [ {
id: "onChangeViewport",
content: {
devicetype: e,
orientation: t,
origin: Client.id,
physical: this.isMobile || !1
}
} ], Client.mainFrame.sendEvents(e), void 0 !== i && (t = void 0 === this.isMobilePreview, 
this.isMobilePreview = i, document.body.classList.toggle("mobile-preview", this.isMobilePreview), 
t) && Client.mainFrame.sendEvents(e = [ {
id: "onSetDeviceProperties",
content: {
properties: {
_isMobile: i,
isPreview: !0
}
}
} ]));
}, Client.Device.prototype.updateProp = function(e) {
var t = this, i = (e = e || null == this.viewportParams.devicetype || "none" === this.viewportParams.devicetype || this.isMobile, 
document.getElementById("app-ui"));
i && ("ios" === this.operatingSystem && (i.classList.add("platform-ios"), i.classList.add("ios")), 
"android" === this.operatingSystem && (i.classList.add("platform-android"), i.classList.add("md")), 
e ? (e = Client.isOffline() ? 100 : 0, setTimeout(function() {
var e;
t.deviceOrientation = t.getPhDevOrientation(), t.clientHeight = i.clientHeight, 
t.clientWidth = i.clientWidth, t.screenSizeAdjusted || (t.screenSizeAdjusted = !0, 
t.screenWidth = "vertical" === t.deviceOrientation ? screen.width : screen.height, 
t.screenHeight = "vertical" === t.deviceOrientation ? screen.height : screen.width), 
Client.clientType && "guest" === Client.clientType || (e = [ {
id: "onSetDeviceProperties",
content: {
properties: t.getProp()
}
} ], Client.mainFrame.sendEvents(e));
}, e)) : (this.deviceOrientation = this.viewportParams.orientation, this.clientHeight = i.clientHeight, 
this.clientWidth = i.clientWidth, this.screenSizeAdjusted || (this.screenSizeAdjusted = !0, 
this.screenWidth = "vertical" === this.deviceOrientation ? this.clientWidth : this.clientHeight, 
this.screenHeight = "vertical" === this.deviceOrientation ? this.clientHeight : this.clientWidth), 
Client.clientType && "guest" === Client.clientType || (e = [ {
id: "onSetDeviceProperties",
content: {
properties: this.getProp()
}
} ], Client.mainFrame.sendEvents(e))));
}, Client.Device.prototype.changeOrientation = function() {
this.sendViewport(this.type, this.getPhDevOrientation());
}, Client.Device.prototype.getProp = function() {
var e = {
userAgent: this.userAgent,
ua: this.ua,
screenWidth: this.screenWidth,
screenHeight: this.screenHeight,
clientWidth: this.clientWidth,
clientHeight: this.clientHeight,
language: this.language,
platform: this.platform,
deviceType: this.type,
_isMobile: this.isMobile || this.isMobilePreview,
_isInsideShell: this.shell === parent || this.shell === window,
deviceOrientation: this.deviceOrientation,
browserVersion: this.browserVersion,
browserName: this.browserName,
operatingSystem: this.operatingSystem,
operatingSystemVersion: this.operatingSystemVersion,
timeZone: moment.tz.guess(),
launcherID: this.launcherID,
launcherName: this.launcherName,
launcherVersion: this.launcherVersion,
locale: this.locale,
monthNames: this.monthNames,
dayNames: this.dayNames,
firstDayOfWeek: this.firstDayOfWeek,
version: this.version,
model: this.model,
timezone: this.timezone,
isDayLightSavingTime: this.isDayLightSavingTime,
numberPattern: this.numberPattern,
currencyPattern: this.currencyPattern,
isPWA: this.isPWA
};
return this.shell instanceof Client.ShellEmulator && (e.uuid = this.uuid), e;
}, Client.Device.prototype.getPhDevOrientation = function() {
return 90 === window.orientation || -90 === window.orientation ? "horizontal" : "vertical";
}, Client.Device.prototype.processRequest = function(e) {
"device-ui" === e.obj ? this[e.id] && (e.cnt && e.cnt.params ? this[e.id].apply(this, e.cnt.params) : this[e.id](e.cnt || e.content)) : this.shell && this.shell.postMessage(e, "*");
}, Client.Device.prototype.onMessage = function(e) {
for (var t in this.registeredEleMap) -1 !== (this.registeredEleMap[t] || []).indexOf(e.id) && (t = Client.eleMap[t]) && t.handleRegisteredEvent(e);
e.client ? Client.mainFrame.processRequest([ e ]) : Client.mainFrame.sendEvents([ e ]);
}, Client.Device.prototype.onBackButton = function() {
history.back();
}, Client.Device.prototype.registerElement = function(e, t) {
e && t && (this.registeredEleMap[e.id] = t);
}, Client.Device.prototype.unregisterElement = function(e) {
e && delete this.registeredEleMap[e.id];
}, Client.Device.prototype.updateAppuiClasses = function() {
var e = Client.mainFrame.theme ? Client.mainFrame.theme.darkMode : void 0, t = (((e = (e = e && "false" === e ? !1 : e) && "true" === e ? !0 : e) && "auto" === e || void 0 === e) && (window.location.search.includes("previewDark=true") ? e = !0 : "auto" === e && (e = window.matchMedia("(prefers-color-scheme: dark)").matches)), 
e = e || !1, document.getElementById("app-ui"));
t && (t.classList.toggle("dark-mode", e), document.body.classList.toggle("dark-mode", e), 
t.classList.toggle("ionIcon5", Client.mainFrame.theme && "5" === Client.mainFrame.theme.ionIcons));
}, Client.Device.prototype.setBattery = function() {
var t;
"function" == typeof navigator.getBattery && (t = function(e, t) {
var i = {};
void 0 !== e && (i.batteryLevel = e), void 0 !== t && (i.isPlugged = t), Client.mainFrame.sendEvents([ {
id: "onSetDeviceProperties",
content: {
properties: i
}
} ]);
}, navigator.getBattery().then(function(e) {
this.batteryLevel = 100 * e.level, this.isPlugged = e.charging, t(this.batteryLevel, this.isPlugged), 
e.addEventListener("levelchange", function() {
this.batteryLevel = 100 * e.level, t(this.batteryLevel);
}.bind(this), !1), e.addEventListener("chargingchange", function() {
this.isPlugged = e.charging, t(void 0, this.isPlugged);
}.bind(this), !1);
}.bind(this)));
}, Client.Device.prototype.setNetworkState = function() {
try {
var e = function() {
var e, t;
this.networkState = "none", navigator.onLine && (this.networkState = navigator.connection.type, 
navigator.connection.effectiveType && ("cellular" === navigator.connection.type ? this.networkState = "cell" + ("4g" === navigator.connection.effectiveType ? "_" : "") + navigator.connection.effectiveType.replace("slow-", "") : this.networkState = "wifi"), 
this.networkState = this.networkState || "unknown"), void 0 !== (e = this.networkState) && (t = [ {
id: "onSetDeviceProperties",
content: {
properties: {
networkState: e
}
}
} ], Client.mainFrame ? Client.mainFrame.sendEvents(t) : setTimeout(function() {
Client.mainFrame.sendEvents(t);
}, 0));
}.bind(this);
e(), navigator.connection.addEventListener("change", e, !1);
} catch (e) {}
}, Client.Device.prototype.setMonthNames = function() {
var t = (this.locale || "en-US").replace("_", "-");
this.monthNames = [];
for (let e = 0; e < 12; e++) {
var i = new Date(2020, e, 15, 0, 0, 0, 0);
this.monthNames.push(i.toLocaleDateString(t, {
month: "long"
}));
}
}, Client.Device.prototype.setDayNames = function() {
var t = (this.locale || "en-US").replace("_", "-");
this.dayNames = [];
for (let e = 0; e < 7; e++) {
var i = new Date(2020, 10, e + 1, 0, 0, 0, 0);
this.dayNames.push(i.toLocaleDateString(t, {
weekday: "long"
}));
}
}, Client.Device.prototype.lockOrientation = function(e) {
this.isPWA && window.screen && window.screen.orientation && window.screen.orientation.lock && document.documentElement && document.documentElement.requestFullscreen && document.documentElement.requestFullscreen().then(function() {
window.screen.orientation.lock(e).then(function() {}).catch(function(e) {});
}).catch(function(e) {});
}, Client.Device.prototype.unlockOrientation = function() {
window.screen && window.screen.orientation && window.screen.orientation.unlock && window.screen.orientation.unlock();
}, Client.Device.prototype.setUUID = function() {
var t = Client.Utils.getCookie("uuid") || "";
if (!t) {
for (let e = 0; e < 16; e++) t += "0123456789abcdef"[Math.floor(16 * Math.random())];
document.cookie = "uuid=" + t + ";86313600000;path=/" + ("https:" === window.location.protocol ? ";secure" : "");
}
this.uuid = t;
}, Client.Device.prototype.setNumberPattern = function() {
var e = (this.locale || "en-US").replace("_", "-"), e = new Intl.NumberFormat(e).format(1000.12345), t = /([\d]*)$/.exec(e)[0].length, i = e.replace("1", "#").replace(/[0]{2}/, "##").replace(/([\d]*)$/, "#".repeat(t)), n = e.match(/[\D]/g)[1], e = e.match(/[\D]/g)[0];
this.numberPattern = {
pattern: i,
symbol: n,
fraction: t,
rounding: 0,
positive: "",
negative: "-",
decimal: n,
grouping: e
};
}, Client.Device.prototype.setCurrencyPattern = function() {
var e = this.locale.split("_")[1] || "US", t = (this.locale || "en-US").replace("_", "-"), e = {
AD: "EUR",
AE: "AED",
AF: "AFN",
AG: "XCD",
AI: "XCD",
AL: "ALL",
AM: "AMD",
AN: "ANG",
AO: "AOA",
AR: "ARS",
AS: "USD",
AT: "EUR",
AU: "AUD",
AW: "AWG",
AX: "EUR",
AZ: "AZN",
BA: "BAM",
BB: "BBD",
BD: "BDT",
BE: "EUR",
BF: "XOF",
BG: "BGN",
BH: "BHD",
BI: "BIF",
BJ: "XOF",
BL: "EUR",
BM: "BMD",
BN: "BND",
BO: "BOB",
BQ: "USD",
BR: "BRL",
BS: "BSD",
BT: "BTN",
BV: "NOK",
BW: "BWP",
BY: "BYN",
BZ: "BZD",
CA: "CAD",
CC: "AUD",
CD: "CDF",
CF: "XAF",
CG: "XAF",
CH: "CHF",
CI: "XOF",
CK: "NZD",
CL: "CLP",
CM: "XAF",
CN: "CNY",
CO: "COP",
CR: "CRC",
CU: "CUP",
CV: "CVE",
CW: "ANG",
CX: "AUD",
CY: "EUR",
CZ: "CZK",
DE: "EUR",
DJ: "DJF",
DK: "DKK",
DM: "XCD",
DO: "DOP",
DZ: "DZD",
EC: "USD",
EE: "EUR",
EG: "EGP",
EH: "MAD",
ER: "ERN",
ES: "EUR",
ET: "ETB",
FI: "EUR",
FJ: "FJD",
FK: "FKP",
FM: "USD",
FO: "DKK",
FR: "EUR",
GA: "XAF",
GB: "GBP",
GD: "XCD",
GE: "GEL",
GF: "EUR",
GG: "GBP",
GH: "GHS",
GI: "GIP",
GL: "DKK",
GM: "GMD",
GN: "GNF",
GP: "EUR",
GQ: "XAF",
GR: "EUR",
GS: "GBP",
GT: "GTQ",
GU: "USD",
GW: "XOF",
GY: "GYD",
HK: "HKD",
HM: "AUD",
HN: "HNL",
HR: "HRK",
HT: "HTG",
HU: "HUF",
ID: "IDR",
IE: "EUR",
IL: "ILS",
IM: "GBP",
IN: "INR",
IO: "USD",
IQ: "IQD",
IR: "IRR",
IS: "ISK",
IT: "EUR",
JE: "GBP",
JM: "JMD",
JO: "JOD",
JP: "JPY",
KE: "KES",
KG: "KGS",
KH: "KHR",
KI: "AUD",
KM: "KMF",
KN: "XCD",
KP: "KPW",
KR: "KRW",
KW: "KWD",
KY: "KYD",
KZ: "KZT",
LA: "LAK",
LB: "LBP",
LC: "XCD",
LI: "CHF",
LK: "LKR",
LR: "LRD",
LS: "LSL",
LT: "LTL",
LU: "EUR",
LV: "LVL",
LY: "LYD",
MA: "MAD",
MC: "EUR",
MD: "MDL",
ME: "EUR",
MF: "EUR",
MG: "MGA",
MH: "USD",
MK: "MKD",
ML: "XOF",
MM: "MMK",
MN: "MNT",
MO: "MOP",
MP: "USD",
MQ: "EUR",
MR: "MRO",
MS: "XCD",
MT: "EUR",
MU: "MUR",
MV: "MVR",
MW: "MWK",
MX: "MXN",
MY: "MYR",
MZ: "MZN",
NA: "NAD",
NC: "XPF",
NE: "XOF",
NF: "AUD",
NG: "NGN",
NI: "NIO",
NL: "EUR",
NO: "NOK",
NP: "NPR",
NR: "AUD",
NU: "NZD",
NZ: "NZD",
OM: "OMR",
PA: "PAB",
PE: "PEN",
PF: "XPF",
PG: "PGK",
PH: "PHP",
PK: "PKR",
PL: "PLN",
PM: "EUR",
PN: "NZD",
PR: "USD",
PS: "ILS",
PT: "EUR",
PW: "USD",
PY: "PYG",
QA: "QAR",
RE: "EUR",
RO: "RON",
RS: "RSD",
RU: "RUB",
RW: "RWF",
SA: "SAR",
SB: "SBD",
SC: "SCR",
SD: "SDG",
SE: "SEK",
SG: "SGD",
SH: "SHP",
SI: "EUR",
SJ: "NOK",
SK: "EUR",
SL: "SLL",
SM: "EUR",
SN: "XOF",
SO: "SOS",
SR: "SRD",
ST: "STD",
SV: "SVC",
SX: "ANG",
SY: "SYP",
SZ: "SZL",
TC: "USD",
TD: "XAF",
TF: "EUR",
TG: "XOF",
TH: "THB",
TJ: "TJS",
TK: "NZD",
TL: "USD",
TM: "TMT",
TN: "TND",
TO: "TOP",
TR: "TRY",
TT: "TTD",
TV: "AUD",
TW: "TWD",
TZ: "TZS",
UA: "UAH",
UG: "UGX",
UM: "USD",
US: "USD",
UY: "UYU",
UZ: "UZS",
VA: "EUR",
VC: "XCD",
VE: "VEF",
VG: "USD",
VI: "USD",
VN: "VND",
VU: "VUV",
WF: "XPF",
WS: "WST",
YE: "YER",
YT: "EUR",
ZA: "ZAR",
ZM: "ZMK",
ZW: "ZWL"
}[e.toUpperCase()], t = new Intl.NumberFormat(t, {
style: "currency",
currency: e
}).format(1000.12345), e = t.match(/(\d|\.|,)/g).join(""), i = t.replace(/\d|\.|,|\s/g, ""), n = /([\d]*)$/.exec(e)[0].length, s = e.replace("1", "#").replace(/[0]{2}/, "##"), o = e.match(/[\D]/g)[1], l = e.match(/[\D]/g)[0], t = t.replace(e, s).replace(i, "¤");
this.currencyPattern = {
pattern: t,
symbol: i,
fraction: n,
rounding: 0,
positive: i,
negative: "-" + i,
decimal: o,
grouping: l
};
}, Client.Device.prototype.handleSafeArea = function(e) {
this.safeAreaInsets = e, "android" === this.operatingSystem && ((e = document.querySelector(":root")).style.setProperty("--safe-area-inset-top", this.safeAreaInsets.top + "px"), 
e.style.setProperty("--safe-area-inset-bottom", this.safeAreaInsets.bottom + "px"), 
e.style.setProperty("--safe-area-inset-left", this.safeAreaInsets.left + "px"), 
e.style.setProperty("--safe-area-inset-right", this.safeAreaInsets.right + "px")), 
this.fullscreen && this.handleFullscreen();
}, Client.Device.prototype.setFullscreen = function(e) {
this.fullscreen = e;
e = document.getElementById("app-ui");
this.fullscreen ? e.classList.add("fullscreen") : e.classList.remove("fullscreen"), 
this.fullscreen && this.handleFullscreen();
}, Client.Device.prototype.handleFullscreen = function() {
if (this.safeAreaInsets) {
var t = Object.keys(Client.eleMap);
for (let e = 0; e < t.length; e++) {
var i = Client.eleMap[t[e]];
i instanceof Client.Element && i.handleFullscreen();
}
}
}, Client.ShellEmulator = function(e) {
this.device = e;
try {
document.onblur = function() {
this.pauseTimerId || (this.pauseTimerId = setTimeout(function() {
delete this.pauseTimerId, this.paused = !0, this.sendMessage({
id: "onPause",
content: {}
});
}.bind(this), 500));
}.bind(this), document.onfocus = function() {
this.pauseTimerId ? (clearTimeout(this.pauseTimerId), delete this.pauseTimerId) : this.paused && (this.sendMessage({
id: "onResume",
content: {}
}), this.paused = !1);
}.bind(this), window.onblur = document.onblur, window.onfocus = document.onfocus, 
window.top.onblur = document.onblur, window.top.onfocus = document.onfocus;
} catch (e) {
console.warn("pause/resume events not available");
}
}, Client.ShellEmulator.classesMap = {
barcodeScanner: {
className: "BarcodeScanner"
},
beacon: {
className: "Beacon"
},
geolocation: {
className: "Geolocation"
},
camera: {
className: "Camera"
},
accelerometer: {
className: "Accelerometer"
},
compass: {
className: "Compass"
},
contacts: {
className: "Contacts"
},
keyboard: {
className: "Keyboard"
},
nfc: {
className: "Nfc"
},
notification: {
className: "Notification",
path: "notifications"
},
socialSharing: {
className: "SocialSharing"
},
statusBar: {
className: "StatusBar"
},
vibration: {
className: "Vibration"
},
backgroundLocation: {
className: "BackgroundLocation"
},
facebook: {
className: "Facebook"
},
sms: {
className: "Sms"
},
sqlite: {
className: "Sqlite"
},
speech: {
className: "Speech"
},
haptic: {
className: "Haptic"
},
media: {
className: "Media"
},
touchid: {
className: "TouchID"
},
preferences: {
className: "Preferences"
},
calendar: {
className: "Calendar"
},
ble: {
className: "Ble"
},
lscookies: {
className: "Lscookies"
},
pdf: {
className: "Pdf"
},
signInWithApple: {
className: "SignInWithApple"
},
oidc: {
className: "Oidc"
}
}, Client.ShellEmulator.prototype.postMessage = function(e) {
if ((e = e || {}).obj) {
var t, i = e.obj.substring(7), n = {};
if (n.method = e.id, n.params = e.cnt || {}, n.plugin = i, n.cbId = e.cbId, n.setResult = function(e, t) {
var i = {
id: (t = t || {}).id || n.method + "CB"
};
t.client && (i.client = !0), t.cnt ? i.cnt = t.cnt : (i.content = {
result: e,
cbId: n.cbId
}, i.obj = "device-" + n.plugin), this.sendMessage(i);
}.bind(this), n.setError = function(e) {
this.sendMessage({
obj: "device-" + n.plugin,
id: n.method + "CB",
content: {
error: e,
cbId: n.cbId
}
});
}.bind(this), "device" === n.plugin) return n.setError(`Method ${n.method} not available on shell emulator`);
Client.ShellEmulator.classesMap[i] ? this.pluginsLoaded ? this.callMethod(e, i, n) : ((t = document.createElement("script")).type = "text/javascript", 
t.src = (Client.mainFrame.isIDF ? "fluid/" : "") + "objects/base/shellEmulator/plugins/shellemulator-plugins.min.js", 
t.readyState ? t.onreadystatechange = function() {
"loaded" !== t.readyState && "complete" !== t.readyState || (t.onreadystatechange = null, 
this.pluginsLoaded = !0, this.callMethod(e, i, n));
}.bind(this) : (t.onload = function() {
this.pluginsLoaded = !0, this.callMethod(e, i, n);
}.bind(this), t.onerror = function(e) {
n.setError("Error occurred loading plugins: " + e);
}), document.body.appendChild(t)) : n.setError("Plugin not found");
}
}, Client.ShellEmulator.prototype.callMethod = function(e, t, i) {
this[t] || (this[t] = new Client.Plugins[Client.ShellEmulator.classesMap[t].className](this)), 
this.isNotSlave = !(Client.clientType && "guest" === Client.clientType), this[t][e.id] ? this[t][e.id](i) : i.setError("Method not found");
}, Client.ShellEmulator.prototype.sendMessage = function(e) {
this.device.onMessage(e);
}, Client.ShellEmulator.prototype.sendEvent = function(e, t, i) {
this.sendMessage({
obj: i || "device-" + e.plugin,
id: "on" + t,
content: e.result
});
}, Client.Input = function(e, t, i) {
void 0 === e || void 0 === i || (Client.Element.call(this, e, t, i), this.domObj = document.createElement(this.getDOMObjectType(e.type)), 
"ro" === Client.clientRole && this.domObj.setAttribute("readonly", ""), t.appendChildObject(this, this.domObj), 
this.updateElement(e), this.attachEvents(e.events), Client.mainFrame.isEditing() && this.domObj.addEventListener("click", function(e) {
return e.preventDefault(), !1;
}), "Chrome" !== Client.mainFrame.device.browserName) || Client.mainFrame.device.isMobile || !this.domObj || this.domObj.getAttribute("autocomplete") || setTimeout(function() {
this.domObj && this.domObj.setAttribute("autocomplete", "off");
}.bind(this), 150);
}, Client.Input.prototype = new Client.Element(), Client.Input.validateReasons = {
GENERIC: 0,
ONINPUT: 1
}, Client.Input.prototype.getDOMObjectType = function(e) {
return "static" === e ? "p" : "textarea" === e || "select" === e ? e : "input";
}, Client.Input.prototype.updateElement = function(e) {
if (this.purgeMyProp(e), Client.mainFrame.isEditing()) for (var t in this.el && e !== this.el || (this.el = {}), 
e) this.el[t] = e[t];
if (e.list) {
"string" == typeof e.list && (e.list = JSON.parse(e.list)), this.domObj.options && (this.domObj.options.length = 0);
for (t = 0; t < e.list.length; t++) {
var i = e.list[t];
this.addOption(i.v, i.n);
}
this.value && (this.domObj.value = this.value), delete e.list;
}
var n;
e.data && (e.data.columns ? (this.initInput(e), this.value && (this.domObj.value = this.value)) : void 0 !== e.data.pos ? e.data.data ? this.updateOption(e.data) : this.removeOptionAtPos(e.data.pos) : (this.addOption(e.data.data[0], e.data.data[1]), 
this.value && (this.domObj.value = this.value)), delete e.data), e.cmdKey && (this.cmdKey = e.cmdKey.toUpperCase(), 
delete e.cmdKey), e.style && e.style.height && "TEXTAREA" === this.domObj.tagName && ("auto" === e.style.height ? (setTimeout(function() {
autosize(this.domObj);
}.bind(this), 0), this.autosize = !0) : this.autosize && (autosize.destroy(this.domObj), 
this.autosize = !1)), e.type && this.domObj.parentNode && (this.domObj.tagName.toLowerCase() !== this.getDOMObjectType(e.type) && (n = document.createElement(this.getDOMObjectType(e.type)), 
this.focusAttached = !1, this.domObj.parentNode.insertBefore(n, this.domObj), this.domObj.parentNode.removeChild(this.domObj), 
this.domObj, this.domObj = n, this.el) && this.updateElement(this.el), "INPUT" !== this.domObj.tagName || this.focusAttached || (this.addEventsListeners(), 
this.focusAttached = !0)), void 0 !== e.value && "P" === this.domObj.tagName && (e.innerText = e.value, 
delete e.value), void 0 !== e.value && ((n = e.value) && ("date" !== this.domObj.type && "date-local" !== this.domObj.type || (e.value = moment(n).format("YYYY-MM-DD")), 
"datetime" !== this.domObj.type && "datetime-local" !== this.domObj.type || (e.value = moment(n).format("YYYY-MM-DDTHH:mm"))), 
this.value = e.value, this.domObj.value = e.value, this.autosize && autosize.update(this.domObj), 
this.mask && (this.domObj.value = mask_mask(this.domObj.value, this.mask, this.maskType), 
this.domObj.setAttribute("idmaskoldvalue", this.domObj.value)), delete e.value), 
void 0 !== e.radioGroup && (this.domObj.setAttribute("name", e.radioGroup), delete e.radioGroup), 
void 0 !== e.dontHoldCaret && (this.domObj.setAttribute("dontholdcaret", e.dontHoldCaret), 
delete e.dontHoldCaret), void 0 !== e.maskType && (this.maskType = e.maskType, delete e.maskType), 
void 0 !== e.mask && (this.setMask(e.mask, e.type), delete e.mask, delete e.type), 
Client.Element.prototype.updateElement.call(this, e);
}, Client.Input.prototype.commit = function(e) {
var t = this.changeValueEvent();
this.sendOnChange && t.push({
obj: this.id,
id: "onChange",
content: this.saveEvent(e)
}), Client.mainFrame.sendEvents(t), Client.mainFrame.setDirtyInput(null);
}, Client.Input.prototype.addEventsListeners = function() {
this.domObj.addEventListener("focus", e => {
"password" === this.domObj.type && "§".repeat(this.domObj.value.length) === this.domObj.value && (this.domObj.value = "");
});
}, Client.Input.prototype.attachEvents = function(e) {
var o, i, t;
e && (-1 < (t = e.indexOf("onSelectionChange")) && (e.splice(t, 1), this.domObj.addEventListener("keyup", function() {
this.checkSelection();
}.bind(this), !1), this.domObj.addEventListener("touchend", function() {
this.checkSelection();
}.bind(this), !1), this.domObj.addEventListener("select", function() {
this.checkSelection();
}.bind(this), !1), this.domObj.addEventListener("input", function() {
this.checkSelection();
}.bind(this), !1), this.domObj.addEventListener("mouseup", function() {
this.checkSelection();
}.bind(this), !1)), Client.Element.prototype.attachEvents.call(this, e), o = this, 
i = function(e) {
if ("radio" === o.domObj.type) {
for (var t = o.parent; t && (!t.domObj || "FORM" !== t.domObj.tagName); ) t = t.parent;
for (var i = (t = t || o.parent).getElements(), n = 0; n < i.length; n++) {
var s = i[n];
s !== o && s.domObj && "INPUT" === s.domObj.tagName && s.domObj.name === o.domObj.name && "radio" === s.domObj.type && (s = {
obj: s.id,
id: "chgProp",
content: {
name: "checked",
value: !1,
clid: Client.id
}
}, e.push(s));
}
}
}, 0 <= (t = e.indexOf("onUpload")) && "file" === this.domObj.type && (e.splice(t, 1), 
this.domObj.addEventListener("change", function(e) {
for (var t = Client.Utils.getRESTQueryString({
msgType: "input-upload",
objId: o.id
}), i = new FormData(), n = 0; n < o.domObj.files.length; n++) i.append("file", o.domObj.files[n]);
var s = new XMLHttpRequest();
s.open("POST", t, !0), s.send(i);
}, !1)), 0 <= e.indexOf("onChange") && (this.domObj.onchange = function(e) {
o.validate(), o.checkError(!0);
var t = o.changeValueEvent();
i(t), t.push({
obj: o.id,
id: "onChange",
content: o.saveEvent(e)
}), Client.mainFrame.sendEvents(t);
}), 0 <= e.indexOf("onInput") && (this.domObj.oninput = function(e) {
var t;
o.validate(Client.Input.validateReasons.ONINPUT) && (o.checkError(), (t = o.changeValueEvent()).push({
obj: o.id,
id: "onInput",
content: o.saveEvent(e)
}), Client.mainFrame.sendEvents(t));
}), e.indexOf("onChange") < 0 && e.indexOf("onInput") < 0 && (this.domObj.onchange = function(e) {
o.validate(), o.checkError(!0);
var t = o.changeValueEvent();
i(t), Client.mainFrame.sendEvents(t);
}), e.indexOf("onInput") < 0 && (this.domObj.oninput = function(e) {
o.validate(Client.Input.validateReasons.ONINPUT) && (o.checkError(), Client.mainFrame.device.isMobile) && Client.mainFrame.setDirtyInput(o.id);
}), "date" !== this.domObj.type && "datetime-local" !== this.domObj.type || (this.domObj.addEventListener("blur", function(e) {
this.domObj.value || !this.domObj.validationMessage && !this.errorMessage || this.domObj.onchange(e);
}.bind(this)), this.domObj.addEventListener("keydown", function(e) {
13 !== e.which || this.domObj.value || !this.domObj.validationMessage && !this.errorMessage || this.domObj.onchange(e);
}.bind(this))));
}, Client.Input.prototype.changeValueEvent = function() {
var e, t = "value", i = "value";
"checkbox" === this.domObj.type || "radio" === this.domObj.type ? i = t = "checked" : "number" === this.domObj.type && (t = "valueAsNumber", 
i = "value"), e = this.mask ? (e = mask_unmask(this.domObj[t], this.mask, this.maskType), 
">" === this.mask && (e = ("" + e).toUpperCase()), "<" === this.mask && (e = ("" + e).toLowerCase()), 
{
obj: this.id,
id: "chgProp",
content: {
name: i,
value: e,
clid: Client.id
}
}) : {
obj: this.id,
id: "chgProp",
content: {
name: i,
value: this.domObj[t],
clid: Client.id
}
};
let n = this.domObj.validationMessage;
return "date" !== this.domObj.type && "datetime-local" !== this.domObj.type || document.activeElement !== this.domObj || this.domObj.value || (n = ""), 
[ {
obj: this.id,
id: "chgProp",
content: {
name: "errorText",
value: n,
clid: Client.id
}
}, e ];
}, Client.Input.prototype.initInput = function(e) {
for (;0 < this.domObj.childNodes.length; ) this.domObj.removeChild(this.domObj.childNodes[0]);
for (var t in e.data.data) this.addOption(e.data.data[t][0], e.data.data[t][1]);
}, Client.Input.prototype.removeOptionAtPos = function(e) {
this.domObj.removeChild(this.domObj.childNodes[e]);
}, Client.Input.prototype.addOption = function(e, t) {
var i = document.createElement("option");
i.value = null != e ? e : "", i.text = t, this.domObj.appendChild(i);
}, Client.Input.prototype.updateOption = function(e) {
var t = this.domObj.childNodes[e.pos];
t.value = e.data[0], t.text = e.data[1];
}, Client.Input.prototype.setError = function(e, t) {
Client.Element.prototype.setError.call(this, e, t), this.domObj.setCustomValidity(e);
}, Client.Input.prototype.close = function(e, t) {
this.autosize && autosize.destroy(this.domObj), this.id === Client.mainFrame.getDirtyInput() && Client.mainFrame.setDirtyInput(null), 
Client.Element.prototype.close.call(this, e, t);
}, Client.Input.prototype.visibilityChanged = function(e) {
this.autosize && e && autosize.update(this.domObj), Client.Element.prototype.visibilityChanged.call(this, e);
}, Client.Input.prototype.validate = function(e) {
if ("number" === this.domObj.type && (this.domObj.validationMessage || !(void 0 === this.domObj.maxLength || this.domObj.maxLength <= 0))) {
document.activeElement;
for (var t, i, n = window.getSelection(); t = String(n).length, n.modify("extend", "backward", "character"), 
String(n).length !== t; );
var s = String(n);
for (n.collapseToEnd(); i = String(n).length, n.modify("extend", "forward", "character"), 
String(n).length !== i; );
s = h = s + String(n);
if (n.collapseToEnd(), h.length) {
this.mask && "N" == this.maskType && (h = h.replace(new RegExp("." === glbThoSep ? "\\" + glbThoSep : glbThoSep, "g"), ""));
var o = parseFloat(this.domObj.step), l = o ? Math.ceil(-Math.log10(o)) : 0, a = "-0123456789.,", r = h[h.length - 1];
if (isNaN(r) && -1 < a.indexOf(r) && ("." !== r && "," !== r || 0 < l)) return !1;
for (var d, h, c = !1, p = 0, u = 0; u < h.length; u++) {
var r = h[u], f = -1 < a.indexOf(r);
"-" === r ? 0 < u && (f = !1) : "." === r || "," === r ? (c ? f = !1 : c = !0, 0 === l && (f = !1)) : c && l < ++p && (f = !1, 
p--), f || (h = h.substring(0, u) + h.substring(u + 1), u--, 0);
}
h = h.replace(",", "."), 0 < p && (d = parseFloat(h) % o, 1e-6 < Math.abs(d)) && 1e-6 < Math.abs(Math.abs(d) - o) && (h = (parseFloat(h) - d).toLocaleString("en-en", {
maximumFractionDigits: l,
minimumFractionDigits: l
})), this.domObj.min && e !== Client.Input.validateReasons.ONINPUT && parseFloat(h) < parseFloat(this.domObj.min) && (h = this.domObj.min), 
this.domObj.max && parseFloat(h) > parseFloat(this.domObj.max) && (h = this.domObj.max), 
(h = this.domObj.maxLength && 0 < this.domObj.maxLength && (o = parseFloat(this.domObj.maxLength) + (c ? 1 : 0), 
h.length > o) ? this.domObj.oldvalue || h.substr(-1 * o, o) : h) !== s && this.mask && "N" == this.maskType && (h = mask_mask(h, this.mask, this.maskType)), 
this.domObj.oldvalue = h, this.domObj.value = h;
for (n = window.getSelection(), u = 0; u < i; u++) n.modify("extend", "backward", "character");
n.collapseToStart();
}
}
return !0;
}, Client.Input.prototype.setProperty = function(e) {
e = e || {};
var t = Object.assign({}, e);
if ("value" === e.propName) {
if ("string" == typeof e.propValue) for (var i = "", n = 0; n < e.propValue.length; n++) i += e.propValue[n], 
(t = Object.assign({}, e)).propValue = i, t.events = [ "input" ], Client.Element.prototype.setProperty.call(this, t);
(t = Object.assign({}, e)).events = [ "change" ];
} else "checked" === e.propName && ((t = Object.assign({}, e)).events = [ "change" ]);
Client.Element.prototype.setProperty.call(this, t);
}, Client.Input.prototype.getSelection = function(e) {
var t = this.domObj.selectionStart, i = this.domObj.selectionEnd, t = {
start: t,
end: i,
text: this.domObj.value.substring(t, i)
}, i = (console.warn(t), [ {
obj: this.id,
id: "cb",
content: {
res: t,
cbId: e
}
} ]);
Client.mainFrame.sendEvents(i);
}, Client.Input.prototype.setSelection = function(e, t) {
this.domObj.setSelectionRange(e, t);
}, Client.Input.prototype.copySelection = function(e, t) {
e = document.execCommand(e || "copy"), e = [ {
obj: this.id,
id: "cb",
content: {
res: e,
cbId: t
}
} ];
Client.mainFrame.sendEvents(e);
}, Client.Input.prototype.checkSelection = function() {
this.checkSelectionTimeout || (this.checkSelectionTimeout = setTimeout(function() {
var e;
this.checkSelectionTimeout = void 0, this.selectionStart === this.domObj.selectionStart && this.selectionEnd === this.domObj.selectionEnd || (this.selectionStart = this.domObj.selectionStart, 
this.selectionEnd = this.domObj.selectionEnd, e = this.domObj.value.substring(this.selectionStart, this.selectionEnd), 
e = [ {
obj: this.id,
id: "onSelectionChange",
content: {
start: this.selectionStart,
end: this.selectionEnd,
text: e
}
} ], Client.mainFrame.sendEvents(e));
}.bind(this), 100));
}, Client.Input.prototype.setMask = function(e, t) {
var i, n, s = this.getMaskType(t);
"N" === s && "number" === t && (Client.mainFrame.isIDF || (glbDecSep = Client.mainFrame.theme.decimalSeparator || Client.mainFrame.device.numberPattern.decimal, 
glbThoSep = Client.mainFrame.theme.groupingSeparator || Client.mainFrame.device.numberPattern.grouping), 
e = (e = (e = e.replace(/\./g, "@")).replace(/,/g, glbThoSep)).replace(/@/g, glbDecSep), 
this.domObj.maxLength = e.length, n = "0", 0 < e.indexOf(glbDecSep) && (i = e.length - (e.indexOf(glbDecSep) + 2), 
n = "0." + "0".repeat(0 <= i ? i : 0) + "1"), this.domObj.step = n), this.value && e && (this.domObj.value = mask_mask(this.value, e, s)), 
Client.Element.prototype.setMask.call(this, e, t);
}, Client.Input.prototype.getMaskType = function(e) {
let t = Client.Element.prototype.getMaskType.call(this);
return "number" === (e = this.type || e) && (t = "N"), t = "A" === (t = "date" === e ? "D" : t) && this.maskType ? this.maskType : t;
}, Client.Link = function(e, t, i) {
Client.Element.call(this, e, t, i), this.domObj = document.createElement("a"), this.updateElement(e), 
this.attachEvents(e.events), t.appendChildObject(this, this.domObj);
}, Client.Link.prototype = new Client.Element(), Client.Link.prototype.attachEvents = function(e) {
Client.Element.prototype.attachEvents.call(this, e), Client.mainFrame.isEditing() && this.domObj.addEventListener("click", function(e) {
e.preventDefault();
});
}, Client.Image = function(e, t, i) {
Client.Element.call(this, e, t, i), this.domObj = document.createElement("img"), 
this.updateElement(e), this.attachEvents(e.events), t.appendChildObject(this, this.domObj);
}, Client.Image.prototype = new Client.Element(), Client.Image.prototype.updateElement = function(e) {
var t;
"" === e.width && delete e.width, "" === e.height && delete e.height, void 0 !== e.src && (t = e.src, 
delete e.src), Client.Element.prototype.updateElement.call(this, e), void 0 !== t && (t ? (this.loadTrigger && this.handleLoadTrigger(), 
this.domObj.src = Client.Utils.abs(t), this.domObj.complete && this.domObj.onload && this.domObj.onload()) : this.domObj.src = "");
}, Client.Image.prototype.handleLoadTrigger = function() {
var l = this;
this.loadTimer = window.setTimeout(function() {
l.loadTimer = null;
for (var e, t = 0; t < l.animations.length; t++) if ("load" === l.animations[t].trigger) if ((e = void 0 !== Client.ClientAnimation[l.animations[t].type] ? Client.ClientAnimation[l.animations[t].type](l.animations[t], l) : e) && e.segments && 0 < e.segments.length) {
var i, n = e.segments[0].from, s = null, o = {};
for (i in n) "style_" === i.substring(0, 6) ? (s = s || {})[i.substring(6, i.length)] = n[i] : o[i] = n[i];
s && (o.style = s), o.fromanim = !0, l.updateElement(o);
}
}, 50);
}, Client.Image.prototype.attachEvents = function(e) {
var t;
e && (Client.Element.prototype.attachEvents.call(this, e), t = this, 0 <= e.indexOf("onLoad")) && (this.domObj.onload = function(e) {
e = [ {
obj: t.id,
id: "chgProp",
content: {
name: "width",
value: t.domObj.width,
clid: Client.id
}
}, {
obj: t.id,
id: "chgProp",
content: {
name: "height",
value: t.domObj.height,
clid: Client.id
}
}, {
obj: t.id,
id: "chgProp",
content: {
name: "naturalWidth",
value: t.domObj.naturalWidth,
clid: Client.id
}
}, {
obj: t.id,
id: "chgProp",
content: {
name: "naturalHeight",
value: t.domObj.naturalHeight,
clid: Client.id
}
}, {
obj: t.id,
id: "onLoad",
content: t.saveEvent(e)
} ];
Client.mainFrame.sendEvents(e);
});
}, Client.Image.prototype.attachAnimations = function(e) {
Client.Element.prototype.attachAnimations.call(this, e);
for (var t, i = 0; i < this.animations.length; i++) "load" === this.animations[i].trigger && ((t = this).loadTrigger || this.domObj.addEventListener("load", function(e) {
t.onAnimationTrigger(e, "load");
}), this.loadTrigger = !0);
}, Client.Image.prototype.onAnimationTrigger = function(e, t) {
if (!1 !== this.animate) {
var i = !1;
if ("load" === t) {
if (this.loadTimer) return window.clearTimeout(this.loadTimer), void (this.loadTimer = null);
for (var n, s, o = 0; o < this.animations.length; o++) "load" === this.animations[o].trigger && (i = !0, 
n = this.animations[o], s = void 0 !== Client.ClientAnimation[n.type] ? Client.ClientAnimation[n.type](n, this) : s) && new Client.ClientAnimation(s, this).play(!1);
}
i || Client.Element.prototype.onAnimationTrigger.call(this, e, t);
}
}, Client.Iframe = function(e, t, i) {
Client.Element.call(this, e, t, i), this.domObj = document.createElement("iframe"), 
this.updateElement(e), this.attachEvents(e.events), t.appendChildObject(this, this.domObj);
}, Client.Iframe.prototype = new Client.Element(), Client.Iframe.prototype.updateElement = function(e) {
var t;
e.src && (t = e.src, delete e.src), e.innerHTML && (this.domObj.contentWindow.document.documentElement.innerHTML = e.innerHTML, 
delete e.innerHTML), Client.Element.prototype.updateElement.call(this, e), t && (this.loadTrigger && this.handleLoadTrigger(), 
this.domObj.src = t);
}, Client.Iframe.prototype.handleLoadTrigger = function() {
for (var e, t = 0; t < this.animations.length; t++) if ("load" === this.animations[t].trigger) if ((e = void 0 !== Client.ClientAnimation[this.animations[t].type] ? Client.ClientAnimation[this.animations[t].type](this.animations[t], this) : e) && e.segments && 0 < e.segments.length) {
var i, n = e.segments[0].from, s = null, o = {};
for (i in n) "style_" === i.substring(0, 6) ? (s = s || {})[i.substring(6, i.length)] = n[i] : o[i] = n[i];
s && (o.style = s), o.fromanim = !0, this.updateElement(o);
}
}, Client.Iframe.prototype.attachAnimations = function(e) {
Client.Element.prototype.attachAnimations.call(this, e);
for (var t, i = 0; i < this.animations.length; i++) "load" === this.animations[i].trigger && ((t = this).loadTrigger || this.domObj.addEventListener("load", function(e) {
t.onAnimationTrigger(e, "load");
}), this.loadTrigger = !0);
}, Client.Iframe.prototype.onAnimationTrigger = function(e, t) {
if (!1 !== this.animate) {
var i = !1;
if ("load" === t) for (var n, s, o = 0; o < this.animations.length; o++) "load" === this.animations[o].trigger && (i = !0, 
n = this.animations[o], s = void 0 !== Client.ClientAnimation[n.type] ? Client.ClientAnimation[n.type](n, this) : s) && new Client.ClientAnimation(s, this).play(!1);
i || Client.Element.prototype.onAnimationTrigger.call(this, e, t);
}
}, Client.AltContainer = function(e, t, i) {
Client.Container.call(this, e, t, i), void 0 !== e && (this.updateElement(e), this.attachEvents(e.events));
}, Client.AltContainer.prototype = new Client.Container(), Client.AltContainer.SwipingDirection = {
VERTICAL: 1,
HORIZONTAL: 0
}, Client.AltContainer.prototype.updateElement = function(e) {
if (Client.Container.prototype.updateElement.call(this, e), void 0 !== e.selectedPage && this.elements) {
var t = this.selectedPage;
if (this.selectedPage = isNaN(parseInt(e.selectedPage)) ? 0 : parseInt(e.selectedPage), 
delete e.selectedPage, void 0 === t || this.selectedPage !== t) {
var i, n, s = !0;
if (this.changePageAnimation && void 0 !== t && t < this.ne() && this.selectedPage < this.ne() && (n = this.elements[t], 
i = this.elements[this.selectedPage], n instanceof Client.View && 1 !== n.ne() && (s = !1), 
i instanceof Client.View && 1 !== i.ne() && (s = !1), this.parentWidget) && !this.parentWidget.visible && (s = !1), 
(s = !1 === this.animate ? !1 : s) && this.changePageAnimation && void 0 !== t && t < this.ne() && this.selectedPage < this.ne() ? this.animateChangePage(t) : this.showSelPage(), 
this.changePage && t !== this.selectedPage && (n = [ {
obj: this.id,
id: "onChangePage",
content: {
oldPage: t,
newPage: this.selectedPage
}
} ], Client.mainFrame.sendEvents(n)), Client.mainFrame.isEditing() && t !== this.selectedPage) for (var o = this.domObj.getElementsByClassName("emptycontainer"), e = 0; e < o.length; e++) (e = Client.eleMap[o.item(e).id.substring(4)]) && e.updateElement({});
}
}
}, Client.AltContainer.prototype.attachEvents = function(e) {
var t;
e && (Client.Container.prototype.attachEvents.call(this, e), 0 <= (t = e.indexOf("onChangePage"))) && (e.splice(t, 1), 
this.changePage = !0);
}, Client.AltContainer.prototype.onRemoveChildObject = function(e) {
this.elements && (0 <= (e = this.elements.indexOf(e)) && e < this.selectedPage ? this.selectedPage-- : e === this.selectedPage && setTimeout(function() {
if (this.elements && this.elements[this.selectedPage]) {
let e = this.elements[this.selectedPage];
(e = e instanceof Client.View && e.elements ? e.elements[0] : e) && e.updateElement({
visible: !0
});
}
}.bind(this), 0));
}, Client.AltContainer.prototype.animateChangePage = function(e, t) {
var i, n, s, o, t = t || this.changePageAnimation, l = t.type, a = void 0 !== t.duration ? t.duration : 250, r = void 0 !== t.easing ? t.easing : "easeTo", d = this.elements[e], h = this.elements[this.selectedPage];
d instanceof Client.View && (d = d.elements[0]), (h = h instanceof Client.View ? h.elements[0] : h) && d && (document.activeElement && (Client.Utils.isMyParent(document.activeElement, h.id) || Client.Utils.isMyParent(document.activeElement, d.id)) && document.activeElement.blur(), 
s = this.selectedPage > e ? "right" : "left", i = this.selectedPage > e ? "left" : "right", 
"vertical" === (l = "flip" === (l = "slide" !== l || "top" !== t.from && "bottom" !== t.from ? l : "vertical") && "vertical" === t.rotation ? "vflip" : l) || "vflip" === l ? (s = this.selectedPage > e ? "bottom" : "top", 
i = this.selectedPage > e ? "top" : "bottom") : "parallax" === l ? i = s = this.selectedPage > e ? "left" : "right" : "zoomout" === l && (s = this.selectedPage > e ? "" : "left", 
i = this.selectedPage > e ? "left" : ""), this.exitingElement && this.exitingElement.stopAnimation(!0), 
this.enteringElement && this.enteringElement.stopAnimation(!0), t = h.getRootObject(), 
e = (t = h instanceof Client.Widget ? h.getAnimationRoot() : t).style.visibility, 
n = void 0 === h.oldDisplay ? "" : h.oldDisplay, void 0 === h.oldDisplay && (h.oldDisplay = ""), 
t.style.visibility = "hidden", t.style.display = n, n = this.createPageAnimation(h, !1, s, l, a, r), 
s = this.createPageAnimation(d, !0, i, l, a, r), n.skipAnimation ? (t.style.visibility = e, 
this.showSelPage()) : (t.style.display = "none", t.style.visibility = e, o = this, 
n.endcallback = function() {
o.onEndChangePageAnimation();
}, "vflip" !== l && "flip" !== l || this.domObj.classList.add("altcontainer-flip-container"), 
this.exitingElement = d, this.enteringElement = h, this.exitingElement.playAnimation(s), 
this.enteringElement.playAnimation(n)));
}, Client.AltContainer.prototype.createPageAnimation = function(e, t, i, n, s, o) {
let l = "style_transform", a = e.getRootObject();
var r, d, h, c;
if (e instanceof Client.Widget && (a = e.getAnimationRoot()), "slide" === n || "vertical" === n) {
var p = a.offsetTop, u = a.offsetLeft;
try {
var f = window.getComputedStyle(a, null);
p -= parseInt(f.borderTopWidth), u -= parseInt(f.borderLeftWidth);
} catch (e) {}
var m = (a.parentNode || a).offsetWidth, C = (a.parentNode || a).offsetHeight;
if (a.parentNode && (0 < p || 0 < u) && a.offsetParent !== a.parentNode) {
p -= a.parentNode.offsetTop, u -= a.parentNode.offsetLeft;
try {
var f = window.getComputedStyle(a.parentNode, null);
p -= parseInt(f.borderTopWidth), u -= parseInt(f.borderLeftWidth), m = m - parseInt(f.borderRightWidth) - parseInt(f.borderLeftWidth), 
C = C - parseInt(f.borderTopWidth) - parseInt(f.borderBottomWidth);
} catch (e) {}
}
var g, b, I = {};
switch ((g = {})[l] = "vertical" === n ? "translate3d(-" + u + "px, -" + p + "px, 0px)" : "translate3d(0px, -" + p + "px, 0px)", 
I[l] = "vertical" === n ? "translate3d(-" + u + "px, -" + p + "px, 0px)" : "translate3d(0px, -" + p + "px, 0px)", 
i) {
case "top":
var y = 0 - p - C;
t ? I[l] = "translate3d(0px, " + y + "px, 0px)" : g[l] = "translate3d(0px, " + y + "px, 0px)";
break;

case "bottom":
t ? I[l] = "translate3d(0px, " + (C - p) + "px, 0px)" : g[l] = "translate3d(0px, " + (C - p) + "px, 0px)";
break;

case "left":
y = 0 - u - m;
t ? I[l] = "translate3d(" + y + "px, -" + p + "px, 0px)" : g[l] = "translate3d(" + y + "px, -" + p + "px, 0px)";
break;

case "right":
t ? I[l] = "translate3d(" + (m - u) + "px, -" + p + "px, 0px)" : g[l] = "translate3d(" + (m - u) + "px, -" + p + "px, 0px)";
}
(b = {
repetitions: 1,
segments: [ {
from: g,
to: I,
duration: s,
easing: o
} ],
finalState: {}
}).finalState[l] = "translate3d(0px, 0px, 0px)", void 0 !== e.oldDisplay && (b.startingState = {
style_display: e.oldDisplay
}), g[l] === I[l] && (b.skipAnimation = !0);
} else "flip" === n || "vflip" === n ? (h = "Safari" === Client.mainFrame.device.browserName ? {
style_webkitBackfaceVisibility: "hidden",
style_webkitTransformStyle: "preserve-3d"
} : {
style_backfaceVisibility: "hidden",
style_transformStyle: "preserve-3d"
}, void 0 !== e.oldDisplay && (h.style_display = e.oldDisplay), c = this.getTranslateOverlap(e), 
g = {}, I = {}, t ? "vflip" === n ? (g[l] = c + "rotateX(0deg)", I[l] = c + ("top" === i ? "rotateX(180deg)" : "rotateX(-180deg)")) : (g[l] = c + "rotateY(0deg)", 
I[l] = c + ("left" === i ? "rotateY(-180deg)" : "rotateY(180deg)")) : "vflip" === n ? (g[l] = c + ("top" === i ? "rotateX(180deg)" : "rotateX(-180deg)"), 
I[l] = c + "rotateX(0deg)") : (g[l] = c + ("left" === i ? "rotateY(-180deg)" : "rotateY(180deg)"), 
I[l] = c + "rotateY(0deg)"), h[l] = g[l], (b = {
repetitions: 1,
startingState: h,
finalState: {},
segments: [ {
from: g,
to: I,
duration: s,
easing: o
} ]
}).finalState[l] = "translate3d(0px, 0px, 0px)") : "parallax" === n ? (h = {}, void 0 !== e.oldDisplay && (h.style_display = e.oldDisplay), 
g = {}, I = {}, "left" === i ? t ? (I[l] = "translate3d(-33%, 0px, 0px)", g[l] = "translate3d(0px, 0px, 0px)", 
I.style_opacity = "1", g.style_opacity = "0.9", I.style_filter = "brightness(90%)", 
g.style_filter = "brightness(100%)") : (d = this.calculateCoord(a), I[l] = "translate3d(0%, -" + d.y + "px, 0px)", 
g[l] = "translate3d(" + d.w + "px, -" + d.y + "px, 0px)", a.classList.add("altcontainer-parallax-page"), 
this.hasScrollBars(a.parentNode, "X") || "hidden" !== (r = a.parentNode.style.overflow) && (this.divOverflow = r, 
a.parentNode.style.overflow = "hidden")) : "right" === i && (t ? (d = this.calculateCoord(a), 
I[l] = "translate3d(" + d.w + "px, -" + d.y + "px, 0px)", g[l] = "translate3d(0%, -" + d.y + "px, 0px)", 
I.style_opacity = "0.9", g.style_opacity = "1", a.classList.add("altcontainer-parallax-page"), 
this.hasScrollBars(a.parentNode, "X") || "hidden" !== (r = a.parentNode.style.overflow) && (this.divOverflow = r, 
a.parentNode.style.overflow = "hidden")) : (I[l] = "translate3d(0px, 0px, 0px)", 
g[l] = "translate3d(-33%, 0px, 0px)", I.style_filter = "brightness(100%)", g.style_filter = "brightness(90%)")), 
h[l] = g[l], h.style_opacity = g.style_opacity, (b = {
repetitions: 1,
startingState: h,
finalState: {},
segments: [ {
from: g,
to: I,
duration: s,
easing: o
} ]
}).finalState.style_opacity = "", b.finalState.style_filter = "") : "zoomout" === n ? (h = {}, 
void 0 !== e.oldDisplay && (h.style_display = e.oldDisplay), g = {}, I = {}, f = window.getComputedStyle(a, null), 
t ? "left" === i ? (I[l] = "translate3d(-100%, 0px, 0px)", g[l] = "translate3d(0px, 0px, 0px)", 
"absolute" !== f.position && (a.style.position = "relative"), a.style.zIndex = "1") : (p = 0, 
"absolute" !== f.position && (p = (d = this.calculateCoord(a)).y), g[l] = "translate3d(0%, -" + p + "px, 0px)", 
I[l] = "translate3d(0%, -" + p + "px, 0px) scale(0.8)", I.style_opacity = "0.9", 
g.style_opacity = "1", I.style_filter = "brightness(90%)", g.style_filter = "brightness(100%)", 
"absolute" !== f.position && (a.style.position = "relative"), a.style.zIndex = "0") : "left" === i ? (I[l] = "translate3d(0%, 0px, 0px)", 
g[l] = "translate3d(-100%, 0px, 0px)", "absolute" !== f.position && (a.style.position = "relative"), 
a.style.zIndex = "1") : (p = 0, "absolute" !== f.position && (p = (d = this.calculateCoord(a)).y), 
I[l] = "translate3d(0%, -" + p + "px, 0px)", g[l] = "translate3d(0%, -" + p + "px, 0px) scale(0.8)", 
I.style_opacity = "1", g.style_opacity = "0.9", I.style_filter = "brightness(100%)", 
g.style_filter = "brightness(90%)", "absolute" !== f.position && (a.style.position = "relative"), 
a.style.zIndex = "0"), h[l] = g[l], h.style_opacity = g.style_opacity, (b = {
repetitions: 1,
startingState: h,
finalState: {},
segments: [ {
from: g,
to: I,
duration: s,
easing: o
} ]
}).finalState.style_opacity = "", b.finalState.style_filter = "") : (h = {}, void 0 !== e.oldDisplay && (h.style_display = e.oldDisplay), 
c = this.getTranslateOverlap(e), I = {}, (g = {})[l] = c, I[l] = c, t ? (g.style_opacity = "1", 
I.style_opacity = "0") : (g.style_opacity = "0", I.style_opacity = "1"), h[l] = g[l], 
h.style_opacity = g.style_opacity, (b = {
repetitions: 1,
startingState: h,
finalState: {},
segments: [ {
from: g,
to: I,
duration: s,
easing: o
} ]
}).finalState[l] = "translate3d(0px, 0px, 0px)", b.finalState.style_opacity = "");
return b;
}, Client.AltContainer.prototype.onEndChangePageAnimation = function() {
if (this.exitingElement) {
let e = this.exitingElement.getRootObject();
(e = this.exitingElement instanceof Client.Widget ? this.exitingElement.getAnimationRoot() : e).classList.remove("altcontainer-parallax-page"), 
void 0 !== this.divOverflow && e.parentNode && (e.parentNode.style.overflow = this.divOverflow), 
this.exitingElement.updateElement({
fromanim: !0,
visible: !1
}), e.style.transform = "", this.exitingElement = null;
}
if (this.enteringElement) {
let e = this.enteringElement.getRootObject();
(e = this.enteringElement instanceof Client.Widget ? this.enteringElement.getAnimationRoot() : e).classList.remove("altcontainer-parallax-page"), 
void 0 !== this.divOverflow && e.parentNode && (e.parentNode.style.overflow = this.divOverflow), 
this.enteringElement.updateElement({
fromanim: !0,
visible: !0
}), e.style.transform = "", this.enteringElement = null;
}
this.domObj.classList.remove("altcontainer-flip-container"), delete this.divOverflow, 
this.onEndAnimation(0, !0, !1, this.changePageAnimation.id);
}, Client.AltContainer.prototype.addChangeTrigger = function(e) {
this.changePageAnimation || (this.changePageAnimation = e);
}, Client.AltContainer.prototype.onAnimationTrigger = function(e, t) {
if (!1 !== this.animate) {
var i = !1;
if ("mouseover" === t || "mouseout" === t) for (var n = 0; n < this.animations.length; n++) if ("hover" === this.animations[n].trigger && "flip" === this.animations[n].type) {
var i = !0, s = this.animations[n];
if (!this.elements) return;
for (var o = !1, l = !0, a = e.target; a; ) {
if (a === this.domObj) {
o = !0;
break;
}
a = a.parentNode;
}
for (a = e.relatedTarget; a; ) {
if (a === this.domObj) {
l = !1;
break;
}
a = a.parentNode;
}
if (o && l) {
var r = "mouseover" === t ? this.selectedPage + 1 : this.selectedPage - 1;
if (r >= this.ne() || r < 0) return;
this.changePageAnimation = s, this.updateElement({
selectedPage: r
});
}
}
i || Client.Container.prototype.onAnimationTrigger.call(this, e, t);
}
}, Client.AltContainer.prototype.attachAnimations = function(e) {
Client.Container.prototype.attachAnimations.call(this, e);
for (var t = 0; t < this.animations.length; t++) {
var i, n, s, o = this.animations[t];
"swipe" === o.trigger && (this.SwipeDetectDirection = "top" === o.from || "bottom" === o.from ? Client.AltContainer.SwipingDirection.VERTICAL : Client.AltContainer.SwipingDirection.HORIZONTAL, 
(i = Client.mainFrame.getHammerManager()).get("pan") || (n = new Hammer.Pan({
direction: this.SwipeDetectDirection === Client.AltContainer.SwipingDirection.HORIZONTAL ? Hammer.DIRECTION_HORIZONTAL : Hammer.DIRECTION_VERTICAL
}), i.add(n)), (s = this).isPanning = !1, this.panDetected = function(e) {
var t, i;
if ("parallax" === o.type || "zoomout" === o.type) s.isPanning || (s.isPanning = !0, 
t = void 0, e.direction === Hammer.DIRECTION_RIGHT ? (t = s.selectedPage, i = s.selectedPage - 1 < 0 ? void 0 : s.selectedPage - 1) : e.direction === Hammer.DIRECTION_LEFT && (t = s.selectedPage, 
i = s.selectedPage + 1 >= s.elements.length ? void 0 : s.selectedPage + 1), void 0 !== i && (s.selectedPage = i, 
s.animateChangePage(t, o))); else for (var n = e.target; n; ) {
if (n.id === s.id) {
s.panOnPage(e);
break;
}
n = n.parentNode;
}
}, this.panEndDetected = function(e) {
delete s.isPanning, s.panEndOnPage(e);
}, i.on("pan", this.panDetected), i.on("panend", this.panEndDetected));
}
}, Client.AltContainer.prototype.preparePageSwipe = function(e) {
this.swipeDetected = !0, e.direction !== Hammer.DIRECTION_LEFT && e.direction !== Hammer.DIRECTION_UP || (this.swipePageDestination = this.selectedPage + 1, 
this.swipePageDestination >= this.ne() && (this.swipePageDestination = void 0)), 
e.direction !== Hammer.DIRECTION_RIGHT && e.direction !== Hammer.DIRECTION_DOWN || (this.swipePageDestination = this.selectedPage - 1, 
this.swipePageDestination < 0 && (this.swipePageDestination = void 0));
let t = "transform", i = n.getRootObject();
if (n instanceof Client.Widget && (i = n.getAnimationRoot()), void 0 !== this.swipePageDestination && this.elements) {
var e = this.elements[this.swipePageDestination], n = this.elements[this.selectedPage], s = e.getRootObject(), o = null, e = ("none" === (s = e instanceof Client.Widget ? e.getAnimationRoot() : s).style.display && (o = s.style.visibility, 
s.style.visibility = "hidden", s.style.display = e.oldDisplay, e.visible = !0), 
"static");
try {
e = window.getComputedStyle(this.domObj, null).position;
} catch (e) {}
"static" === e && this.domObj.classList.add("altcontainer-swiping-page-container"), 
s.classList.add("altcontainer-swiping-page"), i.classList.add("altcontainer-swiping-page");
e = this.SwipeDetectDirection === Client.AltContainer.SwipingDirection.HORIZONTAL ? this.domObj.offsetWidth : this.domObj.offsetHeight;
this.swipePageTransform = this.swipePageDestination > this.selectedPage ? e : -e, 
this.currentPageTransform = 0, this.SwipeDetectDirection === Client.AltContainer.SwipingDirection.HORIZONTAL ? (s.style[t] = "translate3d(" + this.swipePageTransform + "px, 0px, 0px)", 
i.style[t] = "translate3d(" + this.currentPageTransform + "px, 0px, 0px)") : (s.style[t] = "translate3d(0px, " + this.swipePageTransform + "px, 0px)", 
i.style[t] = "translate3d(0px, " + this.currentPageTransform + "px, 0px)"), null !== o && (s.style.visibility = o);
} else {
this.currentPageTransform = 0;
n = this.elements[this.selectedPage];
this.SwipeDetectDirection === Client.AltContainer.SwipingDirection.HORIZONTAL ? i.style[t] = "translate3d(" + this.currentPageTransform + "px, 0px, 0px)" : i.style[t] = "translate3d(0px, " + this.currentPageTransform + "px, 0px)";
}
}, Client.AltContainer.prototype.panOnPage = function(i) {
if ((i.direction !== Hammer.DIRECTION_LEFT && i.direction !== Hammer.DIRECTION_RIGHT || this.SwipeDetectDirection === Client.AltContainer.SwipingDirection.HORIZONTAL) && (i.direction !== Hammer.DIRECTION_UP && i.direction !== Hammer.DIRECTION_DOWN || this.SwipeDetectDirection === Client.AltContainer.SwipingDirection.VERTICAL) && !this.endingSwipeAnimation && this.elements) {
this.swipeDetected || this.preparePageSwipe(i);
var n = void 0 !== this.swipePageDestination ? this.elements[this.swipePageDestination] : null, s = this.elements[this.selectedPage], o = this.swipePageTransform + i.deltaX, l = this.currentPageTransform + i.deltaX, a = (this.SwipeDetectDirection === Client.AltContainer.SwipingDirection.VERTICAL && (o = this.swipePageTransform + i.deltaY, 
l = this.currentPageTransform + i.deltaY), n || (l = this.SwipeDetectDirection === Client.AltContainer.SwipingDirection.HORIZONTAL ? this.currentPageTransform + Math.floor(i.deltaX / 2) : this.currentPageTransform + Math.floor(i.deltaY / 2)), 
this.SwipeDetectDirection === Client.AltContainer.SwipingDirection.HORIZONTAL ? this.domObj.offsetWidth : this.domObj.offsetHeight), i = (n && (this.swipePageDestination > this.selectedPage ? (i.direction !== Hammer.DIRECTION_LEFT && i.direction !== Hammer.DIRECTION_UP || o < 0 - a / 10 && (o = Math.floor(0 - a / 10), 
l = Math.floor(0 - a - a / 10)), a / 10 < l && (l = Math.floor(a / 10), n) && (o = Math.floor(a + a / 10))) : (i.direction !== Hammer.DIRECTION_LEFT && i.direction !== Hammer.DIRECTION_UP || l < a / 10 && (l = Math.floor(0 - a / 10), 
o = Math.floor(0 - a - a / 10)), a / 10 < o && (o = Math.floor(a / 10), l = Math.floor(a + a / 10)))), 
"transform");
let e = n?.getRootObject(), t = s?.getRootObject();
n instanceof Client.Widget && (e = n.getAnimationRoot()), s instanceof Client.Widget && (t = s.getAnimationRoot()), 
this.SwipeDetectDirection === Client.AltContainer.SwipingDirection.HORIZONTAL ? (e && (e.style[i] = "translate3d(" + o + "px, 0px, 0px)"), 
t.style[i] = "translate3d(" + l + "px, 0px, 0px)") : (e && (e.style[i] = "translate3d(0px, " + o + "px, 0px)"), 
t.style[i] = "translate3d(0px, " + l + "px, 0px)");
}
}, Client.AltContainer.prototype.panEndOnPage = function(i) {
if (this.swipeDetected && this.elements) {
var n = this, s = (this.endTransition || (this.endTransition = function(e) {
n.onEndSwipeAnimation(e);
}), void 0 !== this.swipePageDestination ? this.elements[this.swipePageDestination] : null), o = this.elements[this.selectedPage];
let e = s?.getRootObject(), t = o?.getRootObject();
s instanceof Client.Widget && (e = s.getAnimationRoot()), o instanceof Client.Widget && (t = o.getAnimationRoot());
var l, a, o = "transform", r = this.SwipeDetectDirection === Client.AltContainer.SwipingDirection.HORIZONTAL ? this.domObj.offsetWidth : this.domObj.offsetHeight;
s ? (l = s = 0, i.distance > r / 10 * 2 ? l = this.swipePageDestination > this.selectedPage ? -r : r : s = this.swipePageDestination > this.selectedPage ? r : -r, 
e.classList.add("altcontainer-swipe-animation"), t.classList.add("altcontainer-swipe-animation"), 
a = "transitionend", e.addEventListener(a, this.endTransition), this.endingSwipeAnimation = !0, 
i.distance < r / 10 * 2 && (this.swipeUndo = !0), this.SwipeDetectDirection === Client.AltContainer.SwipingDirection.HORIZONTAL ? (e.style[o] = "translate3d(" + s + "px, 0px, 0px)", 
t.style[o] = "translate3d(" + l + "px, 0px, 0px)") : (e.style[o] = "translate3d(0px, " + s + "px, 0px)", 
t.style[o] = "translate3d(0px, " + l + "px, 0px)")) : (t.classList.add("altcontainer-swipe-animation"), 
a = "transitionend", n = this, t.addEventListener(a, this.endTransition), this.endingSwipeAnimation = !0, 
t.style[o] = "translate3d(0px, 0px, 0px)");
}
}, Client.AltContainer.prototype.onEndSwipeAnimation = function(e) {
var t, i, n, s;
this.elements && (s = null, t = this.elements[this.selectedPage], void 0 !== this.swipePageDestination && ((s = this.elements[this.swipePageDestination]).updateElement({
visible: !this.swipeUndo
}), t.updateElement({
visible: !!this.swipeUndo
}), this.swipeUndo || (i = this.selectedPage, this.selectedPage = this.swipePageDestination, 
(n = []).push({
obj: this.id,
id: "chgProp",
content: {
name: "selectedPage",
value: this.selectedPage,
clid: Client.id
}
}), n.push({
obj: this.id,
id: "onChangePage",
content: {
oldPage: i,
newPage: this.selectedPage
}
}), Client.mainFrame.sendEvents(n))), i = "IE" === Client.mainFrame.device.browserName ? "transitionend" : "webkitTransitionEnd", 
this.domObj.classList.remove("altcontainer-swiping-page-container"), s && (n = s.getRootObject(), 
(n = s instanceof Client.Widget ? s.getAnimationRoot() : n).classList.remove("altcontainer-swiping-page"), 
n.classList.remove("altcontainer-swipe-animation"), n.style.transform = "", n.removeEventListener(i, this.endTransition)), 
s = t.getRootObject(), (s = t instanceof Client.Widget ? t.getAnimationRoot() : s).classList.remove("altcontainer-swiping-page"), 
s.classList.remove("altcontainer-swipe-animation"), s.style.transform = "", s.removeEventListener(i, this.endTransition), 
this.endingSwipeAnimation = !1, this.swipeDetected = !1, delete this.swipePageDestination, 
this.swipePageTransform = null, this.currentPageTransform = null, delete this.swipeUndo);
}, Client.AltContainer.prototype.close = function(e, t) {
Client.Element.prototype.close.call(this, e, t), this.panDetected && (Client.mainFrame.getHammerManager().off("pan", this.panDetected), 
this.panDetected = null), this.panEndDetected && (Client.mainFrame.getHammerManager().off("panend", this.panEndDetected), 
this.panEndDetected = null);
}, Client.AltContainer.prototype.insertBefore = function(e) {
if (e.sib) for (var t = 0; t < this.ne(); t++) if (this.elements[t].id === e.sib && t <= this.selectedPage) {
this.selectedPage++;
var i = [];
i.push({
obj: this.id,
id: "chgProp",
content: {
name: "selectedPage",
value: this.selectedPage,
clid: Client.id
}
}), Client.mainFrame.sendEvents(i);
break;
}
var n = Client.Container.prototype.insertBefore.call(this, e);
if (n) if (n.updateElement) n.updateElement({
visible: !1
}); else if (n.elements) for (var s = 0; s < n.ne(); s++) n.elements[s].visible && (n.elements[s].tabHidden = !0), 
n.elements[s].updateElement({
visible: !1
});
return n;
}, Client.AltContainer.prototype.getTranslateOverlap = function(e) {
var t = e.getRootObject(), e = (t = e instanceof Client.Widget ? e.getAnimationRoot() : t).offsetTop, i = t.offsetLeft;
try {
var n = window.getComputedStyle(t, null);
e -= parseInt(n.borderTopWidth), i -= parseInt(n.borderLeftWidth);
} catch (e) {}
if (t.parentNode && (0 < e || 0 < i) && t.offsetParent !== t.parentNode) {
e -= t.parentNode.offsetTop, i -= t.parentNode.offsetLeft;
try {
n = window.getComputedStyle(t.parentNode, null);
e -= parseInt(n.borderTopWidth), i -= parseInt(n.borderLeftWidth);
} catch (e) {}
}
return "translate3d(-" + i + "px, -" + e + "px, 0px) ";
}, Client.AltContainer.prototype.calculateCoord = function(e) {
var t = e.offsetTop, i = e.offsetLeft;
try {
var n = window.getComputedStyle(e, null);
t -= parseInt(n.borderTopWidth), i -= parseInt(n.borderLeftWidth);
} catch (e) {}
var s = e.offsetWidth, o = e.offsetHeight;
if (e.parentNode && (0 < t || 0 < i) && e.offsetParent !== e.parentNode) {
t -= e.parentNode.offsetTop, i -= e.parentNode.offsetLeft;
try {
n = window.getComputedStyle(e.parentNode, null);
t -= parseInt(n.borderTopWidth), i -= parseInt(n.borderLeftWidth), s = s - parseInt(n.borderRightWidth) - parseInt(n.borderLeftWidth), 
o = o - parseInt(n.borderTopWidth) - parseInt(n.borderBottomWidth);
} catch (e) {}
}
return {
x: i,
y: t,
w: s,
h: o
};
}, Client.AltContainer.prototype.hasScrollBars = function(e, t) {
"Y" === (t = t.toUpperCase()) ? n = "Height" : "X" === t && (n = "Width");
var i = "scroll" + n, t = "overflow" + t, i = e[i] > e["client" + n], n = getComputedStyle(e);
return i && ("visible" === n[t] || "auto" === n[t]) || "scroll" === n[t];
}, Client.AltContainer.prototype.showSelPage = function() {
for (var e = 0; e < this.ne(); e++) {
var t = this.elements[e];
if (t instanceof Client.View) for (var i = 0; i < t.ne(); i++) {
var n = t.elements[i];
e === this.selectedPage ? (n.tabHidden && !n.visible && n.updateElement({
visible: !0
}), delete n.tabHidden) : e !== this.selectedPage && n.visible && (n.updateElement({
visible: !1
}), n.tabHidden = !0);
} else this.elements[e].updateElement({
visible: e === this.selectedPage
});
}
}, Client.SplitView = function(e, t, i) {
var n;
Client.Element.call(this, e, t, i), void 0 !== e && (this.domObj = document.createElement("div"), 
this.domObj.className = "splitview-backpanel", this.leftWidth = "300px", this.leftVisibility = "auto", 
this.leftPanel = document.createElement("div"), this.leftPanel.className = "splitview-leftpanel", 
this.rightPanel = document.createElement("div"), this.rightPanel.className = "splitview-rightpanel", 
n = this, Client.mainFrame.isEditing() ? (this.clickcount = 0, this.rightPanel.ondblclick = function() {
n.clickcount++, n.showLeftPanel(n.clickcount % 2 == 1);
}) : this.rightPanel.onclick = function() {
("auto" === n.leftVisibility && n.portrait || "never" === n.leftVisibility) && !n.leftPanel.style.display && n.showLeftPanel(!1);
}, this.domObj.appendChild(this.leftPanel), this.domObj.appendChild(this.rightPanel), 
this.updateElement(e), this.attachEvents(e.events), t.appendChildObject(this, this.domObj), 
this.createChildren(e), this.adaptLayout());
}, Client.SplitView.prototype = new Client.Element(), Client.SplitView.prototype.updateElement = function(e) {
this.purgeMyProp(e), e.leftWidth && (this.leftWidth = e.leftWidth, this.prepareLayout(), 
delete e.leftWidth), e.leftVisibility && (this.leftVisibility = e.leftVisibility, 
this.prepareLayout(), delete e.leftVisibility), Client.Element.prototype.updateElement.call(this, e);
}, Client.SplitView.prototype.attachEvents = function(e) {
var t;
e && (0 <= (t = e.indexOf("onOrientationChange")) && (e.splice(t, 1), this.sendOrientation = !0), 
0 <= (t = e.indexOf("onVisibilityChange")) && (e.splice(t, 1), this.sendVisibility = !0), 
Client.Element.prototype.attachEvents.call(this, e));
}, Client.SplitView.prototype.appendChildObject = function(e, t) {
(this.elements && 0 === this.elements.length ? this.leftPanel : this.rightPanel).appendChild(t);
}, Client.SplitView.prototype.onResize = function(e) {
this.adaptLayout(), Client.Element.prototype.onResize.call(this, e);
}, Client.SplitView.prototype.prepareLayout = function() {
var e = this;
this.layoutTimer || (this.layoutTimer = window.setTimeout(function() {
e.layoutTimer = 0, e.adaptLayout();
}, 0));
}, Client.SplitView.prototype.adaptLayout = function(e) {
var t = document.getElementById("app-ui"), t = (this._portrait = this.portrait, 
this.portrait = t.clientWidth < t.clientHeight, !1);
if (void 0 === e) {
var i = void 0 === this._portrait && this.portrait && ("device" === this.leftVisibility || "auto" === this.leftVisibility);
if ("device" === this.leftVisibility) {
switch (this.leftVisibility = "auto", Client.mainFrame.device.type) {
case "desktop":
this.leftVisibility = "always";
break;

case "smartphone":
this.leftVisibility = "never";
}
n = [ {
obj: this.id,
id: "chgProp",
content: {
name: "leftVisibility",
value: this.leftVisibility,
clid: Client.id
}
} ], Client.mainFrame.sendEvents(n);
}
switch (this.leftVisibility) {
case "auto":
e = !this.portrait;
break;

case "never":
e = !1;
break;

case "always":
e = !0;
}
i && (e = !0, this._leftWidth || (this._leftWidth = this.leftWidth));
} else ("auto" === this.leftVisibility && this.portrait || "never" === this.leftVisibility) && e && (t = !0, 
this._leftWidth || (this._leftWidth = this.leftWidth));
var n, i = t ? this._leftWidth : this.leftWidth;
t || (this.rightPanel.style.marginLeft = e ? i : "", this.rightPanel.style.width = e ? "calc(100% - " + i + ")" : "100%"), 
this.leftPanel.style.display = e ? "" : "none", this.leftPanel.style.width = i, 
"auto" === this.leftVisibility && !this.portrait && e && (this._leftWidth = this.leftPanel.clientWidth + "px"), 
this.portrait !== this._portrait && (n = [ {
obj: this.id,
id: "chgProp",
content: {
name: "portrait",
value: this.portrait,
clid: Client.id
}
} ], this.sendOrientation && ((t = {}).width = this.domObj.clientWidth, t.height = this.domObj.clientHeight, 
n.push({
obj: this.id,
id: "onOrientationChange",
content: t
})), Client.mainFrame.sendEvents(n)), e !== this._leftVisible && (this.sendVisibility && Client.mainFrame.sendEvents([ {
obj: this.id,
id: "onVisibilityChange",
content: {
visible: e
}
} ]), this._leftVisible = e), this.layoutTimer && (window.clearTimeout(this.layoutTimer), 
this.layoutTimer = 0);
}, Client.SplitView.prototype.showLeftPanel = function(e) {
this.adaptLayout(e), e && Client.Element.prototype.onResize.call(this);
}, Client.SVG = function(e, t, i) {
Client.Element.call(this, e, t, i), this.domObj = document.createElementNS("http://www.w3.org/2000/svg", "svg"), 
this.updateElement(e), this.attachEvents(e.events), t.appendChildObject(this, this.domObj);
}, Client.SVG.prototype = new Client.Element(), Client.SVG.prototype.updateElement = function(e) {
e.src && (this.use || (this.use = document.createElementNS("http://www.w3.org/2000/svg", "use"), 
this.domObj.appendChild(this.use)), this.use.setAttributeNS("http://www.w3.org/1999/xlink", "xlink:href", "#" + e.src), 
delete e.src), void 0 !== e.className && (this.domObj.setAttribute("class", e.className), 
delete e.className), Client.Element.prototype.updateElement.call(this, e);
}, Client.Video = function(e, t, i) {
Client.Element.call(this, e, t, i), this.domObj = document.createElement("video"), 
this.domObj.setAttribute("webkit-playsinline", ""), this.domObj.setAttribute("playsinline", ""), 
this.addEventsListeners(), this.updateElement(e), this.attachEvents(e.events), t.appendChildObject(this, this.domObj);
}, Client.Video.prototype = new Client.Element(), Client.Video.prototype.updateElement = function(e) {
this.purgeMyProp(e), void 0 !== e.playing && (e.playing ? this.domObj.play() : this.domObj.pause(), 
delete e.playing), void 0 !== e.seekTime && (this.changedTime = !0, this.domObj.currentTime = e.seekTime, 
delete e.seekTime), void 0 !== e.currentTime && (this.changedTime = !0), void 0 === e.volume && void 0 === e.muted || (this.changedVolume = !0), 
Client.Element.prototype.updateElement.call(this, e);
}, Client.Video.prototype.addEventsListeners = function() {
this.domObj.addEventListener("play", e => {
var t = [ {
obj: this.id,
id: "chgProp",
content: {
name: "playing",
value: !0,
clid: Client.id
}
} ];
this.sendPlaying && t.push({
obj: this.id,
id: "onPlayingChange",
content: this.saveEvent(e)
}), Client.mainFrame.sendEvents(t);
}, !0), this.domObj.addEventListener("pause", e => {
var t = [ {
obj: this.id,
id: "chgProp",
content: {
name: "playing",
value: !1,
clid: Client.id
}
} ];
this.sendPlaying && t.push({
obj: this.id,
id: "onPlayingChange",
content: this.saveEvent(e)
}), Client.mainFrame.sendEvents(t);
}, !0), this.domObj.addEventListener("seeked", e => {
var t;
this.changedTime || (t = [ {
obj: this.id,
id: "chgProp",
content: {
name: "seekTime",
value: this.domObj.currentTime,
clid: Client.id
}
} ], this.sendSeek && ((e = this.saveEvent(e)).seekTime = this.domObj.currentTime, 
t.push({
obj: this.id,
id: "onSeek",
content: e
})), Client.mainFrame.sendEvents(t)), this.changedTime = !1;
}, !0), this.domObj.addEventListener("volumechange", e => {
var t;
this.changedVolume || (t = [ {
obj: this.id,
id: "chgProp",
content: {
name: "volume",
value: this.domObj.volume,
clid: Client.id
}
}, {
obj: this.id,
id: "chgProp",
content: {
name: "muted",
value: this.domObj.muted,
clid: Client.id
}
} ], this.sendVolume && t.push({
obj: this.id,
id: "onVolumeChange",
content: this.saveEvent(e)
}), Client.mainFrame.sendEvents(t)), this.changedVolume = !1;
}, !0), this.domObj.addEventListener("ended", () => {
this.sendEnded && Client.mainFrame.sendEvents([ {
obj: this.id,
id: "onEnded"
} ]);
}, !0);
}, Client.Video.prototype.attachEvents = function(e) {
var t;
e && (0 <= (t = e.indexOf("onVolumeChange")) && (e.splice(t, 1), this.sendVolume = !0), 
0 <= (t = e.indexOf("onPlayingChange")) && (e.splice(t, 1), this.sendPlaying = !0), 
0 <= (t = e.indexOf("onSeek")) && (e.splice(t, 1), this.sendSeek = !0), 0 <= (t = e.indexOf("onEnded")) && (e.splice(t, 1), 
this.sendEnded = !0), Client.Element.prototype.attachEvents.call(this, e));
}, Client.Video.prototype.requestFullScreen = function() {
try {
this.domObj.requestFullscreen();
} catch (e) {
console.log("Client.Video.requestFullScreen exception", e);
}
}, Client.Dialog = function(e, t, i) {
Client.Container.call(this, e, t, i), void 0 !== e && (this.opt = e.options || {}, 
this.backgroundDiv = document.createElement("div"), this.backgroundDiv.className = "dialog-ext" + (this.opt.modal ? "-modal" : "") + (this.opt.extcls ? " " + this.opt.extcls : ""), 
this.domObj.className = "dialog-int", this.domObj.tabIndex = 0, this.wrapperObj = this.domObj, 
this.backgroundDiv.appendChild(this.domObj), i.domObj.appendChild(this.backgroundDiv), 
this.opt?.autoclose) && (this.autoclose = !0, this.autoCloseFunct = e => this.autoClose(e, this), 
(this.opt.modal ? (this.backgroundDiv.addEventListener("mousedown", this.autoCloseFunct), 
this.backgroundDiv) : (i.domObj.addEventListener("mousedown", this.autoCloseFunct), 
i.domObj)).addEventListener("touchend", this.autoCloseFunct));
}, Client.Dialog.prototype = new Client.Container(), Client.Dialog.prototype.close = function() {
Client.Container.prototype.close.call(this), this.backgroundDiv.remove(), this.view?.dialog === this && (delete this.view.dialog, 
this.view.close());
}, Client.Dialog.prototype.positionElement = function() {
var e, t, i, n, s, o, l, a;
this.opt && (this.opt.position && ("string" == typeof this.opt.position ? ((l = this.calculatePopupAbsoluteCoord(this.opt.position)).top && (this.wrapperObj.style.marginTop = l.top), 
l.right && (this.wrapperObj.style.marginRight = l.right), l.bottom && (this.wrapperObj.style.marginBottom = l.bottom), 
l.left && (this.wrapperObj.style.marginLeft = l.left)) : ((l = this.opt.position).top && (this.wrapperObj.style.top = l.top), 
l.right && (this.wrapperObj.style.right = l.right), l.bottom && (this.wrapperObj.style.bottom = l.bottom), 
l.left && (this.wrapperObj.style.left = l.left), this.wrapperObj.style.position = "absolute")), 
this.opt.timeout && (e = this, window.setTimeout(function() {
e.close();
}, this.opt.timeout)), this.opt.ref) && (l = Client.eleMap[this.opt.ref.id]) && (t = window.getComputedStyle(this.wrapperObj), 
n = i = 0, this.opt.ref.whisker && (n = (i = this.opt.ref.whiskerSize || 9) - .5), 
s = Client.Utils.findElemPos(l.domObj, null, !0), l = Client.Utils.findElemPos(l.domObj), 
o = (o = this.opt.ref.position) || "bottom", (o = this.calculatePopupRelativeCoord(o, s, l, i, this.opt.ref.offset)) ? (l = o.top, 
a = o.left, this.wrapperObj.style.position = "absolute", this.wrapperObj.style.top = l + "px", 
this.wrapperObj.style.left = a + "px", this.opt.ref.whiskerPosition = o.wSide, this.opt.ref.whisker && this.createWhisker(t, o, s, i, n, .5)) : delete this.opt.ref);
}, Client.Dialog.prototype.autoClose = function(e, t) {
let i = e.target.parentNode;
for (;i; ) {
if (i === this.wrapperObj) return;
i = i.parentNode;
}
document.getElementById("app-ui").removeEventListener("mousedown", t.autoCloseFunct);
e = [ {
obj: (t.view || t).id,
id: "close",
content: {}
} ];
Client.mainFrame.sendEvents(e);
}, Client.Dialog.prototype.calculatePopupAbsoluteCoord = function(e) {
var t = {};
return -1 < e.indexOf("top") && (t.top = "0px"), -1 < e.indexOf("right") && (t.right = "0px"), 
-1 < e.indexOf("bottom") && (t.bottom = "0px"), -1 < e.indexOf("left") && (t.left = "0px"), 
t;
}, Client.Dialog.prototype.calculatePopupRelativeCoord = function(e, t, i, n, s) {
var o, l = Client.Utils.findElemPos(this.wrapperObj), a = (e = e || "").split("-"), a = (e = a[0], 
a[1]);
return "top" === e ? o = this.popupTop(t, i, l, n, s, !0, a) : "right" === e ? o = this.popupRight(t, i, l, n, s, !0, a) : "bottom" === e ? o = this.popupBottom(t, i, l, n, s, !0, a) : "left" === e && (o = this.popupLeft(t, i, l, n, s, !0, a)), 
o;
}, Client.Dialog.prototype.popupTop = function(e, t, i, n, s, o, l) {
var a, r = document.getElementById("app-ui").getBoundingClientRect(), r = r.right - r.left, d = e.right - e.left, h = i.bottom - i.top, c = i.right - i.left, h = e.top - h - n;
return s && (h -= s), h < 0 ? o ? this.popupBottom(e, t, i, n, s, !1) : a : (o = "left" === l ? e.left : "right" === l ? e.right - c : e.left + (d - c) / 2, 
r < c ? void 0 : (o < 0 ? o = 0 : r < o + c && (o = e.left + d - c), {
top: h,
left: o,
wSide: "bottom"
}));
}, Client.Dialog.prototype.popupLeft = function(e, t, i, n, s, o, l) {
var a, r = document.getElementById("app-ui").getBoundingClientRect(), r = r.bottom - r.top, d = e.bottom - e.top, h = i.bottom - i.top, c = e.left - (i.right - i.left) - n;
return s && (c -= s), c < 0 ? o ? this.popupRight(e, t, i, n, s, !1) : a : (o = "top" === l ? e.top : "bottom" === l ? e.bottom - h : e.top - (h - d) / 2, 
r < h ? void 0 : (o < 0 ? o = e.top : r < o + h && (o = e.top + d - h), {
top: o,
left: c,
wSide: "right"
}));
}, Client.Dialog.prototype.popupBottom = function(e, t, i, n, s, o, l) {
var a, r = document.getElementById("app-ui").getBoundingClientRect(), r = r.right - r.left, d = e.bottom - e.top, h = e.right - e.left, c = i.right - i.left, p = e.top + d + n;
return s && (p += s), t.top + d + n + this.wrapperObj.offsetHeight > window.innerHeight ? o ? this.popupTop(e, t, i, n, s, !1) : a : (d = "left" === l ? e.left : "right" === l ? e.right - c : e.left + (h - c) / 2, 
r < c ? void 0 : (d < 0 ? d = 0 : r < d + c && (d = e.left + h - c), {
top: p,
left: d,
wSide: "top"
}));
}, Client.Dialog.prototype.popupRight = function(e, t, i, n, s, o, l) {
var a, r = document.getElementById("app-ui").getBoundingClientRect(), d = r.right - r.left, r = r.bottom - r.top, h = e.bottom - e.top, c = e.right - e.left, p = i.bottom - i.top, u = e.left + c + n;
return s && (u += s), t.left + c + n + this.wrapperObj.offsetWidth > d ? o ? this.popupLeft(e, t, i, n, s, !1) : a : (c = "top" === l ? e.top : "bottom" === l ? e.bottom - p : e.top - (p - h) / 2, 
r < p ? void 0 : (c < 0 ? c = 0 : r < c + p && (c = e.top + h - p), {
top: c,
left: u,
wSide: "left"
}));
}, Client.Dialog.prototype.calculateWhiskerCoord = function(e, t, i, n, s) {
var o, l, a, r, d = Client.Utils.findElemPos(this.wrapperObj), h = (t.right - t.left) / 2, c = (t.bottom - t.top) / 2, p = i * Math.sqrt(2) / 2;
return "top" === e ? (l = d.top - i + n.top, o = t.left + h - p, r = l + 1, 0 < n.top && (r += n.top), 
a = o + s) : "bottom" === e ? (l = d.top + this.wrapperObj.offsetHeight - n.bottom + 1, 
o = t.left + h - p, r = l - 1, 0 < n.bottom && (r -= n.bottom), a = o + s) : "right" === e ? (r = (l = t.top + c - p) + s, 
a = (o = d.left + this.wrapperObj.offsetWidth - n.right + 1) - 1, 0 < n.right && (a -= n.right)) : "left" === e && (r = (l = t.top + c - p) + s, 
a = (o = d.left - i + n.left) + 1, 0 < n.left) && (a += n.left), {
wExtLeft: o,
wExtTop: l,
wIntLeft: a,
wIntTop: r
};
}, Client.Dialog.prototype.getBorderWidth = function(e) {
var t, i = {};
return e.borderWidth ? (t = e.borderWidth.replace("px", ""), i.top = parseFloat(t), 
i.right = parseFloat(t), i.bottom = parseFloat(t), i.left = parseFloat(t)) : (e.borderTopWidth && (i.top = parseFloat(e.borderTopWidth.replace("px", ""))), 
e.borderRightWidth && (i.right = parseFloat(e.borderRightWidth.replace("px", ""))), 
e.borderBottompWidth && (i.bottom = parseFloat(e.borderBottomWidth.replace("px", ""))), 
e.borderLeftpWidth && (i.left = parseFloat(e.borderLeftWidth.replace("px", "")))), 
i;
}, Client.Dialog.prototype.invertSide = function(e) {
e = "Top" === e ? "Bottom" : "Bottom" === e ? "Top" : "Left" === e ? "Right" : "Left";
return e;
}, Client.Dialog.prototype.getOtherSides = function(e) {
var t = [ "Top", "Right", "Bottom", "Left" ];
return -1 < t.indexOf(e) && t.splice(t.indexOf(e), 1), t;
}, Client.Dialog.prototype.createWhisker = function(e, t, i, n, s, o) {
for (var l = document.createElement("div"), a = (l.className = "whisker-ext", document.createElement("div")), r = (a.className = "whisker-int", 
this.getBorderWidth(e)), i = this.calculateWhiskerCoord(t.wSide, i, n, r, o), r = Client.Utils.capitalize(t.wSide), d = (l.style.left = i.wExtLeft + "px", 
a.style.left = i.wIntLeft + "px", l.style.top = i.wExtTop + "px", a.style.top = i.wIntTop + "px", 
l.style["border" + r + "Style"] = "dashed", a.style["border" + r + "Style"] = "dashed", 
l.style["border" + r + "Width"] = "0px", a.style["border" + r + "Width"] = "0px", 
this.getOtherSides(r)), h = 0; h < d.length; h++) l.style["border" + d[h] + "Width"] = n + "px", 
a.style["border" + d[h] + "Width"] = s + "px";
r = this.invertSide(r), l.style["border" + r + "Color"] = "" !== e.borderColor ? e.borderColor : "transparent", 
a.style["border" + r + "Color"] = e.backgroundColor, this.wrapperObj.parentNode.appendChild(l), 
this.wrapperObj.parentNode.appendChild(a);
}, Client.MenuList = function(e, t, i) {
Client.Container.call(this, e, t, i), this.addEventsListeners(), t instanceof Client.View && this.domObj.parentNode.removeChild(this.domObj), 
this.domObj.className = "menu-list " + this.domObj.className;
}, Client.MenuList.prototype = new Client.Container(), Client.MenuList.prototype.addEventsListeners = function() {
this.domObj.addEventListener("click", e => {
this.changeCallback && this.changeCallback(e), this.hide();
}, !0);
}, Client.MenuList.prototype.updateElement = function(e) {
e.whisker && (this.whisker = e.whisker, delete e.whisker), Client.Container.prototype.updateElement.call(this, e);
}, Client.MenuList.prototype.show = function(e) {
var t = this, e = (this.domObj.style.height = "", this.dialog = new Client.Dialog({
options: {
autoclose: !0,
ref: {
id: e,
whisker: this.whisker
}
}
}, this.view, this.view), this.dialog.domObj.appendChild(this.domObj), this.dialog.positionElement(), 
this.dialog.domObj.parentNode.clientHeight - this.dialog.domObj.offsetTop - 2);
this.domObj.offsetHeight > e && (this.domObj.style.height = e + "px"), this.dialog.autoClose = function(e) {
t.autoHide(e);
};
}, Client.MenuList.prototype.autoHide = function(e) {
for (var t = e.target; t; ) {
if (t === this.domObj) return;
t = t.parentNode;
}
this.hide();
}, Client.MenuList.prototype.hide = function() {
this.dialog && this.dialog.close(), this.dialog = null;
}, Client.MenuItem = function(e, t, i) {
Client.Element.call(this, e, t, i), this.domObj = document.createElement("div"), 
this.updateElement(e), this.attachEvents(e.events), this.domObj.className = "menu-item " + this.domObj.className, 
t.appendChildObject(this, this.domObj);
}, Client.MenuItem.prototype = new Client.Element(), Client.MenuItem.prototype.updateElement = function(e) {
e.image && (this.imageObj || ("svg:" === e.image.substring(0, 4) ? (this.imageObj = document.createElementNS("http://www.w3.org/2000/svg", "svg"), 
this.imageObj.setAttribute("class", "menu-item-svg"), this.use = document.createElementNS("http://www.w3.org/2000/svg", "use"), 
this.imageObj.appendChild(this.use)) : "cls:" === e.image.substring(0, 4) ? this.imageObj = document.createElement("div") : (this.imageObj = document.createElement("img"), 
this.imageObj.className = "menu-item-img"), this.domObj.appendChild(this.imageObj)), 
this.use ? this.use.setAttributeNS("http://www.w3.org/1999/xlink", "xlink:href", "#" + e.image.substring(4)) : "div" === this.imageObj.tagName ? this.imageObj.className = "menu-item-cls " + e.image.substring(4) : this.imageObj.src = e.image, 
delete e.image), !e.caption && !e.detail || this.rightObj || (this.rightObj = document.createElement("div"), 
this.rightObj.className = "menu-item-right", this.domObj.appendChild(this.rightObj)), 
e.caption && (this.nameObj || (this.nameObj = document.createElement("div"), this.nameObj.className = "menu-item-name", 
this.rightObj.appendChild(this.nameObj)), e.hllen ? this.nameObj.innerHTML = e.caption.substring(0, e.hlpos) + "<span class='element-autocomplete-value-hl'>" + e.caption.substr(e.hlpos, e.hllen) + "</span>" + e.caption.substring(e.hlpos + e.hllen) : this.nameObj.innerText = e.caption, 
delete e.hlpos, delete e.hllen, delete e.highlight), e.detail && (this.descObj || (this.descObj = document.createElement("div"), 
this.descObj.className = "menu-item-detail", this.rightObj.appendChild(this.descObj)), 
this.descObj.innerText = e.detail, delete e.detail), Client.Element.prototype.updateElement.call(this, e);
}, Client.Autocomplete = function(e, t, i) {
Client.Element.call(this, e, t, i), this.domObj = document.createElement("div"), 
this.domObj.setAttribute("tabindex", "0"), this.domObj.className = "element-autocomplete-container", 
this.valueList = [], this.hasImage = !1, this.canFilter = !0, "ro" === Client.clientRole && (e.readonly = !0), 
void 0 !== e.canFilter && (this.canFilter = e.canFilter, delete e.canFilter), void 0 === e.value && (e.value = ""), 
this.realize(), this.updateElement(e), this.attachEvents(e.events), this.canFilter || void 0 !== this.rightImage || (this.rightImage = "svg:icon-caret-dropdown", 
this.updateRightIcon(this.rightImage)), t.appendChildObject(this, this.domObj);
}, Client.Autocomplete.prototype = new Client.Element(), Client.Autocomplete.prototype.updateElement = function(e) {
var t = this;
this.purgeMyProp(e), e.list && ("string" == typeof e.list && (e.list = JSON.parse(e.list)), 
this.valueList = e.list, delete e.list), e.data && (e.data.columns ? this.initOptions(e) : void 0 !== e.data.pos ? e.data.data ? this.updateOption(e.data) : this.removeOption(e.data.pos) : this.addOption(e.data.data), 
this.comboTimer || (this.comboTimer = window.setTimeout(function() {
t.updateCombo();
}, 10)), !this.rawvalue || this.value && this.comboObj?.dialog || this.setValue(this.rawvalue, !0), 
delete e.data), void 0 !== e.value && (this.setValue(e.value, !0), delete e.value), 
void 0 !== e.placeholder && (this.placeholder = e.placeholder, this.captionObj && "input" === this.captionObj.tagName.toLowerCase() ? this.captionObj.placeholder = this.placeholder : "" === this.rawvalue && this.captionObj && "span" === this.captionObj.tagName.toLowerCase() && (this.captionObj.textContent = this.placeholder, 
this.captionObj.classList.add("element-autocomplete-placeholder")), delete e.placeholder), 
void 0 !== e.readonly && (this.readonly = e.readonly || "ro" === Client.clientRole, 
this.captionObj.disabled = this.readonly || this.disabled), void 0 !== e.disabled && (this.disabled = e.disabled, 
this.captionObj.disabled = this.readonly || this.disabled), e.rowClass && (this.rowClass = e.rowClass), 
this.canFilter && (e.filter || null === e.filter) && (null === e.filter ? this.closeCombo() : (" " === e.filter && (e.filter = ""), 
this.captionObj.value = e.filter, this.openCombo(e.filter)), delete e.filter), void 0 !== e.rowStyle && ("string" == typeof e.rowStyle && (e.rowStyle = JSON.parse(e.rowStyle)), 
this.rowStyle = e.rowStyle, delete e.rowStyle), void 0 !== e.acceptNewValues && (this.acceptNewValues = e.acceptNewValues, 
delete e.acceptNewValues), void 0 !== e.rightImage && (this.rightImage = e.rightImage, 
delete e.rightImage, this.updateRightIcon(this.rightImage)), void 0 !== e.canFilter && e.canFilter !== this.canFilter && (this.canFilter = e.canFilter, 
this.realize(), delete e.canFilter), e.className && (e.className = "element-autocomplete-container " + (this.readonly ? "element-autocomplete-readonly " : "") + (this.disabled ? "element-autocomplete-disabled " : "") + e.className), 
Client.Element.prototype.updateElement.call(this, e);
}, Client.Autocomplete.prototype.addEventsListeners = function() {
this.canFilter && (this.captionObj.onblur = e => this.onInputBlur(e), this.captionObj.oninput = e => this.onInputChange(e), 
this.captionObj.onfocus = e => this.onInputFocus(e)), this.rightIconObj.onclick = e => Client.mainFrame.sendEvents([ {
obj: this.id,
id: "onClick",
content: this.saveEvent(e)
} ]), this.domObj.addEventListener("click", () => this.onClick()), this.domObj.onkeydown = e => this.onInputKeyDown(e);
}, Client.Autocomplete.prototype.attachEvents = function(e) {
var t;
e && (0 <= (t = e.indexOf("onChange")) && (e.splice(t, 1), this.sendChanges = !0), 
Client.Element.prototype.attachEvents.call(this, e));
}, Client.Autocomplete.prototype.realize = function() {
this.iconObj || (this.iconObj = document.createElement("img"), this.iconObj.className = "element-autocomplete-icon", 
this.domObj.appendChild(this.iconObj));
var e = document.createElement(this.canFilter ? "input" : "span");
e.className = this.canFilter ? "element-autocomplete-input" : "element-autocomplete-caption", 
this.canFilter && (e.type = "text"), this.captionObj ? (this.domObj.insertBefore(e, this.captionObj), 
this.domObj.removeChild(this.captionObj)) : this.domObj.appendChild(e), this.captionObj = e, 
this.rightIconObj || (this.rightIconObj = document.createElement("img"), this.rightIconObj.className = "element-autocomplete-righticon", 
this.rightIconObj.style.display = "none", this.domObj.appendChild(this.rightIconObj)), 
this.addEventsListeners();
}, Client.Autocomplete.prototype.setValue = function(e, t) {
this.rawvalue = e, this.value = this.searchValue(e), this.laststyle && (this.updateStyle(this.domObj, this.laststyle, !1), 
this.laststyle = null), this.value ? (this.updateIcon(this.value.src), this.captionObj.classList.remove("element-autocomplete-placeholder"), 
"span" === this.captionObj.tagName.toLowerCase() ? this.captionObj.textContent = this.value.n : this.captionObj.value = this.value.n, 
this.value.d && (this.captionObj.title = this.value.d), this.value.s && (this.updateStyle(this.domObj, this.value.s, !0), 
this.laststyle = this.value.s)) : this.acceptNewValues || t ? (this.updateIcon(""), 
this.captionObj.classList.remove("element-autocomplete-placeholder"), "span" === this.captionObj.tagName.toLowerCase() ? this.captionObj.textContent = this.rawvalue : this.captionObj.value = this.rawvalue) : (this.rawvalue = "", 
this.updateIcon(), this.placeholder ? ("span" === this.captionObj.tagName.toLowerCase() ? this.captionObj.textContent = this.placeholder : this.captionObj.value = "", 
this.captionObj.classList.add("element-autocomplete-placeholder")) : "span" === this.captionObj.tagName.toLowerCase() ? this.captionObj.textContent = "" : this.captionObj.value = "", 
this.captionObj.removeAttribute("title"));
}, Client.Autocomplete.prototype.updateStyle = function(e, t, i) {
-1 < t.indexOf(":") ? i ? e.style.cssText += t : e.style.cssText = e.style.cssText.replace(t, "") : i ? e.classList.add(t) : e.classList.remove(t);
}, Client.Autocomplete.prototype.onClick = function() {
!1 !== this.canFilter || this.readonly || this.disabled || this.comboObj && this.comboObj.dialog ? this.canFilter && this.captionObj.focus() : this.openCombo();
}, Client.Autocomplete.prototype.onInputBlur = function(e) {
this.comboClicked || (this.acceptNewValues && !this.escPressed ? this.selectValue(this.captionObj.value !== this.rawvalue ? this.captionObj.value : this.rawvalue, e) : void 0 !== this.rawvalue && this.setValue(this.rawvalue));
}, Client.Autocomplete.prototype.onInputFocus = function() {
this.readonly || this.disabled || this.openCombo(this.captionObj.value);
}, Client.Autocomplete.prototype.onInputChange = function() {
this.readonly || this.disabled || (this.dataBound ? this.sendFilter(this.captionObj.value) : this.openCombo(this.captionObj.value));
}, Client.Autocomplete.prototype.searchValue = function(e) {
for (var t = 0; t < this.valueList.length; t++) if (this.valueList[t].v == e) return this.valueList[t];
}, Client.Autocomplete.prototype.openCombo = function(e, t) {
var n;
if (void 0 === t && (t = !0), this.comboObj || (this.comboObj = new Client.MenuList({
className: "element-autocomplete-dialog"
}, this.view.getRootView(), this.view.getRootView()), (n = this).comboObj.changeCallback = function(e) {
for (var t = e.srcElement; t && !t.id; ) t = t.parentNode;
var i = parseInt(t.id);
n.selectValue(n.filterList[i], e);
}, this.comboObj.domObj.addEventListener("mousedown", function() {
n.comboClicked = !0;
}, {
passive: !0,
capture: !0
}), this.comboObj.domObj.addEventListener("touchstart", function() {
n.comboClicked = !0;
}, {
passive: !0,
capture: !0
}), !1 === this.canFilter && (this.comboObj.domObj.tabIndex = "1000", this.comboObj.domObj.onkeydown = function(e) {
e.preventDefault(), n.onInputKeyDown(e);
})), this.attValue = this.acceptNewValues ? -1 : 0, this.filterList = [], void 0 === e && this.value && this.value.v) for (var i = 0; i < this.valueList.length; i++) if (this.valueList[i].v === this.value.v) {
this.attValue = i;
break;
}
var s = this.comboObj.domObj.offsetHeight;
if (this.comboObj.hide(), this.comboObj.elements) for (;0 < this.comboObj.elements.length; ) this.comboObj.removeChild({
id: this.comboObj.elements[0].id
});
this.comboObj.domObj.style.width = this.domObj.clientWidth + "px";
var o = this.canFilter ? new RegExp(e.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&"), "i") : {};
this.hasImage = !1;
for (var l = 0; l < this.valueList.length; l++) {
var a = this.valueList[l], r = (a.src && (this.hasImage = !0), this.canFilter ? a.n.search(o) : 0);
if (-1 < r) {
this.filterList.push(a);
var d = {
class: "MenuItem",
caption: a.n,
detail: a.d,
image: a.src
}, h = (e && (d.hlpos = r, d.hllen = e.length), this.comboObj.insertBefore({
child: d
}));
if (h.domObj.id = this.filterList.length - 1 + "", this.rowClass && h.domObj.classList.add(this.rowClass), 
this.rowStyle) for (var c = Object.keys(this.rowStyle), i = 0; i < c.length; i++) {
var p = c[i], u = this.rowStyle[p];
Client.Utils.requireAbs(p) && (u = Client.Utils.abs(u)), h.domObj.style[p] = u;
}
a.s && this.updateStyle(h.domObj, a.s, !0), (!this.acceptNewValues && void 0 !== e && 1 === this.filterList.length || !e && this.attValue === l) && h.domObj.classList.add("element-autocomplete-attvalue"), 
Client.mainFrame.device.isMobile && h.domObj.classList.add("element-autocomplete-mobile-row");
}
}
this.comboObj.domObj.style.width = this.domObj.offsetWidth + "px", this.comboObj.show(this.id);
var f = this, m = (this.comboObj.dialog.autoClose = function(e) {
f.comboAutoHide(e);
}, this.comboObj.domObj.cloneNode(!0)), C = (m.style.height = "", document.body.appendChild(m), 
m.offsetHeight), m = (document.body.removeChild(m), this.openAnimation && this.openAnimation.stop(), 
this.openAnimation = new Tweenable(), {
from: {
height: s
},
to: {
height: C
},
duration: 300,
easing: "easeOutQuart",
step: function(e) {
f.comboObj.domObj.style.height = e.height + "px";
},
start: function() {
f.comboObj.domObj.style.overflow = "hidden";
},
finish: function() {
f.comboObj.domObj.style.overflow = "", f.openAnimation = null;
}
});
this.openAnimation.tween(m), t && this.sendFilter(e || " ");
}, Client.Autocomplete.prototype.closeCombo = function() {
var t, e;
this.comboObj && (this.openAnimation && this.openAnimation.stop(), this.openAnimation = new Tweenable(), 
e = {
from: {
height: (t = this).comboObj.domObj.offsetHeight
},
to: {
height: 0
},
duration: 300,
easing: "easeOutQuart",
step: function(e) {
t.comboObj.domObj.style.height = e.height + "px";
},
start: function() {
t.comboObj.domObj.style.overflow = "hidden";
},
finish: function() {
t.comboObj.domObj.style.overflow = "", t.comboObj.domObj.style.height = "", t.openAnimation = null, 
t.comboObj.hide(), t.closeTime = new Date(), t.sendFilter(null);
}
}, this.openAnimation.tween(e)), this.comboClicked = !1;
}, Client.Autocomplete.prototype.comboAutoHide = function(e) {
if (e.target !== this.domObj && e.target !== this.captionObj) {
for (var t = e.target; t; ) {
if (t === this.comboObj.domObj) return;
t = t.parentNode;
}
this.closeCombo();
}
}, Client.Autocomplete.prototype.selectValue = function(e, t) {
var i = [ {
obj: this.id,
id: "chgProp",
content: {
name: "value",
value: (e = "string" == typeof e ? {
v: e
} : e).v,
clid: Client.id
}
} ];
this.sendChanges && i.push({
obj: this.id,
id: "onChange",
content: this.saveEvent(t)
}), Client.mainFrame.isEditing() || Client.mainFrame.sendEvents(i), this.setValue(e.v);
}, Client.Autocomplete.prototype.sendFilter = function(e, t) {
var i = [ {
obj: this.id,
id: "chgProp",
content: {
name: "filter",
value: e,
clid: Client.id
}
} ];
i.push({
obj: this.id,
id: "onFilter",
content: Object.assign({
filter: e
}, this.saveEvent(t))
}), Client.mainFrame.isEditing() || Client.mainFrame.sendEvents(i);
}, Client.Autocomplete.prototype.updateIcon = function(e) {
var t, i;
e ? (t = "img", "svg:" === e.substring(0, 4) && (t = "svg"), "cls:" === e.substring(0, 4) && (t = "div"), 
this.iconObj.tagName !== t && ("svg" === t ? ((i = document.createElementNS("http://www.w3.org/2000/svg", "svg")).setAttribute("class", "element-autocomplete-icon"), 
this.use = document.createElementNS("http://www.w3.org/2000/svg", "use"), i.appendChild(this.use)) : ((i = document.createElement(t)).className = "element-autocomplete-icon", 
this.use = null), this.iconObj.parentNode.insertBefore(i, this.iconObj), this.iconObj.parentNode.removeChild(this.iconObj), 
this.iconObj = i), this.use ? this.use.setAttributeNS("http://www.w3.org/1999/xlink", "xlink:href", "#" + e.substring(4)) : "div" === t ? this.iconObj.className = "element-autocomplete-icon " + e.substring(4) : this.iconObj.src = e, 
this.iconObj.style.visibility = "", this.iconObj.style.display = "") : this.hasImage ? this.iconObj.style.visibility = "hidden" : this.iconObj.style.display = "none";
}, Client.Autocomplete.prototype.updateRightIcon = function(e) {
var t, i;
e ? (t = "img", "svg:" === e.substring(0, 4) && (t = "svg"), "cls:" === e.substring(0, 4) && (t = "div"), 
this.rightIconObj.tagName !== t && ("svg" === t ? ((i = document.createElementNS("http://www.w3.org/2000/svg", "svg")).setAttribute("class", "element-autocomplete-righticon"), 
this.rightUse = document.createElementNS("http://www.w3.org/2000/svg", "use"), i.appendChild(this.rightUse)) : ((i = document.createElement(t)).className = "element-autocomplete-righticon", 
this.rightUse = null), this.rightIconObj.parentNode.insertBefore(i, this.rightIconObj), 
this.rightIconObj.parentNode.removeChild(this.rightIconObj), this.rightIconObj = i), 
this.rightUse ? this.rightUse.setAttributeNS("http://www.w3.org/1999/xlink", "xlink:href", "#" + e.substring(4)) : "div" === t ? this.rightIconObj.className = "element-autocomplete-righticon " + e.substring(4) : this.rightIconObj.src = e, 
this.rightIconObj.style.visibility = "", this.rightIconObj.style.display = "") : this.rightIconObj.style.display = "none";
}, Client.Autocomplete.prototype.onInputKeyDown = function(e) {
var t, i = e.keyCode;
13 === i && (t = "", t = this.acceptNewValues ? 0 <= this.attValue && this.attValue < this.filterList.length ? this.filterList[this.attValue] : this.captionObj.value : this.attValue < this.filterList.length ? this.filterList[this.attValue] : this.rawvalue || "", 
this.selectValue(t), "" === t && this.canFilter && !this.acceptNewValues ? this.openCombo("") : (this.closeCombo(), 
this.captionObj.blur())), 27 === i && (this.escPressed = !0, this.captionObj.blur(), 
this.escPressed = !1, this.closeCombo()), 38 === i && (e.preventDefault(), this.updateAttValue(this.attValue - 1)), 
40 === i && (e.preventDefault(), this.updateAttValue(this.attValue + 1));
}, Client.Autocomplete.prototype.updateAttValue = function(e) {
var t;
(e = (e = e < 0 ? 0 : e) >= this.filterList.length ? this.filterList.length - 1 : e) !== this.attValue && ((t = this.comboObj.elements[this.attValue] ? this.comboObj.elements[this.attValue].domObj : null) && t.classList.remove("element-autocomplete-attvalue"), 
this.attValue = e, (t = this.comboObj.elements[this.attValue].domObj).classList.add("element-autocomplete-attvalue"), 
t.offsetTop + t.offsetHeight > this.comboObj.domObj.clientHeight + this.comboObj.domObj.scrollTop && (this.comboObj.domObj.scrollTop = t.offsetTop + t.offsetHeight - this.comboObj.domObj.clientHeight), 
t.offsetTop < this.comboObj.domObj.scrollTop) && (this.comboObj.domObj.scrollTop = t.offsetTop);
}, Client.Autocomplete.prototype.close = function(e) {
this.closeCombo(), Client.Element.prototype.close.call(this, e);
}, Client.Autocomplete.prototype.initOptions = function(e) {
this.colIndex = {
v: -1,
n: -1
}, this.valueList = [], this.dataBound = !0;
for (var t = 0; t < e.data.columns.length; t++) {
var i = e.data.columns[t].toLowerCase();
"id" !== i && "code" !== i && "value" !== i && "v" !== i || (this.colIndex.v = t), 
("name" === i || "description" === i && -1 === this.colIndex.n || "n" === i) && (this.colIndex.n = t), 
"image" !== i && "icon" !== i && "src" !== i || (this.colIndex.i = t), ("description" === i && this.colIndex.n !== t || "detail" === i || "d" === i) && (this.colIndex.d = t), 
"style" !== i && "class" !== i && "s" !== i || (this.colIndex.s = t);
}
-1 === this.colIndex.v && (this.colIndex.v = 0), -1 === this.colIndex.n && (this.colIndex.n = 0 < e.data.columns.length ? 1 : 0);
for (var n = Object.keys(e.data.data), s = 0; s < n.length; s++) t = n[s], this.addOption(e.data.data[t]);
}, Client.Autocomplete.prototype.removeOption = function(e) {
this.valueList.splice(e, 1);
}, Client.Autocomplete.prototype.addOption = function(e) {
var t;
this.colIndex && (t = {
v: e[this.colIndex.v],
n: e[this.colIndex.n]
}, void 0 !== this.colIndex.i && (t.src = e[this.colIndex.i]), void 0 !== this.colIndex.s && (t.s = e[this.colIndex.s]), 
void 0 !== this.colIndex.d && (t.d = e[this.colIndex.d]), this.valueList.push(t));
}, Client.Autocomplete.prototype.updateOption = function(e) {
var t;
this.colIndex && ((t = this.valueList[e.pos]).v = e.data[this.colIndex.v], t.n = e.data[this.colIndex.n], 
void 0 !== this.colIndex.i && (t.src = e.data[this.colIndex.i]), void 0 !== this.colIndex.s && (t.s = e.data[this.colIndex.s]), 
void 0 !== this.colIndex.d) && (t.d = e.data[this.colIndex.d]);
}, Client.Autocomplete.prototype.updateCombo = function() {
this.comboObj && this.comboObj.dialog && this.openCombo(this.captionObj.value, !1), 
this.comboTimer = 0;
}, Client.Autocomplete.prototype.wantInput = function() {
return this.canFilter;
}, Client.HeaderList = function() {
Client.eleMap["header-list-ui"] = this;
}, Client.HeaderList.prototype.add = function(e) {
if (e && e.headType) if ("title" === e.headType) window.document.title = e.value; else {
for (var t = Object.keys(e), i = document.createElement(e.headType), n = 0; n < t.length; n++) "headType" !== t[n] && ("innerHTML" === t[n] ? i.innerHTML = e[t[n]] : i.setAttribute(t[n], e[t[n]]));
document.head.appendChild(i);
}
}, Client.HeaderList.prototype.remove = function(e) {
if (e && e.headType) for (var t = Object.keys(e), i = 0; i < document.head.childNodes.length; i++) {
var n = document.head.childNodes[i];
if (n.getAttribute) {
for (var s = !0, o = 0; o < t.length && s; o++) "headType" !== t[o] && e[t[o]] !== n.getAttribute(t[o]) && (s = !1);
if (s) {
n.parentNode.removeChild(n);
break;
}
}
}
}, ","), glbThoSep = ".", glbPrompt = "_", glbMask = "", glbMaskType = "", glbObjInput, glbInitValue, glbVirtualPos = -1;

function getCursorPos(e) {
if (-1 < glbVirtualPos) return glbVirtualPos;
if (void 0 !== e.selectionStart) return e.selectionStart;
try {
for (var t = document.selection.createRange(), i = e.createTextRange(), n = 0; i.compareEndPoints("StartToStart", t); ) n++, 
i.moveStart("character");
return n;
} catch (e) {
return -1;
}
}

function setCursorPos(e, t) {
if (-1 < glbVirtualPos) glbVirtualPos = t = t < 0 ? 0 : t; else try {
var i;
void 0 !== e.selectionStart ? (e.select(), e.selectionStart = t, e.selectionEnd = t) : ((i = e.createTextRange()).move("character", t), 
i.select());
} catch (e) {}
}

function setToken(e, t, i, n) {
for (var s = n.toString(); s.length < i.length; ) s = "0" + s;
s = s.substring(0, i.length), n = t.indexOf(i);
return e = -1 < n ? e.substr(0, n) + s + e.substr(n + i.length) : e;
}

function getToken(e, t, i) {
var n, t = t.indexOf(i);
if (-1 == t) return t;
if (n = e.substr(t, i.length), "hh" !== i && "nn" !== i && "ss" !== i) for (;0 < n.length && "0" == n.charAt(0); ) n = n.substr(1);
return parseInt(n);
}

function unmask(e) {
for (var t, i = 0, n = ""; i < e.length; ) ("0" <= (t = e.charAt(i)) && t <= "9" || "A" <= t && t <= "Z" || "a" <= t && t <= "z" || "-" == t || t == glbDecSep) && (n += t), 
i++;
return n;
}

function formatNumber(e, t) {
var i, n, s, o, l = "", a = (0 < e.length && "-" == e.charAt(0) && (l = "-", e = e.substr(1)), 
e.length - 1);
for (-1 < (o = e.indexOf(glbDecSep)) && (a = o - 1), o = 0; o < a && "0" == e.charAt(o); ) o++;
for (0 < o && (e = e.substr(o)), o = t.indexOf(glbDecSep), s = e.indexOf(glbDecSep), 
n = i = ""; -1 < o && o < t.length; ) {
var r = t.charAt(o);
if ("0" == r || "#" == r) if (-1 < s && s < e.length - 1) i += e.charAt(++s); else {
if ("0" != r) break;
i += r;
} else i += r;
o++;
}
for (o = t.indexOf(glbDecSep), s = e.indexOf(glbDecSep), -1 == o && (o = t.length), 
o--, -1 == s && (s = e.length), s--; 0 <= o; ) {
if ("0" == (r = t.charAt(o)) || "#" == r) if (0 <= s) n = e.charAt(s--) + n; else {
if ("0" != r) break;
n = r + n;
} else n = r + n;
o--;
}
return l + (n = 0 < n.length && n.charAt(0) == glbThoSep ? n.substr(1) : n) + (i = 1 == i.length ? "" : i);
}

function isMaskToken(e, t) {
switch (t) {
case "D":
if ("g" == e || "m" == e || "a" == e || "y" == e || "d" == e || "h" == e || "n" == e || "s" == e) return !0;
break;

case "A":
if ("a" == e || "A" == e || "#" == e || "&" == e || "%" == e) return !0;
break;

case "N":
if ("#" == e || "0" == e) return !0;
}
return !1;
}

function skipMaskChars(e, t, i) {
if ("N" != i) for (;t < e.length; ) {
if (isMaskToken(e.charAt(t), i)) return t;
t++;
}
return t;
}

function isNumber(e) {
return 48 <= e && e <= 57;
}

function isAlfa(e) {
return 65 <= e && e <= 90;
}

function checkValue(e, t, i, n) {
for (var s, o = i.charAt(t), l = t, a = t; 0 <= l; ) {
if (i.charAt(l) != o) {
l++;
break;
}
l--;
}
for (;a < i.length; ) {
if (i.charAt(a) != o) {
a--;
break;
}
a++;
}
return t = parseInt(e.substring(l, a + 1)), s = !0, "D" === n && ("g" != o && "d" != o || 31 < t && (s = !(t = 31)), 
"m" == o && 12 < t && (s = !(t = 12)), "h" == o && 23 < t && (s = !(t = 23)), "n" != o && "s" != o || 59 < t && (s = !(t = 59))), 
e = s ? e : e.substr(0, l) + t.toString() + e.substr(a + 1);
}

function nextDay(e, t, i) {
var n = new Date(), s = getToken(e, t, "yyyy");
return (0 < s || 0 < (s = getToken(e, t, "yy"))) && n.setFullYear(s), (0 < (s = getToken(e, t, "aaaa")) || 0 < (s = getToken(e, t, "aa"))) && n.setFullYear(s), 
0 < (s = getToken(e, t, "mm")) && n.setMonth(s - 1), 0 < (s = getToken(e, t, "dd")) && n.setDate(s + i), 
0 < (s = getToken(e, t, "gg")) && n.setDate(s + i), 0 <= (s = getToken(e, t, "hh")) && n.setHours(s), 
0 <= (s = getToken(e, t, "nn")) && n.setMinutes(s), 0 <= (s = getToken(e, t, "ss")) && n.setSeconds(s), 
0 == getToken(e = setToken(e, t, "yyyy", n.getFullYear()), t, "yyyy") && (e = setToken(e, t, "yy", n.getFullYear() % 100)), 
0 == getToken(e = setToken(e, t, "aaaa", n.getFullYear()), t, "aaaa") && (e = setToken(e, t, "aa", n.getFullYear() % 100)), 
e = setToken(e, t, "mm", n.getMonth() + 1), e = setToken(e, t, "dd", n.getDate()), 
e = setToken(e, t, "gg", n.getDate()), e = setToken(e, t, "hh", n.getHours()), e = setToken(e, t, "nn", n.getMinutes()), 
e = setToken(e, t, "ss", n.getSeconds());
}

function insertChar(e, t, i, n) {
var s, o, l;
if (!e || "INPUT" != e.tagName || "number" != e.type) {
(isNumber(t) || isAlfa(t)) && (void 0 !== e.selectionStart ? e.selectionStart != e.selectionEnd && deleteChars(0) : 0 < document.selection.createRange().text.length && deleteChars(0));
var a = e.value, r = skipMaskChars(i, r = getCursorPos(e), n), d = !1, h = i.length;
if (r < (h = "N" == n && 188 != t && 190 != t && -1 == a.indexOf(glbDecSep) && -1 != i.indexOf(glbDecSep) ? i.substr(0, i.indexOf(glbDecSep)).length : h) || "N" == n && r == h && 0 < a.length && "-" == a.charAt(0) || "D" == n && r == h && 0 < a.length && (187 == t || 61 == t || 189 == t)) switch (s = i.charAt(r), 
n) {
case "D":
isMaskToken(s, n) && isNumber(t) && (a = checkValue(a = a.substr(0, r) + String.fromCharCode(t) + a.substr(r + 1), r, i, n), 
d = !0), 187 != t && 61 != t || (a = nextDay(a, i, 1)), 189 == t && (a = nextDay(a, i, -1));
break;

case "A":
"&" == s && (isAlfa(t) || isNumber(t)) && (a = a.substr(0, r) + String.fromCharCode(t).toUpperCase() + a.substr(r + 1), 
d = !0), "%" == s && null != (t = getCustomMaskChar(t)) && (a = a.substr(0, r) + t + a.substr(r + 1), 
d = !0), "a" == s && isAlfa(t) && (a = a.substr(0, r) + String.fromCharCode(t).toLowerCase() + a.substr(r + 1), 
d = !0), "A" == s && isAlfa(t) && (a = a.substr(0, r) + String.fromCharCode(t).toUpperCase() + a.substr(r + 1), 
d = !0), "#" == s && isNumber(t) && (a = a.substr(0, r) + String.fromCharCode(t) + a.substr(r + 1), 
d = !0);
break;

case "N":
isNumber(t) && ((l = a.indexOf(glbDecSep)) < r && -1 != l ? a = a.substr(0, r) + String.fromCharCode(t) + a.substr(r + 1) : a.length < h || a.length == h && "-" == a.charAt(0) ? a = a.substr(0, r) + String.fromCharCode(t) + a.substr(r) : a.length == h && l !== r && (a = a.substr(0, r) + String.fromCharCode(t) + a.substr(r + 1)), 
o = a.length, r += (a = formatNumber(unmask(a), i)).length - o + 1, -1 != i.indexOf(glbThoSep) && a[r] == glbThoSep || i.indexOf(glbDecSep) && a[r] == glbDecSep && a.length == i.length) && r++, 
188 != t && 190 != t || (-1 < (l = a.indexOf(glbDecSep)) ? r = l + 1 : -1 < i.indexOf(glbDecSep) && (r = (a += glbDecSep).length)), 
189 == t && (a = "-" == a.substr(0, 1) ? (r--, a.substr(1)) : (r++, "-" + a));
}
return d && (r = skipMaskChars(i, ++r, n)), e.value = a, setCursorPos(e, r), !1;
}
}

function getCustomMaskChar(e) {}

function deleteChar(e, t, i, n, s) {
var o, l, a, r, d = e.value;
if (0 <= t && t < d.length) {
switch (o = n.substr(t, 1), s) {
case "A":
isMaskToken(o, s) && (o = glbPrompt);
break;

case "N":
var h, c = d.charAt(t);
-1 == (h = d.indexOf(glbDecSep)) && (h = d.length), -1 == (r = n.indexOf(glbDecSep)) && (r = n.length), 
o = n.substr(r + (t - h), 1), t < h || -1 == h ? i = 0 : -1 == i && "#" == o && (i = 1), 
l = d.length, d = isMaskToken(o, s) || "-" == c ? unmask(d.substr(0, t) + d.substr(t + 1)) : unmask(d);
}
"N" != s ? d = d.substr(0, t) + o + d.substr(t + 1) : (a = (d = formatNumber(d, n)).length) < (t = (t += a - l + 1 + i) < 0 ? 0 : t) && (t = a);
}
return e.value = d, t;
}

function deleteChars(e) {
var t, i, n, s, o, l = getCursorPos(glbObjInput), a = void 0 !== glbObjInput.selectionEnd ? glbObjInput.selectionEnd : l + document.selection.createRange().text.length;
if (0 <= glbVirtualPos && (a = glbVirtualPos), "N" == glbMaskType) {
for (s = 0, t = glbObjInput.value, i = a - 1; l <= i; i--) t.charAt(i) == glbThoSep && s++;
l += s;
}
if (l < a) for (i = o = a - 1; l <= i; i--) "N" == glbMaskType ? o = (n = deleteChar(glbObjInput, o, -1, glbMask, glbMaskType)) - 1 : n = deleteChar(glbObjInput, i, e, glbMask, glbMaskType); else n = deleteChar(glbObjInput, l += e, e, glbMask, glbMaskType);
setCursorPos(glbObjInput, n);
}

function hk(e, t) {
var i, n, s, o;
return ">" === glbMask || "<" === glbMask || (null != e && (n = window.event ? e.keyCode : e.which, 
s = e.altKey, o = e.ctrlKey || e.metaKey), i = !1, n = n, null != t ? (n = t, o = s = !1) : glbVirtualPos = -1, 
96 <= n && n <= 105 && (n -= 48), 107 <= n && n <= 110 && (n += 80), !(17 != (n = 55 == n && e?.shiftKey ? 111 : n) && 18 != n && (!s || o))) || (o && 64 <= n && n <= 95 ? ("C" != (t = String.fromCharCode(n)) && "X" != t && "V" != t || (document.all ? glbObjInput.createTextRange().select() : (glbObjInput.selectionStart = 0, 
glbObjInput.selectionEnd = glbObjInput.value.length)), "N" == glbMaskType && "V" == t && window.setTimeout(function() {
if (glbObjInput) {
glbObjInput.value && (glbObjInput.value = glbObjInput.value.trim());
var e = glbObjInput.value;
"," === glbDecSep && (e = (e = e.replace(/\./g, "")).replace(",", "."));
try {
0 <= e - parseFloat(e) + 1 || (glbObjInput.value = "");
} catch (e) {
glbObjInput.value = "";
}
}
}, 0), !0) : !(!glbObjInput || "INPUT" != glbObjInput.tagName || "number" != glbObjInput.type) || (8 == n ? deleteChars(-1) : 46 == n ? deleteChars(0) : 33 <= n && n <= 40 || 9 == n || 13 == n ? i = !0 : insertChar(glbObjInput, n, glbMask, glbMaskType), 
i));
}

function GetInitValue(e, t) {
for (var i, n = "", s = 0; s < e.length; s++) switch (i = e.charAt(s), t) {
case "N":
i != glbDecSep && "0" != i || (n += i);
break;

case "A":
isMaskToken(i, t) ? n += glbPrompt : n += i;
break;

case "D":
n += i;
}
return n = "N" == t && 0 < n.length && n.substr(n.length - 1) == glbDecSep ? n.substr(0, n.length - 1) : n;
}

function mc(e, t, i, n, s) {
var o, l, n = (n = n) || i.target;
if (glbMask = e, glbMaskType = t, l = (glbObjInput = n).value, glbInitValue = l, 
glbVirtualPos = s ? 0 : -1, (!glbObjInput || "INPUT" != glbObjInput.tagName || "number" != glbObjInput.type) && ">" !== e && "<" !== e) if ("" == l) l = GetInitValue(e, t), 
glbObjInput.value = l, "N" == t ? -1 < (o = l.indexOf(glbDecSep)) ? (setTimeout("setCursorPos(glbObjInput, " + o + ");", 10), 
s && (glbVirtualPos = o)) : (setTimeout("setCursorPos(glbObjInput, " + l.length + ");", 10), 
s && (glbVirtualPos = l.length)) : (setTimeout("setCursorPos(glbObjInput,0);", 10), 
s && (glbVirtualPos = 0)); else if ("A" == t && e.length > l.length) l += GetInitValue(e, t).substr(l.length), 
glbObjInput.value = l, setTimeout("setCursorPos(glbObjInput,0);", 10), s && (glbVirtualPos = 0); else if ("N" == t && 0 == getCursorPos(glbObjInput)) if (s) o = l.indexOf(glbDecSep), 
glbVirtualPos = -1 < o ? o : l.length; else {
for (var a = 0; a < l.length && "0" == l.substr(a, 1); ) a++;
0 < a && setTimeout("setCursorPos(glbObjInput," + a + ");", 10);
}
}

function umc(e) {
if (glbObjInput && ("INPUT" != glbObjInput.tagName || "number" != glbObjInput.type) && ">" !== glbMask && "<" !== glbMask) {
try {
"N" == glbMaskType && 0 < glbObjInput.value.length && glbObjInput.value.substr(glbObjInput.value.length - 1) == glbDecSep && (glbObjInput.value = glbObjInput.value.substr(0, glbObjInput.value.length - 1));
} catch (e) {}
var t, i, n, s, o, l = GetInitValue(glbMask, glbMaskType);
if (glbObjInput.value == l && "A" != glbMaskType && (glbObjInput.value = ""), "A" == glbMaskType) {
for (var l = glbObjInput.value, a = Math.min(l.length - 1, glbMask.length - 1); 0 <= a; a--) {
var r = l.substr(a, 1);
if (r != glbPrompt) {
var d = glbMask.substr(a, 1);
if (r == d) "A" != d && "a" != d && (l = l.substr(0, a) + glbPrompt + l.substr(a + 1)); else if (r != glbPrompt) break;
}
}
for (a = l.length - 1; 0 <= a; a--) l.substr(a, 1) == glbPrompt && (l = l.substring(0, a));
glbObjInput.value = l;
}
"D" == glbMaskType && 0 < glbObjInput.value.length && (t = new Date(), s = !1, isNaN(getToken(glbObjInput.value, glbMask, "dd")) && isNaN(getToken(glbObjInput.value, glbMask, "mm")) && isNaN(getToken(glbObjInput.value, glbMask, "yy")) && isNaN(getToken(glbObjInput.value, glbMask, "yyyy")) || (s = !0, 
o = getToken(glbObjInput.value, glbMask, "dd"), isNaN(o) && (glbObjInput.value = setToken(glbObjInput.value, glbMask, "dd", t.getDate())), 
!isNaN(o) && 0 <= glbObjInput.value.indexOf("d") && (glbObjInput.value = setToken(glbObjInput.value, glbMask, "dd", o)), 
o = getToken(glbObjInput.value, glbMask, "mm"), isNaN(o) && (glbObjInput.value = setToken(glbObjInput.value, glbMask, "mm", t.getMonth() + 1)), 
!isNaN(o) && 0 <= glbObjInput.value.indexOf("m") && (glbObjInput.value = setToken(glbObjInput.value, glbMask, "mm", t.getMonth() + 1)), 
-1 == (o = getToken(glbObjInput.value, glbMask, "yyyy")) ? (o = getToken(glbObjInput.value, glbMask, "yy"), 
(isNaN(o) || 0 <= glbObjInput.value.indexOf("y")) && (glbObjInput.value = setToken(glbObjInput.value, glbMask, "yy", t.getFullYear().toString().substr(2, 2)))) : (isNaN(o) || 0 <= glbObjInput.value.indexOf("y")) && (isNaN(o) ? glbObjInput.value = setToken(glbObjInput.value, glbMask, "yyyy", t.getFullYear().toString().substr(0, 4)) : 0 <= glbObjInput.value.indexOf("y") && (glbObjInput.value = setToken(glbObjInput.value, glbMask, "yyyy", t.getFullYear().toString().substr(0, 4 - ("" + o).length) + "" + o))), 
(o = moment({
year: getToken(glbObjInput.value, glbMask, "yyyy"),
month: getToken(glbObjInput.value, glbMask, "mm") - 1,
date: 1
})).isValid() && (o = o.daysInMonth(), getToken(glbObjInput.value, glbMask, "dd") > o) && (glbObjInput.value = setToken(glbObjInput.value, glbMask, "dd", o))), 
-1 == glbMask.indexOf("hh") && -1 == glbMask.indexOf("nn") && -1 == glbMask.indexOf("ss") || (o = getToken(glbObjInput.value, glbMask, "hh"), 
i = getToken(glbObjInput.value, glbMask, "nn"), n = getToken(glbObjInput.value, glbMask, "ss"), 
isNaN(o) && isNaN(i) && isNaN(n) && !s) || (isNaN(o) ? (glbObjInput.value = setToken(glbObjInput.value, glbMask, "hh", ("00" + t.getHours()).substr(-2)), 
o = getToken(glbObjInput.value, glbMask, "hh")) : glbObjInput.value = setToken(glbObjInput.value, glbMask, "hh", ("" + o).replace(/h/g, "0")), 
isNaN(i) ? (s = t.getHours() === o ? t.getMinutes() : "00", glbObjInput.value = setToken(glbObjInput.value, glbMask, "nn", s), 
i = getToken(glbObjInput.value, glbMask, "nn")) : glbObjInput.value = setToken(glbObjInput.value, glbMask, "nn", ("" + i).replace(/n/g, "0")), 
isNaN(n) ? (o = t.getMinutes() === i ? t.getSeconds() : "00", glbObjInput.value = setToken(glbObjInput.value, glbMask, "ss", o)) : glbObjInput.value = setToken(glbObjInput.value, glbMask, "ss", ("" + n).replace(/n/g, "0"))));
}
}

function mask_unmask(e, t, i) {
if (">" !== t && "<" !== t) {
try {
"N" == i && 0 < e.length && e.substr(e.length - 1) == glbDecSep && (e = e.substr(0, e.length - 1));
} catch (e) {}
var n, s;
if (e == (o = GetInitValue(t, i)) && "A" != i && (e = ""), "A" == i) {
for (var o = e, l = Math.min(o.length - 1, t.length - 1); 0 <= l; l--) {
var a = o.substr(l, 1);
a != glbPrompt && (a == (a = t.substr(l, 1)) && "A" != a && "a" != a) && (o = o.substr(0, l) + glbPrompt + o.substr(l + 1));
}
e = o.replace(new RegExp(glbPrompt, "g"), "");
}
"N" == i && 0 < e.length && (n = "." === glbDecSep ? "\\" + glbDecSep : glbDecSep, 
s = "." === glbThoSep ? "\\" + glbThoSep : glbThoSep, e = (e = e.replace(new RegExp(s, "g"), "")).replace(new RegExp(n, "g"), ".")), 
"D" == i && 0 < e.length && (s = t.toUpperCase().replace("NN", "mm"), e = moment(e, s).format());
}
return e;
}

function mask_mask(e, t, i) {
if (">" !== t && "<" !== t) {
var n = GetInitValue(t, i);
if (e == n && "A" != i && (e = ""), "A" == i) {
for (var s = 0, o = 0; o < n.length; o++) n.charAt(o) === glbPrompt && e.length > s && (n = n.substring(0, o) + e.charAt(s) + n.substring(o + 1), 
s++);
e = n;
}
"N" == i && (e = numformat(t, e)), "D" == i && (i = t.toUpperCase().replace("NN", "mm"), 
(t = (t = moment(e, !Client.mainFrame.isIDF && 0 < e?.indexOf("Z") ? "YYYY-MM-DDTHH:mm:ss.SSSSZ" : i)).isValid() ? t : moment(e)).isValid()) && (e = t.format(i));
}
return e;
}

!function(e, t) {
"object" == typeof exports && "undefined" != typeof module ? module.exports = t() : "function" == typeof define && define.amd ? define(t) : (e = e || self).numformat = t();
}(this, function() {
let t = /[0-9\-+#]/;
function d(e) {
return e.search(t);
}
function h(e, t, i) {
let n = !1;
var s = {
originalValue: e,
value: e
}, e = (e < 0 && (n = !0, s.value = -s.value), s.sign = n ? "-" : "", s.value = Number(s.value).toFixed(t.fraction && t.fraction.length), 
s.value = Number(s.value).toString(), t.fraction && t.fraction.lastIndexOf("0"));
let [ o = "0", l = "" ] = s.value.split(".");
(!l || l && l.length <= e) && (l = e < 0 ? "" : Number("0." + l).toFixed(e + 1).replace("0.", "")), 
s.integer = o, s.fraction = l;
var a = s, r = t, e = (a.result = "", r.integer.split(r.separator)), d = e.join(""), h = d && d.indexOf("0");
if (-1 < h) for (;a.integer.length < d.length - h; ) a.integer = "0" + a.integer; else 0 === Number(a.integer) && "" === a.originalValue && (a.integer = "", 
a.fraction = "");
var c = e[1] && e[e.length - 1].length;
if (c) {
var p = a.integer.length, u = p % c;
for (let e = 0; e < p; e++) a.result += a.integer.charAt(e), !((e - u + 1) % c) && e < p - c && (a.result += r.separator);
} else a.result = a.integer;
return a.result += r.fraction && a.fraction ? r.decimal + a.fraction : "", "0" !== s.result && "" !== s.result || (n = !1, 
s.sign = ""), !n && t.maskHasPositiveSign ? s.sign = "+" : n && t.maskHasPositiveSign ? s.sign = "-" : n && (s.sign = i && i.enforceMaskSign && !t.maskHasNegativeSign ? "" : "-"), 
s;
}
return (e, t, i = {}) => {
var n, s, o, l, a, r;
return !e || isNaN(Number(t)) ? t : ([ e = "#.##" ] = [ e ], n = {}, r = e.length, 
s = d(e), n.prefix = 0 < s ? e.substring(0, s) : "", o = d(e.split("").reverse().join("")), 
l = r - o, a = e.substring(l, 1 + l), l += "." === a || "," === a ? 1 : 0, n.suffix = 0 < o ? e.substring(l, r) : "", 
n.mask = e.substring(s, l), n.maskHasNegativeSign = "-" === n.mask.charAt(0), n.maskHasPositiveSign = "+" === n.mask.charAt(0), 
n.decimal = glbDecSep, n.separator = glbThoSep, a = n.mask.split(n.decimal), n.integer = a[0], 
n.fraction = a[1], r = h(t, o = n, i), o.prefix + r.sign + r.result + o.suffix);
};
});

var Client = Client || {}, Client = (Client.IdfMessagesPump = function() {
this.requestsMap = {}, this.requestsIds = [], this.responsesIds = [], this.events = [], 
this.requestNumber = 1, this.serverUrl = location.href.replace(location.search, ""), 
0 < this.serverUrl.indexOf("#") && (this.serverUrl = this.serverUrl.substring(0, this.serverUrl.indexOf("#"))), 
this.serverUrl = this.serverUrl + "?WCI=RD3", this.blockingContainer = document.createElement("div"), 
this.blockingContainer.className = "blocking-container", document.body.appendChild(this.blockingContainer), 
this.delayDlg = new Client.IdfProgressDialog(), document.getElementById("app-ui").addEventListener("keyup", e => {
13 === e.keyCode && this.sendEvents(!0);
});
}, Client.IdfMessagesPump.maxOpenRequests = 2, Client.IdfMessagesPump.defaultDelay = 6e5, 
Client.IdfMessagesPump.whiteSpaceDelay = 1500, Client.IdfMessagesPump.keypressDelay = 350, 
Client.IdfMessagesPump.superActiveDelay = 200, Client.IdfMessagesPump.panelScrollDelay = 50, 
Client.IdfMessagesPump.blockingPopupDelay = 5e3, Client.IdfMessagesPump.eventTypes = {
CLIENTSIDE: 1,
SERVERSIDE: 2,
IMMEDIATE: 4,
BLOCKING: 8,
DEFERRED: 3,
ACTIVE: 7,
URGENT: 15
}, Client.IdfMessagesPump.prototype.createRequest = function() {
var e = Client.idfOffline ? {} : new XMLHttpRequest();
return e.startTime = new Date(), e.reqCode = "r" + Math.floor(1111111 * Math.random()), 
this.requestsIds.push(e.reqCode), this.requestsMap[e.reqCode] = e;
}, Client.IdfMessagesPump.prototype.addEvent = function(i) {
if (i.startTime = new Date(), i.blocking = Client.IdfMessagesPump.isBlockingEvent(i.def), 
i.clientSide = Client.IdfMessagesPump.isClientSideEvent(i.def), i.serverSide = Client.IdfMessagesPump.isServerSideEvent(i.def), 
i.serverSide) {
i.delay || (Client.IdfMessagesPump.isImmediateEvent(i.def) ? "panscr" === i.id ? i.delay = Client.IdfMessagesPump.panelScrollDelay : i.delay = "keypress" === i.id ? Client.IdfMessagesPump.keypressDelay : 0 : i.delay = Client.IdfMessagesPump.defaultDelay);
let t = !0;
for (let e = 0; e < this.events.length; e++) {
if (this.compareEvents(this.events[e], i)) {
this.copyEvent(this.events[e], i), t = !1;
break;
}
this.events[e].delayCopies && this.events[e].id === i.id && (this.events[e].startTime = i.startTime);
}
t && this.events.push(i);
}
}, Client.IdfMessagesPump.prototype.sendEvents = function(e) {
for (let e = 0; e < this.events.length; e++) this.events[e].delay = 0;
e && this.tick();
}, Client.IdfMessagesPump.prototype.tick = function() {
this.requestsIds.length < Client.IdfMessagesPump.maxOpenRequests && this.sendRequest();
let e = 0, t = (0 < (e = this.requestsIds.length ? this.requestsMap[this.requestsIds[0]].startTime : e) && new Date() - e > Client.IdfMessagesPump.blockingPopupDelay ? this.delayDlg.open || this.delayDlg.show(Client.mainFrame.wep.SRV_MSG_Wait) : this.delayDlg.open && this.delayDlg.close(), 
!1);
for (let e = 0; e < this.requestsIds; e++) if (this.requestsMap[this.requestsIds[e]].blocking) {
t = !0;
break;
}
t ? (this.blockingContainer.style.display = "block", document.body.focus()) : (this.blockingContainer.style.display = "", 
this.blockingContainer.style.cursor = ""), this.handleResponses();
}, Client.IdfMessagesPump.prototype.createXml = function() {
let s = document.implementation.createDocument("", "rd3", null);
var e = s.createProcessingInstruction("xml", "version='1.0' encoding='UTF-8'");
s.insertBefore(e, s.firstChild);
let o = s.getElementsByTagName("rd3")[0];
return o.setAttribute("num", this.requestNumber), this.requestNumber++, this.events.forEach((e, t) => {
var i, n = s.createElement(e.id);
for (i in e.content) void 0 !== e.content[i] && n.setAttribute(i, e.content[i]);
0 === t && (t = Client.Widget.getWidgetByElement(Client.Widget.getElementByObj(document.activeElement))?.getParentWidgetByClass(Client.IdfField)) && n.setAttribute("ace", t.id), 
o.appendChild(n);
}), this.events.length = 0, s;
}, Client.IdfMessagesPump.parseXml = function(e) {
return new DOMParser().parseFromString(e, "text/xml");
}, Client.IdfMessagesPump.prototype.getRequest = function(e) {
let t = this.requestsMap[e];
return t = !t.responseXML && t.responseText?.startsWith("<?xml") ? {
status: t.status,
responseText: t.responseText,
responseXML: Client.IdfMessagesPump.parseXml(this.removeInvalidCharacters(t.responseText))
} : t;
}, Client.IdfMessagesPump.prototype.removeRequest = function(e) {
delete this.requestsMap[e];
e = this.requestsIds.indexOf(e);
-1 !== e && this.requestsIds.splice(e, 1);
}, Client.IdfMessagesPump.prototype.sendRequest = function() {
if (this.events.length) {
let t = new Date();
if (this.events.some(e => t - e.startTime >= e.delay)) {
let t = this.createRequest();
t.blocking = this.events.some(e => e.blocking), t.skipClearMessages = this.events.every(e => Client.IdfMessagesPump.isSkipClearMessageEvent(e.id));
var i = this.createXml();
if (Client.idfOffline) t.ID = t.reqCode, t.Referrer = document.referrer, t.InputStream = new XMLSerializer().serializeToString(i), 
Client.offlineWorker.postMessage(t); else {
let e = "";
2 === this.requestNumber && (e = Client.Shell.sendInfo() + "&RNDID=" + t.reqCode), 
t.open("POST", this.serverUrl + e, !0), t.onreadystatechange = () => {
t.readyState === XMLHttpRequest.DONE && this.checkResponse(t.reqCode);
}, t.setRequestHeader("Content-Type", "text/xml"), t.send(i);
}
}
}
}, Client.IdfMessagesPump.prototype.checkResponse = function(e) {
this.responsesIds.push(e), this.handleResponses();
}, Client.IdfMessagesPump.prototype.handleResponses = function() {
if (0 !== this.responsesIds.length) {
for (let e = 0; e < this.responsesIds.length; e++) Client.mainFrame.handleIDFResponse(this.responsesIds[e]);
this.responsesIds = [];
}
}, Client.IdfMessagesPump.prototype.removeInvalidCharacters = function(n) {
for (let i = 0; i < n.length; i++) if ("&" === n.charAt(i) && i < n.length - 1 && "#" === n.charAt(i + 1)) {
var s = i;
let e = "";
for (i += 2; i < n.length && ";" !== n.charAt(i); i++) e += n.charAt(i);
let t = "";
9 === (t = "x" === e.charAt(0) ? parseInt(e.substr(1), 16) : parseInt(e, 10)) || 10 === t || 13 === t || 32 <= t & t <= 55295 || 57344 <= t && t <= 65533 || (n = n.substr(0, s) + n.substr(i + 1), 
i -= 2 + e.length + 1);
}
return n;
}, Client.IdfMessagesPump.prototype.compareEvents = function(e, t) {
e.content = e.content || {}, t.content = t.content || {};
return -1 === [ "pantb", "trnexp", "fev", "keypress", "cmd", "IWFiles", "cseev" ].indexOf(e.id) && (-1 === [ "panms", "resize", "sound" ].indexOf(e.id) || e.content.obn === t.content.obn) && ("rdcol" !== e.id || e.content.oid !== t.content.oid || e.content.par1 === t.content.par1 && e.content.par2 === t.content.par2) && e.id === t.id && e.content.oid === t.content.oid;
}, Client.IdfMessagesPump.prototype.copyEvent = function(e, t) {
e.content = e.content || {}, t.content = t.content || {}, e.id = t.id, e.content.oid = t.content.oid, 
e.content.obn = t.content.obn, e.content.par1 = t.content.par1, e.content.par2 = t.content.par2, 
e.content.par3 = t.content.par3, e.content.par4 = t.content.par4, e.content.par5 = t.content.par5, 
e.content.par6 = t.content.par6, e.content.xck = t.content.xck, e.content.yck = t.content.yck, 
e.content.atp = t.content.atp, e.content.ctp = t.content.ctp, e.content.shp = t.content.shp, 
t.delay < e.delay && (e.delay = t.delay), e.updateStartTime && (e.startTime = t.startTime), 
e.blocking = t.blocking, e.serverSide = t.serverSide, e.clientSide = t.clientSide;
}, Client.IdfMessagesPump.isBlockingEvent = function(e) {
return e & Client.IdfMessagesPump.eventTypes.BLOCKING;
}, Client.IdfMessagesPump.isClientSideEvent = function(e) {
return e & Client.IdfMessagesPump.eventTypes.CLIENTSIDE;
}, Client.IdfMessagesPump.isServerSideEvent = function(e) {
return e & Client.IdfMessagesPump.eventTypes.SERVERSIDE;
}, Client.IdfMessagesPump.isImmediateEvent = function(e) {
return e & Client.IdfMessagesPump.eventTypes.IMMEDIATE;
}, Client.IdfMessagesPump.isActiveEvent = function(e) {
return e === Client.IdfMessagesPump.eventTypes.ACTIVE;
}, Client.IdfMessagesPump.isSkipClearMessageEvent = function(e) {
return 0 <= [ "resize", "fev", "timer" ].indexOf(e);
}, Client || {});

function IDEvent(e, t, i, n, s, o, l, a, r, d, h, c, p) {
Client.mainFrame.sendEvents([ {
id: e,
def: n,
content: {
oid: t,
name: s,
par1: o,
par2: l,
par3: a,
par4: r,
par5: c,
par6: p
}
} ]);
}

Client.Shell = function() {}, Client.Shell.sendCmd = function(e, t) {
let i = window._ShellURL + "?_CMD=" + e;
if (t) if ("string" == typeof t) i += "&" + t; else {
var n = Object.keys(t);
for (let e = 0; e < n.length; e++) {
var s = n[e], o = t[s];
i += "&" + s + "=" + btoa(unescape(encodeURIComponent(o)));
}
}
return "PROMPT" === window._ShellURLType ? prompt(i) : ((e = new XMLHttpRequest()).open("GET", i, !1), 
e.send(null), e.responseText);
}, Client.Shell.sendSSCmd = function(i, n, s) {
s = s || {};
try {
let t;
if (Client.Shell.isInsideShell) s.ssname = i, s.cmd = n, t = Client.Shell.sendCmd("SSCMD", s); else {
var o = new XMLHttpRequest();
let e = location.protocol + "//" + location.hostname;
0 < location.port.length && (e += ":" + location.port), e += location.pathname, 
o.open("POST", e + "?WCI=SSCMD", !1), o.setRequestHeader("content-type", "application/json"), 
o.send(JSON.stringify({
ssname: i,
cmd: n,
data: s
})), t = o.responseText;
}
return t ? JSON.parse(t) : null;
} catch (e) {
throw console.error("Error while sending remote command (SessionName=" + i + ", CMD=" + n + "): " + e), 
e;
}
}, Object.defineProperty(Client.Shell, "useShellForSS", {
get: function() {
return !Client.Shell.isInsideShell || (Client.Shell.isAndroid() ? !Client.Shell.useSimulatedWorkers : -1 === navigator.userAgent.indexOf("CaravelShell") || -1 === navigator.userAgent.indexOf("AppleWebKit/533.17.9"));
}
}), Client.Shell.sendInfo = function() {
return Client.Shell.isInsideShell ? "&ISSHELL=1&VERSION=" + this.version + "&HASCAMERA=" + (this.hasCamera ? "1" : "0") + "&DEVICEID=" + this.deviceID + "&DEVICENAME=" + this.deviceName + "&SYNCHSRV=" + this.synchServer + "&DNID=" + this.deviceNotificationID : "&ISSHELL=0";
}, Object.defineProperty(Client.Shell, "isInsideShell", {
get: function() {
return !!window._ShellURL;
}
}), Object.defineProperty(Client.Shell, "isInsideCaravel", {
get: function() {
if (void 0 === this.iIsInsideCaravel) if (this.isInsideShell) switch (parseInt(this.sendCmd("ISINSIDECARAVEL"))) {
case 0:
this.iIsInsideCaravel = 0;
break;

case 1:
this.iIsInsideCaravel = -1;
break;

default:
this.iIsInsideCaravel = null;
} else this.iIsInsideCaravel = null;
return this.iIsInsideCaravel;
}
}), Object.defineProperty(Client.Shell, "version", {
get: function() {
return void 0 === this.iVersion && (this.iVersion = this.isInsideShell ? this.sendCmd("GETVER") : ""), 
this.iVersion;
}
}), Object.defineProperty(Client.Shell, "hasCamera", {
get: function() {
return void 0 === this.iHasCamera && (this.iHasCamera = this.isInsideShell && "OK" === this.sendCmd("HASCAMERA")), 
this.iHasCamera;
}
}), Object.defineProperty(Client.Shell, "deviceID", {
get: function() {
return void 0 === this.iDeviceID && (this.iDeviceID = this.isInsideShell ? this.sendCmd("GETSETTING", {
KEY: "DEVICEID"
}) : ""), this.iDeviceID;
}
}), Object.defineProperty(Client.Shell, "deviceName", {
get: function() {
return void 0 === this.iDeviceName && (this.iDeviceName = this.isInsideShell ? this.sendCmd("GETSETTING", {
KEY: "DEVICENAME"
}) : ""), this.iDeviceName;
}
}), Object.defineProperty(Client.Shell, "deviceIP", {
get: function() {
return this.isInsideShell ? this.sendCmd("GETSETTING", {
KEY: "DEVICEIP"
}) : "";
}
}), Object.defineProperty(Client.Shell, "synchServer", {
get: function() {
return this.isInsideShell ? this.sendCmd("GETSETTING", {
KEY: "SYNCSRV"
}) : "";
}
}), Object.defineProperty(Client.Shell, "deviceNotificationID", {
get: function() {
return this.isInsideShell ? this.sendCmd("GETDNID") : "";
}
}), Client.Shell.startListen = function(e, t, i) {
if (this.isInsideShell) return this.sendCmd("STARTLISTEN", {
LANG: e,
DETTYPE: t,
RECTYPE: i
});
}, Client.Shell.stopListen = function() {
if (this.isInsideShell) return this.sendCmd("STOPLISTEN");
}, Client.Shell.say = function(e, t, i) {
if (this.isInsideShell) return this.sendCmd("SAY", {
TEXT: e,
LANG: t,
RATE: i
});
}, window.RD3_Glb = {
EVENT_ACTIVE: Client.IdfMessagesPump.eventTypes.ACTIVE
}, window.RD3_ShellObject = {
SendCmd: Client.Shell.sendCmd
};

var Client = Client || {}, Client = (Client.IdfResources = function() {}, Client.IdfResources.languagesMap = {
ENG: "en",
en: "en",
ITA: "it",
it: "it"
}, Client.IdfResources.msg_it = {
SWF_TP_ABORTTHIS: "Annulla l'invio di questo file",
SWF_MG_UPLOADING: "Caricamento del file |1 in corso ...!",
SWF_ER_FILESIZEEXCEEDED: "File troppo grande",
SWF_ER_FILENOTSEND: "Il file non &egrave; stato caricato.",
SWF_ER_VALIDATIONFAILED: "File non valido",
TIP_TITLE_QbeTip: "Criteri di ricerca",
TIP_TITLE_PanelStart: "Inizio",
TIP_TITLE_PanelPrevPage: "Pagina precedente",
TIP_TITLE_PanelNextPage: "Pagina successiva",
TIP_TITLE_PanelEnd: "Fine",
TIP_TITLE_Search: "Cerca",
TIP_TITLE_Find: "Trova",
TIP_TITLE_FormList: "Cambio layout",
TIP_TITLE_Cancel: "Annulla",
TIP_TITLE_Reload: "Aggiorna",
TIP_TITLE_Delete: "Elimina",
TIP_TITLE_Insert: "Inserisci",
TIP_TITLE_Duplicate: "Duplica",
TIP_TITLE_Update: "Salva",
TIP_TITLE_Print: "Stampa",
TIP_TITLE_Export: "Esporta",
TIP_TITLE_Attach: "Allegati",
TIP_TITLE_Group: "Raggruppa",
TIP_TITLE_ShowMultiSel: "Selezione record",
TIP_TITLE_HideMultiSel: "Nascondi multiselezione",
TIP_TITLE_SelectAll: "Seleziona tutti",
TIP_TITLE_UnselectAll: "Deseleziona tutti",
TIP_TITLE_ReverseSelection: "Inverti selezione",
TIP_TITLE_Unlock: "Sblocca",
TIP_TITLE_Lock: "Blocca",
TIP_TITLE_ShowFrame: "Mostra",
TIP_TITLE_HideFrame: "Nascondi",
TIP_TITLE_ChiudiForm: "Chiudi",
TIP_TITLE_ModalConfirm: "Conferma",
TIP_TITLE_ChiudiAppl: "Chiudi",
TIP_TITLE_MostraMenu: "Mostra menu",
TIP_TITLE_NascondiMenu: "Nascondi menu",
TIP_TITLE_BookInizio: "Inizio",
TIP_TITLE_BookPaginaPrec: "Pagina precedente",
TIP_TITLE_BookPaginaSucc: "Pagina successiva",
TIP_TITLE_BookFine: "Fine",
TIP_TITLE_CreatePDF: "Stampa",
TIP_TITLE_LoadDoc: "Carica",
TIP_TITLE_DeleteDoc: "Cancella",
TIP_TITLE_ShowDoc: "Visualizza",
TIP_TITLE_QbeRow: "Premi INVIO per eseguire la ricerca",
TIP_TITLE_PopupSort: "Ordina per |1, premi SHIFT per aggiungere all'ordinamento",
TIP_TITLE_PopupSortShift: "Aggiungi |1 all'ordinamento",
WEP_CAL_DayNames: new Array("lu", "ma", "me", "gi", "ve", "sa", "do"),
WEP_CAL_MonthNames: new Array("gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre"),
WEP_CAL_CloseButtonCaption: "Chiudi",
DDM_STATUS_Moving: "Muovi da |1 a |2",
DDM_STATUS_Resizing: "Ridimensiona da |1 a |2",
DLG_DELAY_Abort: "Sei sicuro di voler annullare l'operazione?",
MSG_POPUP_MsgBoxCaption: "Messaggio",
MSG_POPUP_MsgConfirmCaption: "Conferma",
MSG_POPUP_MsgInputCaption: "Inserisci",
MSG_POPUP_MsgErrorCaption: "Errore",
MSG_POPUP_DeleteButton: "Cancella",
MSG_POPUP_OkButton: "OK",
MSG_POPUP_CancelButton: "Annulla",
MSG_POPUP_YesButton: "Ok",
MSG_POPUP_NoButton: "Annulla",
PAN_MSG_ConfirmDeleteRS: "Confermi la cancellazione della riga selezionata del pannello |1?",
PAN_MSG_ConfirmDeleteNR: "Nessuna riga selezionata. E' necessario selezionare almeno una riga per procedere con la cancellazione.",
PAN_MSG_ConfirmDeleteRR: "Confermi la cancellazione delle |2 righe selezionate del pannello |1?",
PAN_MSG_ConfirmDeleteAR: "Confermi la cancellazione di tutte le righe del pannello |1?",
PAN_MSG_ConfirmDeleteBLOB: "Confermi la cancellazione del documento contenuto nel campo |1?",
PAN_MSG_ConfirmDuplicateNR: "Nessuna riga selezionata. Confermi comunque la duplicazione nel pannello |1?",
PAN_MSG_ConfirmExportNR: "Nessuna riga selezionata. Confermi comunque l'esportazione nel pannello |1?",
PAN_STBAR_SelRow: "Selez. 1 riga su |1",
PAN_STBAR_SelRows: "Selez. |2 righe su |1",
WEP_POPUP_Blocked: "Il documento richiesto è stato bloccato dal browser",
WEP_SRV_NOTFOUND: "Impossibile contattare il server dell'applicazione.\n\nPremi OK per riprovare.\n\nSe il problema persiste, contatta l'assistenza tecnica.",
WEP_OWA_CANOFF: "Impossibile contattare il server dell'applicazione.\n\nPassare alla modalità offline?",
WEP_OWA_CANON: "Il server dell'applicazione è nuovamente disponibile.\n\nPassare alla modalità online?",
WEP_OWA_NOON: "Non sono stato in grado di tornare in modalità online.\n\nL'applicazione rimane offline.",
WEP_OWA_OFFLINE: "L'applicazione è in modalità offline",
MOB_SEARCH_HINT: "Cerca",
MOB_TOOLBAR_TOLIST: "Torna alla lista",
MOB_TOOLBAR_LIST: "Lista",
MOB_SWIPE_TEXT: "Elimina",
MOB_MORE_TEXT: "Mostra altre righe",
MOB_PULL_TEXT: "Tira in giù per aggiornare",
MOB_PULL_RELEASE: "Rilascia per aggiornare",
MOB_PULL_REFRESH: "Aggiornamento in corso...",
IDV_WELCOME_MSG: "Cosa posso fare per te?",
IDV_ERROR_SILENCE: "Non sento la tua voce, per favore controlla il volume del microfono",
IDV_ERROR_NOMICRO: "Il tuo dispositivo non ha il microfono",
IDV_ERROR_DENIED: "Hai negato il permesso di usare il microfono",
IDV_ERROR_BLOCKED: "Il microfono è bloccato, <a href='chrome://settings/contentExceptions#media-stream'>clicca qui per cambiare</a>",
IDE_LINK_MSG: "Inserisci il link",
GRA_LAN_CODE: "it",
FIL_SORT_CAPTION: "Ordinamento",
FIL_SORT_DESC: "",
FIL_SORT_ASC: "",
FIL_SORT_CLEAR: "Nessuno",
FIL_VALUE: "Uguale a",
FIL_STARTS: "Inizia con",
FIL_NOTSTARTS: "Non inizia con",
FIL_ENDS: "Finisce con",
FIL_NOTENDS: "Non finisce con",
FIL_CONTAINS: "Contiene",
FIL_NOTCONTAINS: "Non contiene",
FIL_DIFFERENT: "Diverso da",
FIL_EMPTY: "Valore vuoto",
FIL_NOTEMPTY: "Valore non vuoto",
FIL_MAJOR: "Maggiore",
FIL_MINOR: "Minore",
FIL_BETWEEN: "Intervallo",
FIL_DOFILTER: "Applica",
FIL_CLEARFILTER: "Rimuovi tutti",
FIL_CLEARALLFILTERS: "Rimuovi tutti i filtri",
FIL_SELCHECK: "Selezionati",
FIL_SELUNCHECK: "Non selezionati",
FIL_SELALL: "Tutti",
FIL_SEL_ALL_LABEL: "Seleziona tutti",
FIL_UNS_ALL_LABEL: "Deseleziona tutti",
FIL_SEARCH_PLACE: "Cerca...",
FIL_EMPTY_LKE: "Nessun valore selezionato",
FIL_GROUP_CAPTION: "Raggruppamento",
FIL_GROUP_LABEL: "",
FIL_GROUP_LABEL_D: "",
FIL_DEGROUP_LABEL: "Rimuovi",
FIL_OPEN_FILTER_POPUP: "Apri il popup di filtro",
LFIL_FILTER_CAPT: "Filtra",
LFIL_SORT_DESC: "Ordina DESC",
LFIL_SORT_ASC: "Ordina ASC",
LFIL_SORT_CLEAR: "Rimuovi ordinamento",
LFIL_GROUP_LBL: "Raggruppa DESC",
LFIL_GROUP_LBL_D: "Raggruppa ASC",
LFIL_DEGROUP_LBL: "Rimuovi gruppo",
LFIL_VIS_LBL: "Colonne visibili",
SRV_MSG_UpdateView: "Aggiorna la visualizzazione",
SRV_MSG_ResetQBE: "I criteri di ricerca sono stati azzerati",
SRV_MSG_BackToApp: "Torna all'applicazione",
SRV_MSG_RequiredValue: "È necessario inserire un valore",
SRV_MSG_DeleteDoc: "Cancella Documento",
SRV_MSG_LoadDoc: "Carica Documento",
SRV_MSG_CloseView: "Chiude la videata",
SRV_MSG_CloseModal: "Chiude la videata",
SRV_MSG_CloseApp: "Chiude l'applicazione",
SRV_MSG_CloseAll: "Chiudi Tutto",
SRV_MSG_Attach: "Gestisci Allegati",
SRV_MSG_Comments: "Gestisci Commenti",
SRV_MSG_ConfirmDelete: "Confermi la cancellazione?",
SRV_MSG_ConfirmChoice: "Conferma la scelta",
SRV_MSG_CreatePDF: "Crea un file PDF per la stampa",
SRV_MSG_Confirm: "Confermi?",
SRV_MSG_Print: "Stampa il report",
SRV_MSG_OpenDoc: "Click per aprire il documento (|1)",
SRV_MSG_ChooseDoc: "Scegli un documento da caricare (max dim. |1):",
SRV_MSG_ShowMenu: "Mostra il menù",
SRV_MSG_ShowFrame: "Mostra il riquadro",
SRV_MSG_HideMenu: "Nasconde il menù",
SRV_MSG_HideFrame: "Nasconde il riquadro",
SRV_MSG_PageNumOf: "Pagina |1 di |2",
SRV_MSG_PanelPrevPage: "Pagina precedente",
SRV_MSG_BookPrevPage: "Pagina precedente",
SRV_MSG_PanelNextPage: "Pagina successiva",
SRV_MSG_BookNextPage: "Pagina successiva",
SRV_MSG_StatusData1: "Riga |1",
SRV_MSG_StatusData2: "Riga |1 di |2",
SRV_MSG_StatusInsert: "Nuova riga",
SRV_MSG_StatusQBE: "Inserisci criteri di ricerca",
SRV_MSG_StatusUpdated: "DATI MODIFICATI",
SRV_MSG_Cancel: "Annulla le modifiche",
SRV_MSG_ClearFilters: "Rimuovi i filtri",
SRV_MSG_Search: "Cerca i dati tramite i criteri di ricerca",
SRV_MSG_Delete: "Cancella la riga selezionata",
SRV_MSG_UnselectAllRows: "Deseleziona tutte le righe",
SRV_MSG_Duplicate: "Duplica la riga",
SRV_MSG_FormList: "Visualizza la lista o il dettaglio",
SRV_MSG_FormListAuto: "Visualizza la lista",
SRV_MSG_Insert: "Vai ad una riga vuota per inserire un nuovo dato",
SRV_MSG_Lock: "Blocca i dati",
SRV_MSG_ShowMultiSel: "Mostra i checkbox per la selezione multipla delle righe",
SRV_MSG_ShowRowSel: "Mostra i bottoni per la selezione delle righe",
SRV_MSG_Reload: "Ricarica i dati dal database",
SRV_MSG_SelectAllRows: "Seleziona tutte le righe",
SRV_MSG_Find: "Trova i dati nel database",
SRV_MSG_Unlock: "Permetti di modificare i dati",
SRV_MSG_Update: "Registra le modifiche",
SRV_MSG_BookEnd: "Vai alla fine",
SRV_MSG_PanelEnd: "Vai alla fine",
SRV_MSG_PanelStart: "Vai all'inizio",
SRV_MSG_BookStart: "Vai all'inizio",
SRV_MSG_OpenViews: "Videate Aperte",
SRV_MSG_ShowDoc: "Visualizza Documento",
SRV_MSG_RowNum: "Riga |1",
SRV_MSG_RowNumOf: "Riga |1 di |2",
SRV_MSG_Export: "Esporta i dati in Excel",
SRV_MSG_ErrorNum: "Errore:",
SRV_MSG_ErrorEffects: "Effetti:",
SRV_MSG_ErrorAction: "Cosa fare:",
SRV_MSG_ErrorSource: "Causa:",
SRV_MSG_ErrorButton: "Torna all'applicazione",
SRV_MSG_Wait: "Attendere prego...",
SRV_MSG_Group: "Mostra/Nasconde i raggruppamenti",
SRV_MSG_ShowSelCommands: "Mostra i comandi per la selezione delle righe",
PAN_BLOBLINK: "Clicca per aprire il documento (|1)",
COMMAND_PLACEHOLDER: "Inserisci comando",
MSG_StatusNoRows: "Nessuna riga",
MSG_NoRows: "Non ci sono dati da visualizzare",
MSG_NoRowsInsert: "Premi {{icon-add}} per aggiungere una nuova riga",
MSG_NoRowsClear: "Premi {{icon-remove-circle}} per rimuovere i filtri",
MSG_NoRowsClearInsert: "Premi {{icon-remove-circle}} per rimuovere i filtri oppure premi {{icon-add}} per aggiungere una nuova riga",
MSG_ChartException: "<details><summary>Il grafico non può essere visualizzato a causa di un eccezione. Clicca per ulteriori dettagli.</summary><p>|1</p></details>"
}, Client.IdfResources.msg_en = {
SWF_TP_ABORTTHIS: "Stop sending this file",
SWF_MG_UPLOADING: "Uploading |1 file ...!",
SWF_ER_FILESIZEEXCEEDED: "File too big",
SWF_ER_FILENOTSEND: "The file has not been uploaded.",
SWF_ER_VALIDATIONFAILED: "Invalid file",
TIP_TITLE_QbeTip: "Search criteria",
TIP_TITLE_PanelStart: "Top",
TIP_TITLE_PanelPrevPage: "Previous page",
TIP_TITLE_PanelNextPage: "Next page",
TIP_TITLE_PanelEnd: "Bottom",
TIP_TITLE_Search: "Search",
TIP_TITLE_Find: "Find",
TIP_TITLE_FormList: "Change layout",
TIP_TITLE_Cancel: "Cancel",
TIP_TITLE_Reload: "Refresh",
TIP_TITLE_Delete: "Delete",
TIP_TITLE_Insert: "Insert",
TIP_TITLE_Duplicate: "Duplicate",
TIP_TITLE_Update: "Save",
TIP_TITLE_Print: "Print",
TIP_TITLE_Export: "Export",
TIP_TITLE_Attach: "Attachments",
TIP_TITLE_Group: "Group",
TIP_TITLE_ShowMultiSel: "Select records",
TIP_TITLE_HideMultiSel: "Hide multiple selection",
TIP_TITLE_SelectAll: "Select all",
TIP_TITLE_UnselectAll: "Deselect all",
TIP_TITLE_ReverseSelection: "Reverse selection",
TIP_TITLE_Unlock: "Unlock",
TIP_TITLE_Lock: "Lock",
TIP_TITLE_ShowFrame: "Expand",
TIP_TITLE_HideFrame: "Collapse",
TIP_TITLE_ChiudiForm: "Close",
TIP_TITLE_ModalConfirm: "Confirm",
TIP_TITLE_ChiudiAppl: "Close",
TIP_TITLE_MostraMenu: "Show menu",
TIP_TITLE_NascondiMenu: "Hide menu",
TIP_TITLE_BookInizio: "Top",
TIP_TITLE_BookPaginaPrec: "Previous page",
TIP_TITLE_BookPaginaSucc: "Next page",
TIP_TITLE_BookFine: "Bottom",
TIP_TITLE_CreatePDF: "Print",
TIP_TITLE_LoadDoc: "Upload",
TIP_TITLE_DeleteDoc: "Delete",
TIP_TITLE_ShowDoc: "View",
TIP_TITLE_QbeRow: "Press ENTER to search",
TIP_TITLE_PopupSort: "Sort by |1, press SHIFT to add to current sorting",
TIP_TITLE_PopupSortShift: "Add |1 to current sorting",
WEP_CAL_DayNames: new Array("mo", "tu", "we", "th", "fr", "sa", "su"),
WEP_CAL_MonthNames: new Array("january", "february", "march", "april", "may", "june", "july", "august", "september", "october", "november", "december"),
WEP_CAL_CloseButtonCaption: "Close",
DDM_STATUS_Moving: "Moving from |1 to |2",
DDM_STATUS_Resizing: "Resizing from |1 to |2",
DLG_DELAY_Abort: "Are you sure you want to cancel the operation?",
MSG_POPUP_MsgBoxCaption: "Message",
MSG_POPUP_MsgConfirmCaption: "Confirm",
MSG_POPUP_MsgInputCaption: "Input",
MSG_POPUP_MsgErrorCaption: "Error",
MSG_POPUP_DeleteButton: "Delete",
MSG_POPUP_OkButton: "OK",
MSG_POPUP_CancelButton: "Cancel",
MSG_POPUP_YesButton: "Ok",
MSG_POPUP_NoButton: "Cancel",
PAN_MSG_ConfirmDeleteRS: "Are you sure you want to delete the selected row in the |1 panel?",
PAN_MSG_ConfirmDeleteNR: "No rows selected. You must select a row to proceed.",
PAN_MSG_ConfirmDeleteRR: "Are you sure you want to delete the |2 selected rows in the |1 panel?",
PAN_MSG_ConfirmDeleteAR: "Are you sure you want to delete all the rows in the |1 panel?",
PAN_MSG_ConfirmDeleteBLOB: "Are you sure you want to delete the document contained in the |1 field?",
PAN_MSG_ConfirmDuplicateNR: "No rows selected. Confirm however the duplication in the panel |1?",
PAN_MSG_ConfirmExportNR: "No rows selected. Confirm however the exportation in the panel |1?",
PAN_STBAR_SelRow: "Sel. 1 row out of |1",
PAN_STBAR_SelRows: "Sel. |2 rows out of |1",
WEP_POPUP_Blocked: "The requested document has been locked by the browser",
WEP_SRV_NOTFOUND: "Cannot connect to the application server.\n\nPress OK to try again.\n\nIf the problem persists, contact technical support.",
WEP_OWA_CANOFF: "Cannot connect to the application server.\n\nDo you want to switch to offline mode?",
WEP_OWA_CANON: "The application server is now available again.\n\nDo you want to switch to online mode?",
WEP_OWA_NOON: "Could not switch to online mode.\n\nThe application will remain offline.",
WEP_OWA_OFFLINE: "The application is in offline mode",
MOB_SEARCH_HINT: "Search",
MOB_TOOLBAR_TOLIST: "Return to list",
MOB_TOOLBAR_LIST: "List",
MOB_SWIPE_TEXT: "Delete",
MOB_MORE_TEXT: "Show more rows",
MOB_PULL_TEXT: "Pull down to refresh",
MOB_PULL_RELEASE: "Release to refresh",
MOB_PULL_REFRESH: "Refreshing...",
IDV_WELCOME_MSG: "What can I do for you?",
IDV_ERROR_SILENCE: "No speech was detected; you may need to adjust your microphone volume",
IDV_ERROR_NOMICRO: "No microphone was found",
IDV_ERROR_DENIED: "Permission to use the microphone was denied by the user",
IDV_ERROR_BLOCKED: "The microphone is blocked, <a href='chrome://settings/contentExceptions#media-stream'>click here to change</a>",
IDE_LINK_MSG: "Enter the link",
GRA_LAN_CODE: "en",
FIL_SORT_CAPTION: "Sorting",
FIL_SORT_DESC: "",
FIL_SORT_ASC: "",
FIL_SORT_CLEAR: "Clear",
FIL_VALUE: "Equals to",
FIL_STARTS: "Starts with",
FIL_NOTSTARTS: "Not starts with",
FIL_ENDS: "Ends with",
FIL_NOTENDS: "Not ends with",
FIL_CONTAINS: "Contains",
FIL_NOTCONTAINS: "Not contains",
FIL_DIFFERENT: "Different from",
FIL_EMPTY: "Empty value",
FIL_NOTEMPTY: "Not empty",
FIL_MAJOR: "Major",
FIL_MINOR: "Minor",
FIL_BETWEEN: "Interval",
FIL_DOFILTER: "Apply",
FIL_CLEARFILTER: "Clear all",
FIL_CLEARALLFILTERS: "Clear all filters",
FIL_SELCHECK: "Selected",
FIL_SELUNCHECK: "Unselected",
FIL_SELALL: "All",
FIL_SEL_ALL_LABEL: "Select all",
FIL_UNS_ALL_LABEL: "Unselect all",
FIL_SEARCH_PLACE: "Search...",
FIL_EMPTY_LKE: "No values selected",
FIL_GROUP_CAPTION: "Grouping",
FIL_GROUP_LABEL: "",
FIL_GROUP_LABEL_D: "",
FIL_DEGROUP_LABEL: "Remove",
FIL_OPEN_FILTER_POPUP: "Open filter popup",
LFIL_FILTER_CAPT: "Filter",
LFIL_SORT_DESC: "Sort DESC",
LFIL_SORT_ASC: "Sort ASC",
LFIL_SORT_CLEAR: "Clear sort",
LFIL_GROUP_LBL: "Group ASC",
LFIL_GROUP_LBL_D: "Group DESC",
LFIL_DEGROUP_LBL: "Clear group",
LFIL_VIS_LBL: "Visible columns",
SRV_MSG_UpdateView: "Update display",
SRV_MSG_ResetQBE: "The search criteria have been reset",
SRV_MSG_BackToApp: "Return to application",
SRV_MSG_RequiredValue: "You must enter a value",
SRV_MSG_DeleteDoc: "Delete document",
SRV_MSG_LoadDoc: "Upload document",
SRV_MSG_CloseView: "Closes the form",
SRV_MSG_CloseModal: "Closes the form",
SRV_MSG_CloseApp: "Closes the application",
SRV_MSG_CloseAll: "Close all",
SRV_MSG_Attach: "Manage attachments",
SRV_MSG_Comments: "Manage comments",
SRV_MSG_ConfirmDelete: "Confirm deletion?",
SRV_MSG_ConfirmChoice: "Confirm your choice",
SRV_MSG_CreatePDF: "Create a PDF file for printing",
SRV_MSG_Confirm: "Confirm?",
SRV_MSG_Print: "Print the report",
SRV_MSG_OpenDoc: "Click to open the document (|1)",
SRV_MSG_ChooseDoc: "Choose a document to load (max size |1):",
SRV_MSG_ShowMenu: "Displays the menu",
SRV_MSG_ShowFrame: "Displays the frame",
SRV_MSG_HideMenu: "Hides the menu",
SRV_MSG_HideFrame: "Hides the frame",
SRV_MSG_PageNumOf: "Page |1 of |2",
SRV_MSG_PanelPrevPage: "Previous page",
SRV_MSG_BookPrevPage: "Previous page",
SRV_MSG_PanelNextPage: "Next page",
SRV_MSG_BookNextPage: "Next page",
SRV_MSG_StatusData1: "Row |1",
SRV_MSG_StatusData2: "Row |1 di |2",
SRV_MSG_StatusInsert: "New row",
SRV_MSG_StatusQBE: "Enter the search criteria",
SRV_MSG_StatusUpdated: "CHANGED DATA",
SRV_MSG_Cancel: "Undo changes",
SRV_MSG_ClearFilters: "Clear filters",
SRV_MSG_Search: "Find data using search criteria",
SRV_MSG_Delete: "Delete the selected row",
SRV_MSG_UnselectAllRows: "Deselect all rows",
SRV_MSG_Duplicate: "Duplicate the row",
SRV_MSG_FormList: "Displays list or detail",
SRV_MSG_FormListAuto: "Displays list",
SRV_MSG_Insert: "Go to an empty row to enter new data",
SRV_MSG_Lock: "Lock data",
SRV_MSG_ShowMultiSel: "Displays the checkboxes for multiple selection of rows",
SRV_MSG_ShowRowSel: "Displays the buttons for selecting rows",
SRV_MSG_Reload: "Reloads data from the database",
SRV_MSG_SelectAllRows: "Select all rows",
SRV_MSG_Find: "Find data in the database",
SRV_MSG_Unlock: "Allow to edit data",
SRV_MSG_Update: "Saves the changes",
SRV_MSG_BookEnd: "Go to end",
SRV_MSG_PanelEnd: "Go to end",
SRV_MSG_PanelStart: "Go to start",
SRV_MSG_BookStart: "Go to start",
SRV_MSG_OpenViews: "Open forms",
SRV_MSG_ShowDoc: "Show document",
SRV_MSG_RowNum: "Row |1",
SRV_MSG_RowNumOf: "Row |1 of |2",
SRV_MSG_Export: "Export data in Excel",
SRV_MSG_ErrorNum: "Error:",
SRV_MSG_ErrorEffects: "Effects:",
SRV_MSG_ErrorAction: "To do:",
SRV_MSG_ErrorSource: "Cause:",
SRV_MSG_ErrorButton: "Return to application",
SRV_MSG_Wait: "Please wait...",
SRV_MSG_Group: "Toggles display of groups",
SRV_MSG_ShowSelCommands: "Displays the commands for selecting rows",
PAN_BLOBLINK: "Click to open document (|1)",
COMMAND_PLACEHOLDER: "Insert command",
MSG_StatusNoRows: "No rows",
MSG_NoRows: "There's no data to show",
MSG_NoRowsInsert: "Press {{icon-add}} to add a new row",
MSG_NoRowsClear: "Press {{icon-remove-circle}} to clear all filters",
MSG_NoRowsClearInsert: "Press {{icon-remove-circle}} to clear all filters or press {{icon-add}} to add a new row",
MSG_ChartException: "<details><summary>There was an exception during the rendering of the chart. Click to see more.</summary><p>|1</p></details>"
}, Client.IdfResources.t = function(e, t) {
t = t || [];
let i = Client.mainFrame.wep?.language || Client.mainFrame.device.language.split("-")[0], n = (i = Client.IdfResources.languagesMap[i] || i, 
Client.IdfResources["msg_" + i] || (i = Client.IdfResources.languagesMap.en), Client.IdfResources["msg_" + i][e] || "");
for (let e = 0; e < t.length; e++) {
var s = void 0 === t[e] ? "" : t[e], o = "|" + (e + 1), l = n.indexOf(o);
n = (n = "" === s && " " === n.charAt(l - 1) ? n.substr(0, l - 1) + n.substr(l) : n).replace(o, s);
}
return n;
}, Client || {}), Client = (Client.IdfControl = function(e, t, i) {
Client.Widget.call(this, e, t, i);
}, Client.IdfControl.prototype = new Client.Widget(), Client.IdfControl.stretches = {
AUTO: 1,
NONE: 2,
FILL: 3,
ENLARGE: 4,
CROP: 5,
REPEAT: 6,
CENTER: 7
}, Client.IdfControl.blobCommands = {
UPLOAD: "upload",
DELETE: "delete",
VIEW: "view",
OPEN: "open",
DOWNLOAD: "download"
}, Client.IdfControl.nameSeparator = "; ", Client.IdfControl.rValueSeparator = "@#@", 
Client.IdfControl.prototype.updateElement = function(t) {
if (Client.Widget.prototype.updateElement.call(this, t = t || {}), Object.keys(t).length) {
let e = {};
var i;
if (void 0 !== t.comboType && (this.comboType = t.comboType), void 0 !== t.contentEditable && (this.contentEditable = t.contentEditable), 
void 0 !== t.container && (this.container = t.container), void 0 !== t.type && (this.type = t.type, 
e.showHtml = !0), void 0 !== t.useHtml && (this.useHtml = t.useHtml, e.showHtml = !0), 
void 0 !== t.forceEditType && (this.forceEditType = t.forceEditType), void 0 !== t.dataType && (this.dataType = t.dataType, 
e.showHtml = !0), void 0 !== t.isPassword && (this.isPassword = t.isPassword, e.showHtml = !0), 
void 0 !== t.showOnlyIcon && (this.showOnlyIcon = t.showOnlyIcon, e.value = !0), 
void 0 !== t.heightResize && (this.heightResize = t.heightResize, e.numRows = !0), 
void 0 !== t.visualStyle && Client.mainFrame.isIDF && (this.visualStyle = t.visualStyle, 
this.type = t.type || Client.IdfVisualStyle.getByIndex(this.visualStyle).getControlType(), 
this.isPassword = Client.IdfVisualStyle.getByIndex(this.visualStyle).getPasswordFlag(), 
this.getMask() && (e.mask = !0), this.isCombo()) && (e.value = !0), void 0 !== t.maxLength && (this.maxLength = t.maxLength, 
e.maxLength = !0, this.getMask()) && (e.mask = !0), void 0 !== t.scale && (this.scale = t.scale, 
this.getMask()) && (e.mask = !0), void 0 !== t.optional && (this.optional = t.optional, 
e.valueList = !0), void 0 !== t.valueList && (this.valueList || 0 < t.valueList?.items?.length || this.waitingForList) && (t.valueList ? (-1 !== (i = t.valueList.items.findIndex(e => "LKENULL" === e.value)) && (t.valueList.items.splice(i, 1), 
this.optional = !0), 0 === t.valueList.type ? (this.cancelComboOpening(), this.control.closeCombo(!0)) : (this.valueList = t.valueList, 
e.valueList = !0)) : delete this.valueList), void 0 !== t.readOnly && (this.readOnly = t.readOnly), 
void 0 !== t.editorType && (this.editorType = t.editorType), void 0 !== t.enabled && (this.enabled = t.enabled, 
e.enabled = !0, e.clickable = !0, this.isCombo()) && Client.mainFrame.isIDF && (e.value = !0), 
void 0 !== t.visible && (this.visible = t.visible, e.visible = !0), void 0 !== t.activatorImage && (this.activatorImage = t.activatorImage, 
e.activatorImage = !0), void 0 !== t.activatorWidth && (this.activatorWidth = t.activatorWidth, 
e.activatorWidth = !0), void 0 !== t.clickable && (this.clickable = t.clickable, 
e.clickable = !0, e.showHtml = !0), void 0 !== t.canActivate && (this.canActivate = t.canActivate, 
e.activatorImage = !0, e.clickable = !0), void 0 !== t.activableDisabled && (this.activableDisabled = t.activableDisabled, 
e.activatorImage = !0, e.clickable = !0), void 0 !== t.superActive && (this.superActive = t.superActive), 
void 0 !== t.isRowQbe && (this.isRowQbe = t.isRowQbe), void 0 !== t.canSort && (this.canSort = t.canSort), 
void 0 !== t.alignment && (this.alignment = t.alignment, e.alignment = !0), void 0 !== t.backColor && (this.backColor = t.backColor, 
e.backColor = !0, e.activatorBackColor = !0), void 0 !== t.color && (this.color = t.color, 
e.color = !0), void 0 !== t.mask && (this.mask = t.mask, e.mask = !0, e.showHtml = !0), 
void 0 !== t.maskPrefix && (this.maskPrefix = t.maskPrefix, e.mask = !0), void 0 !== t.fontModifiers && (this.fontModifiers = t.fontModifiers, 
e.fontModifiers = !0), void 0 !== t.badge && (this.badge = t.badge, e.badge = !0), 
void 0 !== t.blobMime && (this.blobMime = t.blobMime), void 0 !== t.htmlBlobMime && (this.htmlBlobMime = t.htmlBlobMime), 
void 0 !== t.blobUrl && (this.blobUrl = t.blobUrl), void 0 !== t.uploadBlobEnabled && (this.uploadBlobEnabled = t.uploadBlobEnabled, 
e.blob = !0), void 0 !== t.deleteBlobEnabled && (this.deleteBlobEnabled = t.deleteBlobEnabled, 
e.blob = !0), void 0 !== t.viewBlobEnabled && (this.viewBlobEnabled = t.viewBlobEnabled, 
e.blob = !0), void 0 !== t.image && (this.image = t.image, e.image = !0), void 0 !== t.imageResizeMode && (this.imageResizeMode = t.imageResizeMode, 
e.imageResizeMode = !0), void 0 !== t.multiUpload && (this.multiUpload = t.multiUpload), 
void 0 !== t.uploadExtensions && (this.uploadExtensions = t.uploadExtensions.replace(/\*/g, "").replace(/;/g, ","), 
this.isTextEdit()) && this.multiUpload && (e.multiupload = !0), void 0 !== t.isInQbe && (this.isInQbe = t.isInQbe, 
e.qbeStatus = !0, e.valueList = !0, e.mask = !0, e.value = !0), void 0 !== t.value && (this.value = t.value ?? "", 
e.value = !0, this.isListOwner() || !this.isCombo() || t.skipEmptyComboList || t.valueList && 0 !== t.valueList.type || (this.emptyComboList(!0), 
e.valueList = !0)), void 0 !== t.showHtmlEditorToolbar && (this.showHtmlEditorToolbar = t.showHtmlEditorToolbar, 
e.showHtmlEditorToolbar = !0), void 0 !== t.classNameOnParent && (this.classNameOnParent = t.classNameOnParent), 
void 0 !== t.className && (this.oldClassName = this.className, this.className = t.className, 
e.className = !0), void 0 !== t.comboClass && (this.comboClass = t.comboClass), 
void 0 !== t.subFrameConf && (this.subFrameConf = t.subFrameConf, e.subFrame = !0), 
void 0 !== t.placeholder && (this.placeholder = t.placeholder, e.placeholder = !0), 
void 0 !== t.numRows && (this.numRows = t.numRows, e.numRows = !0), void 0 !== t.filter && (this.filter = t.filter, 
e.filter = !0), void 0 !== t.comboMultiSel && (this.comboMultiSel = t.comboMultiSel, 
this.isInQbe) && (e.qbeStatus = !0), void 0 !== t.comboSeparator && (this.comboSeparator = t.comboSeparator, 
this.isInQbe) && (e.qbeStatus = !0), void 0 !== t.customElement && (this.customElement = t.customElement), 
void 0 === t.customChildrenConf || this.isInQbe || (this.customChildrenConf = t.customChildrenConf, 
e.customChildren = !0), void 0 !== t.tooltip && (this.tooltip = t.tooltip, Client.mainFrame.idfMobile ? (e.value = !0, 
e.showMobileTooltip = !0) : e.tooltip = !0), void 0 !== t.openCombo) this.isCombo() && this.activator?.getRootObject().click(); else if (this.container) {
if (this.currentType = this.getType(!0), this.currentAlignment = this.getAlignment(!0), 
this.currentMultiRows = this.isMultiRows(!0), this.currentActivatorImage = this.getActivatorImage(!0), 
e = Object.assign(this.createControl() || {}, e), this.customElement) {
var n, s = {};
for (n in t) this.customElement.customProps[n] && (s[n] = t[n]);
this.control.updateElement(s), this.invokeCustomMethods();
}
e = Object.assign(this.createActivator() || {}, e), e = Object.assign(this.createBadge() || {}, e), 
this.updateObjects(e), this.oldType = this.currentType, this.oldAlignment = this.currentAlignment, 
this.oldMultiRows = this.currentMultiRows, this.oldBlobMime = this.blobMime, this.oldDataType = this.dataType, 
this.oldIsPassword = this.isPassword;
}
}
}, Client.IdfControl.prototype.onEvent = function(e) {
var t, i = [];
e.activator = this.isActivatorClick(e);
let n;
if (this.customChildrenConf && !this.isInQbe) n = !0; else switch (e.id) {
case "onKey":
n = this.handleKey(e), i.push(...this.handleKeyMovement(e));
break;

case "chgProp":
n = this.handleChange(e);
break;

case "onClick":
e.activator ? this.handleActivatorClick(e) : i.push(...this.handleClick(e));
break;

case "onDblclick":
this.activator && this.handleActivatorClick(e);
break;

case "onDragover":
e.obj === this.control.id && (e.content.srcEvent.preventDefault(), e.content.srcEvent.dataTransfer.dropEffect = this.canAcceptDrop(e.content.srcEvent) ? "move" : "none");
break;

case "onDrop":
e.obj === this.control.id && (this.multiUpload || this.dataType === Client.IdfField.dataTypes.BLOB && this.uploadBlobEnabled ? (t = {
command: Client.IdfControl.blobCommands.UPLOAD,
files: e.content.srcEvent.dataTransfer.files
}, i.push(...this.parentWidget.onEvent({
id: "onBlobCommand",
obj: this.id,
content: t
})), e.content.srcEvent.preventDefault()) : this.isTextEdit() && this.handlePaste(e));
break;

case "onPaste":
this.handlePaste(e);
break;

case "onFocusin":
case "onFocusout":
n = this.handleFocus(e);
break;

default:
this.customElement?.events.includes(e.id) && (n = !0);
}
return n && "object" == typeof n && (e = n, n = !0), n && (e.obj = this.id, i.push(...this.parentWidget.onEvent(e))), 
i;
}, Client.IdfControl.prototype.clone = function(e, t, i) {
e = Client.Widget.prototype.clone.call(this, e, t, i);
let n;
return t && (e.container = t), this.control && (n = i.get(this.control.domObj), 
e.control = Client.eleMap[n.id], e.control?.cloned && this.control !== e.control || (e.control = this.control.clone(void 0, t, i)), 
e.control.enableKeyEvent({
inputs: !0,
type: "down"
}), e.control.enableKeyEvent({
inputs: !0,
type: "up"
}), e.isCombo() && e.adjustCombo(), e.isTextEdit()) && !e.useInput && Client.Element.simulateInput({
domObj: e.control.getRootObject(),
showHTML: e.showHTML(),
fixEmpty: !0
}), this.supportControl && !Client.IdfField.isDateOrTime(this.dataType) && (n = i.get(this.supportControl.domObj), 
e.supportControl = Client.eleMap[n.id], e.supportControl?.cloned && this.supportControl !== e.supportControl || (e.supportControl = this.supportControl.clone(void 0, t, i))), 
this.activator && (n = i.get(this.activator.domObj), e.activator = Client.eleMap[n.id], 
e.activator?.cloned && this.activator !== e.activator || (e.activator = this.activator.clone(void 0, t, i))), 
this.badgeObj && (n = i.get(this.badgeObj.domObj), e.badgeObj = Client.eleMap[n.id], 
e.badgeObj?.cloned && this.badgeObj !== e.badgeObj || (e.badgeObj = this.badgeObj.clone(void 0, t, i))), 
e;
}, Client.IdfControl.prototype.handleKey = function(e) {
var t = 13 === e.content.keyCode, i = [ 33, 34, 35, 36, 37, 38, 39, 40, 45 ].includes(e.content.keyCode);
if (112 <= e.content.keyCode && e.content.keyCode <= 123) return e.content.srcEvent.preventDefault(), 
"keyup" === e.content.type;
if (this.isEnabled() && !Client.mainFrame.isEditing() || (i || 9 === e.content.keyCode || (e.content.ctrlKey || e.content.metaKey) && 67 === e.content.keyCode || e.content.srcEvent.preventDefault(), 
t)) if ("keydown" === e.content.type) this.isTextEdit() && (n = (e.content.ctrlKey || e.content.metaKey) && [ 65, 67, 86, 88, 90 ].includes(e.content.keyCode), 
i = [ 8, 46 ].includes(e.content.keyCode) || i, n = !n && !i && !t, t ? this.isMultiRows() || e.content.srcEvent.preventDefault() : n && (i = e.content.srcEvent.target, 
0 < this.maxLength) && i.innerText.length - (i.selectionEnd - i.selectionStart) >= this.maxLength && e.content.srcEvent.preventDefault()); else if ("keyup" === e.content.type) {
if (t) {
this.qbeRowTooltip && (clearTimeout(this.qbeRowTooltip), delete this.qbeRowTooltip);
var n = this.getType();
if (n === Client.IdfField.controlTypes.HTMLEDITOR || this.isMultiRows()) return void e.content.srcEvent.stopPropagation();
if (n !== Client.IdfField.controlTypes.EDIT) return;
} else if (!this.isTextEdit() && !this.superActive || 0 === e.content.srcEvent.key.length && ![ 8, 32, 24, 46 ].includes(e.content.keyCode)) return;
if (this.isRowQbe && !t && (this.qbeRowTooltip && clearTimeout(this.qbeRowTooltip), 
this.qbeRowTooltip = setTimeout(function() {
delete this.qbeRowTooltip, this.control.tooltip.show();
}.bind(this), 2e3)), this.superActive || t) return this.prepareChangeEvent();
}
}, Client.IdfControl.prototype.handleKeyMovement = function(s) {
var o = [];
if ("keydown" === s.content.type) {
var l = s.content.srcEvent.srcElement;
let e = 0, t = 0, i = 0, n = 9999;
switch (s.content.keyCode) {
case 9:
e = s.content.shiftKey ? -1 : 1;
break;

case 13:
if (!Client.mainFrame.wep?.tabWithEnter) return o;
e = 1;
break;

case 37:
if (s.content.shiftKey || s.content.ctrlKey) return o;
if (Client.Element.isSelectable(l)) {
if (0 < l.selectionStart) return o;
if (0 === l.selectionStart && l.selectionStart !== l.selectionEnd) return l.selectionEnd = l.selectionStart, 
o;
}
e = -1, i = 9999, n = 9999;
break;

case 39:
if (s.content.shiftKey || s.content.ctrlKey) return o;
if (Client.Element.isSelectable(l)) {
if (l.selectionEnd !== l.value.length && l.value !== Client.Element.fakeEmptyValue) return o;
if (0 < l.selectionEnd && l.selectionStart !== l.selectionEnd) return l.selectionStart = l.selectionEnd, 
o;
}
e = 1, i = 0, n = 0;
break;

case 38:
case 40:
if (s.content.shiftKey || s.content.ctrlKey) return o;
if (1 < this.numRows) {
var a = Client.Element.getSelection(this.control.getRootObject());
if (38 === s.content.keyCode && 0 < a.start || 40 === s.content.keyCode && a.end !== l.value.length) return o;
}
t = 38 === s.content.keyCode ? -1 : 1;
break;

default:
return o;
}
this.parentWidget instanceof Client.IdfFilterPopup || s.content.srcEvent.preventDefault(), 
o.push(...this.parentWidget.focusNearControl({
control: this,
column: e,
row: t,
selectionStart: i,
selectionEnd: n
}));
}
return o;
}, Client.IdfControl.prototype.handleChange = function(e) {
if ("errorText" === e.content.name) return !Client.mainFrame.isIDF;
if ("filter" === e.content.name) return this.handleFilter(e);
var t = this.getType();
if ([ Client.IdfField.controlTypes.CHECK, Client.IdfField.controlTypes.OPTION ].includes(t) && "checked" === e.content.name && (t === Client.IdfField.controlTypes.CHECK ? (e.content.name = "value", 
this.isInQbe && this.oldIndeterminateStatus && (e.content.value = !1), 2 <= this.valueList?.items.length ? e.content.value = (e.content.value ? this.valueList.items[0] : this.valueList.items[1]).value : e.content.value = e.content.value ? "on" : "", 
this.isInQbe && this.oldCheckStatus && (e.content.value = "---")) : this.isInQbe && 1 === this.control.elements.filter(e => e.elements[0].getRootObject().getAttribute("checked")).length && (e.content.name = "value", 
e.content.value = "")), "value" === e.content.name) {
if (this.isCombo()) return void (this.isSmartLookup() && this.control.multiple && "LKENULL" === e.content.value && this.control.closeCombo());
this.dataType !== Client.IdfField.dataTypes.BLOB && !this.multiUpload || e.obj !== this.supportControl?.id || (e.id = "onBlobCommand", 
e.content = {
command: Client.IdfControl.blobCommands.UPLOAD
}, e.content.files = this.supportControl.getRootObject().files);
}
return !0;
}, Client.IdfControl.prototype.handleFilter = function(e) {
return !this.isCombo() || !(!this.isListOwner() || "" !== e.content.value || this.isComboOpen()) || !(this.isListOwner() || this.isNoAutoLookup() && this.isComboOpen()) || void this.openCombo(e.content.value);
}, Client.IdfControl.prototype.handleClick = function(e) {
var t = [];
let i;
var n = e.obj === this.uploadBlobConf?.id, s = e.obj === this.deleteBlobConf?.id, o = e.obj === this.viewBlobConf?.id, l = e.obj === this.control.id && this.multiUpload;
return n || l ? this.supportControl.getRootObject().click() : (s ? i = Client.IdfControl.blobCommands.DELETE : o && (Client.mainFrame.isIDF ? this.handleViewBlobClick(e) : i = Client.IdfControl.blobCommands.DOWNLOAD), 
(n = this.control?.elements?.[0]?.elements?.[0]) && e.obj === n.id && this.blobMime === Client.IdfFieldValue.blobMimeTypes.SIZE && (Client.mainFrame.isIDF ? this.handleOpenBlobClick(e) : i = Client.IdfControl.blobCommands.DOWNLOAD), 
i && t.push(...this.parentWidget.onEvent({
id: "onBlobCommand",
obj: this.id,
content: {
command: i
}
}))), t;
}, Client.IdfControl.prototype.handleViewBlobClick = function(e) {
Client.Widget.showPreview(Client.mainFrame.wep.SRV_MSG_ShowDoc, this.blobUrl.replace("&amp;", "&"));
}, Client.IdfControl.prototype.handleOpenBlobClick = function(e) {
this.blobMime === Client.IdfFieldValue.blobMimeTypes.TEXT ? open().document.body.innerText = this.value : Client.mainFrame.open({
href: this.blobUrl.replace("&amp;", "&")
});
}, Client.IdfControl.prototype.handlePaste = function(i) {
if (!this.isEnabled()) return i.content.srcEvent.preventDefault();
let n = this.maxLength;
var s = this.getMask();
if (0 < this.maxLength && s ? n = Math.min(this.maxLength, s.length) : s && (n = s.length), 
!(n <= 0)) {
s = i.content.srcEvent;
let e = ("onDrop" === i.id ? s.dataTransfer : s.clipboardData || window.clipboardData).getData("text/plain");
var i = this.control.getRootObject(), o = i.selectionStart, l = i.selectionEnd;
let t = i.value;
l = (t = "" + t.slice(0, o) + t.slice(l)).length;
l + e.length > n && (e = e.substr(0, n - l)), s.preventDefault(), e && (i.value = "" + t.slice(0, o) + e + t.slice(o), 
i.selectionStart = o + e.length, i.selectionEnd = o + e.length);
}
}, Client.IdfControl.prototype.handleSelectionChange = function(e) {
return this.lastSelection = Client.Element.getSelection(this.control.getRootObject()), 
this.parentWidget.handleSelectionChange(e);
}, Client.IdfControl.prototype.createControlConfig = function() {
let n;
switch (this.getType()) {
case Client.IdfField.controlTypes.EDIT:
if (this.isTextEdit() && !this.useInput) {
var e = this.showHTML();
n = {
c: "IonText",
type: "span",
contentEditable: !(void 0 !== this.contentEditable && !this.contentEditable || e),
className: "control-span" + (e ? " show-html" : "") + (this.multiUpload ? " multiupload" : ""),
events: [ "onPaste", "onDrop", "onDragover", "onFocusout" ]
};
} else {
let e, t;
Client.IdfField.isNumeric(this.dataType) && !this.isInQbe && (e = "number", t = this.getMask()), 
n = {
c: "IonInput",
labelPosition: "hidden",
autocomplete: "off",
className: "control-edit",
events: [ "onChange" ],
type: e,
mask: t
}, this.isPassword && (n.type = "password", n.events.push("onFocusin"), n.events.push("onFocusout")), 
(Client.mainFrame.idfMobile || Client.mainFrame.device.isMobile) && Client.IdfField.isNumeric(this.dataType) && (n.numPad = 2);
}
n.events.push("onClick"), n.events.push("onDblclick"), this.isRowQbe && (n.tooltip = {
content: Client.IdfResources.t("TIP_TITLE_QbeRow"),
trigger: "manual"
});
break;

case Client.IdfField.controlTypes.COMBO:
n = {
c: "IonAutoComplete",
labelPosition: "hidden",
backdrop: "none",
showIcon: !0,
className: "control-edit",
comboClass: "control-combo" + (this.comboClass ? " " + this.comboClass : ""),
readOnly: !!this.readOnly,
openOnFocus: !!this.readOnly,
highlightFirstOption: !0,
heightResize: this.isMultiRows(),
list: Client.mainFrame.isIDF ? this.getComboList() : void 0
};
e = [ "onChange", "onClick", "onDblclick" ];
this.isListOwner() || e.push("onFilter"), n.events = e, this.readOnly && this.parentWidget instanceof Client.IdfFilterPopup && (n.tabindex = "-1"), 
this.isRowQbe && (n.tooltip = {
content: Client.IdfResources.t("TIP_TITLE_QbeRow"),
trigger: "manual"
});
break;

case Client.IdfField.controlTypes.CHECK:
n = {
c: Client.mainFrame.idfMobile ? "IonToggle" : "IonCheckbox",
className: "control-checkbox"
};
break;

case Client.IdfField.controlTypes.OPTION:
if (n = {
c: "IonList",
noLines: !0,
radioGroup: !0,
className: "control-radio-group",
children: [],
events: [ "onChange", "onClick", "onDblclick" ]
}, this.valueList) for (let e = 0; e < this.valueList.items.length; e++) {
var t = {
c: "IonItem",
className: "control-radio-item",
wrapper: !1
};
t.children = [ {
c: "IonRadio",
label: this.valueList.items[e].name,
value: this.valueList.items[e].value
} ], n.children.push(t);
}
break;

case Client.IdfField.controlTypes.BUTTON:
n = {
c: "IonButton",
className: "control-button",
events: [ "onClick" ]
}, !this.useHtml && "=" !== this.getMask(void 0, !0) || (n.useHTML = !0);
break;

case Client.IdfField.controlTypes.HTMLEDITOR:
n = {
c: "HtmlEditor",
className: "control-htmleditor",
events: [ "onChange" ]
};
break;

case Client.IdfField.controlTypes.CUSTOM:
n = this.customElement ? this.customElement.createConfig() : {
c: "Container",
className: "control-custom"
};
break;

case Client.IdfField.controlTypes.BLOB:
n = this.createBlobConfig();
break;

case Client.IdfField.controlTypes.CHECKLIST:
if (n = {
c: "IonList",
noLines: !0,
className: "control-radio-group",
children: []
}, this.valueList) {
var s = this.getComboList(), e = this.valueList.headers ? 1 : 0;
for ("" === s[e]?.v && s.splice(e, 1), i = 0; i < s.length; i++) {
var o = s[i], l = {
c: "IonItem",
className: "control-radio-item",
wrapper: !1,
itemValue: o.v,
itemName: o.n,
itemRValue: o.rValue
};
this.valueList.headers ? (o.v === this.valueList.headers && (l.className += " " + (o.s || "")), 
l.children = [ {
c: "IonCheckbox"
}, {
c: "Container",
className: "control-radio-item-container",
innerHTML: o.html
} ]) : l.children = [ {
c: "IonCheckbox",
label: o.n
} ], n.children.push(l);
}
}
break;

case Client.IdfField.controlTypes.LISTGROUPHEADER:
n = {
c: "IonText",
type: "span",
className: "control-span"
};
}
return {
mainControlConfig: this.createElementConfig(n),
supportControlConfig: this.createSupportControlConfig()
};
}, Client.IdfControl.prototype.createSupportControlConfig = function() {
let e;
return Client.IdfField.isDateOrTime(this.dataType) && !Client.eleMap["control-iondatetime"] ? e = {
id: "control-iondatetime",
c: "IonDateTime",
usePicker: Client.IonDateTime.SHOW_PICKER_NEVER,
displayFormat: this.getMask(!0),
style: {
width: 0,
height: "1px"
}
} : this.getType() !== Client.IdfField.controlTypes.BLOB && !this.multiUpload || (e = {
c: "Input",
type: "file",
visible: !1,
events: [ "onClick", "onChange" ]
}), e = e && this.createElementConfig(e);
}, Client.IdfControl.prototype.createBlobConfig = function() {
var e = {
c: "Container",
className: "control-blob",
children: [],
events: [ "onClick", "onDrop", "onDragover" ]
};
let t;
switch (this.blobMime) {
case Client.IdfFieldValue.blobMimeTypes.TEXT:
case Client.IdfFieldValue.blobMimeTypes.IMAGE:
case Client.IdfFieldValue.blobMimeTypes.EMPTY:
case Client.IdfFieldValue.blobMimeTypes.SIZE:
t = {
c: "Container",
className: "control-blob-container",
children: [],
events: [ "onClick" ]
}, this.blobMime === Client.IdfFieldValue.blobMimeTypes.SIZE && (t.className += " control-blob-size", 
t.children.push({
c: "Container",
events: [ "onClick" ]
}));
break;

default:
t = {
c: "Iframe",
className: "control-blob-container",
events: [ "onClick" ],
frameBorder: "no"
};
}
return e.children.push(t), e;
}, Client.IdfControl.prototype.writeValue = function() {
switch (this.getType()) {
case Client.IdfField.controlTypes.EDIT:
this.writeEditValue();
break;

case Client.IdfField.controlTypes.COMBO:
this.writeComboValue();
break;

case Client.IdfField.controlTypes.CHECK:
this.writeCheckValue();
break;

case Client.IdfField.controlTypes.OPTION:
this.writeRadioValue();
break;

case Client.IdfField.controlTypes.BUTTON:
this.control.useHTML ? Client.Widget.updateObject(this.control, {
label: Client.Widget.getHTMLForCaption(this.value)
}) : ({
caption: t,
icon: i
} = Client.Widget.extractCaptionData(this.value), Client.Widget.updateObject(this.control, {
label: t,
icon: i
}));
break;

case Client.IdfField.controlTypes.BLOB:
this.writeBlobValue();
break;

case Client.IdfField.controlTypes.CHECKLIST:
if (this.valueList) {
var n = this.value.split(this.comboSeparator);
for (let e = 0; e < this.valueList.items.length; e++) {
let t = this.valueList.items[e], i = n.find(e => e === t.value || e === t.value + "" || e === t.name?.toLowerCase());
var s = this.control.elements.find(e => e.getRootObject().itemValue === i);
s && Client.Widget.updateObject(s.elements[0], {
checked: !!i
});
}
}
break;

default:
var t = {};
if (this.customElement && !this.customElement.subFrameId) {
var i = Client[this.customElement._class]?.defaultBindingProperty;
if (i) {
let e = !1;
e = i in this.control ? "number" == typeof this.control[i] : isNaN(this.value), 
t[i] = e ? new Number(this.value) : this.value;
}
}
t.value = this.value, Client.Widget.updateObject(this.control, t);
}
}, Client.IdfControl.prototype.writeEditValue = function() {
var t = {};
if (this.showHTML()) t.value = "", t.innerHTML = this.getHTMLIcon(this.value), Client.mainFrame.idfMobile && this.tooltip && (t.innerHTML += "<br/>" + this.tooltip); else {
let e = this.value;
Client.IdfField.isDateOrTime(this.dataType) && (e && "Invalid date" !== e ? e.includes("T") && (e = moment(this.getISODateTime(e)).format(this.getMask(!0, !0))) : e = ""), 
Client.mainFrame.idfMobile && this.control.innerHTML && (t.innerHTML = ""), t.value = e;
var i, n = this.getMask();
n && (i = this.getMaskType(), Client.mainFrame.isIDF || this.isInQbe || !this.isTextEdit() || (t.value = mask_mask(e, n, i)), 
Client.mainFrame.isIDF) && "N" === i && t.value && this.control.domObj.value !== mask_mask(t.value, n, i) && (t.value = mask_unmask(t.value, n, i));
}
Client.Widget.updateObject(this.control, t);
}, Client.IdfControl.prototype.writeComboValue = function() {
var e = {};
if ("" === this.value && (e.filter = ""), this.isSmartLookup() && this.valueList) {
let n = !1;
var s = [];
if (void 0 !== this.value) {
let i = ("*" === this.value ? this.control : this).value;
this.isMultipleCombo() && (i = this.value.split(this.getComboNameSeparator()));
for (let e = 0; e < this.valueList.items.length; e++) {
var o = this.valueList.items[e];
if ("*" === this.value && this.isMultipleCombo()) 1e3 < parseInt(o.value.replace("LKE", "")) && (s.push(o.value), 
n = !0); else {
let t = o.value && i.includes(o.value);
if (!t && o.name) {
let e = o.name;
this.valueList.decodeColumn && (e = o.name.split("|")[this.valueList.decodeColumn - 1]), 
t = i.includes(e);
}
t && (s.push(o.value), n = !0);
}
}
}
n && (e.value = s.join(this.comboSeparator)), "" === this.value && (e.value = "");
} else e.value = this.value;
Client.Widget.updateObject(this.control, e);
}, Client.IdfControl.prototype.writeCheckValue = function() {
var e = {};
"---" === this.value ? (e.indeterminate = !0, e.checked = null) : (e.indeterminate = !1, 
2 <= this.valueList.items.length ? e.checked = this.value + "" == this.valueList.items[0].value + "" : e.checked = "on" === this.value), 
this.oldCheckStatus = e.checked, this.oldIndeterminateStatus = e.indeterminate, 
Client.Widget.updateObject(this.control, e);
}, Client.IdfControl.prototype.writeRadioValue = function() {
var e = {};
e.value = this.valueList.items.find(e => e.value + "" == this.value + "")?.value ?? "", 
Client.Widget.updateObject(this.control, e);
}, Client.IdfControl.prototype.writeBlobValue = function() {
var t = {};
let e = this.control.elements[0];
switch (t.style = {
backgroundImage: ""
}, t.innerHTML = "", t.src = "", this.blobMime) {
case Client.IdfFieldValue.blobMimeTypes.IMAGE:
t.style = {
backgroundImage: "url('" + this.value + "')"
};
break;

case Client.IdfFieldValue.blobMimeTypes.SIZE:
if (e = this.control.elements[0].elements[0], Client.mainFrame.isIDF) t.innerHTML = this.value; else {
let e;
var i = parseInt(this.value);
e = i < 1024 ? i + " B" : i < 1048576 ? Math.round(i / 1024) + " KB" : Math.round(i / 1048576) + " MB", 
t.innerHTML = Client.IdfResources.t("PAN_BLOBLINK", [ e ]);
}
break;

case Client.IdfFieldValue.blobMimeTypes.TEXT:
case Client.IdfFieldValue.blobMimeTypes.EMPTY:
t.innerHTML = this.value;
break;

default:
t.src = this.value;
}
Client.Widget.updateObject(e, t);
}, Client.IdfControl.prototype.createControl = function() {
var e;
if (this.needNewControl()) return this.control && (e = this.mainObjects.findIndex(e => e.id === this.control.id), 
this.mainObjects.splice(e, 1), this.container.removeChild(this.control), this.supportControl) && (e = this.mainObjects.findIndex(e => e.id === this.supportControl.id), 
this.mainObjects.splice(e, 1), this.container.removeChild(this.supportControl), 
delete this.supportControl), e = this.createControlConfig(), this.control = this.container.insertBefore({
child: e.mainControlConfig,
sib: "right" === this.getActivatorPosition() ? this.activator?.id || this.badgeObj?.id : void 0
}), this.elements.push(this.control), this.mainObjects.push(this.control), this.getType() === Client.IdfField.controlTypes.HTMLEDITOR && (this.control.className = e.mainControlConfig.className), 
this.invokeCustomMethods(), e.supportControlConfig && (this.supportControl = this.container.insertBefore({
child: e.supportControlConfig
}), this.mainObjects.push(this.supportControl), this.multiUpload) && (this.supportControl.getRootObject().multiple = !0), 
this.control.enableKeyEvent({
inputs: !0,
type: "down"
}), this.control.enableKeyEvent({
inputs: !0,
type: "up"
}), this.isCombo() && this.adjustCombo(), this.isTextEdit() && !this.useInput && Client.Element.simulateInput({
domObj: this.control.getRootObject(),
showHTML: this.showHTML(),
fixEmpty: !0
}), (e = {
enabled: !0,
visible: !0,
blob: !0,
clickable: !0,
showHtml: !0,
numRows: !0
}).value = void 0 !== this.value, e.maxLength = void 0 !== this.maxLength, e.valueList = void 0 !== this.valueList, 
e.showHtmlEditorToolbar = void 0 !== this.showHtmlEditorToolbar, e.alignment = void 0 !== this.getAlignment(), 
e.backColor = void 0 !== this.backColor, e.color = void 0 !== this.color, e.mask = void 0 !== this.getMask(), 
e.fontModifiers = void 0 !== this.fontModifiers, e.image = void 0 !== this.image, 
e.imageResizeMode = void 0 !== this.imageResizeMode, e.className = void 0 !== this.className, 
e.filter = void 0 !== this.filter, e.qbeStatus = void 0 !== this.isInQbe, e.subFrame = void 0 !== this.subFrame, 
e.placeholder = void 0 !== this.placeholder, e;
}, Client.IdfControl.prototype.needNewControl = function() {
if (!this.control) return !0;
if (this.getType() !== this.oldType) return !0;
if (this.isMultiRows() !== this.oldMultiRows) return !0;
var t = [ this.oldBlobMime, this.oldIsPassword, this.oldAlignment ], i = [ this.blobMime, this.isPassword, this.currentAlignment ];
Client.IdfField.isDateOrTime(this.dataType) && Client.IdfField.isDateOrTime(this.oldDataType) || (t.push(this.oldDataType), 
i.push(this.dataType));
for (let e = 0; e < i.length; e++) {
var n = t[e];
if (i[e] !== n) return !0;
}
return !1;
}, Client.IdfControl.prototype.updateBlobControl = function() {
let e = this.control.elements[1];
var t, i;
this.uploadBlobEnabled || this.deleteBlobEnabled || this.viewBlobEnabled ? (e || (t = this.createElementConfig({
c: "Container",
className: "control-blob-overlay",
children: [],
events: [ "onClick" ]
}), i = Client.Widget.getHTMLTooltip(Client.IdfResources.t("TIP_TITLE_LoadDoc"), Client.mainFrame.wep ? Client.mainFrame.wep.SRV_MSG_LoadDoc : ""), 
this.uploadBlobConf = this.createElementConfig({
c: "IonButton",
className: "control-blob-upload",
icon: "download",
tooltip: i,
events: [ "onClick" ]
}), t.children.push(this.uploadBlobConf), i = Client.Widget.getHTMLTooltip(Client.IdfResources.t("TIP_TITLE_DeleteDoc"), Client.mainFrame.wep ? Client.mainFrame.wep.SRV_MSG_DeleteDoc : ""), 
this.deleteBlobConf = this.createElementConfig({
c: "IonButton",
className: "",
icon: "trash",
tooltip: i,
events: [ "onClick" ]
}), t.children.push(this.deleteBlobConf), i = Client.Widget.getHTMLTooltip(Client.IdfResources.t("TIP_TITLE_ShowDoc"), Client.mainFrame.wep ? Client.mainFrame.wep.SRV_MSG_ShowDoc : ""), 
this.viewBlobConf = this.createElementConfig({
c: "IonButton",
className: "",
icon: "open",
tooltip: i,
events: [ "onClick" ]
}), t.children.push(this.viewBlobConf), e = this.control.insertBefore({
child: t
})), Client.Widget.updateObject(e.elements[0], {
visible: this.uploadBlobEnabled
}), Client.Widget.updateObject(e.elements[1], {
visible: this.deleteBlobEnabled
}), Client.Widget.updateObject(e.elements[2], {
visible: this.viewBlobEnabled
}), this.supportControl.getRootObject().accept = "*.*" !== this.uploadExtensions ? this.uploadExtensions : "") : e && (this.control.removeChild(e), 
delete this.uploadBlobConf, delete this.deleteBlobConf, delete this.viewBlobConf);
}, Client.IdfControl.prototype.updateMultiupload = function() {
this.supportControl.getRootObject().accept = "*.*" !== this.uploadExtensions ? this.uploadExtensions : "";
}, Client.IdfControl.prototype.updateEnabled = function() {
var t = this.isEnabled();
switch (this.getType()) {
case Client.IdfField.controlTypes.EDIT:
case Client.IdfField.controlTypes.COMBO:
this.contentEditable && (Client.mainFrame.device.isMobile || Client.mainFrame.idfMobile) && (Client.IdfField.isDateOrTime(this.dataType) ? Client.Widget.updateObject(this.control, {
contentEditable: !1,
readOnly: !0
}) : Client.Widget.updateObject(this.control, {
contentEditable: t,
readOnly: !t
}));
break;

case Client.IdfField.controlTypes.OPTION:
for (let e = 0; e < this.control.elements.length; e++) Client.Widget.updateObject(this.control.elements[e].elements[0], {
disabled: !t
});
break;

case Client.IdfField.controlTypes.BUTTON:
Client.mainFrame.isEditing() ? Client.Widget.updateElementClassName(this.control, "control-editing-disabled", t) : Client.Widget.updateObject(this.control, {
disabled: !t
});
break;

default:
Client.Widget.updateObject(this.control, {
disabled: !t
});
}
}, Client.IdfControl.prototype.createActivator = function() {
var t = !!this.getActivatorImage() && (null == this.activatorWidth || 0 < this.activatorWidth);
if (t && (!this.activator || this.getAlignment() !== this.oldAlignment)) {
this.activator && (t = this.mainObjects.findIndex(e => e.id === this.activator.id), 
this.mainObjects.splice(t, 1), this.container.removeChild(this.activator)), this.activatorStyle = {};
let e;
this.isRowQbe && (t = Client.IdfResources.t("LFIL_FILTER_CAPT"), i = Client.IdfResources.t("FIL_OPEN_FILTER_POPUP"), 
n = Client.IdfPanel.FKEnterQBE, e = Client.Widget.getHTMLTooltip(t, i, n));
var t = this.getActivatorPosition(), i = this.createElementConfig({
c: "IonButton",
className: "control-activator" + (this.isRowQbe ? " qbe" : "") + " " + t,
tooltip: e,
events: [ "onClick", "onFocusin" ]
}), n = (this.activator = this.container.insertBefore({
child: i,
sib: "left" === t ? this.control.id : void 0
}), this.mainObjects.push(this.activator), {
activatorWidth: void 0 !== this.activatorWidth,
activatorBackColor: void 0 !== this.backColor,
activatorImage: !0
});
return n;
}
}, Client.IdfControl.prototype.createBadge = function() {
var e, t;
if (!this.isInQbe) if (this.badge || 0 === this.badge) {
if (!this.badgeObj || this.getAlignment() !== this.oldAlignment) return this.badgeObj && (e = this.mainObjects.findIndex(e => e.id === this.badgeObj.id), 
this.mainObjects.splice(e, 1), this.container.removeChild(this.badgeObj)), e = this.createElementConfig({
c: "IonBadge",
className: "generic-badge" + (this.badgeInside ? " inside" : "")
}), t = this.badgeInside && "left" === this.getActivatorPosition() ? this.activator?.id || this.control.id : void 0, 
this.badgeObj = this.container.insertBefore({
child: e,
sib: t
}), this.mainObjects.push(this.badgeObj), {
badge: !0
};
} else this.badgeObj && (this.container.removeChild(this.badgeObj), delete this.badgeObj);
}, Client.IdfControl.prototype.updateObjects = function(e) {
var t = this.getType();
if (e.blob && t === Client.IdfField.controlTypes.BLOB && this.updateBlobControl(), 
e.multiupload && this.multiUpload && this.updateMultiupload(), e.showHtmlEditorToolbar && t === Client.IdfField.controlTypes.HTMLEDITOR && Client.Widget.updateElementClassName(this.control, "hide-buttons", this.showHtmlEditorToolbar), 
e.showHtml && Client.Widget.updateElementClassName(this.control, "show-html", !this.showHTML()), 
e.showMobileTooltip && Client.Widget.updateElementClassName(this.control, "mobile-tooltip", !this.tooltip), 
e.enabled && this.updateEnabled(), e.visible && Client.Widget.updateObject(this.control, {
visible: this.visible
}), e.maxLength && t === Client.IdfField.controlTypes.EDIT && Client.Widget.updateObject(this.control, {
maxLength: this.maxLength
}), e.mask && t === Client.IdfField.controlTypes.EDIT && Client.Widget.updateObject(this.control, {
mask: this.getMask(),
maskType: this.getMaskType()
}), e.valueList && this.isCombo() && (this.control.updateElement({
allowNull: (this.optional || this.isInQbe) && "" !== this.valueList?.items?.[0]?.value
}), void 0 === this.control.value && "" === this.control.lastChange || this.control.updateElement({
list: this.getComboList()
})), e.value && this.writeValue(), e.valueList && this.waitingForList && this.openCombo(), 
e.numRows && Client.Widget.updateElementClassName(this.control, "control-multirows", !this.isMultiRows()), 
e.alignment) {
let e = this.getAlignment();
t === Client.IdfField.controlTypes.CHECK ? e = Client.IdfVisualStyle.alignments.CENTER : this.isCombo() && (e = Client.IdfVisualStyle.alignments.LEFT);
var i = Client.IdfVisualStyle.getTextAlign(e);
this.addVisualStyleClasses(this.control, {
alignment: i
});
}
if (!e.backColor || this.parentWidget.isBackgroundApplied() || (t === Client.IdfField.controlTypes.EDIT || this.isCombo() ? this.control.getRootObject().style.backgroundColor = this.backColor : this.control.updateElement({
style: {
backgroundColor: this.backColor
}
})), e.color) if (t === Client.IdfField.controlTypes.OPTION) for (let e = 0; e < this.control.elements.length; e++) this.control.elements[e].updateElement({
style: {
color: this.color
}
}); else this.control.updateElement({
style: {
color: this.color
}
});
e.fontModifiers && (i = Client.IdfVisualStyle.getFont(this.fontModifiers, !0), this.control.updateElement({
style: {
fontStyle: i.style,
fontWeight: i.weight,
textDecoration: i.decoration
}
})), e.image && this.updateImage(), e.imageResizeMode && this.updateImageResizeMode(), 
e.className && (this.realizing || this.oldClassName !== this.className) && (i = this.classNameOnParent ? this.control.parent : this.control, 
Client.Widget.updateElementClassName(i, this.oldClassName, !0), Client.Widget.updateElementClassName(i, this.className)), 
e.filter && this.updateFilter(), e.qbeStatus && this.updateQbeStatus(), e.subFrame && this.updateSubFrame(), 
e.customChildren && this.updateCustomChildren(), e.placeholder && [ Client.IdfField.controlTypes.EDIT, Client.IdfField.controlTypes.COMBO, Client.IdfField.controlTypes.HTMLEDITOR, Client.IdfField.controlTypes.CUSTOM ].includes(t) && (this.isTextEdit() && !this.useInput ? this.control.getRootObject().setAttribute("placeholder", this.placeholder) : Client.Widget.updateObject(this.control, {
placeholder: this.placeholder
})), e.clickable && Client.Widget.updateElementClassName(this.control, "control-clickable", !this.isClickable()), 
e.tooltip && Client.Widget.updateObject(this.container, {
tooltip: this.tooltip
}), this.activator && (e.activatorImage && this.updateActivatorImage(), (i = {}).display = this.isActivatorVisible() ? "" : "none", 
e.activatorWidth && !this.isRowQbe && (i.width = "auto", i.height = "100%", i.fontSize = null === this.activatorWidth ? "" : this.activatorWidth + "px"), 
e.activatorBackColor && !this.parentWidget.isBackgroundApplied() && (i.backgroundColor = this.backColor), 
Client.Widget.updateStyle(this.activator, this.activatorStyle, i)), this.badgeObj && e.badge && Client.Widget.updateObject(this.badgeObj, {
innerText: this.badge
});
}, Client.IdfControl.prototype.updateImage = function() {
var e = this.image?.startsWith("http") || this.image?.startsWith("https") ? "" : "images/", e = this.image ? (Client.mainFrame.isIDF ? e : "") + this.image : "", e = e ? "url('" + e + "')" : "";
(this.getType() === Client.IdfField.controlTypes.BUTTON ? this.control : this.container).updateElement({
style: {
backgroundImage: encodeURI(e)
}
});
}, Client.IdfControl.prototype.updateImageResizeMode = function() {
var e = this.container, t = (e.className || e.getRootObject().className || "").split(" ").find(e => e.startsWith("control-blob-img-")), i = this.getImageResizeModeClass();
t !== i && (Client.Widget.updateElementClassName(e, "control-blob-img " + (t || ""), !0), 
Client.Widget.updateElementClassName(e, "control-blob-img " + i));
}, Client.IdfControl.prototype.updateActivatorImage = function() {
Client.Widget.setIconImage({
image: this.getActivatorImage(),
el: this.activator
});
}, Client.IdfControl.prototype.updateCustomChildren = function() {
if (this.customChildrenConf) for (let e = 0; e < this.customChildrenConf.length; e++) {
var t, i = this.customChildrenConf[e];
i._remove ? this.control.removeChild(i) : (Client.eleMap[i.id] && (Client.eleMap[i.id].moving = !0), 
(t = this.control.insertBefore({
child: this.createElementConfig(i)
})).parentWidget = this, delete t.moving, i._skipUpdate || t.updateElement(Object.assign({}, i)));
}
}, Client.IdfControl.prototype.updateSubFrame = function() {
let e = !0;
var t;
this.subFrameConf ? (e = !1, this.subFrame && this.subFrame.id !== this.subFrameConf.id && this.container.removeChild(this.subFrame), 
this.subFrame = Client.eleMap[this.subFrameConf.id], t = !this.subFrame, this.subFrame && (this.subFrame.moving = !0), 
this.subFrame = this.container.insertBefore({
child: this.subFrameConf
}), delete this.subFrame.moving, t && Client.mainFrame.wep?.commandList?.realizeViewCommandsets(this.parentIdfView), 
delete this.subFrameConf) : delete this.subFrame, Client.Widget.updateObject(this.control, {
visible: e
});
}, Client.IdfControl.prototype.adjustCombo = function() {
this.control.positionCombo = () => {
Client.IonAutoComplete.prototype.positionCombo.call(this.control);
var e = this.container.getRootObject(), t = e.getBoundingClientRect(), e = -1 !== e.className.indexOf("panel-list-col"), i = t.left + (e ? -1 : 1), e = t.width + (e ? 20 : 18), n = this.control.comboObj.getBoundingClientRect();
let s = n.top;
if (this.control.isComboUp() && (s = t.top - n.height), s += t.top > n.top ? 1 : -2, 
this.control.comboObj.style.top = s + "px", this.control.comboObj.style.left = i + "px", 
this.control.comboObj.style.width = 0 < t.width ? "auto" : "0px", this.control.comboObj.style.minWidth = e + "px", 
(void 0 !== this.backColor || void 0 !== this.color || void 0 !== this.fontModifiers) && this.control.comboObj.children[0] && this.control.comboObj.children[0].children[0]) {
var o, l = this.control.comboObj.children[0].children[0];
for (let e = 0; e < l.children.length; e++) void 0 !== this.backColor && (l.children[e].style.backgroundColor = this.backColor), 
void 0 !== this.color && (l.children[e].style.color = this.color), void 0 !== this.fontModifiers && ((o = Client.IdfVisualStyle.getFont(this.fontModifiers, !0)).style && (l.children[e].style.fontStyle = o.style), 
o.weight && (l.children[e].style.fontWeight = o.weight), o.decoration) && (l.children[e].style.textDecoration = o.decoration);
}
}, this.control.onInputKeyUp = e => {
this.isEnabled() && Client.IonAutoComplete.prototype.onInputKeyUp.call(this.control, e);
}, this.control.onInputKeyDown = e => {
var t = e.keyCode;
(40 !== t && 38 !== t || this.isComboOpen()) && this.isEnabled() && Client.IonAutoComplete.prototype.onInputKeyDown.call(this.control, e);
}, this.control.closeCombo = e => {
Client.IonAutoComplete.prototype.closeCombo.call(this.control), e || (e = this.parentWidget.onEvent({
id: "chgProp",
obj: this.id,
content: {
name: "value",
value: this.control.value ?? ""
}
}), Client.mainFrame.sendEvents(e)), this.isListOwner() || this.emptyComboList(!0), 
this.isNoAutoLookup() && this.updateObjects({
value: !0
});
}, Client.mainFrame.isIDF && (this.control.setValue = (e, t, i) => {
e = Client.IonAutoComplete.prototype.setValue.call(this.control, e, t, i);
return Client.mainFrame.isIDF && !this.isInQbe && (Client.Widget.updateObject(this.control, {
selectedText: this.getComboSelectedText()
}), Client.Widget.updateElementClassName(this.control, "control-icon-only", !this.isOnlyIconCombo())), 
e;
});
}, Client.IdfControl.prototype.showHTML = function() {
return this.isTextEdit() && (this.useHtml || this.isClickable() || "=" === this.getMask(void 0, !0) || Client.Widget.extractCaptionData(this.value || "").icon || Client.mainFrame.idfMobile && this.tooltip);
}, Client.IdfControl.prototype.getType = function(e) {
if (!e && void 0 !== this.currentType) return this.currentType;
if (this.editorType === Client.IdfField.editorTypes.HTMLEDITOR && !this.isInQbe) return Client.IdfField.controlTypes.HTMLEDITOR;
if (this.dataType === Client.IdfField.dataTypes.BLOB && !this.isInQbe) return Client.IdfField.controlTypes.BLOB;
if (this.customElement) return Client.IdfField.controlTypes.CUSTOM;
let t = this.type;
switch (t) {
case Client.IdfField.controlTypes.AUTO:
t = Client.mainFrame.isIDF || 2 !== this.valueList?.items.length ? this.valueList || Client.mainFrame.isIDF && !this.isListOwner() ? Client.IdfField.controlTypes.COMBO : Client.IdfField.controlTypes.EDIT : Client.IdfField.controlTypes.CHECK;
break;

case Client.IdfField.controlTypes.OPTION:
case Client.IdfField.controlTypes.CHECK:
this.valueList || (t = Client.IdfField.controlTypes.EDIT);
break;

case Client.IdfField.controlTypes.BLOB:
case Client.IdfField.controlTypes.BUTTON:
case Client.IdfField.controlTypes.HTMLEDITOR:
case Client.IdfField.controlTypes.CUSTOM:
this.forceEditType && (this.isInQbe || t === Client.IdfField.controlTypes.BUTTON) && (t = Client.IdfField.controlTypes.EDIT);
}
return t;
}, Client.IdfControl.prototype.isActivatorVisible = function() {
if (this.getActivatorImage() && (this.isEnabled() || Client.mainFrame.wep?.showDisabledIcons || this.canActivate && this.activableDisabled)) return !0;
}, Client.IdfControl.prototype.getActivatorImage = function(e) {
if (!e && void 0 !== this.currentActivatorImage) return this.currentActivatorImage;
var e = this.getType(), t = this.isEnabled();
if (this.isInQbe && this.dataType === Client.IdfField.dataTypes.BLOB || e === Client.IdfField.controlTypes.CHECK) return "";
if (this.isRowQbe) return t ? "funnel" : "";
if (this.isOnlyIconCombo() && !t) return "";
if (-1 === [ Client.IdfField.controlTypes.EDIT, Client.IdfField.controlTypes.COMBO ].indexOf(e)) return "";
if (null !== this.activatorWidth && this.activatorWidth <= 0) return "";
if (this.activatorImage) return this.activatorImage;
if (this.isCombo() && (!Client.mainFrame.isIDF || !this.canActivate || this.isNoAutoLookup() || Client.mainFrame.wep?.showSmartLookupIcon && this.comboType)) return "arrow-dropdown";
if (Client.IdfField.isDateOrTime(this.dataType) && !this.canActivate) {
if (Client.IdfField.isDate(this.dataType)) return "calendar";
if (this.dataType === Client.IdfField.dataTypes.TIME) return this.isInQbe ? "" : "time";
}
return this.canActivate && Client.mainFrame.isIDF && !this.forceEditType ? "more" : "";
}, Client.IdfControl.prototype.getActivatorPosition = function() {
let t = "right";
if (!Client.mainFrame.wep?.rightAlignedIcons && !this.isRowQbe && !this.isCombo()) {
let e = this.getAlignment();
(e = e === Client.IdfVisualStyle.alignments.AUTO ? Client.IdfField.isNumeric(this.dataType) ? Client.IdfVisualStyle.alignments.RIGHT : Client.IdfVisualStyle.alignments.LEFT : e) === Client.IdfVisualStyle.alignments.RIGHT && (t = "left");
}
return t;
}, Client.IdfControl.prototype.getAlignment = function(e) {
return e || void 0 === this.currentAlignment ? -1 !== this.alignment ? this.alignment : Client.IdfVisualStyle.getByIndex(this.visualStyle).getAlignment() : this.currentAlignment;
}, Client.IdfControl.prototype.getImageResizeModeClass = function() {
let e = "";
switch (this.imageResizeMode) {
case Client.IdfControl.stretches.FILL:
e = "control-blob-img-fill";
break;

case Client.IdfControl.stretches.ENLARGE:
e = "control-blob-img-enlarge";
break;

case Client.IdfControl.stretches.CROP:
e = "control-blob-img-crop";
break;

case Client.IdfControl.stretches.REPEAT:
e = "control-blob-img-repeat";
break;

case Client.IdfControl.stretches.CENTER:
e = "control-blob-img-center";
}
return e;
}, Client.IdfControl.prototype.getMaskType = function() {
let e = "";
return this.isInQbe || (Client.IdfField.isDateOrTime(this.dataType) ? e = "D" : Client.IdfField.isNumeric(this.dataType) ? e = "N" : this.isTextEdit() && (e = "A")), 
e;
}, Client.IdfControl.prototype.getMask = function(e, t) {
if (this.isInQbe && !t) return "";
let i = this.mask || Client.IdfVisualStyle.getByIndex(this.visualStyle)?.getMask() || "";
return this.isTextEdit() && [ "=", ">", "<" ].includes(i) ? i : (i = i || Client.IdfControl.getDefaultMask(this), 
e && (i = (i = i.toUpperCase()).replace("NN", "mm")), (this.maskPrefix || "") + Client.IdfControl.adaptMask(i, this));
}, Client.IdfControl.adaptMask = function(s, e) {
if (s) if (Client.IdfField.isNumeric(e.dataType)) {
if (e.dataType !== Client.IdfField.dataTypes.FLOAT) {
let t = s.lastIndexOf("."), i = e.scale, n = (e.dataType === Client.IdfField.dataTypes.CURRENCY && (i = s.length - t - 1), 
e.dataType === Client.IdfField.dataTypes.INTEGER && (i = 0), e.maxLength - i);
if (0 < n) for (let e = (t = -1 === t ? s.length : t) - 1; 0 <= e; e--) {
var o = s.charAt(e);
if (("0" === o || "#" === o) && (0 === --n && 0 < e)) {
s = s.substr(e);
break;
}
}
if (-1 !== (t = s.lastIndexOf(".")) && 0 <= i) if (0 === i) s = s.substring(0, t); else for (let e = t + 1; e < s.length; e++) {
var l = s.charAt(e);
if (("0" === l || "#" === l) && 0 === --i) {
s = s.substring(0, e + 1);
break;
}
}
}
for (let e = 0; e < s.length; e++) {
var t = s.charAt(e);
if ("." === t) break;
"0" === t && (s = s.substr(0, e) + "#" + s.substring(e + 1));
}
var i = Client.mainFrame.theme.decimalSeparator || Client.mainFrame.device.numberPattern.decimal;
(Client.mainFrame.isIDF ? Client.mainFrame.wep.decimalDot : "." === i) || (i = s.lastIndexOf("."), 
s = s.replace(/,/g, "."), -1 !== i && (s = s.substr(0, i) + "," + s.substring(i + 1)));
} else Client.IdfField.isText(e.dataType) && s.length > e.maxLength && (s = s.substr(0, e.maxLength));
return s;
}, Client.IdfControl.prototype.getValueToSend = function() {
let t;
switch (this.getType()) {
case Client.IdfField.controlTypes.COMBO:
t = this.control.value, null === (t = this.isSmartLookup() && !t ? "LKENULL" : t) && (t = "");
break;

case Client.IdfField.controlTypes.CHECK:
t = "---" === this.value ? this.isRowQbe || !Client.mainFrame.isIDF ? "" : "---" : this.control.getRootObject().checked && !this.control.indeterminate ? this.isRowQbe || !Client.mainFrame.isIDF ? this.valueList.items[0].value : "on" : this.isRowQbe || !Client.mainFrame.isIDF ? this.valueList.items[1].value : "";
break;

case Client.IdfField.controlTypes.CHECKLIST:
t = [];
for (let e = 0; e < this.control.elements.length; e++) {
var i = this.control.elements[e].getRootObject();
this.control.elements[e].elements[0].getRootObject().checked && t.push(i.itemValue);
}
break;

case Client.IdfField.controlTypes.EDIT:
var e = this.getMask();
this.isRowQbe && this.valueList ? t = this.findValueListItems({
type: "name",
value: this.control.getRootObject().value
}) || this.control.getRootObject().value : Client.IdfField.isDateOrTime(this.dataType) ? !(t = t ?? this.control.domObj.value) || this.isInQbe && !t.includes("T") || (t = moment(this.getISODateTime(t)).format(this.getMask(!0))) : Client.IdfField.isNumeric(this.dataType) ? (t = this.control.domObj.value, 
Client.mainFrame.isIDF || this.isInQbe || (t = mask_unmask(t, e, this.getMaskType()))) : this.isTextEdit() ? (t = (this.useInput ? this.control.domObj : this.control.getRootObject()).value || "", 
Client.mainFrame.isIDF || this.isInQbe || !e || (t = mask_unmask(t, e, this.getMaskType()))) : t = (this.control.value ?? "").toString();
break;

default:
t = (this.control.value ?? "").toString();
}
return t;
}, Client.IdfControl.prototype.updateQbeStatus = function() {
var e = {};
this.getType() === Client.IdfField.controlTypes.COMBO && (e.multiple = this.isMultipleCombo(), 
e.nameSeparator = this.getComboNameSeparator(), e.valueSeparator = this.comboSeparator, 
e.multiple) && (delete this.control.value, e.value = this.value), Client.Widget.updateObject(this.control, e);
}, Client.IdfControl.prototype.updateFilter = function() {
var e = this.getType();
if (e === Client.IdfField.controlTypes.CHECKLIST) for (let e = 0; e < this.control.elements.length; e++) {
var t, i = this.control.elements[e];
i.getRootObject().itemValue !== this.valueList?.headers && (t = !this.filter || i.getRootObject().itemName.toLowerCase().includes(this.filter), 
Client.Widget.updateObject(i, {
visible: t
}));
}
}, Client.IdfControl.prototype.openCombo = function(e) {
e = e || "", this.control.fullCombo = !0, this.control.openCombo(e, !0), delete this.waitingForList;
}, Client.IdfControl.prototype.activateCombo = function() {
!this.control.isOpening() && this.isComboOpen() || this.isListOwner() || this.control.sendFilter(" ");
}, Client.IdfControl.prototype.emptyComboList = function(e) {
let s = this.valueList ? Object.assign({}, this.valueList) : {};
if (s.items = [], s.clientSide = !0, e && this.value && "LKENULL" !== this.value) {
e = this.value.toString().split(this.comboSeparator);
let t;
t = (Client.mainFrame.isIDF ? this.value.toString() : this.control?.lastDescription || this.value?.toString() || "").split(this.comboSeparator), 
e.forEach((i, e) => {
i = i.trim();
let n = {
name: t[e]?.trim(),
value: i
};
e = this.valueList?.items?.find(e => {
if (e.value?.toString() === i) return !0;
let t = e.name;
return (t = this.valueList.decodeColumn ? e.name.split("|")[this.valueList.decodeColumn - 1] : t) === i;
});
if (e && (n = Object.assign({}, e)), this.isNoAutoLookup()) {
n.name = n.value;
let t = this.valueList?.headers || "";
n.name = n.name.split(this.comboSeparator).map(e => (e + "|").repeat(t.split("|").length - 1) + e).join(this.comboSeparator);
}
s.items.push(n);
});
}
(this.valueList || 0 < s.items.length) && (delete this.waitingForList, e = this.control?.comboOpening, 
this.control && delete this.control.comboOpening, this.parentWidget.updateElement({
valueList: s
}), this.control) && (this.control.comboOpening = e);
}, Client.IdfControl.prototype.getComboList = function() {
var s = [];
if (this.valueList) {
let i = [], n = !1;
if (this.valueList.headers) {
n = !0;
let t = this.valueList.headers.split("|");
t.forEach((e, t) => i[t] = e.length);
for (let e = 0; e < this.valueList.items.length; e++) {
var o = this.valueList.items[e];
(t = o.name.split("|")).forEach((e, t) => {
e.length > i[t] && (i[t] = e.length);
});
}
var e = this.createComboItem({
name: this.valueList.headers,
value: this.valueList.headers,
s: "combo-header",
useHtml: n,
columnsLength: i,
fixed: !0,
unselectable: !0
});
s.push(e);
}
let t;
for (let e = 0; e < this.valueList.items.length; e++) {
var l = this.valueList.items[e], a = (l.group && l.group !== t && (a = this.createComboItem({
name: l.group,
value: l.group,
s: "combo-group-header",
useHtml: n,
unselectable: !0
}), s.push(a)), Object.assign({
useHtml: n,
columnsLength: i
}, l)), r = (Client.mainFrame.isIDF || (a.enabled = !0), this.createComboItem(a));
s.push(r), t = l.group;
}
}
return s;
}, Client.IdfControl.prototype.createComboItem = function(t) {
let e = t.name || " ", i, n;
var s;
if (!Client.Widget.extractCaptionData(e).icon || t.useHtml || t.image || ({
caption: r,
icon: s
} = Client.Widget.extractCaptionData(e), e = r, n = Client.Widget.getIconString({
icon: s,
format: "combo"
})), t.image && (n = Client.Widget.isIconImage(t.image) ? Client.Widget.getIconString({
icon: t.image,
format: "combo"
}) : (Client.mainFrame.isIDF ? "images/" : "") + t.image), t.useHtml) {
var o = e.split("|");
i = "<div class='item-html-wrapper'>";
for (let e = 0; e < o.length; e++) {
var l = e !== o.length - 1 ? 8 * t.columnsLength[e] + "px" : "auto";
i += "<div style='width:" + l + ";'>" + o[e] + "</div>";
}
i += "</div>", e = o[(this.valueList.decodeColumn ?? 1) - 1];
}
let a = t.s;
a = a || ("" === t.value || "LKENULL" === t.value ? "combo-item-empty" : t.enabled ? "combo-item" : "combo-item-disabled");
var r = {};
return r.n = e, r.v = t.value, this.isInQbe && (r.v = r.v + ""), r.rValue = t.rValue, 
r.disabled = !1 === t.enabled, r.s = a, r.src = n, r.html = i, r.fixed = t.fixed, 
r.unselectable = t.unselectable, r;
}, Client.IdfControl.prototype.getComboNameSeparator = function() {
return Client.mainFrame.isIDF ? Client.mainFrame.wep.comboNameSeparator : Client.IdfControl.nameSeparator;
}, Client.IdfControl.prototype.findValueListItems = function(e) {
let s = "";
if (this.valueList && e) {
let i = e.type || "value", n = e.value?.split(this.comboSeparator) || [];
for (let t = 0; t < n.length; t++) {
var o = this.valueList.items.find(e => e[i]?.toLowerCase().trim() === n[t]?.toLowerCase().trim());
o && (s += (0 < t ? this.comboSeparator : "") + o.value);
}
}
return s;
}, Client.IdfControl.prototype.getComboValueFromRValue = function(e) {
let n = "";
if (this.valueList && e) {
let i = e.split(Client.IdfControl.rValueSeparator);
for (let t = 0; t < i.length; t++) {
var s = this.valueList.items.find(e => e.rValue === i[t]);
s && (n += (0 < t ? this.getComboNameSeparator() : "") + s.name);
}
}
return n;
}, Client.IdfControl.prototype.getComboRValueFromValue = function(e) {
let n = "";
if (this.valueList && e) {
let i = e.split(this.comboSeparator);
for (let t = 0; t < i.length; t++) {
var s = this.valueList.items.find(e => e.value === i[t]);
s && (n += (0 < t ? Client.IdfControl.rValueSeparator : "") + s.rValue);
}
}
return n;
}, Client.IdfControl.prototype.getComboSelectedText = function() {
if (!this.isEnabled()) {
let e;
var t = Client.IdfVisualStyle.getByIndex(this.visualStyle), i = t.getShowDescriptionFlag(), t = t.getShowValueFlag(), n = this.valueList?.items.find(e => e.value === this.value);
return n ? this.isOnlyIconCombo() ? e = "" : i ? (e = n.name ?? "", this.valueList?.decodeColumn && (e = e.split("|")[this.valueList.decodeColumn - 1])) : t && (e = n.value ?? "") : e = !this.showOnlyIcon && i ? this.value : "", 
e;
}
}, Client.IdfControl.prototype.isOnlyIconCombo = function() {
var e;
if (Client.mainFrame.isIDF && this.isCombo()) return e = Client.IdfVisualStyle.getByIndex(this.visualStyle), 
this.showOnlyIcon || !e.getShowDescriptionFlag() && !e.getShowValueFlag();
}, Client.IdfControl.prototype.isMultipleCombo = function() {
return this.isInQbe && this.comboMultiSel;
}, Client.IdfControl.getDefaultMask = function(e) {
return Client.IdfField.isDateOrTime(e.dataType) ? Client.IdfControl.getDateTimeMask(e) : Client.IdfField.isNumeric(e.dataType) ? Client.IdfControl.getNumericMask(e) : "";
}, Client.IdfControl.getDateTimeMask = function(e) {
var t = Client.mainFrame.wep?.dateMask || Client.mainFrame.device.dateFormat.toLowerCase(), i = Client.mainFrame.wep?.timeMask || Client.mainFrame.device.timeFormat.toLowerCase();
let n = "";
switch (e.dataType) {
case Client.IdfField.dataTypes.DATE:
n = t;
break;

case Client.IdfField.dataTypes.TIME:
n = i;
break;

case Client.IdfField.dataTypes.DATETIME:
n = t + " " + i;
}
return n;
}, Client.IdfControl.getNumericMask = function(e) {
let t = "";
switch (e.dataType) {
case Client.IdfField.dataTypes.CURRENCY:
case Client.IdfField.dataTypes.DECIMAL:
t = Client.mainFrame.isIDF ? Client.mainFrame.wep.currencyMask : Client.mainFrame.device.currencyFormat;
break;

case Client.IdfField.dataTypes.FLOAT:
t = Client.mainFrame.isIDF ? Client.mainFrame.wep.floatMask : Client.mainFrame.device.numberFormat;
break;

case Client.IdfField.dataTypes.INTEGER:
t = "#".repeat((e.maxLength || 255) - 1) + "0";
}
return t;
}, Client.IdfControl.prototype.getISODateTime = function(e) {
let t;
return e.includes("T") || (t = this.getMask(!0, !0), this.dataType === Client.IdfField.dataTypes.TIME && (e = "1970-01-01T" + e, 
t = "YYYY/MM/DDT" + t)), moment(e, t).toISOString();
}, Client.IdfControl.prototype.handleActivatorClick = function(e) {
this.isCombo() && this.control.displayTimerId || !this.isRowQbe && "onDblclick" !== e.id && this.isEnabled() && (this.isCombo() ? this.isListOwner() && (e.content.srcEvent.preventDefault(), 
this.openCombo()) : Client.IdfField.isDateOrTime(this.dataType) && !this.canActivate && (e.content.srcEvent.preventDefault(), 
this.supportControl = Client.eleMap["control-iondatetime"] || this.createSupportControlConfig(), 
this.supportControl = this.container.insertBefore({
child: this.supportControl
}), (this.supportControl.parentWidget = this).supportControl.updateElement({
displayFormat: this.getMask(!0)
}), this.supportControl.textObj.type = this.supportControl.getInputType(), this.supportControl.updateElement({
value: this.getISODateTime(this.value)
}), Client.mainFrame.idfMobile || Client.mainFrame.device.isMobile ? this.supportControl.myClick(e.content.srcEvent, e.content.srcEvent.target) : setTimeout(() => {
this.supportControl.textObj.showPicker ? this.supportControl.textObj.showPicker() : this.supportControl.textObj.click();
}, 0)));
}, Client.IdfControl.prototype.isCombo = function() {
return this.getType() === Client.IdfField.controlTypes.COMBO;
}, Client.IdfControl.prototype.isComboOpen = function() {
return this.control.isOpen();
}, Client.IdfControl.prototype.cancelComboOpening = function() {
this.control?.cancelOpening();
}, Client.IdfControl.prototype.isTextEdit = function() {
return this.getType() === Client.IdfField.controlTypes.EDIT && (Client.IdfField.isText(this.dataType) && !this.isPassword || this.isRowQbe);
}, Client.IdfControl.prototype.invokeCustomMethods = function() {
this.customElement?.methodInvocations && (this.customElement.methodInvocations?.forEach(e => this.control[e.method].apply(this.control, e.args)), 
delete this.customElement.methodInvocations);
}, Client.IdfControl.prototype.isActivatorClick = function(e) {
if (this.activator) return Client.Utils.isMyParent(e.content?.srcEvent?.srcElement, this.activator.id);
}, Client.IdfControl.prototype.isMultiRows = function(e) {
return e || void 0 === this.currentMultiRows ? (1 < this.numRows || this.heightResize) && !this.useHtml && !this.isInQbe && (this.isTextEdit() || this.isCombo()) : this.currentMultiRows;
}, Client.IdfControl.prototype.handleFocus = function(e) {
switch (e.id) {
case "onFocusin":
if (this.isActivatorClick(e)) this.isCombo() || this.focus(); else if (this.isPassword) {
let t = !0;
for (let e = 0; e < this.value.length; e++) if ("*" !== this.value[e]) {
t = !1;
break;
}
t && this.control.updateElement({
value: ""
});
}
break;

case "onFocusout":
if (this.qbeRowTooltip && (clearTimeout(this.qbeRowTooltip), delete this.qbeRowTooltip), 
Client.Utils.findElementFromDomObj(e.content.srcEvent.relatedTarget)?.parentWidget !== this.parentWidget && delete this.lastSelection, 
this.isPassword && !this.control.value.length && this.control.updateElement({
value: this.value
}), this.isTextEdit() && !this.useInput && this.contentEditable) return this.prepareChangeEvent();
}
}, Client.IdfControl.prototype.focus = function(e) {
(e = e || {}).selectAll && (e.selectionStart = 0, e.selectionEnd = 9999), Client.Utils.findElementFromDomObj(document.activeElement)?.parentWidget !== this && void 0 === e.selectionStart && this.lastSelection && (e.selectionStart = this.lastSelection.start, 
e.selectionEnd = this.lastSelection.end), void 0 === e.selectionStart && this.isTextEdit() && this.control.getRootObject().value !== Client.Element.fakeEmptyValue && (e.selectionStart = 9999, 
e.selectionEnd = 9999), this.isEnabled() || (e.selectionEnd = e.selectionStart), 
Client.Utils.findElementFromDomObj(document.activeElement) !== this.control && this.control?.focus(e);
}, Client.IdfControl.prototype.isDraggable = function(e) {
var t = this.parentWidget instanceof Client.IdfFieldValue ? this.parentWidget?.parent : null;
return Client.mainFrame?.isEditing() ? this.parentWidget instanceof Client.IdfFieldValue && t.parent?.layout === Client.IdfPanel.layouts.form : this.parentWidget instanceof Client.IdfFieldValue && (this.parentIdfFrame.canDrag || Client.mainFrame?.isEditing()) && !this.isEnabled();
}, Client.IdfControl.prototype.canResizeW = function(e) {
return Client.mainFrame?.isEditing() && this.parentWidget instanceof Client.IdfFieldValue && this !== this.parentWidget.listControl;
}, Client.IdfControl.prototype.canResizeH = function(e) {
return Client.mainFrame?.isEditing() && this.parentWidget instanceof Client.IdfFieldValue && this !== this.parentWidget.listControl;
}, Client.IdfControl.prototype.applyDragDropCursor = function(e) {
var t = this.getRootObject();
t && Client.mainFrame?.isEditing() && (e ? (t.setAttribute("opnt", "dd"), t.style.cursor = e, 
t.classList.add("system-cursor"), t.onmouseleave || (t.onmouseleave = Client.Widget.ddClearPointer)) : t.getAttribute("opnt") && (t.style.cursor = "", 
t.setAttribute("opnt", ""), t.classList.remove("system-cursor")));
}, Client.IdfControl.prototype.acceptsDrop = function(e, t) {
return this.parentWidget instanceof Client.IdfFieldValue && (this.parentIdfFrame.canDrop || Client.mainFrame?.isEditing());
}, Client.IdfControl.prototype.handleDrop = function(e, t, i, n, s, o) {
if (Client.mainFrame?.isEditing() && (e instanceof Client.IdfControl || e instanceof Client.IdfField || e instanceof Client.IdfGroup)) {
var e = e instanceof Client.IdfControl ? e.parentWidget?.parent : e, l = this.parentWidget?.parent;
e.parent === l.parent && l.parent.handleEditOperation(Client.IdfPanel.editOperations.drag, [ e ], l, {
x: i,
y: n,
deltaX: o.deltaX,
deltaY: o.deltaY
}, s);
} else if (Client.mainFrame.isIDF && this.parentWidget?.parent?.parent.canDrop) return !0;
}, Client.IdfControl.prototype.getTransformOperationTargetObj = function(e, t) {
var i, n;
return Client.mainFrame?.isEditing() ? (n = (i = this.parentWidget?.parent)?.parent, 
e === Client.Widget.transformOperation.DRAG && n && i && n?.layout === Client.IdfPanel.layouts.list && i.inList ? Client.eleMap[n.gridColConf.id].getRootObject() : e === Client.Widget.transformOperation.DRAG && i && n?.layout === Client.IdfPanel.layouts.list && !i.inList ? Client.eleMap[i.outListContainerId].getRootObject() : e === Client.Widget.transformOperation.DRAG && i && n?.layout === Client.IdfPanel.layouts.form ? Client.eleMap[i.formContainerId].getRootObject() : (!i.formHeaderAbove || e !== Client.Widget.transformOperation.RESIZETOP && e !== Client.Widget.transformOperation.RESIZETOPLEFT && e !== Client.Widget.transformOperation.RESIZETOPRIGHT) && (i.formHeaderAbove || e !== Client.Widget.transformOperation.RESIZELEFT && e !== Client.Widget.transformOperation.RESIZETOPLEFT && e !== Client.Widget.transformOperation.RESIZEBOTTOMLEFT) ? Client.eleMap[i.formContainerId].getRootObject().parentNode : this.getRootObject()) : this.getRootObject();
}, Client.IdfControl.prototype.onTransform = function(e) {
var t;
Client.mainFrame?.isEditing() && ((t = this.parentWidget?.parent)?.parent).handleEditOperation(Client.IdfPanel.editOperations.resize, [ t ], this, e);
}, Client.IdfControl.prototype.getGritUnit = function(e) {
if (Client.mainFrame?.isEditing()) {
var t = this.parentWidget?.parent, i = t?.parent;
if (!e && (i?.layout === Client.IdfPanel.layouts.list && t.listWidthPerc || i?.layout === Client.IdfPanel.layouts.form && t.formWidthPerc)) return Client.eleMap[i.mainContainerConf.id].getRootObject().clientWidth / 100;
if (e && (i?.layout === Client.IdfPanel.layouts.list && t.listHeightPerc || i?.layout === Client.IdfPanel.layouts.form && t.formHeightPerc)) return Client.eleMap[i.mainContainerConf.id].getRootObject().clientHeight / 100;
}
return 4;
}, Client.IdfControl.prototype.getResizeTooltip = function(e, t) {
return (this.parentWidget?.parent).getResizeTooltip(e, t);
}, Client.IdfControl.prototype.clearResizeTooltip = function() {
this.parentWidget?.parent?.clearResizeTooltip();
}, Client.IdfControl.prototype.canAcceptDrop = function(e) {
return this.multiUpload || this.dataType === Client.IdfField.dataTypes.BLOB && this.uploadBlobEnabled ? "file" === e.dataTransfer.items[0].kind : this.isTextEdit() && this.isEnabled() ? "string" === e.dataTransfer.items[0].kind : void 0;
}, Client.IdfControl.prototype.prepareChangeEvent = function() {
if (this.isEnabled()) return {
id: "chgProp",
obj: this.id,
immediate: !0,
content: {
name: "value",
value: this.getValueToSend()
}
};
}, Client.IdfControl.prototype.isListOwner = function() {
return !!this.valueList?.isStatic || (Client.mainFrame.isIDF ? !this.isSmartLookup() && !this.isNoAutoLookup() : void 0);
}, Client.IdfControl.prototype.isSmartLookup = function() {
return this.comboType === Client.IdfField.comboTypes.SMARTLOOKUP;
}, Client.IdfControl.prototype.isAutoLookup = function() {
return this.comboType === Client.IdfField.comboTypes.AUTOLOOKUP;
}, Client.IdfControl.prototype.isNoAutoLookup = function() {
return this.comboType === Client.IdfField.comboTypes.NOAUTOLOOKUP;
}, Client.IdfControl.prototype.isClickable = function() {
return this.clickable && !this.forceEditType;
}, Client.IdfControl.prototype.isEnabled = function() {
return !(this.forceEditType && this.type === Client.IdfField.controlTypes.BUTTON && !this.isInQbe) && this.enabled;
}, Client || {}), Client = (Client.IdfCustomElement = function(e, t, i) {
this.events = [], this.customProps = {}, t.customElement = this, Client.Widget.call(this, e, t, i);
}, Client.IdfCustomElement.prototype = new Client.Widget(), Client.IdfCustomElement.transPropMap = {
cls: "_class",
evl: "events",
SubForm: "subFrameId"
}, Client.IdfCustomElement.excludedProps = [ "id", "c", "class", "children" ].concat(Object.keys(Client.IdfCustomElement.transPropMap).map(e => Client.IdfCustomElement.transPropMap[e])), 
Client.IdfCustomElement.convertPropValues = function(t) {
for (var i in t = t || {}) switch (i) {
case "c":
case "id":
case "children":
case Client.IdfCustomElement.transPropMap.cls:
break;

case Client.IdfCustomElement.transPropMap.evl:
t[i] = t[i].split("|");
break;

case "methodInvocations":
for (let e = 0; e < t[i].length; e++) t[i][e].args = JSON.parse(t[i][e].args);
break;

default:
t[i] = JSON.parse(t[i]);
}
}, Client.IdfCustomElement.getRequirements = function(e) {
var t = {};
return e.subFrameId || (t[`fluid/objects/${e._class}/${e._class}.js`] = {
type: "jc",
name: e._class
}), t;
}, Client.IdfCustomElement.createConfigFromXml = function(t) {
var i = {};
for (let e = 0; e < t.childNodes.length; e++) {
var n = t.childNodes[e];
"invoke" === n.nodeName && (i.methodInvocations = i.methodInvocations || [], i.methodInvocations.push({
method: n.getAttribute("met"),
args: n.getAttribute("args")
}));
}
return i;
}, Client.IdfCustomElement.prototype.createConfig = function() {
if (!Client[this._class]) return {
c: "Container"
};
var e, t = {
c: this._class,
events: this.events.slice()
};
for (e in this.customProps) t[e] = this[e];
return t;
}, Client.IdfCustomElement.prototype.updateElement = function(e) {
Client.Widget.prototype.updateElement.call(this, e);
var t, i = {};
for (t in e) Client.IdfCustomElement.excludedProps.includes(t) || (this.customProps[t] = !0, 
this[t] = e[t], i[t] = !0);
this.parent.updateControls(i);
}, Client.IdfCustomElement.prototype.onEvent = function(e) {
var t = Client.Widget.prototype.onEvent.call(this, e);
return Client.mainFrame.isIDF && ("chgProp" === e.id ? t.push({
id: "cseev",
def: Client.IdfMessagesPump.eventTypes.ACTIVE,
content: {
oid: this.id,
par1: "$ChangeProp$",
par2: JSON.stringify([ e.content.name, e.content.value ])
}
}) : this.events.includes(e.id) && t.push({
id: "cseev",
def: Client.IdfMessagesPump.eventTypes.ACTIVE,
content: {
oid: this.id,
par1: e.id,
par2: JSON.stringify(e.content)
}
})), t;
}, Client || {}), Client = (Client.IdfFrame = function(e, t, i) {
var n;
e && (this.children = e.children, e = Object.assign({
caption: "",
icon: "",
vertical: !1,
onlyContent: !this.isLeaf(),
showBorder: !1,
collapsible: !0,
collapsed: !1,
lockable: !Client.mainFrame.isIDF,
locked: !Client.mainFrame.isIDF,
visible: !0,
enabled: !0,
showToolbar: !0,
showStatusbar: !1,
showScrollbar: Client.IdfFrame.scrollbarTypes.both,
smallIcons: !1,
className: "",
canDrag: !1,
canDrop: !1,
collapseEventDef: Client.mainFrame.isIDF ? Client.IdfMessagesPump.eventTypes.ACTIVE : void 0,
mouseClickEventDef: Client.mainFrame.isIDF ? Client.IdfMessagesPump.eventTypes.CLIENTSIDE : void 0,
mouseDoubleClickEventDef: Client.mainFrame.isIDF ? Client.IdfMessagesPump.eventTypes.CLIENTSIDE : void 0,
collapseAnimationDef: Client.IdfWebEntryPoint.getAnimationDefault("frame")
}, e), this.defaultGridClass = Client.mainFrame?.wep?.defaultResponsiveClass || Client.Utils.getCSSVarValue("--default-responsive-class"), 
n = e.handledKeys, e.handledKeys = -1, t instanceof Client.IdfTab && (e.originalWidth = e.originalWidth || t.parent.originalWidth, 
e.originalHeight = e.originalHeight || t.parent.originalHeight), Client.Widget.call(this, e, t, i), 
this.handledKeys = n);
}, Client.IdfFrame.prototype = new Client.Widget(), Client.IdfFrame.transPropMap = {
ver: "vertical",
fr1: "frame1",
fr2: "frame2",
orw: "originalWidth",
orh: "originalHeight",
miw: "minWidth",
mih: "minHeight",
maw: "maxWidth",
mah: "maxHeight",
cms: "commandSet",
ocn: "onlyContent",
frb: "showBorder",
clp: "collapsible",
col: "collapsed",
lkb: "lockable",
lok: "locked",
vis: "visible",
ena: "enabled",
img: "icon",
stb: "showToolbar",
ssb: "showStatusbar",
smi: "smallIcons",
scr: "showScrollbar",
dcl: "deleteFrame",
clc: "collapseEventDef",
mck: "mouseClickEventDef",
mdk: "mouseDoubleClickEventDef",
cla: "collapseAnimationDef",
dra: "canDrag",
dro: "canDrop"
}, Client.IdfFrame.scrollbarTypes = {
none: 0,
horizontal: 1,
vertical: 2,
both: 3
}, Client.IdfFrame.createConfigFromXml = function(e) {
return {
isSubFrame: "suf" === e.nodeName
};
}, Client.IdfFrame.convertPropValues = function(e) {
for (var t in e = e || {}) switch (t) {
case Client.IdfFrame.transPropMap.ver:
case Client.IdfFrame.transPropMap.ocn:
case Client.IdfFrame.transPropMap.frb:
case Client.IdfFrame.transPropMap.clp:
case Client.IdfFrame.transPropMap.col:
case Client.IdfFrame.transPropMap.lkb:
case Client.IdfFrame.transPropMap.lok:
case Client.IdfFrame.transPropMap.vis:
case Client.IdfFrame.transPropMap.ena:
case Client.IdfFrame.transPropMap.stb:
case Client.IdfFrame.transPropMap.ssb:
case Client.IdfFrame.transPropMap.dcl:
case Client.IdfFrame.transPropMap.dra:
case Client.IdfFrame.transPropMap.dro:
e[t] = "1" === e[t];
break;

case Client.IdfFrame.transPropMap.orw:
case Client.IdfFrame.transPropMap.orh:
case Client.IdfFrame.transPropMap.miw:
case Client.IdfFrame.transPropMap.mih:
case Client.IdfFrame.transPropMap.maw:
case Client.IdfFrame.transPropMap.mah:
case Client.IdfFrame.transPropMap.clc:
case Client.IdfFrame.transPropMap.scr:
case Client.IdfFrame.transPropMap.mck:
case Client.IdfFrame.transPropMap.mdk:
e[t] = parseInt(e[t]);
}
}, Client.IdfFrame.prototype.getRootObject = function(e) {
var t = this.moving ? this.mainObjects[0] : this.mainObjects[0].elements[1];
return e ? t : t.domObj;
}, Client.IdfFrame.prototype.getResizeRootObject = function(e) {
var t = Client.eleMap[this.mainContainerConf.id];
return e ? t : t.getRootObject();
}, Client.IdfFrame.prototype.createElementsConfig = function(e) {
let t = "frame-container collapsible-container";
this.isLeaf() || (t += " wireframe"), this.isSubFrame && (t += " subframe-container"), 
this.inPreview && (t += " inpreview"), this.mainContainerConf = this.createElementConfig({
c: "Container",
className: t,
events: [ "onClick", "onDblclick", "onContextmenu", "onFocusin" ]
}), this.mainContainerConf.animations = [ {
trigger: "animation",
prop: "collapseElement",
duration: 0 === e.collapseAnimationDef.indexOf("none") ? 0 : 250
}, {
trigger: "animation",
prop: "expandElement",
duration: 0 === e.collapseAnimationDef.indexOf("none") ? 0 : 250
} ], this.createToolbarConfig(e), this.contentContainerConf = this.createElementConfig({
c: "Container",
className: "frame-content"
}), this.mainContainerConf.children.push(this.contentContainerConf);
}, Client.IdfFrame.prototype.createToolbarConfig = function(e) {
this.toolbarConf = this.createElementConfig({
c: "IonItem",
type: "header",
className: "frame-toolbar" + (this.isSubFrame ? " subframe-toolbar" : "")
}), this.mainContainerConf.children.push(this.toolbarConf), this.menuButtonConf = this.createElementConfig({
c: "IonButton",
icon: "menu",
className: "generic-btn frame-toolbar-btn frame-menu-btn",
events: [ "onClick" ],
visible: !1
}), this.toolbarConf.children.push(this.menuButtonConf), this.collapseButtonConf = this.createElementConfig({
c: "IonButton",
icon: "arrow-dropup",
className: "generic-btn frame-toolbar-btn frame-collapse-btn",
events: [ "onClick" ]
}), this.toolbarConf.children.push(this.collapseButtonConf), this.lockButtonConf = this.createElementConfig({
c: "IonButton",
icon: "lock",
className: "generic-btn frame-toolbar-btn frame-lock-btn",
events: [ "onClick" ]
}), this.toolbarConf.children.push(this.lockButtonConf), this.iconButtonConf = this.createElementConfig({
c: "IonButton",
className: "generic-btn frame-toolbar-btn frame-icon-btn"
}), this.toolbarConf.children.push(this.iconButtonConf), this.titleConf = this.createElementConfig({
c: "IonLabel",
className: "frame-title"
}), this.toolbarConf.children.push(this.titleConf), this.captionConf = this.createElementConfig({
c: "Span",
className: "frame-caption"
}), this.titleConf.children.push(this.captionConf);
}, Client.IdfFrame.prototype.realize = function(e, t, i) {
this.createElementsConfig(e), this.mainObjects.push(i.createElement(this.mainContainerConf, t, i)), 
this.mainObjects[0].getRootObject()?.setAttribute("spellcheck", "false"), this.createChildren(e);
}, Client.IdfFrame.prototype.createChildren = function(e) {
Client.Widget.prototype.createChildren.call(this, e), this.elements[0] instanceof Client.IdfCustomElement && (e = this.createElementConfig({
c: "IdfControl",
customElement: this.customElement,
container: this.getRootObject(!0)
}), this.control = this.insertBefore({
child: e
}));
}, Client.IdfFrame.prototype.updateElement = function(t) {
var e = {}, i = (Client.Widget.prototype.updateElement.call(this, t = t || {}), 
Client.eleMap[this.mainContainerConf.id]);
let n, s;
if (void 0 !== t.width && t.width === t.minWidth && t.minWidth === t.maxWidth && (t.originalWidth = t.width, 
n = !0), void 0 !== t.height && t.height === t.minHeight && t.minHeight === t.maxHeight && (t.originalHeight = t.height, 
s = !0), n || s) {
var o = getComputedStyle(this.getResizeRootObject());
let e;
n && (e = parseFloat(o.borderLeftWidth) + parseFloat(o.borderRightWidth), t.width += e, 
t.minWidth += e, t.maxWidth += e), s && (e = parseFloat(o.borderTopWidth) + parseFloat(o.borderBottomWidth), 
t.height += e, t.minHeight += e, t.maxHeight += e);
}
void 0 !== t.width && (this.width = isNaN(t.width) ? void 0 : t.width, e.calcLayout = !0), 
void 0 !== t.height && (this.height = isNaN(t.height) ? void 0 : t.height, e.calcLayout = !0), 
void 0 !== t.originalWidth && (this.originalWidth = isNaN(t.originalWidth) ? void 0 : t.originalWidth, 
e.calcLayout = !0), void 0 !== t.originalHeight && (this.originalHeight = isNaN(t.originalHeight) ? void 0 : t.originalHeight, 
e.calcLayout = !0), void 0 !== t.minWidth && (this.minWidth = isNaN(t.minWidth) ? void 0 : t.minWidth, 
e.calcLayout = !0), void 0 !== t.minHeight && (this.minHeight = isNaN(t.minHeight) ? void 0 : t.minHeight, 
e.calcLayout = !0), void 0 !== t.maxWidth && (this.maxWidth = isNaN(t.maxWidth) ? void 0 : t.maxWidth, 
e.calcLayout = !0), void 0 !== t.maxHeight && (this.maxHeight = isNaN(t.maxHeight) ? void 0 : t.maxHeight, 
e.calcLayout = !0), void 0 !== t.caption && (e.updateToolbar = !0), void 0 !== t.vertical && (this.vertical = t.vertical, 
o = Client.eleMap[this.contentContainerConf.id], Client.Widget.updateElementClassName(o, "horizontal", t.vertical), 
Client.Widget.updateElementClassName(o, "vertical", !t.vertical || !this.frame1)), 
void 0 !== t.onlyContent && (this.onlyContent = t.onlyContent, Client.eleMap[this.toolbarConf.id].updateElement({
visible: !t.onlyContent
})), void 0 !== t.showBorder && (this.showBorder = t.showBorder, Client.Widget.updateElementClassName(i, "frame-border", !this.showBorder)), 
void 0 !== t.collapsible && (this.collapsible = t.collapsible, e.updateToolbar = !0), 
void 0 !== t.collapsed && (this.setCollapsed(t.collapsed), e.updateToolbar = !0), 
void 0 !== t.lockable && (this.lockable = t.lockable, e.updateToolbar = !0), void 0 !== t.locked && (Client.Widget.updateElementClassName(i, this.locked ? "locked" : "unlocked", !0), 
this.locked = t.locked, e.updateToolbar = !0, Client.Widget.updateElementClassName(i, this.locked ? "locked" : "unlocked"), 
e.applyVisualStyle = !0), void 0 !== t.visible && (this.visible = t.visible, this.setFrameVisible(this.visible), 
this.parentIdfView?.calcLayout(), e.updateStructure = !0), void 0 !== t.enabled && (this.enabled = t.enabled), 
void 0 !== t.canDrag && (this.canDrag = t.canDrag), void 0 !== t.canDrop && (this.canDrop = t.canDrop), 
void 0 !== t.icon && (this.icon = t.icon, e.updateToolbar = !0), void 0 !== t.showToolbar && (this.showToolbar = t.showToolbar, 
e.updateToolbar = !0), void 0 !== t.showStatusbar && (this.showStatusbar = t.showStatusbar, 
e.updateToolbar = !0), void 0 !== t.smallIcons && (this.smallIcons = t.smallIcons, 
this.handleSmallIcons(), e.calcLayout = !0), void 0 !== t.showScrollbar && (Client.Widget.updateElementClassName(i, (o = [ "scroll-none", "scroll-horizontal", "scroll-vertical", "scroll-both" ])[this.showScrollbar], !0), 
this.showScrollbar = t.showScrollbar, Client.Widget.updateElementClassName(i, o[this.showScrollbar])), 
void 0 !== t.className && (Client.Widget.updateElementClassName(i, this.className, !0), 
this.gridClass && Client.Widget.updateElementClassName(i, this.gridClass, !0), this.className = t.className, 
o = Client.Widget.extractGridClasses(this.className), this.className = o.className, 
this.gridClass = o.gridClass || this.defaultGridClass, Client.Widget.updateElementClassName(i, this.className), 
this.gridClass) && Client.Widget.updateElementClassName(i, this.gridClass), void 0 !== t.collapseEventDef && (this.collapseEventDef = t.collapseEventDef), 
void 0 !== t.mouseClickEventDef && (this.mouseClickEventDef = t.mouseClickEventDef), 
void 0 !== t.mouseDoubleClickEventDef && (this.mouseDoubleClickEventDef = t.mouseDoubleClickEventDef);
var l = Object.keys(e);
for (let e = 0; e < l.length; e++) {
var a = l[e];
("calcLayout" === a || "updateStructure" === a) && this.realizing && (this.parent instanceof Client.IdfFrame || this.parent instanceof Client.IdfView) || (this[a] !== Client.IdfFrame.prototype[a] ? t[a] = !0 : this[a] && this[a]());
}
if (t.deleteFrame && this.close(!0), t.style && t.fromanim) {
var r = this.getAnimationRoot();
if ("" !== t.style) {
if ("string" == typeof t.style) try {
t.style = JSON.parse(t.style);
} catch (e) {}
for (var d = Object.keys(t.style), h = 0; h < d.length; h++) {
var c = d[h], p = t.style[c];
(p = Client.Utils.requireAbs(c) ? Client.Utils.absStyle(p) : p) && p.indexOf && 0 < p.indexOf("!important") ? r.style.setProperty(c, p.replace("!important", ""), "important") : r.style[c] = p;
}
} else r.style.cssText = "";
}
}, Client.IdfFrame.prototype.onEvent = function(e) {
var t = [];
if (e.content instanceof Array && this.customElement) t.push(...this.customElement.onEvent(e)), 
t.forEach(e => e.content.oid = this.id); else switch (t.push(...Client.Widget.prototype.onEvent.call(this, e)), 
e.id) {
case "chgProp":
this.customElement && t.push(...this.customElement.onEvent(e));
break;

case "onClick":
case "onDblclick":
case "onContextmenu":
t.push(...this.handleFrameClick(e)), "onClick" === e.id && (e.obj === this.collapseButtonConf.id && t.push(...this.handleCollapseButtonClick(e)), 
e.obj === this.menuButtonConf.id) && t.push(...this.handleMenuButtonClick(e));
break;

case "onFocusin":
e.content?.srcEvent?.target !== document.activeElement && this.focus();
}
return t;
}, Client.IdfFrame.prototype.handleCollapseButtonClick = function(e) {
var t = [], i = this.collapsed;
return (!this.events.includes("onCollapseChanging") || Client.mainFrame.isIDF && Client.IdfMessagesPump.isClientSideEvent(this.collapseEventDef)) && this.updateElement({
collapsed: !i
}), Client.mainFrame.isIDF ? t.push({
id: "col",
def: this.collapseEventDef,
content: {
oid: this.id,
obn: i ? "exp" : "col",
xck: e.content.offsetX,
yck: e.content.offsetY
}
}) : t.push({
id: "chgProp",
obj: this.id,
content: {
name: "collapsed",
value: !i,
clid: Client.id
}
}), t;
}, Client.IdfFrame.prototype.handleMenuButtonClick = function(e) {
var t = [];
return this.parentIdfView && (this.parentIdfView.owner || this.parentIdfView.backButtonText ? t.push(...this.parentIdfView.handleCloseButtonClick()) : Client.mainFrame.wep?.commandList.toggleMenu()), 
t;
}, Client.IdfFrame.getRequirements = function(e) {
return Client.IdfView.getRequirements(e);
}, Client.IdfFrame.prototype.calcLayout = function() {
if (!this.realizing && void 0 !== this.toolbarHeight || this.calcDimensions(), Client.mainFrame.isIDF && !this.isLeaf()) {
var t = this.isFrameVisible();
if (t !== this.visible && (this.setFrameVisible(t), this.visible = t), !t) return;
}
var t = {}, e = this.onlyContent ? 0 : this.getToolbarHeight();
if (this.isSubFrame && this.parent instanceof Client.IdfPanel) t.minHeight = e + "px"; else {
var i = this.parentWidget?.parentWidget instanceof Client.IdfField && this.parentWidget.parentWidget.isStatic();
if (this.originalWidth && !i && (this.parentIdfView?.resizeWidth === Client.IdfView.resizeModes.NONE ? (t.maxWidth = this.originalWidth + "px", 
t.width = this.originalWidth + "px") : this.parentIdfView?.resizeWidth !== Client.IdfView.resizeModes.EXTEND || this.isLeaf() || (t.minWidth = this.originalWidth + "px")), 
!t.width) {
let e = 100;
this.parent.getChildPercentageWidth && (e = this.parent.getChildPercentageWidth(this.originalWidth)), 
t.width = e + "%", t.maxWidth = e + "%", !this.parent.vertical && this.parent instanceof Client.IdfFrame && (Client.eleMap[this.parent.frame1] === this ? Client.eleMap[this.parent.frame2] : Client.eleMap[this.parent.frame1])?.hasMaxWidth() && (t.maxWidth = "100%"), 
this.isLeaf() || this.vertical || !this.hasMaxWidth() || (t.maxWidth = this.getMaxWidth() + "px"), 
this.width = e * (this.parent.originalWidth || this.parent.width || this.calculatedWidth) / 100;
}
if (this.originalHeight && (this.parentIdfView?.resizeHeight === Client.IdfView.resizeModes.NONE ? (t.height = this.originalHeight + "px", 
t.maxHeight = this.originalHeight + "px") : this.parentIdfView?.resizeHeight !== Client.IdfView.resizeModes.EXTEND || this.isLeaf() || (t.minHeight = (this.originalHeight < e ? e : this.originalHeight) + "px")), 
t.minHeight || (t.minHeight = e + "px"), !t.height) {
let e = 100;
this.parent.getChildPercentageHeight && (e = this.parent.getChildPercentageHeight(this.originalHeight)), 
t.height = e + "%", this.height = e * (this.parent.height || this.calculatedHeight) / 100, 
!this.isLeaf() && !t.maxHeight && this.vertical && this.hasMaxHeight() && (t.maxHeight = this.getMaxHeight() + "px");
}
}
if (this.minWidth && (t.minWidth = this.minWidth + "px"), this.minHeight && (t.minHeight = this.minHeight + "px"), 
this.maxWidth && (t.maxWidth = this.maxWidth + "px"), this.maxHeight && (t.maxHeight = this.maxHeight + "px"), 
this.mainStyle = this.mainStyle || {}, Client.Widget.updateStyle(Client.eleMap[this.mainContainerConf.id], this.mainStyle, t), 
!(this instanceof Client.IdfPanel)) for (let e = 0; e < this.elements.length; e++) this.elements[e].calcLayout && this.elements[e].calcLayout();
}, Client.IdfFrame.prototype.getChildPercentageWidth = function(e, n) {
if (void 0 === (n = n || this.originalWidth) && (n = Client.eleMap[this.mainContainerConf.id].getRootObject().clientWidth), 
void 0 === e) if (this.vertical) e = n; else {
let t = 0, i = n;
for (let e = 0; e < this.elements.length; e++) {
var s = this.elements[e];
i -= s.width || 0, void 0 === s.width && t++;
}
e = i / t;
}
let i = 0, o = 0, t = (this.elements.forEach(e => {
var t;
e instanceof Client.IdfFrame && (t = e.isFrameVisible(), i += t ? 1 : 0, o += t ? 0 : e.originalWidth);
}), o && (e += o / i), 100);
return n && (t = e / n * 100), t = Math.min(t, 100);
}, Client.IdfFrame.prototype.getChildPercentageHeight = function(e, n) {
if (void 0 === (n = n || this.height) && (n = Client.eleMap[this.mainContainerConf.id].getRootObject().clientHeight), 
void 0 === e) if (this.vertical) {
let t = 0, i = n;
for (let e = 0; e < this.elements.length; e++) {
var s = this.elements[e].height;
i -= s || 0, void 0 === s && t++;
}
e = i / t;
} else e = n;
let i = 0, o = 0, t = (this.elements.forEach(e => {
var t;
e instanceof Client.IdfFrame && (t = e.isFrameVisible(), i += t ? 1 : 0, o += t ? 0 : e.originalHeight);
}), o && (e += o / i), 100);
return n && (t = e / n * 100), 1 === this.elements.length && (t = 100), t = Math.min(t, 100);
}, Client.IdfFrame.prototype.isLeaf = function() {
let t = !0;
var i = this.children || [];
for (let e = 0; e < i.length; e++) if (Client.Widget.isFrameClass(i[e].c) || Client.Widget.isFrameClass(i[e].class)) {
t = !1;
break;
}
return t;
}, Client.IdfFrame.prototype.getToolbarHeight = function() {
return this.toolbarHeight;
}, Client.IdfFrame.prototype.calcDimensions = function() {
var e = Client.eleMap[this.mainContainerConf.id].getRootObject(), e = (this.calculatedWidth = e.clientWidth, 
this.calculatedHeight = e.clientHeight, Client.eleMap[this.toolbarConf.id].getRootObject());
this.toolbarHeight = e.offsetHeight, 0 !== this.toolbarHeight && (e = getComputedStyle(e), 
this.toolbarHeight += (parseInt(e.marginTop) || 0) + (parseInt(e.marginBottom) || 0));
}, Client.IdfFrame.prototype.setCollapsed = function(e) {
let t = Client.eleMap[this.mainContainerConf.id];
var i;
this.minHeight && e && (i = this.onlyContent ? 0 : this.getToolbarHeight(), t.updateElement({
style: {
minHeight: i + "px"
}
})), Client.Widget.updateElementClassName(t, this.collapsed ? "collapsed" : "expanded", !0), 
this.collapsed = e, Client.Widget.updateElementClassName(t, this.collapsed ? "collapsed" : "expanded");
let n = this.realizing;
clearTimeout(this.overflowTimer), this.overflowTimer = setTimeout(() => {
this.minHeight && !e && t.updateElement({
style: {
minHeight: this.minHeight + "px"
}
}), delete this.overflowTimer, Client.eleMap[this.contentContainerConf.id].updateElement({
style: {
overflow: this.collapsed ? "hidden" : ""
}
}), n || setTimeout(() => this.parentIdfView?.onResize(), 100), this.collapsed ? this.inPreview && this.parent.removeChild(this) : this.focus({
ifJustFocused: !0
});
}, 250);
}, Client.IdfFrame.prototype.showLockButton = function() {
return this.lockable && !this.collapsed;
}, Client.IdfFrame.prototype.updateToolbar = function() {
let e = this.collapsible;
(this.parent instanceof Client.IdfTab || Client.mainFrame.idfMobile) && (e = !1);
var t = Client.eleMap[this.collapseButtonConf.id], t = (Client.Widget.updateObject(t, {
visible: e,
icon: this.collapsed ? "arrow-dropdown" : "arrow-dropup"
}), (n = this.getTooltip(this.collapseButtonConf.id))?.content !== t.tooltip?.props?.content && Client.Widget.updateObject(t, {
tooltip: n
}), Client.eleMap[this.lockButtonConf.id]), t = (Client.Widget.updateObject(t, {
visible: this.showLockButton(),
icon: this.locked ? "lock" : "unlock"
}), (n = this.getTooltip(this.lockButtonConf.id))?.content !== t.tooltip?.props?.content && Client.Widget.updateObject(t, {
tooltip: n
}), Client.eleMap[this.iconButtonConf.id]);
this.icon && (Client.Widget.setIconImage({
image: this.icon,
el: t
}), Client.Widget.updateElementClassName(t, "small", !this.smallIcons)), Client.Widget.updateObject(t, {
visible: !!this.icon && !this.collapsed
});
let i = this.caption;
this.caption && this.showStatusbar && !this.collapsed && (i += ":");
var n = Client.eleMap[this.captionConf.id];
Client.Widget.updateObject(n, {
innerHTML: this.getHTMLIcon(i)
});
}, Client.IdfFrame.prototype.handleSmallIcons = function() {
var t = Client.eleMap[this.toolbarConf.id];
Client.Widget.updateElementClassName(t, "small", !this.smallIcons);
for (let e = 0; e < t.elements.length; e++) Client.Widget.updateElementClassName(t.elements[e], "small", !this.smallIcons);
Client.Widget.updateElementClassName(Client.eleMap[this.titleConf.id], "small", !this.smallIcons), 
Client.Widget.updateElementClassName(Client.eleMap[this.captionConf.id], "small", !this.smallIcons);
}, Client.IdfFrame.prototype.getTooltip = function(e) {
var t = Client.mainFrame.wep;
let i, n, s;
switch (e) {
case this.collapseButtonConf.id:
n = this.collapsed ? (i = Client.IdfResources.t("TIP_TITLE_ShowFrame"), t?.SRV_MSG_ShowFrame || Client.IdfResources.t("SRV_MSG_ShowFrame")) : (i = Client.IdfResources.t("TIP_TITLE_HideFrame"), 
t?.SRV_MSG_HideFrame || Client.IdfResources.t("SRV_MSG_HideFrame"));
break;

case this.lockButtonConf.id:
s = Client.IdfPanel.FKLocked, n = this.locked ? (i = Client.IdfResources.t("TIP_TITLE_Unlock"), 
t?.SRV_MSG_Unlock || Client.IdfResources.t("SRV_MSG_Unlock")) : (i = Client.IdfResources.t("TIP_TITLE_Lock"), 
t?.SRV_MSG_Lock || Client.IdfResources.t("SRV_MSG_Lock"));
}
return Client.Widget.getHTMLTooltip(i, n, s);
}, Client.IdfFrame.prototype.applyVisualStyle = function() {}, Client.IdfFrame.prototype.getFrameList = function(t) {
for (let e = 0; e < this.elements.length; e++) this.elements[e] instanceof Client.IdfFrame ? (t.push(this.elements[e]), 
this.elements[e].getFrameList(t)) : this.elements[e] instanceof Client.IdfTab && this.elements[e].elements && 0 < this.elements[e].elements.length && (t.push(this.elements[e].elements[0]), 
this.elements[e].elements[0].getFrameList(t));
}, Client.IdfFrame.prototype.realizeCommandSet = function(e) {
Client.eleMap[this.toolbarConf.id].insertBefore({
child: e
});
}, Client.IdfFrame.prototype.handleFrameClick = function(i) {
var n = [];
if (double = "onDblclick" === i.id, !Client.mainFrame.isIDF || !(!double && this.mouseClickEventDef === Client.IdfMessagesPump.eventTypes.CLIENTSIDE || double && this.mouseDoubleClickEventDef === Client.IdfMessagesPump.eventTypes.CLIENTSIDE)) {
var s = i.content.srcEvent?.currentTarget;
if (Client.eleMap[this.mainContainerConf.id].getRootObject().contains(s) || s?.id === this.mainContainerConf.id) {
let e, t = i.content.srcEvent?.srcElement;
for (;t && (e = Client.eleMap[t.id]?.parentWidget) !== this && e?.parentIdfFrame !== this; ) t = t.parentNode;
s = this.getClickDetail(i, e || this);
Client.mainFrame.isIDF ? n.push({
id: "rawclk",
def: double ? this.mouseDoubleClickEventDef : this.mouseClickEventDef,
content: {
oid: this.id,
obn: double,
par1: i.content.button || 0,
par2: Math.floor(s.xb) + "-" + Math.floor(s.yb),
par3: Math.floor(s.x) + "-" + Math.floor(s.y),
par4: s.par4,
par5: s.par5
}
}) : (delete (i = {
obj: this.id,
id: "fireOnClick",
content: {
double: double,
...i.content,
...s
}
}).content.srcEvent, n.push(i));
}
}
return n;
}, Client.IdfFrame.prototype.handleFunctionKeys = function(e) {
var t = [];
return "keydown" === e.content.type && t.push(...Client.mainFrame.wep?.commandList.handleFunctionKeys(e, this.parentIdfView.index) || []), 
t;
}, Client.IdfFrame.prototype.getClickDetail = function(e, t) {
e.content = e.content || {};
e = {
xb: e.content.clientX,
yb: e.content.clientY,
x: 0,
y: 0
};
return e.x < 0 && (e.x = 0), e.y < 0 && (e.y = 0), e;
}, Client.IdfFrame.prototype.updateControls = function(e) {
if (!this.control) return !1;
e = e || {};
let t = {};
return Object.keys(e).forEach(e => t[e] = this.customElement[e]), this.control.updateElement(t), 
!0;
}, Client.IdfFrame.prototype.onResize = function(e) {
this.calcDimensions(), Client.mainFrame.sendEvents(this.handleResize()), Client.Widget.prototype.onResize.call(this, e);
}, Client.IdfFrame.prototype.handleResize = function() {
delete this.delayResize;
var t = [];
if (Client.mainFrame.isIDF && !this.inPreview) if (this.parent instanceof Client.IdfTab && !this.parent.isActiveTab()) this.delayResize = !0; else {
var i = this.getResizeRootObject(), n = getComputedStyle(i), s = parseInt(i.clientWidth) || 0;
let e = parseInt(i.clientHeight) || 0;
Client.mainFrame.wep?.realizing && (i = Client.mainFrame.wep.statusbar?.getRootObject()?.clientHeight || 0, 
e -= i);
var i = parseInt(n.paddingLeft) || 0, o = parseInt(n.paddingRight) || 0, l = parseInt(n.paddingTop) || 0, a = parseInt(n.paddingBottom) || 0, r = parseInt(n.marginLeft) || 0, d = parseInt(n.marginRight) || 0, h = parseInt(n.marginTop) || 0, n = parseInt(n.marginBottom) || 0, s = s - (i + o) - (r + d);
e = e - (l + a) - (h + n), s === this.lastWidth && e === this.lastHeight || (Client.mainFrame.isIDF && t.push({
id: "resize",
def: Client.IdfMessagesPump.eventTypes.ACTIVE,
content: {
oid: this.id,
par1: s,
par2: e
}
}), this.lastWidth = s, this.lastHeight = e, this.parent instanceof Client.IdfTab && 0 === this.originalWidth && this.updateElement({
width: s,
height: e,
originalWidth: s,
originalHeight: e
}));
}
return t;
}, Client.IdfFrame.prototype.acceptsDrop = function(e) {
return this.canDrop;
}, Client.IdfFrame.prototype.canResizeW = function(e) {
return this.isLeaf() && Client.mainFrame.wep?.resizableFrames && this.parent instanceof Client.IdfFrame && !this.parent.vertical;
}, Client.IdfFrame.prototype.canResizeH = function(e) {
return this.isLeaf() && Client.mainFrame.wep?.resizableFrames && this.parent instanceof Client.IdfFrame && this.parent.vertical;
}, Client.IdfFrame.prototype.getSupportedTransformOperation = function(e, t, i, n) {
let s = Client.Widget.prototype.getSupportedTransformOperation.call(this, e, t, i, Client.eleMap[this.mainContainerConf.id].getRootObject()), o = !1;
var l = this.parent.children || [];
for (let e = 0; e < l.length; e++) if (Client.Widget.isFrameClass(l[e].c) || Client.Widget.isFrameClass(l[e].class)) {
o = l[e].id === this.id;
break;
}
return s = (s = (s = (s = s === Client.Widget.transformOperation.RESIZETOP && o ? Client.Widget.transformOperation.NONE : s) !== Client.Widget.transformOperation.RESIZEBOTTOM || o ? s : Client.Widget.transformOperation.NONE) === Client.Widget.transformOperation.RESIZELEFT && o ? Client.Widget.transformOperation.NONE : s) !== Client.Widget.transformOperation.RESIZERIGHT || o ? s : Client.Widget.transformOperation.NONE;
}, Client.IdfFrame.prototype.getTransformOperationTargetWidget = function(e, t) {
return e !== Client.Widget.transformOperation.DRAG && this.parent instanceof Client.IdfTab ? this.parent.parent : this;
}, Client.IdfFrame.prototype.getTransformOperationTargetObj = function(e, t) {
return Client.eleMap[this.mainContainerConf.id].getRootObject();
}, Client.IdfFrame.prototype.applyDragDropCursor = function(e) {
var t = Client.eleMap[this.mainContainerConf.id].getRootObject();
e ? (t.setAttribute("opnt", "dd"), t.style.cursor = e, t.onmouseleave || (t.onmouseleave = Client.Widget.ddClearPointer)) : t.getAttribute("opnt") && (t.style.cursor = "", 
t.setAttribute("opnt", ""));
}, Client.IdfFrame.prototype.onTransform = function(e) {
if (this.parent instanceof Client.IdfFrame) {
var i = Client.eleMap[this.mainContainerConf.id].getRootObject().getBoundingClientRect(), n = e.h - i.height, n = this.originalHeight / 100 * (n / i.height * 100), e = this.originalWidth / 100 * ((e.w - i.width) / i.width * 100);
let t;
(this.parent.elements || []).forEach(e => {
!t && Client.Widget.isFrameClass(e.class) && e.id !== this.id && (t = e);
}), t && t.resizeFrame(-n, -e), this.resizeFrame(n, e), this.parentIdfView?.calcLayout();
}
}, Client.IdfFrame.prototype.resizeFrame = function(e, n) {
this.height = this.height + e, this.originalHeight = this.height, this.width = this.width + n, 
this.originalWidth = this.width;
let s = [];
if ((this.elements || []).forEach(e => {
Client.Widget.isFrameClass(e.class) && s.push(e);
}), 0 < s.length) {
let t = this.vertical ? Math.round(e / s.length) : e, i = this.vertical ? n : Math.round(n / s.length);
s.forEach(e => {
e.resizeFrame(t, i);
});
}
}, Client.IdfFrame.prototype.getAnimationRoot = function() {
return Client.eleMap[this.mainContainerConf.id].getRootObject();
}, Client.IdfFrame.prototype.close = function(e, t) {
clearTimeout(this.overflowTimer), delete this.overflowTimer, Client.Widget.prototype.close.call(this, e, t);
}, Client.IdfFrame.prototype.focus = function(e) {}, Client.IdfFrame.prototype.isFrameVisible = function() {
if (this.isLeaf() || !Client.mainFrame.isIDF) return this.visible;
let t = !1;
for (let e = 0; e < this.elements.length; e++) this.elements[e].isFrameVisible && (t = t || this.elements[e].isFrameVisible());
return t;
}, Client.IdfFrame.prototype.setFrameVisible = function(e) {
var t = Client.eleMap[this.mainContainerConf.id];
t.updateElement({
visible: e
}), t.setAttribute("frame_visible", e), this.parent instanceof Client.IdfTab && this.parent.updateElement({
visible: this.visible
});
}, Client.IdfFrame.prototype.hasMaxHeight = function() {
if (this.isLeaf()) return 0 < this.maxHeight;
let t = !0;
for (let e = 0; e < this.elements.length; e++) this.elements[e].isFrameVisible && (t = t && this.elements[e].isFrameVisible() && this.elements[e].hasMaxHeight());
return t;
}, Client.IdfFrame.prototype.getMaxHeight = function() {
if (this.isLeaf()) return this.maxHeight;
let t = 0;
for (let e = 0; e < this.elements.length; e++) this.elements[e].isFrameVisible && (this.vertical ? t += this.elements[e].isFrameVisible() ? this.elements[e].getMaxHeight() : 0 : t = Math.max(t, this.elements[e].isFrameVisible() ? this.elements[e].getMaxHeight() : 0));
return t;
}, Client.IdfFrame.prototype.hasMaxWidth = function() {
if (this.isLeaf()) return 0 < this.maxWidth;
let t = !0;
for (let e = 0; e < this.elements.length; e++) this.elements[e].isFrameVisible && (t = t && this.elements[e].isFrameVisible() && this.elements[e].hasMaxWidth());
return t;
}, Client.IdfFrame.prototype.getMaxWidth = function() {
if (this.isLeaf()) return this.maxWidth;
let t = 0;
for (let e = 0; e < this.elements.length; e++) this.elements[e].isFrameVisible && (this.vertical ? t = Math.max(t, this.elements[e].isFrameVisible() ? this.elements[e].getMaxWidth() : 0) : t += this.elements[e].isFrameVisible() ? this.elements[e].getMaxWidth() : 0);
return t;
}, Client.IdfFrame.prototype.handleDelayedUpdate = function() {
delete this.delayedUpdate;
}, Client || {}), Client = (Client.IdfMessage = function(e, t, i) {
e = Object.assign({
temporary: !0,
type: Client.IdfMessage.msgType.ERR
}, e), Client.Widget.call(this, e, t, i);
}, Client.IdfMessage.prototype = new Client.Widget(), Client.IdfMessage.transPropMap = {
cod: "code",
txt: "text",
img: "image",
typ: "type",
tem: "temporary"
}, Client.IdfMessage.msgType = {
INFO: 1,
WARN: 2,
ERR: 3
}, Client.IdfMessage.imagesMap = {
lock: "lock",
unlk: "unlock",
find: "flash"
}, Client.IdfMessage.convertPropValues = function(e) {
for (var t in e = e || {}) switch (t) {
case Client.IdfMessage.transPropMap.typ:
e[t] = parseInt(e[t]);
break;

case Client.IdfMessage.transPropMap.tem:
e[t] = "1" === e[t] || !0 === e[t];
}
}, Client.IdfMessage.prototype.createElementsConfig = function() {
this.messageContainerConf = this.createElementConfig({
c: "IonItem",
className: "view-message-container"
}), this.imageContainerBoxConf = this.createElementConfig({
c: "Container",
className: "generic-btn message-image"
}), this.messageContainerConf.children.push(this.imageContainerBoxConf), this.imageContainerConf = this.createElementConfig({
c: "IonIcon",
className: ""
}), this.imageContainerBoxConf.children.push(this.imageContainerConf), this.textContainerConf = this.createElementConfig({
c: "IonLabel",
className: "message-text-container"
}), this.messageContainerConf.children.push(this.textContainerConf);
}, Client.IdfMessage.prototype.realize = function(e, t, i) {
this.createElementsConfig(e), this.mainObjects.push(i.createElement(this.messageContainerConf, t, i));
}, Client.IdfMessage.prototype.updateElement = function(n) {
if (Client.Widget.prototype.updateElement.call(this, n = n || {}), void 0 !== n.text && (this.setText(n.text), 
Client.eleMap[this.textContainerConf.id].updateElement({
innerHTML: this.text
})), void 0 !== n.type) {
this.type = n.type;
let e = "info", t = "information-circle", i = (this.type === Client.IdfMessage.msgType.WARN ? (t = "warning", 
e = "warn") : this.type === Client.IdfMessage.msgType.ERR && (t = "close-circle", 
e = "err"), Client.eleMap[this.imageContainerConf.id]);
i.updateElement({
icon: t,
className: e
}), (i = Client.eleMap[this.messageContainerConf.id]).updateElement({
className: "view-message-container " + e
});
}
void 0 !== n.image && (this.image = n.text, Client.eleMap[this.imageContainerConf.id].updateElement({
icon: this.image
})), void 0 !== n.temporary && (this.temporary = n.temporary, this.temporary) && (this.requestId = Client.mainFrame.currentRequestId);
}, Client.IdfMessage.prototype.setText = function(e) {
var t = document.createElement("div");
t.innerHTML = Client.Widget.getHTMLForCaption(e);
for (let e = 0; e < t.childNodes.length; e++) {
var i, n = t.childNodes[e];
"IMG" === n.tagName && ((i = document.createElement("ion-icon")).className = `ion-${Client.Ionic.platform}-` + Client.IdfMessage.getIconByImg(n.src), 
t.replaceChild(i, n));
}
this.text = t.outerHTML;
}, Client.IdfMessage.getIconByImg = function(t) {
var e = Object.keys(Client.IdfMessage.imagesMap).find(e => -1 !== t.indexOf(e));
return Client.IdfMessage.imagesMap[e] || "";
}, Client || {}), Client = (Client.IdfProgressDialog = function() {
this.type = Client.IdfProgressDialog.progressType.LOADING, this.id = "PROGRESS" + Math.floor(100 * Math.random()), 
this.progressTotal = -1, this.progressPresent = -1, this.canAbort = !1, this.progressMessage = "", 
this.open = !1;
}, Client.IdfProgressDialog.progressType = {
LOADING: 0,
PROGRESSBAR: 1
}, Client.IdfProgressDialog.progressCheckTime = 2e3, Client.IdfProgressDialog.prototype.show = function(e) {
this.progressMessage = e || "", this.open = !0, Client.IonHelper.setLoading({
id: this.id,
style: "progress-bar-body",
type: "loading",
message: this.progressMessage,
showSpinner: !0
}, () => {}), this.progressTimer = setTimeout(() => {
this.refreshProgressBar();
}, Client.IdfProgressDialog.progressCheckTime);
}, Client.IdfProgressDialog.prototype.close = function() {
this.open && (this.open = !1, Client.IonHelper.setLoading({
id: this.id,
dismiss: !0
}, function() {}), this.progressTimer && clearTimeout(this.progressTimer), delete this.progressTimer);
}, Client.IdfProgressDialog.prototype.refreshProgressBar = function() {
if (delete this.progressTimer, Client.idfOffline) return this.processRequestChange();
this.xmlReq = new XMLHttpRequest(), this.xmlReq.onreadystatechange = this.processRequestChange.bind(this), 
this.xmlReq.overrideMimeType && this.xmlReq.overrideMimeType("text/xml"), this.xmlReq.open("GET", `temp/${Client.mainFrame.wep.progressFile}?NOCACHE=` + Math.random(), !0), 
this.xmlReq.send("");
}, Client.IdfProgressDialog.prototype.processRequestChange = function() {
let e = !1;
if (Client.idfOffline) e = !0, Client.offlineWorker.progress && (this.progressPresent = Client.offlineWorker.progress.present, 
this.progressTotal = Client.offlineWorker.progress.total, this.canAbort = Client.offlineWorker.progress.canAbort, 
this.progressMessage = Client.offlineWorker.progress.message); else if (4 === this.xmlReq.readyState && 200 === this.xmlReq.status) try {
var t = this.xmlReq.responseXML, i = t.childNodes[t.childNodes.length - 1];
for (let e = 0; e < i.childNodes.length; e++) {
var n = i.childNodes[e];
switch (n.nodeName) {
case "PRESENT":
this.progressPresent = parseInt(n.firstChild.nodeValue);
break;

case "TOTAL":
this.progressTotal = parseInt(n.firstChild.nodeValue);
break;

case "CANABORT":
this.canAbort = "-1" === n.firstChild.nodeValue;
break;

case "MESSAGE":
this.progressMessage = n.firstChild ? n.firstChild.nodeValue : "";
}
}
e = !0;
} catch (e) {}
e && (this.type = Client.IdfProgressDialog.progressType.PROGRESSBAR, Client.IonHelper.setLoading({
id: this.id,
style: "progress-bar-body",
type: "loading",
message: this.createProgressMessage(),
showSpinner: !1,
buttons: this.canAbort ? [ {
id: "1",
text: Client.IdfResources.t("MSG_POPUP_CancelButton"),
cancel: !0
} ] : void 0
}, e => {
1 === e && this.canAbort && this.abortProgress();
}), this.progressTimer = setTimeout(() => {
this.refreshProgressBar();
}, Client.IdfProgressDialog.progressCheckTime));
}, Client.IdfProgressDialog.prototype.createProgressMessage = function() {
var e = `<div class="row-progress"><span>${this.progressMessage}</span></div>`;
let t = this.progressPresent / this.progressTotal * 100;
return 100 < t && (t %= 100), e += `<div class="row-progress"><span class='outer'><span class='inner' style='width:${t}%'></span></span></span></span></div>`;
}, Client.IdfProgressDialog.prototype.abortProgress = function() {
if (confirm(Client.IdfResources.t("DLG_DELAY_Abort"))) {
if (Client.idfOffline) try {
if (Client.Shell.useShellForSS) Client.Shell.sendSSCmd("", "SetProgress", {
aborted: !0
}); else {
var t = "SSManager", i = openDatabase(t, "", t, 5242880);
try {
i.transaction(function(e) {
e.executeSql("UPDATE Sessions SET Aborted = -1 WHERE SessionName = ''");
});
} finally {
i && i.close && i.close();
}
}
} catch (e) {
Client.writeToConsole("Error while aborting progress of main session", "error");
} else {
t = Client.mainFrame.wep.progressFile;
let e = Client.mainFrame.wep.entryPoint;
0 < e.indexOf(".aspx") && (e = "D_" + e);
i = new XMLHttpRequest();
i.open("GET", `${e}?FN=${t.substring(0, t.length - 4)}&NOCACHE=` + Math.floor(1e6 * Math.random()), !0), 
i.send("");
}
t = document.getElementById(this.id);
t && (t.getElementsByClassName("alert-button-group")[0].firstChild.disabled = "true"), 
this.progressTimer && (clearTimeout(this.progressTimer), delete this.progressTimer);
}
}, Client || {}), Client = (Client.IdfView = function(e, t, i) {
this.subFrames = [], (e = Object.assign({
resizeWidth: Client.IdfView.resizeModes.STRETCH,
resizeHeight: Client.IdfView.resizeModes.STRETCH,
visualFlags: -1,
formTop: -1,
formLeft: -1,
borderType: Client.IdfView.borderType.DEFAULT,
windowState: Client.IdfView.windowStates.NORMAL,
toolbarPosition: Client.IdfView.toolbarStatuses.LEFT,
modal: Client.IdfView.modalMode.MDI,
closeOnSelection: !1,
idfVisible: !0,
clickEventDef: Client.IdfMessagesPump?.eventTypes.ACTIVE,
clickViewListEventDef: Client.IdfMessagesPump?.eventTypes.ACTIVE,
resizeEventDef: Client.IdfMessagesPump?.eventTypes.ACTIVE,
showAnimationDef: Client.IdfWebEntryPoint?.getAnimationDefault("form"),
modalAnimationDef: Client.IdfWebEntryPoint?.getAnimationDefault("modal"),
messageAnimationDef: Client.IdfWebEntryPoint?.getAnimationDefault("message"),
lastMessageAnimDef: Client.IdfWebEntryPoint?.getAnimationDefault("lastMessage"),
previewAnimationDef: Client.IdfWebEntryPoint?.getAnimationDefault("preview"),
dockedAnimationDef: Client.IdfWebEntryPoint?.getAnimationDefault("docked"),
popupResizeAnimationDef: Client.IdfWebEntryPoint?.getAnimationDefault("popupResize")
}, e)).width || (e.width = e.children[0]?.originalWidth), e.height || (e.height = e.children[0]?.originalHeight);
var n = e.handledKeys;
e.handledKeys = -1, Client.Widget.call(this, e, t, i), this.handledKeys = n;
}, Client.IdfView.prototype = new Client.Widget(), Client.IdfView.transPropMap = {
rew: "resizeWidth",
reh: "resizeHeight",
flc: "clickViewListEventDef",
lef: "formLeft",
top: "formTop",
mod: "modal",
doc: "docked",
dot: "dockType",
tbp: "toolbarPosition",
bdt: "borderType",
vfl: "visualFlags",
wst: "windowState",
idx: "index",
bbt: "backButtonText",
own: "owner",
cls: "closeOnSelection",
sha: "showAnimationDef",
mda: "modalAnimatonDef",
mga: "messageAnimationDef",
lma: "lastMessageAnimationDef",
pra: "previewAnimationDef",
dka: "dockedAnimationDef",
ppr: "popResAnimationDef",
wcp: "webCaption",
img: "image",
pre: "frameInPreview",
vis: "idfVisible",
res: "resizeEventDef",
rlt: "relatedTo",
rlp: "relatedPosition"
}, Client.IdfView.resizeModes = {
NONE: 1,
EXTEND: 2,
STRETCH: 3
}, Client.IdfView.modalMode = {
MDI: 0,
MODAL: 1,
POPUP: 2
}, Client.IdfView.borderType = {
DEFAULT: 0,
NONE: 1,
THIN: 2,
THICK: 3
}, Client.IdfView.windowStates = {
NORMAL: 0,
MAXIMIZE: 1,
MINIMIZE: 2
}, Client.IdfView.toolbarStatuses = {
NONE: 0,
LEFT: 1,
RIGHT: 2,
DISTRIB: 3
}, Client.IdfView.dockType = {
NONE: 1,
LEFT: 2,
RIGHT: 3,
TOP: 4,
BOTTOM: 5
}, Client.IdfView.relatedPlacement = {
BELOW: 0,
ABOVE: 1
}, Client.IdfView.convertPropValues = function(e) {
for (var t in e = e || {}) switch (t) {
case Client.IdfView.transPropMap.rew:
case Client.IdfView.transPropMap.reh:
case Client.IdfView.transPropMap.flc:
case Client.IdfView.transPropMap.lef:
case Client.IdfView.transPropMap.top:
case Client.IdfView.transPropMap.dot:
case Client.IdfView.transPropMap.tbp:
case Client.IdfView.transPropMap.bdt:
case Client.IdfView.transPropMap.vfl:
case Client.IdfView.transPropMap.wst:
case Client.IdfView.transPropMap.idx:
case Client.IdfView.transPropMap.rlp:
e[t] = parseInt(e[t]);
break;

case Client.IdfView.transPropMap.mod:
e[t] = Math.abs(parseInt(e[t]));
break;

case Client.IdfView.transPropMap.cls:
case Client.IdfView.transPropMap.doc:
case Client.IdfView.transPropMap.vis:
e[t] = "1" === e[t];
}
}, Object.defineProperty(Client.IdfView.prototype, "isSubView", {
get: function() {
return !(this.parent instanceof Client.View);
}
}), Client.IdfView.prototype.getRootObject = function(e) {
var t = Client.eleMap[this.framesContainerConf.id];
return e ? t : t.domObj;
}, Client.IdfView.prototype.createElementsConfig = function() {
this.pageConf = this.createElementConfig({
c: "IonPage",
className: "view-main-container",
events: [ "onClick" ]
}), this.headerConf = this.createElementConfig({
c: "IonHeader",
className: "view-header"
}), this.pageConf.children.push(this.headerConf), this.navbarConf = this.createElementConfig({
c: "IonNavBar",
className: "view-navbar",
events: [ "onBackButton", "onMenuButton" ]
}), this.headerConf.children.push(this.navbarConf), this.messagesBoxConf = this.createElementConfig({
c: "IonToolbar",
className: "view-message-toolbar",
visible: !1
}), this.headerConf.children.push(this.messagesBoxConf), this.messagesBoxListConf = this.createElementConfig({
c: "IonList",
className: "view-message-toolbar-list"
}), this.messagesBoxConf.children.push(this.messagesBoxListConf), this.titleConf = this.createElementConfig({
c: "IonTitle",
className: "view-title"
}), this.navbarConf.children.push(this.titleConf), this.buttonsConf = this.createElementConfig({
c: "IonButtons",
className: "view-navbar-buttons"
}), this.navbarConf.children.push(this.buttonsConf), this.leftButtonsConf = this.createElementConfig({
c: "IonButtons",
className: "view-navbar-buttons",
visible: !1
}), this.navbarConf.children.push(this.leftButtonsConf), this.closeButtonConf = this.createElementConfig({
c: "IonButton",
icon: "close",
className: "view-close-button",
events: [ "onClick" ]
}), this.buttonsConf.children.push(this.closeButtonConf);
var e = this.createElementConfig({
c: "IonFooter",
className: "view-footer"
});
this.pageConf.children.push(e), this.contentConf = this.createElementConfig({
c: "IonContent",
className: "view-content"
}), this.pageConf.children.push(this.contentConf), this.framesContainerConf = this.createElementConfig({
c: "Container",
className: "frames-container"
}), this.contentConf.children.push(this.framesContainerConf);
}, Client.IdfView.prototype.realize = function(e, t, i) {
this.createElementsConfig(), this.mainObjects.push(i.createElement(this.pageConf, t, i)), 
this.createChildren(e), this.checkMobileButtons(), this.isSubView ? Client.mainFrame.isIDF && this.getMainIdfView() && Client.mainFrame.wep.commandList?.realizeViewCommandsets(this) : this.idfVisible && Client.mainFrame.wep?.soundAction(Client.IdfWebEntryPoint.soundDef.open), 
this.calcDimensions();
}, Client.IdfView.prototype.createChildren = function(n) {
if (Client.mainFrame.isIDF) {
n.frameInPreview && (n.children.forEach(e => {
e.id === n.frameInPreview && (e.inPreview = !0);
}), delete n.frameInPreview);
var e = this.elements.filter(e => e instanceof Client.IdfFrame), t = n.children.filter(e => Client.Widget.isFrameClass(e.c));
if (e.length || 1 < t.length) for (let e = n.children.length - 1; 0 <= e; e--) {
let i = n.children[e];
if (Client.Widget.isFrameClass(i.c)) {
let t = n.children.slice();
t.forEach(e => {
e.c === Client.Widget.transXmlNodeMap.tbv && t.push(...e.children);
});
var s = t.find(e => i.id === e.frame1 || i.id === e.frame2 || i.id === e.contentId);
s ? (n.children.splice(e, 1), s.children.splice(0, 0, i)) : 0 === e && !i.isSubFrame || (n.children.splice(e, 1), 
this.subFrames.splice(0, 0, i));
}
}
}
Client.Widget.prototype.createChildren.call(this, n);
}, Client.IdfView.prototype.appendChildObject = function(e, t) {
let i = this.getRootObject(!0);
if (e.parentWidget instanceof Client.IdfMessage) {
var n;
if (Client.mainFrame.idfMobile) return Client.IonHelper.createToast({}), void ((n = (n = document.getElementById("app-ui").getElementsByClassName("toast-message")) && 0 < n.length ? n.item(n.length - 1) : null) && n.appendChild(t));
i = Client.eleMap[this.messagesBoxListConf.id];
}
i instanceof Client.IonContent ? i.scrollContent.appendChild(t) : i.appendChildObject(e, t), 
i.elements.push(e), e.parent = i, e.parentWidget instanceof Client.IdfMessage && !Client.mainFrame.idfMobile && (this.posTimer && clearTimeout(this.posTimer), 
this.posTimer = setTimeout(() => {
delete this.posTimer, Client.eleMap[this.contentConf.id].positionContent();
}, 0));
}, Client.IdfView.prototype.updateElement = function(e) {
Client.Widget.prototype.updateElement.call(this, e = e || {}), void 0 !== e.visualFlags && (this.visualFlags = e.visualFlags, 
e.showCaption = 0 != (1 & this.visualFlags), e.canResize = 0 != (2 & this.visualFlags), 
e.canMove = 0 != (4 & this.visualFlags), e.showMinButton = 0 != (8 & this.visualFlags), 
e.showMaxButton = 0 != (16 & this.visualFlags), e.showCloseButton = 0 != (32 & this.visualFlags), 
e.showConfirmButton = 0 != (64 & this.visualFlags), e.showHelpButton = 0 != (128 & this.visualFlags), 
e.showDebugButton = 0 != (256 & this.visualFlags), e.showIcon = 0 != (512 & this.visualFlags), 
e.showMessages = 0 != (1024 & this.visualFlags), e.showBackButton = 0 != (2048 & this.visualFlags), 
e.showViewList = 0 != (4096 & this.visualFlags)), void 0 === e.webCaption || e.webCaption || (e.showCaption = !1);
let t = !1, i = !1, n = !1, s = !1;
for (var o in e) {
var l = e[o];
switch (o) {
case "index":
case "modal":
case "owner":
case "closeOnSelection":
case "backButtonText":
case "canMove":
case "showBackButton":
case "showViewList":
case "relatedTo":
case "relatedPosition":
case "clickViewListEventDef":
case "resizeEventDef":
case "relatedTo":
case "relatedPosition":
this[o] = l;
break;

case "visible":
this.setVisible(l);
break;

case "webCaption":
this.webCaption = l, this.setCaption(l);
break;

case "docked":
case "dockType":
case "canResize":
this[o] = l, n = !0;
break;

case "width":
case "height":
case "formTop":
case "formLeft":
this[o] = isNaN(l) ? void 0 : l, t = !0;
break;

case "resizeWidth":
case "resizeHeight":
this[o] = l, t = !0;
break;

case "className":
this.setClassName(l);
break;

case "image":
case "showIcon":
this[o] = l, s = !0;
break;

case "toolbarPosition":
this.setToolbarPosition(l);
break;

case "showCaption":
this.setShowCaption(l), i = !0;
break;

case "showMinButton":
this.setShowMinButton(l);
break;

case "showMaxButton":
this.setShowMaxButton(l);
break;

case "showCloseButton":
this.setShowCloseButton(l);
break;

case "showConfirmButton":
this.setShowConfirmButton(l);
break;

case "showHelpButton":
this.setShowHelpButton(l);
break;

case "showDebugButton":
this.setShowDebugButton(l);
break;

case "showMessages":
this.setShowMessages(l);
break;

case "borderType":
this.setBorderType(l);
break;

case "windowState":
this.setWindowState(l) && (t = !0);
}
}
"idfVisible" in e && this.setIdfVisible(e.idfVisible), t && this.calcLayout(), n && this.updateDockClasses(), 
s && this.updateIcon(), i && 0 < this.elements.length && this.checkMobileButtons();
}, Client.IdfView.prototype.calcDimensions = function() {
var e = Client.eleMap[this.framesContainerConf.id].getRootObject(), e = getComputedStyle(e);
this.framesContainerVerticalMargins = 0, this.framesContainerVerticalMargins += (parseInt(e.paddingTop) || 0) + (parseInt(e.paddingBottom) || 0), 
this.framesContainerVerticalMargins += (parseInt(e.marginTop) || 0) + (parseInt(e.marginBottom) || 0), 
this.framesContainerHorizontalMargins = 0, this.framesContainerHorizontalMargins += (parseInt(e.paddingLeft) || 0) + (parseInt(e.paddingRight) || 0), 
this.framesContainerHorizontalMargins += (parseInt(e.marginLeft) || 0) + (parseInt(e.marginRight) || 0);
}, Client.IdfView.prototype.getFramesContainerVerticalMargins = function() {
return this.framesContainerVerticalMargins || 0;
}, Client.IdfView.prototype.getFramesContainerHorizontalMargins = function() {
return this.framesContainerHorizontalMargins || 0;
}, Client.IdfView.prototype.setVisible = function(e) {
this.visible = e, Client.eleMap[this.pageConf.id].updateElement({
visible: this.visible
});
}, Client.IdfView.prototype.setCaption = function(e) {
Client.eleMap[this.titleConf.id].updateElement({
innerHTML: Client.Widget.getHTMLForCaption(e)
});
}, Client.IdfView.prototype.setClassName = function(e) {
var t = Client.eleMap[this.pageConf.id];
Client.Widget.updateElementClassName(t, this.className, !0), this.className = e, 
Client.Widget.updateElementClassName(t, this.className);
}, Client.IdfView.prototype.updateIcon = function() {
var e, t = Client.eleMap[this.navbarConf.id];
this.image && this.showIcon ? (this.imageObj || (e = this.createElementConfig({
c: "Container",
className: "view-image-ext"
}), this.imageObj = t.insertBefore({
child: e,
sib: this.titleConf.id
})), Client.Widget.isIconImage(this.image) ? (this.iconObj || (this.iconObj = this.imageObj.insertBefore({
child: this.createElementConfig({
c: "IonIcon"
})
})), this.iconObj.updateElement({
icon: this.image
}), this.imageObj.updateElement({
style: {
backgroundImage: ""
}
})) : (this.iconObj && (this.imageObj.removeChild(this.iconObj), delete this.iconObj), 
e = (Client.mainFrame.isIDF ? "images/" : "") + this.image, this.imageObj.updateElement({
style: {
backgroundImage: "url(" + e + ")"
}
}))) : this.imageObj && (t.removeChild(this.imageObj), delete this.imageObj);
}, Client.IdfView.prototype.setToolbarPosition = function(e) {
this.toolbarPosition = e;
var t = Client.eleMap[this.buttonsConf.id];
switch (this.toolbarPosition) {
case Client.IdfView.toolbarStatuses.NONE:
t.updateElement({
visible: !1
});
break;

case Client.IdfView.toolbarStatuses.LEFT:
break;

case Client.IdfView.toolbarStatuses.RIGHT:
t.updateElement({
className: "view-navbar-buttons right-buttons"
});
break;

case Client.IdfView.toolbarStatuses.DISTRIB:
t.updateElement({
className: "view-navbar-buttons right-buttons"
}), Client.eleMap[this.leftButtonsConf.id].updateElement({
visible: !0
});
}
}, Client.IdfView.prototype.setShowCaption = function(e) {
this.showCaption = e, Client.eleMap[this.navbarConf.id].updateElement({
visible: this.showCaption
}), this.showCaption || (Client.eleMap[this.contentConf.id].scrollContent.style.marginTop = 0), 
this.onResize();
}, Client.IdfView.prototype.setShowMinButton = function(e) {
this.showMinButton = e, this.minButtonConf || this.modal !== Client.IdfView.modalMode.POPUP || (this.minButtonConf = this.createElementConfig({
c: "IonButton",
icon: "remove",
className: "view-minimize-button",
events: [ "onClick" ]
}), this.createElementFromConfig(this.minButtonConf, this.buttonsConf.id)), this.minButtonConf && Client.eleMap[this.minButtonConf.id].updateElement({
visible: this.showMinButton
});
}, Client.IdfView.prototype.setShowMaxButton = function(e) {
this.showMaxButton = e, this.maxButtonConf || this.modal !== Client.IdfView.modalMode.MODAL && this.modal !== Client.IdfView.modalMode.POPUP || (this.maxButtonConf = this.createElementConfig({
c: "IonButton",
icon: "browsers",
className: "view-maximize-button",
events: [ "onClick" ]
}), this.createElementFromConfig(this.maxButtonConf, this.buttonsConf.id)), this.maxButtonConf && Client.eleMap[this.maxButtonConf.id].updateElement({
visible: this.showMaxButton
});
}, Client.IdfView.prototype.setShowCloseButton = function(e) {
this.showCloseButton = e, Client.eleMap[this.closeButtonConf.id].updateElement({
visible: this.showCloseButton
});
}, Client.IdfView.prototype.setShowConfirmButton = function(e) {
this.showConfirmButton = e, this.modal === Client.IdfView.modalMode.MODAL && (this.confirmButtonConf || (this.confirmButtonConf = this.createElementConfig({
c: "IonButton",
icon: "checkmark",
className: "view-confirm-button",
events: [ "onClick" ]
}), e = this.toolbarPosition === Client.IdfView.toolbarStatuses.DISTRIB ? this.leftButtonsConf : this.buttonsConf, 
this.createElementFromConfig(this.confirmButtonConf, e.id, !0)), Client.eleMap[this.confirmButtonConf.id].updateElement({
visible: this.showConfirmButton
}));
}, Client.IdfView.prototype.setShowHelpButton = function(e) {
this.showHelpButton = e, this.helpButtonConf || Client.mainFrame.wep?.debugType !== Client.IdfWebEntryPoint.debugTypes.HELP || this.modal !== Client.IdfView.modalMode.MODAL && this.modal !== Client.IdfView.modalMode.POPUP || (this.helpButtonConf = this.createElementConfig({
c: "IonButton",
icon: "help-circle-outline",
className: "view-confirm-button",
events: [ "onClick" ]
}), this.createElementFromConfig(this.helpButtonConf, this.buttonsConf.id)), this.helpButtonConf && Client.eleMap[this.helpButtonConf.id].updateElement({
visible: this.showHelpButton
});
}, Client.IdfView.prototype.setShowDebugButton = function(e) {
this.showDebugButton = e, this.debugButtonConf || Client.mainFrame.wep?.debugType !== Client.IdfWebEntryPoint.debugTypes.DEBUG || this.modal !== Client.IdfView.modalMode.MODAL && this.modal !== Client.IdfView.modalMode.POPUP || (this.debugButtonConf = this.createElementConfig({
c: "IonButton",
icon: "bug",
className: "view-debug-button",
events: [ "onClick" ]
}), this.createElementFromConfig(this.debugButtonConf, this.buttonsConf.id)), this.debugButtonConf && Client.eleMap[this.debugButtonConf.id].updateElement({
visible: this.showDebugButton
});
}, Client.IdfView.prototype.setShowMessages = function(e) {
this.showMessages = e, Client.eleMap[this.messagesBoxConf.id].updateElement({
visible: this.showMessages
});
}, Client.IdfView.prototype.setBorderType = function(e) {
if (this.borderType = e, this.modal) {
var t = this.parent.domObj;
switch (this.borderType) {
case Client.IdfView.borderType.NONE:
t.classList.add("modal-border-none");
break;

case Client.IdfView.borderType.THIN:
t.classList.add("modal-border-thin");
break;

case Client.IdfView.borderType.THICK:
t.classList.add("modal-border-thick");
break;

default:
t.classList.add("modal-border-default");
}
}
}, Client.IdfView.prototype.setWindowState = function(e) {
var t = this.windowState;
if (this.windowState = e, t !== this.windowState && this.modal) return (this.maxButtonConf && this.windowState === Client.IdfView.windowStates.NORMAL || this.windowState === Client.IdfView.windowStates.MAXIMIZE) && Client.eleMap[this.maxButtonConf.id].updateElement({
icon: this.windowState === Client.IdfView.windowStates.NORMAL ? "browsers" : "albums"
}), this.windowState === Client.IdfView.windowStates.MINIMIZE ? this.oldWstate = t : delete this.oldWstate, 
!0;
}, Client.IdfView.prototype.setIdfVisible = function(e) {
this.idfVisible = e, this.modal === Client.IdfView.modalMode.POPUP && this.view.dialog.updateElement({
visible: this.idfVisible
}), this.modal === Client.IdfView.modalMode.MODAL || this.isSubView || (this.idfVisible ? Client.mainFrame.wep?.commandList?.addViewOpenItem(this) : Client.mainFrame.wep?.commandList?.removeViewOpenItem(this)), 
Client.eleMap[this.pageConf.id].updateElement({
visible: this.idfVisible
}), Client.mainFrame.wep?.checkWelcomePage();
}, Client.IdfView.prototype.updateDockClasses = function() {
this.docked && Client.Widget.updateElementClassName(Client.eleMap[this.pageConf.id], "docked-view-" + Object.keys(Client.IdfView.dockType)[this.dockType - 1] + (this.canResize ? "-rs" : ""));
}, Client.IdfView.prototype.onEvent = function(e) {
var t = Client.Widget.prototype.onEvent.call(this, e);
switch (e.id) {
case "onMenuButton":
Client.mainFrame.wep?.commandList?.toggleMenu();
break;

case "onClick":
case "onBackButton":
switch ("onBackButton" === e.id && (e.obj = this.closeButtonConf.id), e.obj) {
case this.closeButtonConf.id:
case this.confirmButtonConf?.id:
t.push(...this.handleCloseButtonClick(e));
break;

case this.debugButtonConf?.id:
case this.helpButtonConf?.id:
t.push(...Client.mainFrame.wep?.handleDebugButtonClick(e) || []);
break;

case this.pageConf.id:
!this.docked && Client.mainFrame.wep && (Client.mainFrame.wep.activeView = this.getMainIdfView()?.id || Client.mainFrame.wep.activeView);
break;

case this.maxButtonConf?.id:
case this.minButtonConf?.id:
t.push(...this.handleMinMaxButtonClick(e));
}
break;

case "onKey":
t.push(...this.handleFunctionKeys(e));
}
return t;
}, Client.IdfView.prototype.handleCloseButtonClick = function(e) {
var t = [];
return Client.mainFrame.isIDF ? t.push({
id: e?.obj === this.confirmButtonConf?.id ? "confirm" : "close",
def: this.clickEventDef,
content: {
oid: this.id,
xck: e?.content.offsetX,
yck: e?.content.offsetY
}
}) : Client.mainFrame.wep?.removeChild({
id: this.view.id
}), t;
}, Client.IdfView.prototype.handleMinMaxButtonClick = function(e) {
let t;
return e.obj === this.maxButtonConf?.id && (t = this.windowState === Client.IdfView.windowStates.MAXIMIZE ? Client.IdfView.windowStates.NORMAL : Client.IdfView.windowStates.MAXIMIZE), 
e.obj === this.minButtonConf?.id && (t = Client.IdfView.windowStates.MINIMIZE), 
this.handleWindowStateChange(t);
}, Client.IdfView.prototype.handleWindowStateChange = function(e, t) {
this.updateElement({
windowState: e
});
e = [];
return t || (Client.mainFrame.isIDF ? e.push({
id: "chgwst",
def: this.clickEventDef,
content: {
oid: this.id,
par1: this.windowState
}
}) : e.push({
obj: this.id,
id: "onChangeState",
content: this.windowState
})), e;
}, Client.IdfView.prototype.handleFunctionKeys = function(e) {
var t = [];
return t.push(...Client.mainFrame.wep.commandList.handleFunctionKeys(e, this.index, -1)), 
0 < t.length || e.content.keyCode - 111 + (e.content.shiftKey ? 12 : 0) + (e.content.ctrlKey ? 24 : 0) === Client.IdfPanel.FKCloseView && (t.push(...this.handleCloseButtonClick(e)), 
e.content.srcEvent.preventDefault()), t;
}, Client.IdfView.prototype.realizeCommandSet = function(e) {
Client.eleMap[this.navbarConf.id].insertBefore({
child: e
}).updateElement({
position: "start"
});
}, Client.IdfView.prototype.calcLayout = function() {
var e = {
width: "100%",
height: "100%"
};
if (void 0 !== this.width && (this.resizeWidth === Client.IdfView.resizeModes.NONE ? (e["max-width"] = this.width + "px", 
e.width = this.width + "px") : this.resizeWidth === Client.IdfView.resizeModes.EXTEND && (e["min-width"] = this.width + "px")), 
void 0 !== this.height && (this.resizeHeight === Client.IdfView.resizeModes.NONE ? (e["max-height"] = this.height + "px", 
e.height = this.height + "px") : this.resizeHeight === Client.IdfView.resizeModes.EXTEND && (e["min-height"] = this.height + "px")), 
this.modal === Client.IdfView.modalMode.MODAL || this.modal === Client.IdfView.modalMode.POPUP) {
var t = {};
switch (this.windowState) {
case Client.IdfView.windowStates.NORMAL:
var i = Client.eleMap[this.headerConf.id], i = this.height + (this.showCaption ? i.domObj.offsetHeight : 0), n = this.width > .9 * document.body.offsetWidth ? .9 * document.body.offsetWidth : this.width, i = i > .9 * document.body.offsetHeight ? .9 * document.body.offsetHeight : i;
0 < n && (t.width = n + "px"), 0 < i && (t.height = i + "px"), -1 === this.formTop && 0 < i ? t.top = "calc(50% - (" + i + "px/2))" : 0 < this.formTop && (t.top = this.formTop + "px"), 
-1 === this.formLeft && 0 < n ? t.left = "calc(50% - (" + n + "px/2))" : t.left = this.formLeft + "px", 
this.relatedTo && (n = this.relatedTo.replace(":fv", "").replace(":lvd+", "").replace(":lc", "").replace(":fc", ""), 
n = Client.eleMap[n]?.getDomObjFromId(this.relatedTo)?.getBoundingClientRect(), 
t.top = n?.bottom + "px", t.left = n?.left + "px", this.relatedPosition === Client.IdfView.relatedPlacement.ABOVE) && 0 < n?.top - i && (t.top = n?.top - i + "px"), 
t.width && (this.parent.domObj.style.width = t.width), t.height && (this.parent.domObj.style.height = t.height), 
t.top && (this.parent.domObj.style.top = t.top), t.left && (this.parent.domObj.style.left = t.left), 
this.parent.domObj.style.opacity = "1";
break;

case Client.IdfView.windowStates.MAXIMIZE:
n = Client.mainFrame.wep?.getMDIRect();
n && (this.parent.domObj.style.opacity = "1", this.parent.domObj.style.left = n.left + "px", 
this.parent.domObj.style.top = n.top + "px", this.parent.domObj.style.width = n.width + "px", 
this.parent.domObj.style.height = n.height + "px");
break;

case Client.IdfView.windowStates.MINIMIZE:
this.parent.domObj.style.left = "0%", this.parent.domObj.style.top = "50%", this.parent.domObj.style.width = "0px", 
this.parent.domObj.style.height = "0px", this.parent.domObj.style.opacity = "0";
}
}
var s = Client.eleMap[this.framesContainerConf.id];
s && s.updateElement({
style: e
});
for (let e = 0; e < this.elements.length; e++) this.elements[e].calcLayout && this.elements[e].calcLayout();
}, Client.IdfView.prototype.getChildPercentageWidth = function(e) {
let t = this.width;
var i;
void 0 === t && (i = Client.eleMap[this.framesContainerConf.id].getRootObject(), 
t = i.clientWidth), void 0 === e && (e = t);
let n = 100;
return n = t ? e / t * 100 : n;
}, Client.IdfView.prototype.getChildPercentageHeight = function(e) {
let t = this.height;
var i;
void 0 === t && (i = Client.eleMap[this.framesContainerConf.id].getRootObject(), 
t = i.clientHeight), void 0 === e && (e = t);
let n = 100;
return t && (n = e / t * 100), n = 1 === this.elements.length ? 100 : n;
}, Client.IdfView.prototype.activate = function(e) {
this.modal === Client.IdfView.modalMode.POPUP && (Client.Widget.updateElementClassName(Client.eleMap[this.pageConf.id], "popup-inactive", !0), 
this.saveScrollbarPosition(), this.view.dialog.rootObj.parentNode.appendChild(this.view.dialog.rootObj), 
this.saveScrollbarPosition(!0));
var t, i = [];
this.modal === Client.IdfView.modalMode.POPUP && this.windowState === Client.IdfView.windowStates.MINIMIZE && (t = this.oldWstate || Client.IdfView.windowStates.NORMAL, 
i.push(...this.handleWindowStateChange(t, e))), !e && Client.mainFrame.isIDF && i.push({
id: "flclk",
def: this.clickViewListEventDef,
content: {
oid: this.id
}
}), Client.mainFrame.sendEvents(i);
}, Client.IdfView.prototype.deactivate = function() {
this.modal === Client.IdfView.modalMode.POPUP && Client.Widget.updateElementClassName(Client.eleMap[this.pageConf.id], "popup-inactive");
}, Client.IdfView.getRequirements = function(e) {
return Client.IdfWebEntryPoint.getRequirements(e);
}, Client.IdfView.prototype.getFrameList = function() {
var t = [];
for (let e = 0; e < this.elements.length; e++) this.elements[e] instanceof Client.IdfFrame && (t.push(this.elements[e]), 
this.elements[e].getFrameList(t));
for (let e = 0; e < this.subFrames.length; e++) Client.eleMap[this.subFrames[e]?.id] && (t.push(Client.eleMap[this.subFrames[e].id]), 
Client.eleMap[this.subFrames[e].id].getFrameList(t));
return t;
}, Client.IdfView.prototype.createElementFromConfig = function(e, t, i) {
t = Client.eleMap[t], e = this.view.createElement(e, t, this.view);
i && t.domObj.firstChild ? t.domObj.insertBefore(e.domObj, t.domObj.firstChild) : t.appendChildObject(e, e.domObj), 
t.elements.push(e), e.parent = t;
}, Client.IdfView.prototype.startRequest = function(t, e) {
if (!e.skipClearMessages) for (let e = 0; e < this.elements.length; e++) {
var i = this.elements[e];
i instanceof Client.IdfMessage && i.temporary && i.requestId !== t && (i.close(!0), 
this.elements.splice(e--, 1));
}
}, Client.IdfView.prototype.getSubFrame = function(t) {
return this.subFrames.find(e => e.id === t);
}, Client.IdfView.prototype.closeIdfView = function() {
Client.mainFrame.sendEvents(this.handleCloseButtonClick());
}, Client.IdfView.prototype.close = function(e, t) {
Client.mainFrame.wep?.resetTooltips({
id: this.id
}), Client.Widget.prototype.close.call(this, e, t), Client.mainFrame.isIDF && Client.mainFrame.wep?.commandList?.closeViewCommandsets(this.id, this.index <= 65536), 
!this.isSubView && this.idfVisible && Client.mainFrame.wep?.soundAction(Client.IdfWebEntryPoint.soundDef.close);
}, Client.IdfView.prototype.checkMobileButtons = function() {
if (Client.mainFrame.idfMobile && !this.docked) {
let t = !!this.backButtonText, i = !t;
if (this.owner && (i = !1, t = !0), t && !this.showBackButton && (t = !1), Client.mainFrame.wep?.commandList?.hasMainMenu() || (i = !1), 
this.showCaption) Client.eleMap[this.navbarConf.id].updateElement({
menuButton: i,
backButton: t,
backbuttonText: this.backButtonText
}); else {
var n = this.getFrameList();
for (let e = 0; e < n.length; e++) if (!(n[e] instanceof Client.IdfTab || n[e] instanceof Client.IdfTabbedView || n[e].onlyContent)) {
n[e] instanceof Client.IdfPanel && n[e].layout === Client.IdfPanel.layouts.form && n[e].hasList && (t = !1, 
i = !1), n[e] instanceof Client.IdfTree && Client.mainFrame.idfMobile && 0 !== Client.eleMap[n[e].treeContainerConf.id].selectedPage && (t = !1, 
i = !1), Client.eleMap[n[e].menuButtonConf.id].updateElement({
visible: i || t,
icon: i ? "menu" : "arrow-round-back"
});
break;
}
}
}
}, Client.IdfView.prototype.onResize = function(e) {
(Client.mainFrame?.wep.activeView === this || this.docked || this.isSubView) && Client.Widget.prototype.onResize.call(this, e), 
Client.mainFrame.isIDF && (e = Client.eleMap[this.framesContainerConf.id].getRootObject(), 
Client.mainFrame.sendEvents([ {
id: "resize",
def: this.resizeEventDef,
content: {
oid: this.id,
obn: "",
par1: e.offsetWidth,
par2: e.offsetHeight
}
} ]));
}, Client.IdfView.prototype.canResizeW = function() {
return this.canResize && (this.modal !== Client.IdfView.modalMode.MDI || this.docked && (this.dockType === Client.IdfView.dockType.LEFT || this.dockType === Client.IdfView.dockType.RIGHT));
}, Client.IdfView.prototype.canResizeH = function() {
return this.canResize && (this.modal !== Client.IdfView.modalMode.MDI || this.docked && (this.dockType === Client.IdfView.dockType.TOP || this.dockType === Client.IdfView.dockType.BOTTOM));
}, Client.IdfView.prototype.canMoveX = function() {
return this.canMove && this.modal !== Client.IdfView.modalMode.MDI;
}, Client.IdfView.prototype.canMoveY = function() {
return this.canMove && this.modal !== Client.IdfView.modalMode.MDI;
}, Client.IdfView.prototype.isMoveable = function(e) {
return this.canMove && this.modal !== Client.IdfView.modalMode.MDI && e && Client.Utils.isMyParent(e.getRootObject(), this.navbarConf.id);
}, Client.IdfView.prototype.getSupportedTransformOperation = function(e, t, i, n) {
return Client.Widget.prototype.getSupportedTransformOperation.call(this, e, t, i, this.parent.domObj);
}, Client.IdfView.prototype.getTransformOperationTargetObj = function(e, t) {
return this.parent.domObj;
}, Client.IdfView.prototype.onTransform = function(e) {
var t, i, n;
this.modal === Client.IdfView.modalMode.POPUP || this.modal === Client.IdfView.modalMode.MODAL ? (e.y < 0 && (e.y = 0), 
e.y > document.body.clientHeight - 50 && (e.y = document.body.clientHeight - 50), 
e.x < 0 && (e.x = 0), e.x > document.body.clientWidth - 50 && (e.x = document.body.clientWidth - 50), 
i = (window.getComputedStyle ? window.getComputedStyle(this.parent.domObj) : this.parent.domObj.currentStyle).borderTopWidth, 
t = (window.getComputedStyle ? window.getComputedStyle(this.parent.domObj) : this.parent.domObj.currentStyle).borderBottomWidth, 
e.h = e.h - parseInt("0" + i, 10) - parseInt("0" + t, 10), i = (window.getComputedStyle ? window.getComputedStyle(this.parent.domObj) : this.parent.domObj.currentStyle).borderLeftWidth, 
t = (window.getComputedStyle ? window.getComputedStyle(this.parent.domObj) : this.parent.domObj.currentStyle).borderRightWidth, 
e.w = e.w - parseInt("0" + i, 10) - parseInt("0" + t, 10), e.x = Math.round(e.x), 
e.y = Math.round(e.y), e.w = Math.round(e.w), e.h = Math.round(e.h), i = Client.eleMap[this.headerConf.id], 
e.h = e.h - (this.showCaption ? i.domObj.offsetHeight : 0), t = e.x !== this.formLeft || e.y !== this.formTop, 
i = e.w !== this.width || e.h !== this.height, this.parent.domObj.style.setProperty("transition", "none", "important"), 
this.updateElement({
formLeft: e.x,
formTop: e.y,
height: e.h,
width: e.w
}), this.parent.domObj.offsetHeight, this.parent.domObj.style.transition = "", n = [], 
Client.mainFrame.isIDF && (t && n.push({
id: "repos",
def: this.resizeEventDef,
content: {
oid: this.id,
obn: "",
par1: e.x,
par2: e.y
}
}), i) && n.push({
id: "resize",
def: this.resizeEventDef,
content: {
oid: this.id,
obn: "",
par1: e.w,
par2: e.h
}
}), Client.mainFrame.sendEvents(n)) : this.docked && (this.width = e.w, this.height = e.h, 
Client.mainFrame.wep.calcDockGridLayout());
}, Client.IdfView.prototype.applyDragDropCursor = function(e) {
var t = this.parent.domObj;
t && (e ? (t.setAttribute("opnt", "dd"), t.style.cursor = e, t.onmouseleave || (t.onmouseleave = Client.Widget.ddClearPointer)) : t.getAttribute("opnt") && (t.style.cursor = "", 
t.setAttribute("opnt", "")));
}, Client.IdfView.prototype.getFrameByIndex = function(t) {
return this.getFrameList().find(e => {
return parseInt(e.id.substring(e.id.indexOf(":") + 1, e.id.lastIndexOf(":"))) === t;
});
}, Client.IdfView.prototype.getAllSubViews = function() {
let t = [];
return this.getFrameList().forEach(e => {
0 === e.id.indexOf("suf:") && e.elements.length && 0 === e.elements[0]?.id?.indexOf("frm:") && t.push(e.elements[0]);
}), t.forEach(e => {
e.getAllSubViews && t.push(...e.getAllSubViews());
}), t;
}, Client.IdfView.prototype.getMainIdfView = function() {
return this.isSubView ? this.view.elements[0] : this;
}, Client.IdfView.prototype.onHardwareBackButton = function() {
for (let e = 0; e < this.elements.length; e++) {
var t = this.elements[e];
if (t instanceof Client.IdfPanel && (!(t.parent instanceof Client.IdfTab) || t.parent.isActiveTab()) && t.layout === Client.IdfPanel.layouts.form && t.locked && t.hasList && t.showFormListButton(!1)) return Client.mainFrame.sendEvents(t.onEvent({
id: "onClick",
obj: t.formListButtonConf.id
})), !0;
}
return this.showBackButton && this.backButtonText ? (Client.mainFrame.sendEvents(this.onEvent({
id: "onBackButton",
content: {
offsetX: 0,
offsetY: 0
}
})), !0) : !(this.modal === Client.IdfView.modalMode.MDI || !this.showCloseButton || !this.showCaption || (Client.mainFrame.sendEvents(this.onEvent({
id: "onClick",
obj: frame.closeButtonConf.id,
content: {
offsetX: 0,
offsetY: 0
}
})), 0));
}, Client || {}), Client = (Client.IdfVisualStyleList = function(e, t, i) {
Client.Widget.call(this, e, t, i);
}, Client.IdfVisualStyleList.prototype = new Client.Widget(), Client.IdfVisualStyleList.prototype.realize = function(e, t, i) {
Client.IdfVisualStyle.rules = [], this.createChildren(e), Client.IdfVisualStyleList.createBookBoxRule(), 
Client.IdfVisualStyle.styleSheet = document.createElement("style"), Client.IdfVisualStyle.styleSheet.type = "text/css", 
Client.IdfVisualStyle.styleSheet.id = "visual-styles", Client.IdfVisualStyle.styleSheet.textContent = Client.IdfVisualStyle.generateStyleSheet(), 
document.head.appendChild(Client.IdfVisualStyle.styleSheet);
}, Client.IdfVisualStyleList.createBookBoxRule = function() {
Client.IdfVisualStyle.rules.push({
name: ".vis-bookBox",
value: {
"margin-top": "0"
}
});
}, Client.IdfVisualStyle = function(e, t, i) {
Client.IdfVisualStyle.list = Client.IdfVisualStyle.list || [], this.index = Client.mainFrame.isIDF ? parseInt(e.id.split(":")[1]) : Client.IdfVisualStyle.list.length + 1, 
Client.IdfVisualStyle.list[this.index] = this, Client.Widget.call(this, e, t, i);
}, Client.IdfVisualStyle.prototype = new Client.Widget(), Client.IdfVisualStyle.transPropMap = {
der: "baseVisualStyle",
col1: "fieldTextColor",
col2: "fieldHeaderTextColor",
col3: "groupTextColor",
col4: "fieldBack",
col5: "altFieldBack",
col6: "panelBack",
col7: "fieldHeaderBack",
col8: "groupBack",
col9: "activeRowBack",
col10: "editingFieldBack",
col11: "fieldBorderColor",
col12: "formGroupBack",
col13: "formGroupTextColor",
col14: "qbeFieldBack",
col15: "readOnlyFieldBack",
col16: "activeRowReadOnlyFieldBack",
col17: "formFieldHeaderBack",
col18: "altReadOnlyFieldBack",
col19: "notNullFieldHeaderTextColor",
col20: "errorFieldTextColor",
col21: "warningFieldTextColor",
col22: "errorFieldBack",
col23: "warningFieldBack",
gco4: "fieldBackGradient",
gco5: "altFieldBackGradient",
gco6: "panelBackGradient",
gco7: "fieldHeaderBackGradient",
gco8: "groupBackGradient",
gco9: "activeRowBackGradient",
gco10: "editingFieldBackGradient",
gco11: "fieldBorderGradient",
gco12: "formGroupBackGradient",
gco14: "qbeFieldBackGradient",
gco15: "readOnlyFieldBackGradient",
gco16: "activeRowReadOnlyFieldBackGradient",
gco17: "formFieldHeaderBackGradient",
gco18: "altReadOnlyFieldBackGradient",
gco22: "errorFieldBackGradient",
gco23: "warningFieldBackGradient",
gdi4: "fieldBackGradientDir",
gdi5: "altFieldBackGradientDir",
gdi6: "panelBackGradientDir",
gdi7: "fieldHeaderBackGradientDir",
gdi8: "groupBackGradientDir",
gdi9: "activeRowBackGradientDir",
gdi10: "editingFieldBackGradientDir",
gdi11: "fieldBorderGradientDir",
gdi12: "formGroupBackGradientDir",
gdi14: "qbeFieldBackGradientDir",
gdi15: "readOnlyFieldBackGradientDir",
gdi16: "activeRowReadOnlyFieldBackGradientDir",
gdi17: "formFieldHeaderBackGradientDir",
gdi18: "altReadOnlyFieldBackGradientDir",
gdi22: "errorFieldBackGradientDir",
gdi23: "warningFieldBackGradientDir",
opa4: "fieldBackOpacity",
opa5: "altFieldBackOpacity",
opa6: "panelBackOpacity",
opa7: "fieldHeaderBackOpacity",
opa8: "groupBackOpacity",
opa9: "activeRowBackOpacity",
opa10: "editingFieldBackOpacity",
opa11: "fieldBorderOpacity",
opa12: "formGroupBackOpacity",
opa14: "qbeFieldBackOpacity",
opa15: "readOnlyFieldBackOpacity",
opa16: "activeRowReadOnlyFieldBackOpacity",
opa17: "formFieldHeaderBackOpacity",
opa18: "altReadOnlyFieldBackOpacity",
opa22: "errorFieldBackOpacity",
opa23: "warningFieldBackOpacity",
ali1: "fieldAlignment",
ali2: "fieldHeaderAlignment",
ali3: "formFieldHeaderAlignment",
fon1: "fieldFont",
fon2: "fieldHeaderFont",
fon3: "groupFont",
fon4: "errorFieldFont",
fon5: "warningFieldFont",
fon6: "notNullFieldHeaderFont",
fonFam1: "fieldFontFamily",
fonFam2: "fieldHeaderFontFamily",
fonFam3: "groupFontFamily",
fonFam4: "errorFieldFontFamily",
fonFam5: "warningFieldFontFamily",
fonFam6: "notNullFieldHeaderFontFamily",
fonSize1: "fieldFontSize",
fonSize2: "fieldHeaderFontSize",
fonSize3: "groupFontSize",
fonSize4: "errorFieldFontSize",
fonSize5: "warningFieldFontSize",
fonSize6: "notNullFieldHeaderFontSize",
fonSty1: "fieldFontStyle",
fonSty2: "fieldHeaderFontStyle",
fonSty3: "groupFontStyle",
fonSty4: "errorFieldFontStyle",
fonSty5: "warningFieldFontStyle",
fonSty6: "notNullFieldHeaderFontStyle",
bor1: "fieldBorderType",
bor2: "fieldHeaderBorderType",
bor3: "groupBorderType",
bor4: "formFieldHeaderBorderType",
bor5: "formGroupBorderType",
bor6: "formFieldBorderType",
ccl1: "customBorderTopColor",
ccl2: "customBorderRightColor",
ccl3: "customBorderBottomColor",
ccl4: "customBorderLeftColor",
cwd1: "customBorderTopWidth",
cwd2: "customBorderRightWidth",
cwd3: "customBorderBottomWidth",
cwd4: "customBorderLeftWidth",
cty1: "customBorderTopStyle",
cty2: "customBorderRightStyle",
cty3: "customBorderBottomStyle",
cty4: "customBorderLeftStyle",
cpd1: "customBorderTopPadding",
cpd2: "customBorderRightPadding",
cpd3: "customBorderBottomPadding",
cpd4: "customBorderLeftPadding",
msk: "mask",
con: "controlType",
cur: "cursor",
off: "rowOffset",
hof: "headerOffset",
les: "letterSpacing",
wos: "wordSpacing",
clh: "classNameHeader",
fla: "flags"
}, Client.IdfVisualStyle.selectors = {
panel: "panel",
listField: "listField",
listFieldInput: "listField input",
formField: "formField",
formFieldInput: "formField input",
readOnlyField: "readOnlyField",
activeRowField: "activeRowField",
activeRowReadOnlyField: "activeRowReadOnlyField",
altField: "altField",
altReadOnlyField: "altReadOnlyField",
altActiveRowField: "altActiveRowField",
altActiveRowReadOnlyField: "altActiveRowReadOnlyField",
editingField: "editingField",
listFieldHeader: "listFieldHeader",
formFieldHeader: "formFieldHeader",
notNullFieldHeader: "notNullFieldHeader",
qbeField: "qbeField",
errorField: "errorField",
warningField: "warningField",
listGroup: "listGroup",
formGroup: "formGroup"
}, Client.IdfVisualStyle.selectorsSchema = new Map(), Client.IdfVisualStyle.selectorsSchema.set("panel", [ Client.IdfVisualStyle.transPropMap.col6 ]), 
Client.IdfVisualStyle.selectorsSchema.set("listField", [ Client.IdfVisualStyle.transPropMap.col1, Client.IdfVisualStyle.transPropMap.col4, Client.IdfVisualStyle.transPropMap.col11, Client.IdfVisualStyle.transPropMap.ali1, Client.IdfVisualStyle.transPropMap.fon1, Client.IdfVisualStyle.transPropMap.fonFam1, Client.IdfVisualStyle.transPropMap.fonSize1, Client.IdfVisualStyle.transPropMap.fonSty1, Client.IdfVisualStyle.transPropMap.bor1, Client.IdfVisualStyle.transPropMap.msk, Client.IdfVisualStyle.transPropMap.cur, Client.IdfVisualStyle.transPropMap.off, Client.IdfVisualStyle.transPropMap.les, Client.IdfVisualStyle.transPropMap.wos ]), 
Client.IdfVisualStyle.selectorsSchema.set("listField input", [ Client.IdfVisualStyle.transPropMap.ali1, Client.IdfVisualStyle.transPropMap.les, Client.IdfVisualStyle.transPropMap.wos ]), 
Client.IdfVisualStyle.selectorsSchema.set("formField", [ Client.IdfVisualStyle.transPropMap.col1, Client.IdfVisualStyle.transPropMap.col4, Client.IdfVisualStyle.transPropMap.col11, Client.IdfVisualStyle.transPropMap.ali1, Client.IdfVisualStyle.transPropMap.fon1, Client.IdfVisualStyle.transPropMap.fonFam1, Client.IdfVisualStyle.transPropMap.fonSize1, Client.IdfVisualStyle.transPropMap.fonSty1, Client.IdfVisualStyle.transPropMap.bor6, Client.IdfVisualStyle.transPropMap.msk, Client.IdfVisualStyle.transPropMap.cur, Client.IdfVisualStyle.transPropMap.les, Client.IdfVisualStyle.transPropMap.wos ]), 
Client.IdfVisualStyle.selectorsSchema.set("formField input", [ Client.IdfVisualStyle.transPropMap.ali1, Client.IdfVisualStyle.transPropMap.les, Client.IdfVisualStyle.transPropMap.wos ]), 
Client.IdfVisualStyle.selectorsSchema.set("readOnlyField", [ Client.IdfVisualStyle.transPropMap.col15 ]), 
Client.IdfVisualStyle.selectorsSchema.set("altField", [ Client.IdfVisualStyle.transPropMap.col5 ]), 
Client.IdfVisualStyle.selectorsSchema.set("altReadOnlyField", [ Client.IdfVisualStyle.transPropMap.col18 ]), 
Client.IdfVisualStyle.selectorsSchema.set("activeRowField", [ Client.IdfVisualStyle.transPropMap.col9 ]), 
Client.IdfVisualStyle.selectorsSchema.set("activeRowReadOnlyField", [ Client.IdfVisualStyle.transPropMap.col16 ]), 
Client.IdfVisualStyle.selectorsSchema.set("altActiveRowField", [ Client.IdfVisualStyle.transPropMap.col5, Client.IdfVisualStyle.transPropMap.col9 ]), 
Client.IdfVisualStyle.selectorsSchema.set("altActiveRowReadOnlyField", [ Client.IdfVisualStyle.transPropMap.col5, Client.IdfVisualStyle.transPropMap.col16 ]), 
Client.IdfVisualStyle.selectorsSchema.set("editingField", [ Client.IdfVisualStyle.transPropMap.col10 ]), 
Client.IdfVisualStyle.selectorsSchema.set("listFieldHeader", [ Client.IdfVisualStyle.transPropMap.col2, Client.IdfVisualStyle.transPropMap.col7, Client.IdfVisualStyle.transPropMap.ali2, Client.IdfVisualStyle.transPropMap.fon2, Client.IdfVisualStyle.transPropMap.fonFam2, Client.IdfVisualStyle.transPropMap.fonSize2, Client.IdfVisualStyle.transPropMap.fonSty2, Client.IdfVisualStyle.transPropMap.bor2, Client.IdfVisualStyle.transPropMap.hof, Client.IdfVisualStyle.transPropMap.cur, Client.IdfVisualStyle.transPropMap.les, Client.IdfVisualStyle.transPropMap.wos ]), 
Client.IdfVisualStyle.selectorsSchema.set("formFieldHeader", [ Client.IdfVisualStyle.transPropMap.col17, Client.IdfVisualStyle.transPropMap.ali3, Client.IdfVisualStyle.transPropMap.fon2, Client.IdfVisualStyle.transPropMap.fonFam2, Client.IdfVisualStyle.transPropMap.fonSize2, Client.IdfVisualStyle.transPropMap.fonSty2, Client.IdfVisualStyle.transPropMap.bor4, Client.IdfVisualStyle.transPropMap.cur, Client.IdfVisualStyle.transPropMap.les, Client.IdfVisualStyle.transPropMap.wos ]), 
Client.IdfVisualStyle.selectorsSchema.set("notNullFieldHeader", [ Client.IdfVisualStyle.transPropMap.col19 ]), 
Client.IdfVisualStyle.selectorsSchema.set("qbeField", [ Client.IdfVisualStyle.transPropMap.col14 ]), 
Client.IdfVisualStyle.selectorsSchema.set("errorField", [ Client.IdfVisualStyle.transPropMap.col20, Client.IdfVisualStyle.transPropMap.col22, Client.IdfVisualStyle.transPropMap.fon4, Client.IdfVisualStyle.transPropMap.fonFam4, Client.IdfVisualStyle.transPropMap.fonSize4, Client.IdfVisualStyle.transPropMap.fonSty4 ]), 
Client.IdfVisualStyle.selectorsSchema.set("warningField", [ Client.IdfVisualStyle.transPropMap.col21, Client.IdfVisualStyle.transPropMap.col23, Client.IdfVisualStyle.transPropMap.fon5, Client.IdfVisualStyle.transPropMap.fonFam5, Client.IdfVisualStyle.transPropMap.fonSize5, Client.IdfVisualStyle.transPropMap.fonSty5 ]), 
Client.IdfVisualStyle.selectorsSchema.set("listGroup", [ Client.IdfVisualStyle.transPropMap.col3, Client.IdfVisualStyle.transPropMap.col8, Client.IdfVisualStyle.transPropMap.fon3, Client.IdfVisualStyle.transPropMap.fonFam3, Client.IdfVisualStyle.transPropMap.fonSize3, Client.IdfVisualStyle.transPropMap.fonSty3, Client.IdfVisualStyle.transPropMap.bor3 ]), 
Client.IdfVisualStyle.selectorsSchema.set("formGroup", [ Client.IdfVisualStyle.transPropMap.col12, Client.IdfVisualStyle.transPropMap.col13, Client.IdfVisualStyle.transPropMap.fon3, Client.IdfVisualStyle.transPropMap.fonFam3, Client.IdfVisualStyle.transPropMap.fonSize3, Client.IdfVisualStyle.transPropMap.fonSty3, Client.IdfVisualStyle.transPropMap.bor5 ]), 
Client.IdfVisualStyle.alignments = {
AUTO: 1,
LEFT: 2,
CENTER: 3,
RIGHT: 4,
JUSTIFY: 5,
UNSET: 6
}, Client.IdfVisualStyle.gradientDirections = {
NONE: 1,
HORIZONTAL: 2,
VERTICAL: 3
}, Client.IdfVisualStyle.borderTypes = {
NONE: 1,
HORIZONTAL: 2,
VERTICAL: 3,
FRAME: 4,
SUNKEN: 5,
RAISED: 6,
ETCHED: 7,
BUMP: 8,
CUSTOM: 9
}, Client.IdfVisualStyle.customBorderStyles = {
SOLID: 1,
DOTTED: 2,
DASHED: 3,
DOUBLE: 4
}, Client.IdfVisualStyle.convertPropValues = function(e) {
for (var t in e = e || {}) switch (t) {
case Client.IdfVisualStyle.transPropMap.ali1:
case Client.IdfVisualStyle.transPropMap.ali2:
case Client.IdfVisualStyle.transPropMap.ali3:
case Client.IdfVisualStyle.transPropMap.gdi4:
case Client.IdfVisualStyle.transPropMap.gdi5:
case Client.IdfVisualStyle.transPropMap.gdi6:
case Client.IdfVisualStyle.transPropMap.gdi7:
case Client.IdfVisualStyle.transPropMap.gdi8:
case Client.IdfVisualStyle.transPropMap.gdi9:
case Client.IdfVisualStyle.transPropMap.gdi10:
case Client.IdfVisualStyle.transPropMap.gdi11:
case Client.IdfVisualStyle.transPropMap.gdi12:
case Client.IdfVisualStyle.transPropMap.gdi14:
case Client.IdfVisualStyle.transPropMap.gdi15:
case Client.IdfVisualStyle.transPropMap.gdi16:
case Client.IdfVisualStyle.transPropMap.gdi17:
case Client.IdfVisualStyle.transPropMap.gdi18:
case Client.IdfVisualStyle.transPropMap.gdi22:
case Client.IdfVisualStyle.transPropMap.gdi23:
case Client.IdfVisualStyle.transPropMap.opa4:
case Client.IdfVisualStyle.transPropMap.opa5:
case Client.IdfVisualStyle.transPropMap.opa6:
case Client.IdfVisualStyle.transPropMap.opa7:
case Client.IdfVisualStyle.transPropMap.opa8:
case Client.IdfVisualStyle.transPropMap.opa9:
case Client.IdfVisualStyle.transPropMap.opa10:
case Client.IdfVisualStyle.transPropMap.opa11:
case Client.IdfVisualStyle.transPropMap.opa12:
case Client.IdfVisualStyle.transPropMap.opa14:
case Client.IdfVisualStyle.transPropMap.opa15:
case Client.IdfVisualStyle.transPropMap.opa16:
case Client.IdfVisualStyle.transPropMap.opa17:
case Client.IdfVisualStyle.transPropMap.opa18:
case Client.IdfVisualStyle.transPropMap.opa22:
case Client.IdfVisualStyle.transPropMap.opa23:
case Client.IdfVisualStyle.transPropMap.bor1:
case Client.IdfVisualStyle.transPropMap.bor2:
case Client.IdfVisualStyle.transPropMap.bor3:
case Client.IdfVisualStyle.transPropMap.bor4:
case Client.IdfVisualStyle.transPropMap.bor5:
case Client.IdfVisualStyle.transPropMap.bor6:
case Client.IdfVisualStyle.transPropMap.cwd1:
case Client.IdfVisualStyle.transPropMap.cwd2:
case Client.IdfVisualStyle.transPropMap.cwd3:
case Client.IdfVisualStyle.transPropMap.cwd4:
case Client.IdfVisualStyle.transPropMap.cty1:
case Client.IdfVisualStyle.transPropMap.cty2:
case Client.IdfVisualStyle.transPropMap.cty3:
case Client.IdfVisualStyle.transPropMap.cty4:
case Client.IdfVisualStyle.transPropMap.cpd1:
case Client.IdfVisualStyle.transPropMap.cpd2:
case Client.IdfVisualStyle.transPropMap.cpd3:
case Client.IdfVisualStyle.transPropMap.cpd4:
case Client.IdfVisualStyle.transPropMap.off:
case Client.IdfVisualStyle.transPropMap.hof:
case Client.IdfVisualStyle.transPropMap.les:
case Client.IdfVisualStyle.transPropMap.wos:
case Client.IdfVisualStyle.transPropMap.fla:
case Client.IdfVisualStyle.transPropMap.con:
case Client.IdfVisualStyle.transPropMap.der:
e[t] = parseInt(e[t]);
}
}, Client.IdfVisualStyle.prototype.updateElement = function(n) {
let e = !1, s;
Client.Widget.prototype.updateElement.call(this, n = n || {});
var t = Client.IdfVisualStyle.selectorsSchema.keys();
let i = t.next().value;
if (void 0 !== n.baseVisualStyle) {
for (this.baseVisualStyle = n.baseVisualStyle, s = !0; i; ) this.updateCssRule(i), 
i = t.next().value;
delete n.baseVisualStyle;
}
void 0 !== n.classNameHeader && (this.classNameHeader = n.classNameHeader, delete n.classNameHeader), 
void 0 !== n.className && (this.className = n.className, delete n.className), void 0 !== n.flags && (n.isPassword = 0 != (65536 & n.flags), 
n.isHyperLink = 0 != (2097152 & n.flags), n.showImage = 0 != (524288 & n.flags), 
n.showDescription = 0 != (262144 & n.flags), n.showValue = 0 != (131072 & n.flags), 
delete n.flags), void 0 !== n.isPassword && (this.isPassword = n.isPassword, delete n.isPassword, 
e = !0), void 0 !== n.isHyperLink && (this.isHyperLink = n.isHyperLink, delete n.isHyperLink, 
e = !0), void 0 !== n.showImage && (this.showImage = n.showImage, delete n.showImage, 
e = !0), void 0 !== n.showDescription && (this.showDescription = n.showDescription, 
delete n.showDescription, e = !0), void 0 !== n.showValue && (this.showValue = n.showValue, 
delete n.showValue, e = !0);
var o = Object.keys(n), l = Object.keys(Client.IdfVisualStyle.transPropMap), a = Object.values(Client.IdfVisualStyle.transPropMap);
for (let i = 0; i < o.length; i++) {
let t = o[i];
if (-1 !== a.indexOf(t) && void 0 !== n[t]) {
this[t] = n[t];
for (let e = 0; e < l.length; e++) if (t === Client.IdfVisualStyle.transPropMap[l[i]]) {
let e;
if (-1 !== t.indexOf("Gradient") || -1 !== t.indexOf("Opacity") ? (e = l[i].replace("gco", "col"), 
e = l[i].replace("gdi", "col"), e = l[i].replace("opa", "col")) : -1 !== t.indexOf("CustomBorder") && (e = l[i].replace("ccl", "bor"), 
e = l[i].replace("cwd", "bor"), e = l[i].replace("cty", "bor"), e = l[i].replace("cpd", "bor")), 
e) {
t = Client.IdfVisualStyle.transPropMap[e];
break;
}
}
var r = Client.IdfVisualStyle.selectorsSchema.keys();
let e = r.next().value;
for (;e; ) Client.IdfVisualStyle.selectorsSchema.get(e).includes(t) && (s = !0, 
this.updateCssRule(e)), e = r.next().value;
}
}
if (s && !this.realizing && (Client.IdfVisualStyle.styleSheet.textContent = Client.IdfVisualStyle.generateStyleSheet()), 
e) {
var d = Object.keys(Client.eleMap);
for (let e = 0; e < d.length; e++) {
var h = Client.eleMap[d[e]];
h.applyVisualStyle && h.applyVisualStyle();
}
}
}, Client.IdfVisualStyle.getByIndex = function(e) {
return Client.IdfVisualStyle.list?.[e];
}, Client.IdfVisualStyle.prototype.updateCssRule = function(t) {
var e = ".vis" + this.index + "-" + t, i = {}, n = Client.IdfVisualStyle.selectorsSchema.get(t);
for (let e = 0; e < n.length; e++) {
var s = n[e], o = this.getPropertyValue(s);
if (void 0 !== o) {
var l = this.getPropStyle(s, o, t), a = Object.keys(l);
for (let e = 0; e < a.length; e++) {
var r = a[e], d = l[r];
void 0 !== d && (i[r] = d);
}
}
}
var h = Client.IdfVisualStyle.getCssRuleIndex(e), c = Client.IdfVisualStyle.rules[h], p = 0 === Object.keys(i).length;
c || p ? c && p ? Client.IdfVisualStyle.rules.splice(h, 1) : c && !p && (c.value = i) : Client.IdfVisualStyle.rules.push({
name: e,
value: i
});
}, Client.IdfVisualStyle.getCssRuleIndex = function(t) {
if (t) return Client.IdfVisualStyle.rules.findIndex(e => e.name.toLowerCase() === t.toLowerCase());
}, Client.IdfVisualStyle.prototype.getCssClassesBySelector = function(e) {
var t = "";
return e ? t + ("vis" + this.index) + "-" + e : "";
}, Client.IdfVisualStyle.prototype.getCssClasses = function(e) {
let t = "", i;
"panel" === (e = e || {}).objType ? t = this.getCssClassesBySelector(Client.IdfVisualStyle.selectors.panel) : "fieldHeader" === e.objType ? (t = e.list ? this.getCssClassesBySelector(Client.IdfVisualStyle.selectors.listFieldHeader) : this.getCssClassesBySelector(Client.IdfVisualStyle.selectors.formFieldHeader), 
e.notNull && (t += " " + this.getCssClassesBySelector(Client.IdfVisualStyle.selectors.notNullFieldHeader)), 
(n = this.getPropertyValue(Client.IdfVisualStyle.transPropMap.clh)) && (i = !0, 
t += " " + n)) : "field" === e.objType ? (t = e.list ? this.getCssClassesBySelector(Client.IdfVisualStyle.selectors.listField) : this.getCssClassesBySelector(Client.IdfVisualStyle.selectors.formField), 
e.alternate && e.readOnly && e.activeRow ? t += " " + this.getCssClassesBySelector(Client.IdfVisualStyle.selectors.altActiveRowReadOnlyField) : e.alternate && e.readOnly ? t += " " + this.getCssClassesBySelector(Client.IdfVisualStyle.selectors.altReadOnlyField) : e.alternate && e.activeRow ? t += " " + this.getCssClassesBySelector(Client.IdfVisualStyle.selectors.altActiveRowField) : e.readOnly && e.activeRow ? t += " " + this.getCssClassesBySelector(Client.IdfVisualStyle.selectors.activeRowReadOnlyField) : e.alternate ? t += " " + this.getCssClassesBySelector(Client.IdfVisualStyle.selectors.altField) : e.readOnly ? t += " " + this.getCssClassesBySelector(Client.IdfVisualStyle.selectors.readOnlyField) : e.activeRow && (t += " " + this.getCssClassesBySelector(Client.IdfVisualStyle.selectors.activeRowField)), 
e.qbe && (t += " " + this.getCssClassesBySelector(Client.IdfVisualStyle.selectors.qbeField)), 
e.error && (t += " " + this.getCssClassesBySelector(Client.IdfVisualStyle.selectors.errorField)), 
e.warning && (t += " " + this.getCssClassesBySelector(Client.IdfVisualStyle.selectors.warningField)), 
e.bookBox && (t += " vis-bookBox")) : "group" === e.objType && (t = e.list ? this.getCssClassesBySelector(Client.IdfVisualStyle.selectors.listGroup) : this.getCssClassesBySelector(Client.IdfVisualStyle.selectors.formGroup));
var n = this.getPropertyValue(Client.Widget.transPropMap.cln);
return n && !i && (t += " " + n), t;
}, Client.IdfVisualStyle.prototype.getPropertyValue = function(e) {
if (e) return void 0 !== this[e] ? this[e] : this.baseVisualStyle ? Client.IdfVisualStyle.getByIndex(this.baseVisualStyle).getPropertyValue(e) : void 0;
}, Client.IdfVisualStyle.getTextAlign = function(e) {
let t = "";
switch (e) {
case Client.IdfVisualStyle.alignments.LEFT:
t = "left";
break;

case Client.IdfVisualStyle.alignments.CENTER:
t = "center";
break;

case Client.IdfVisualStyle.alignments.RIGHT:
t = "right";
break;

case Client.IdfVisualStyle.alignments.JUSTIFY:
t = "justify";
}
return t;
}, Client.IdfVisualStyle.getFont = function(e, t) {
var i = {};
let n = "", s = "", o = "", l = "", a = "";
var r = (e = e || "").split(","), e = (t || (n = r[0], s = r[2]), t ? e : r[1]), r = (e && (-1 !== e.indexOf("B") && (l = "bold"), 
-1 !== e.indexOf("I") && (o = "italic"), -1 !== e.indexOf("U") && (a += "underline "), 
-1 !== e.indexOf("S")) && (a += "line-through"), "vela" === Client.mainFrame.idfTheme);
return r && "Arial" === n && (n = "Inter"), r && "" === l && !t && (l = "400"), 
i.family = n, i.size = s, i.style = o, i.weight = l, i.decoration = a, i;
}, Client.IdfVisualStyle.prototype.getCustomBorderStyle = function(e) {
let t;
switch (e) {
case Client.IdfVisualStyle.customBorderStyles.SOLID:
t = "solid";
break;

case Client.IdfVisualStyle.customBorderStyles.DOTTED:
t = "dotted";
break;

case Client.IdfVisualStyle.customBorderStyles.DASHED:
t = "dashed";
break;

case Client.IdfVisualStyle.customBorderStyles.DOUBLE:
t = "double";
break;

default:
t = "solid";
}
return t;
}, Client.IdfVisualStyle.prototype.getBorder = function(e, t) {
var n = {};
switch (n.color = this.getPropertyValue(Client.IdfVisualStyle.transPropMap.col11), 
e) {
case Client.IdfVisualStyle.borderTypes.HORIZONTAL:
var i = [ Client.IdfVisualStyle.selectors.listField, Client.IdfVisualStyle.selectors.formField, Client.IdfVisualStyle.selectors.formFieldHeader ].includes(t) ? "0px" : "1px", s = t === Client.IdfVisualStyle.selectors.formGroup ? "0px" : "1px";
n.multiWidth = i + " 0px " + s + " 0px", n.style = "solid";
break;

case Client.IdfVisualStyle.borderTypes.VERTICAL:
i = t === Client.IdfVisualStyle.selectors.formGroup ? "0px" : "1px";
n.multiWidth = "0px " + i + " 0px 1px", n.style = "solid";
break;

case Client.IdfVisualStyle.borderTypes.FRAME:
n.width = 1, n.style = "solid";
break;

case Client.IdfVisualStyle.borderTypes.SUNKEN:
n.width = 2, n.style = "inset";
break;

case Client.IdfVisualStyle.borderTypes.RAISED:
n.width = 2, n.style = "outset";
break;

case Client.IdfVisualStyle.borderTypes.ETCHED:
n.width = 2, n.style = "groove";
break;

case Client.IdfVisualStyle.borderTypes.BUMP:
n.width = 2, n.style = "ridge";
break;

case Client.IdfVisualStyle.borderTypes.CUSTOM:
n.custom = {};
var o = [ "top", "right", "bottom", "left" ];
for (let i = 0; i < o.length; i++) {
let e, t;
var l, a = o[i];
n.custom[a] = n.custom[a] || {}, n.custom[a].color = this.getPropertyValue(Client.IdfVisualStyle.transPropMap["ccl" + (i + 1)]) || n.color, 
l = this.getPropertyValue(Client.IdfVisualStyle.transPropMap["cty" + (i + 1)]), 
n.custom[a].style = this.getCustomBorderStyle(l), t = void 0 === (t = this.getPropertyValue(Client.IdfVisualStyle.transPropMap["cwd" + (i + 1)])) ? 1 : t, 
e = this.getPropertyValue(Client.IdfVisualStyle.transPropMap["cpd" + (i + 1)]) || 0, 
Client.mainFrame.isIDF && (t = (t /= 4) < .25 && 0 < t ? .25 : t, e /= 4), n.custom[a].width = t, 
n.custom[a].padding = e;
}
break;

default:
n.style = "none", n.width = 0;
}
return n;
}, Client.IdfVisualStyle.prototype.getPropStyle = function(s, e, o) {
var l = {};
switch (s) {
case Client.IdfVisualStyle.transPropMap.col1:
case Client.IdfVisualStyle.transPropMap.col2:
case Client.IdfVisualStyle.transPropMap.col3:
case Client.IdfVisualStyle.transPropMap.col13:
case Client.IdfVisualStyle.transPropMap.col19:
case Client.IdfVisualStyle.transPropMap.col20:
case Client.IdfVisualStyle.transPropMap.col21:
"transparent" === e && (o === Client.IdfVisualStyle.selectors.notNullFieldHeader ? e = this.getPropertyValue(Client.IdfVisualStyle.transPropMap.col2) : o !== Client.IdfVisualStyle.selectors.errorField && o !== Client.IdfVisualStyle.selectors.warningField || (e = this.getPropertyValue(Client.IdfVisualStyle.transPropMap.col1))), 
l.color = e;
break;

case Client.IdfVisualStyle.transPropMap.col4:
case Client.IdfVisualStyle.transPropMap.col5:
case Client.IdfVisualStyle.transPropMap.col6:
case Client.IdfVisualStyle.transPropMap.col7:
case Client.IdfVisualStyle.transPropMap.col8:
case Client.IdfVisualStyle.transPropMap.col9:
case Client.IdfVisualStyle.transPropMap.col10:
case Client.IdfVisualStyle.transPropMap.col12:
case Client.IdfVisualStyle.transPropMap.col14:
case Client.IdfVisualStyle.transPropMap.col15:
case Client.IdfVisualStyle.transPropMap.col16:
case Client.IdfVisualStyle.transPropMap.col17:
case Client.IdfVisualStyle.transPropMap.col18:
case Client.IdfVisualStyle.transPropMap.col22:
case Client.IdfVisualStyle.transPropMap.col23:
"transparent" === e && (o === Client.IdfVisualStyle.selectors.altField ? s = Client.IdfVisualStyle.transPropMap.col4 : o === Client.IdfVisualStyle.selectors.altReadOnlyField ? s = Client.IdfVisualStyle.transPropMap.col15 : o === Client.IdfVisualStyle.selectors.listFieldHeader && (s = Client.IdfVisualStyle.transPropMap.col6), 
e = this.getPropertyValue(s));
let t, i, n;
for (let e = 1; e <= 23; e++) if (Client.IdfVisualStyle.transPropMap["col" + e] === s) {
t = this.getPropertyValue(Client.IdfVisualStyle.transPropMap["gco" + e]), i = this.getPropertyValue(Client.IdfVisualStyle.transPropMap["gdi" + e]), 
n = this.getPropertyValue(Client.IdfVisualStyle.transPropMap["opa" + e]);
break;
}
t && "transparent" !== e ? (i === Client.IdfVisualStyle.gradientDirections.HORIZONTAL ? e = "linear-gradient(90deg," + e + "," + t + ")" : i === Client.IdfVisualStyle.gradientDirections.VERTICAL && (e = "linear-gradient(180deg," + e + "," + t + ")"), 
l["background-image"] = e, l["background-color"] = "none") : (l["background-color"] = e, 
l["background-image"] = "none"), void 0 !== n && (l.opacity = n / 100);
break;

case Client.IdfVisualStyle.transPropMap.col11:
l["border-color"] = e;
break;

case Client.IdfVisualStyle.transPropMap.ali1:
case Client.IdfVisualStyle.transPropMap.ali2:
case Client.IdfVisualStyle.transPropMap.ali3:
var a = Client.IdfVisualStyle.getTextAlign(e);
a && (l["text-align"] = a, l["justify-content"] = a);
break;

case Client.IdfVisualStyle.transPropMap.fon1:
case Client.IdfVisualStyle.transPropMap.fon2:
case Client.IdfVisualStyle.transPropMap.fon3:
case Client.IdfVisualStyle.transPropMap.fon4:
case Client.IdfVisualStyle.transPropMap.fon5:
case Client.IdfVisualStyle.transPropMap.fon6:
case Client.IdfVisualStyle.transPropMap.fonSty1:
case Client.IdfVisualStyle.transPropMap.fonSty2:
case Client.IdfVisualStyle.transPropMap.fonSty3:
case Client.IdfVisualStyle.transPropMap.fonSty4:
case Client.IdfVisualStyle.transPropMap.fonSty5:
case Client.IdfVisualStyle.transPropMap.fonSty6:
a = -1 !== s.indexOf("FontStyle"), a = Client.IdfVisualStyle.getFont(e, a);
"vela" === Client.mainFrame.idfTheme && s === Client.IdfVisualStyle.transPropMap.fon2 && "400" === a.weight && (a.weight = "500"), 
a.family && (l["font-family"] = a.family), a.size && (l["font-size"] = a.size + "pt"), 
l["font-style"] = a.style || "normal", l["font-weight"] = a.weight || "normal", 
l["text-decoration"] = a.decoration || "none";
break;

case Client.IdfVisualStyle.transPropMap.fonFam1:
case Client.IdfVisualStyle.transPropMap.fonFam2:
case Client.IdfVisualStyle.transPropMap.fonFam3:
case Client.IdfVisualStyle.transPropMap.fonFam4:
case Client.IdfVisualStyle.transPropMap.fonFam5:
case Client.IdfVisualStyle.transPropMap.fonFam6:
l["font-family"] = e;
break;

case Client.IdfVisualStyle.transPropMap.fonSize1:
case Client.IdfVisualStyle.transPropMap.fonSize2:
case Client.IdfVisualStyle.transPropMap.fonSize3:
case Client.IdfVisualStyle.transPropMap.fonSize4:
case Client.IdfVisualStyle.transPropMap.fonSize5:
case Client.IdfVisualStyle.transPropMap.fonSize6:
l["font-size"] = e + "pt";
break;

case Client.IdfVisualStyle.transPropMap.bor1:
case Client.IdfVisualStyle.transPropMap.bor2:
case Client.IdfVisualStyle.transPropMap.bor3:
case Client.IdfVisualStyle.transPropMap.bor4:
case Client.IdfVisualStyle.transPropMap.bor5:
case Client.IdfVisualStyle.transPropMap.bor6:
a = this.getBorder(e, o);
a.custom ? (l["border-top"] = a.custom.top.width + "pt " + a.custom.top.style + " " + a.custom.top.color, 
l["padding-top"] = a.custom.top.padding + "pt !important", l["border-right"] = a.custom.right.width + "pt " + a.custom.right.style + " " + a.custom.right.color, 
l["padding-right"] = a.custom.right.padding + "pt !important", l["border-bottom"] = a.custom.bottom.width + "pt " + a.custom.bottom.style + " " + a.custom.bottom.color, 
l["padding-bottom"] = a.custom.bottom.padding + "pt !important", l["border-left"] = a.custom.left.width + "pt " + a.custom.left.style + " " + a.custom.left.color, 
l["padding-left"] = a.custom.left.padding + "pt !important") : a.multiWidth ? (l["border-width"] = a.multiWidth, 
l["border-style"] = a.style, l["border-color"] = a.color) : l.border = a.width + "px " + a.style + " " + a.color;
break;

case Client.IdfVisualStyle.transPropMap.msk:
break;

case Client.IdfVisualStyle.transPropMap.cur:
e && (l.cursor = e);
break;

case Client.IdfVisualStyle.transPropMap.off:
l["margin-top"] = e + "px";
break;

case Client.IdfVisualStyle.transPropMap.hof:
l["margin-bottom"] = e + "px";
break;

case Client.IdfVisualStyle.transPropMap.les:
l["letter-spacing"] = e / 100 + "pt";
break;

case Client.IdfVisualStyle.transPropMap.wos:
l["word-spacing"] = e / 100 + "pt";
}
return l;
}, Client.IdfVisualStyle.prototype.getHeaderOffset = function() {
return this.getPropertyValue(Client.IdfVisualStyle.transPropMap.hof);
}, Client.IdfVisualStyle.prototype.getAlignment = function(e) {
let t = Client.IdfVisualStyle.transPropMap.ali1;
return "listHeader" === e ? t = Client.IdfVisualStyle.transPropMap.ali2 : "formHeader" === e && (t = Client.IdfVisualStyle.transPropMap.ali3), 
this.getPropertyValue(t);
}, Client.IdfVisualStyle.prototype.getRowOffset = function() {
return this.getPropertyValue(Client.IdfVisualStyle.transPropMap.off);
}, Client.IdfVisualStyle.prototype.getControlType = function() {
return this.getPropertyValue(Client.IdfVisualStyle.transPropMap.con) || Client.IdfField.controlTypes.EDIT;
}, Client.IdfVisualStyle.prototype.getMask = function() {
return this.getPropertyValue(Client.IdfVisualStyle.transPropMap.msk);
}, Client.IdfVisualStyle.prototype.getPasswordFlag = function() {
return this.getPropertyValue("isPassword");
}, Client.IdfVisualStyle.prototype.getHyperLinkFlag = function() {
return this.getPropertyValue("isHyperLink");
}, Client.IdfVisualStyle.prototype.getShowImageFlag = function() {
return this.getPropertyValue("showImage");
}, Client.IdfVisualStyle.prototype.getShowDescriptionFlag = function() {
return this.getPropertyValue("showDescription");
}, Client.IdfVisualStyle.prototype.getShowValueFlag = function() {
return this.getPropertyValue("showValue");
}, Client.IdfVisualStyle.generateStyleSheet = function() {
let t = "";
return Client.IdfVisualStyle.rules.forEach(e => {
t = (t += " " + e.name + " {") + Object.entries(e.value).map(([ e, t ]) => void 0 !== t ? e + `: ${t};` : "").join(" ") + "}";
}), t;
}, Client || {}), Client = (Client.IdfWebEntryPoint = function(t, e, i) {
Client.mainFrame.wep = this, RD3_DesktopManager = {
WebEntryPoint: this
};
let n = {};
if (Object.entries(Client.IdfWebEntryPoint.animationDefs).forEach(e => n[e[0] + "AnimationDef"] = e[1]), 
t = Object.assign({
menuType: Client.IdfWebEntryPoint.menuTypes.LEFT,
showDisabledIcons: !1,
showSmartLookupIcon: !1,
rightAlignedIcons: !1,
showFieldImageInValue: !0,
animationsEnabled: !0,
soundEnabled: !0,
language: "ENG",
debugType: Client.IdfWebEntryPoint.debugTypes.NONE,
visualFlags: 3839,
showLogoff: !0,
decimalDot: !1,
sideMenuWidth: 160,
comboNameSeparator: "; ",
currencyMask: "#,###,###,##0.00",
dateMask: "dd/mm/yyyy",
timeMask: "hh:nn",
floatMask: "#,###,###,###.####",
panelLikeSearch: !0,
panelLikeMode: 1,
welcomeURL: Client.mainFrame.isIDF ? "qhelp.htm" : void 0,
globalToolbarPosition: Client.IdfWebEntryPoint.globalTlbPos.HEADER,
appDarkTheme: "AUTO",
resizableFrames: !1,
motionThreshold: {
acceleration: 999,
rotation: 999
},
closeAllEventDef: Client.mainFrame.isIDF ? Client.IdfMessagesPump.eventTypes.SERVERSIDE | Client.IdfMessagesPump.eventTypes.IMMEDIATE : void 0,
closeAppEventDef: Client.mainFrame.isIDF ? Client.IdfMessagesPump.eventTypes.SERVERSIDE | Client.IdfMessagesPump.eventTypes.IMMEDIATE : void 0,
...n
}, t), this.commandsZones = [], Client.mainFrame.isIDF) for (let e = 0; e < 48; e++) this.commandsZones[e] = t["cz" + e] || 0;
this.navStack = [], this.secondaryViews = [], this.defaultResponsiveClass = Client.Utils.getCSSVarValue("--default-responsive-class"), 
this.tooltips = [];
var s = t.handledKeys;
t.handledKeys = -1, Client.Widget.call(this, t, e, i), this.handledKeys = s;
}, Client.IdfWebEntryPoint.prototype = new Client.Widget(), Client.IdfWebEntryPoint.transPropMap = {
thm: "theme",
act: "activeViewId",
clo: "closeAllEventDef",
cla: "closeAppEventDef",
met: "menuType",
shd: "showDisabledIcons",
sli: "showSmartLookupIcon",
rai: "rightAlignedIcons",
sfi: "showFieldImageInValue",
ena: "animationsEnabled",
lan: "language",
dbi: "debugType",
hlp: "helpURL",
cmd: "commandPrompt",
rfi: "refreshInterval",
rlo: "refreshLocation",
wid: "widgetMode",
dec: "decimalDot",
wel: "welcomeURL",
shl: "showLogoff",
smw: "sideMenuWidth",
cns: "comboNameSeparator",
vfl: "visualFlags",
prg: "progressFile",
ent: "entryPoint",
cmk: "currencyMask",
dmk: "dateMask",
tmk: "timeMask",
fmk: "floatMask",
pls: "panelLikeSearch",
plm: "panelLikeMode",
snd: "soundEnabled",
gtp: "globalToolbarPosition",
img: "mainImage",
acc: "primaryColor",
scl: "secondaryColor",
dcl: "dangerColor",
dcd: "darkColor",
lcl: "lightColor",
bcl: "brightColor",
vcl: "vibrantColor",
dmt: "appDarkTheme",
frs: "resizableFrames",
mth: "motionThreshold",
sta: "startAnimationDef",
sma: "sidebarAnimationDef",
eca: "menuAnimationDef",
pma: "popupAnimationDef",
sfa: "formAnimationDef",
oma: "modalAnimationDef",
msa: "messageAnimationDef",
lma: "lastMessageAnimationDef",
cfa: "frameAnimationDef",
eta: "treeAnimationDef",
cya: "listAnimationDef",
qta: "qbeTipAnimationDef",
cta: "tabAnimationDef",
sga: "graphAnimationDef",
cba: "bookAnimationDef",
rda: "redirectAnimationDef",
pra: "previewAnimationDef",
dka: "dockedAnimationDef",
ppr: "popupResizeAnimationDef",
ttp: "tooltipAnimationDef",
tsk: "taskbarAnimationDef",
cmb: "comboAnimationDef",
ent1: "tabWithEnter",
M001: "SRV_MSG_UpdateView",
M002: "SRV_MSG_ResetQBE",
M003: "SRV_MSG_BackToApp",
M004: "SRV_MSG_RequiredValue",
M005: "SRV_MSG_DeleteDoc",
M006: "SRV_MSG_LoadDoc",
M007: "SRV_MSG_CloseView",
M008: "SRV_MSG_CloseModal",
M009: "SRV_MSG_CloseApp",
M010: "SRV_MSG_CloseAll",
M011: "SRV_MSG_Attach",
M012: "SRV_MSG_Comments",
M013: "SRV_MSG_ConfirmDelete",
M014: "SRV_MSG_ConfirmChoice",
M015: "SRV_MSG_CreatePDF",
M016: "SRV_MSG_Confirm",
M017: "SRV_MSG_Print",
M018: "SRV_MSG_OpenDoc",
M019: "SRV_MSG_ChooseDoc",
M020: "SRV_MSG_ShowMenu",
M021: "SRV_MSG_ShowFrame",
M022: "SRV_MSG_HideMenu",
M023: "SRV_MSG_HideFrame",
M024: "SRV_MSG_PageNumOf",
M025: "SRV_MSG_PanelPrevPage",
M026: "SRV_MSG_BookPrevPage",
M027: "SRV_MSG_PanelNextPage",
M028: "SRV_MSG_BookNextPage",
M029: "SRV_MSG_StatusData1",
M030: "SRV_MSG_StatusData2",
M031: "SRV_MSG_StatusInsert",
M032: "SRV_MSG_StatusQBE",
M033: "SRV_MSG_StatusUpdated",
M034: "SRV_MSG_Cancel",
M035: "SRV_MSG_Search",
M036: "SRV_MSG_Delete",
M037: "SRV_MSG_UnselectAllRows",
M038: "SRV_MSG_Duplicate",
M039: "SRV_MSG_FormList",
M040: "SRV_MSG_Insert",
M041: "SRV_MSG_Lock",
M042: "SRV_MSG_ShowMultiSel",
M043: "SRV_MSG_ShowRowSel",
M044: "SRV_MSG_Reload",
M045: "SRV_MSG_SelectAllRows",
M046: "SRV_MSG_Find",
M047: "SRV_MSG_Unlock",
M048: "SRV_MSG_Update",
M049: "SRV_MSG_BookEnd",
M050: "SRV_MSG_PanelEnd",
M051: "SRV_MSG_PanelStart",
M052: "SRV_MSG_BookStart",
M053: "SRV_MSG_OpenViews",
M054: "SRV_MSG_ShowDoc",
M055: "SRV_MSG_RowNum",
M056: "SRV_MSG_RowNumOf",
M057: "SRV_MSG_Export",
M058: "SRV_MSG_ErrorNum",
M059: "SRV_MSG_ErrorEffects",
M060: "SRV_MSG_ErrorAction",
M061: "SRV_MSG_ErrorSource",
M062: "SRV_MSG_ErrorButton",
M063: "SRV_MSG_Wait",
M064: "SRV_MSG_Group",
M065: "SRV_MSG_ShowSelCommands"
}, Client.IdfWebEntryPoint.menuTypes = {
LEFT: 1,
RIGHT: 2,
MENUBAR: 3,
TASKBAR: 4,
GROUPED: 5
}, Client.IdfWebEntryPoint.debugTypes = {
NONE: 0,
DEBUG: 1,
HELP: 2
}, Client.IdfWebEntryPoint.globalTlbPos = {
HEADER: 1,
STRIP: 2
}, Client.IdfWebEntryPoint.soundDef = {
close: "close.mp3",
open: "open.mp3",
delete: "delete.mp3",
update: "update.mp3",
login: "login.mp3",
logoff: "logoff.mp3",
command: "command.mp3",
info: "info.mp3",
warning: "warning.mp3",
error: "error.mp3"
}, Client.IdfWebEntryPoint.soundActions = {
PLAY: "play",
STOP: "stop",
PAUSE: "pause",
CONTINUE: "continue",
STOPALL: "stopall"
}, Client.IdfWebEntryPoint.animationDefs = {
start: "fade:250",
sidebar: "scroll:250",
menu: "fold:250",
popup: "scroll:250",
form: "scroll-v:250!",
modal: "zoom:250!",
message: "fold:250",
lastMessage: "fade:250",
frame: "fold:250!",
tree: "fold:250",
list: "scroll-h:250!",
qbeTip: "fade:250",
tab: "scroll-h:250!",
graph: "fade:250",
book: "scroll:250!",
redirect: "fade:250!",
preview: "scroll:250!",
docked: "scroll:250!",
popupResize: "fold:250!",
tooltip: "fade:250",
taskbar: "fold:250",
combo: "scroll:250",
group: "fold:250"
}, Client.IdfWebEntryPoint.redirectWhenBlocked = !1, Client.IdfWebEntryPoint.alertWhenBlocked = !0, 
Object.defineProperty(Client.IdfWebEntryPoint.prototype, "activeView", {
get: function() {
return Client.eleMap[this.activeViewId];
},
set: function(e) {
(e !== this.activeViewId || this.realizing) && (this.activeView && this.activeView.deactivate(), 
this.activeViewId = e, this.activeViewId) && (-1 !== (e = this.navStack.findIndex(e => e.elements[0] === this.activeView)) && e !== this.navStack.length - 1 && this.navStack.push(this.navStack.splice(e, 1)[0]), 
this.commandList?.activateViewOpenItem(this.activeView), this.activeView.modal || this.activeView.docked || Client.eleMap[this.viewsContainerConf.id].updateElement({
selectedPage: this.getPageOfView(this.activeView)
}), this.activeView.activate(this.activeViewChangedServerSide));
}
}), Client.IdfWebEntryPoint.createConfigFromXml = function(t) {
let i, n;
var s = {
customCommands: []
};
for (let e = 0; e < t.childNodes.length; e++) {
var o = t.childNodes[e];
if ("ccm" === o.nodeName) {
var l = {};
i = o.attributes;
for (let e = 0; e < i.length; e++) l[(n = i[e]).nodeName] = n.nodeValue;
Client.mainFrame.translateProperties(l, Client.IdfCommand.transPropMap), Client.mainFrame.translateProperties(l, Client.Widget.transPropMap), 
Client.IdfCommand.convertPropValues(l), Client.Widget.convertPropValues(l), s.customCommands.push(l);
} else if ("par" === o.nodeName) {
i = o.attributes;
var a = [ "ent" ];
for (let e = 0; e < i.length; e++) n = i[e], s[0 <= a.indexOf(n.nodeName) ? n.nodeName + "1" : n.nodeName] = n.nodeValue, 
"thm" === n.nodeName && s.thm && (s.thm = {
idfTheme: s.thm,
idfMobile: [ "ionic", "quadro" ].includes(s.thm).toString()
});
}
}
return s;
}, Client.IdfWebEntryPoint.convertPropValues = function(e) {
for (var t in e = e || {}) switch (t) {
case Client.IdfWebEntryPoint.transPropMap.clo:
case Client.IdfWebEntryPoint.transPropMap.cla:
case Client.IdfWebEntryPoint.transPropMap.met:
case Client.IdfWebEntryPoint.transPropMap.dbi:
case Client.IdfWebEntryPoint.transPropMap.vfl:
case Client.IdfWebEntryPoint.transPropMap.smw:
case Client.IdfWebEntryPoint.transPropMap.rfi:
case Client.IdfWebEntryPoint.transPropMap.rlo:
case Client.IdfWebEntryPoint.transPropMap.plm:
case Client.IdfWebEntryPoint.transPropMap.gtp:
case Client.IdfWebEntryPoint.transPropMap.frs:
e[t] = parseInt(e[t]);
break;

case Client.IdfWebEntryPoint.transPropMap.shd:
case Client.IdfWebEntryPoint.transPropMap.rai:
case Client.IdfWebEntryPoint.transPropMap.sfi:
case Client.IdfWebEntryPoint.transPropMap.ena:
case Client.IdfWebEntryPoint.transPropMap.wid:
case Client.IdfWebEntryPoint.transPropMap.shl:
case Client.IdfWebEntryPoint.transPropMap.dec:
case Client.IdfWebEntryPoint.transPropMap.pls:
case Client.IdfWebEntryPoint.transPropMap.snd:
case Client.IdfWebEntryPoint.transPropMap.ent1:
case Client.IdfWebEntryPoint.transPropMap.ena:
e[t] = "1" === e[t];
break;

case Client.IdfWebEntryPoint.transPropMap.sli:
e[t] = "NO" !== e[t];
break;

case Client.IdfWebEntryPoint.transPropMap.mth:
var i = e[t].split("|");
e[t] = {
acceleration: parseFloat(i[0]),
rotation: parseFloat(i[1])
};
break;

default:
"cz" === t.substr(0, 2) && (e[t] = parseInt(e[t]));
}
}, Client.IdfWebEntryPoint.prototype.getRootObject = function(e) {
return e ? this.mainObjects[1] : this.mainObjects[1].domObj;
}, Client.IdfWebEntryPoint.prototype.createElementsConfig = function() {
this.headerConf = this.createElementConfig({
c: "IonHeader",
className: "main-header"
}), this.navbarConf = this.createElementConfig({
c: "IonNavBar",
menuButton: !0,
events: [ "onMenuButton" ]
}), this.headerConf.children.push(this.navbarConf), this.navbarContainerConf = this.createElementConfig({
c: "Container",
className: "navbar-container"
}), this.navbarConf.children.push(this.navbarContainerConf), this.titleConf = this.createElementConfig({
c: "IonTitle",
customid: "header-main-caption"
}), this.navbarContainerConf.children.push(this.titleConf);
var e = this.createElementConfig({
c: "Container",
className: "main-header-cmd"
}), e = (this.navbarContainerConf.children.push(e), this.cmdInputConf = this.createElementConfig({
c: "IonInput",
className: "main-header-cmd-input",
labelPosition: "hidden",
placeholder: Client.IdfResources.t("COMMAND_PLACEHOLDER"),
events: [ "onChange" ]
}), e.children.push(this.cmdInputConf), this.createElementConfig({
c: "Container",
className: "main-header-buttons"
})), e = (this.navbarContainerConf.children.push(e), this.helpAppButtonConf = this.createElementConfig({
c: "IonButton",
icon: "help",
iconPosition: "only",
className: "generic-btn help-app-btn",
visible: !1,
events: [ "onClick" ],
customid: "header-help-button"
}), e.children.push(this.helpAppButtonConf), this.debugAppButtonConf = this.createElementConfig({
c: "IonButton",
icon: "bug",
iconPosition: "only",
className: "generic-btn debug-app-btn",
visible: !1,
events: [ "onClick" ],
customid: "header-debug-image"
}), e.children.push(this.debugAppButtonConf), this.closeAppButtonConf = this.createElementConfig({
c: "IonButton",
icon: "close",
iconPosition: "only",
className: "generic-btn close-app-btn",
events: [ "onClick" ],
customid: "header-close-app"
}), e.children.push(this.closeAppButtonConf), this.hasSideMenu() ? (this.mainContainerConf = this.createElementConfig({
c: "IonSplitPane",
className: "main-split-pane",
when: Client.mainFrame.idfMobile || "" !== this.defaultResponsiveClass ? "lg" : "xs"
}), this.menuType === Client.IdfWebEntryPoint.menuTypes.RIGHT && (this.mainContainerConf.className = "main-split-pane menu-right")) : (this.mainContainerConf = this.createElementConfig({
c: "Container",
className: "main-vertical-pane container-main-vertical"
}), this.navbarConf.menuButton = !1, this.menuType === Client.IdfWebEntryPoint.menuTypes.MENUBAR && (this.navbarContainerConf.className += " vertical-menu")), 
this.pageConf = this.createElementConfig({
c: "IonPage"
}), this.pageHeaderConf = this.createElementConfig({
c: "IonHeader",
className: "main-view-box-header"
}), this.createElementConfig({
c: "IonFooter"
}));
this.pageContentConf = this.createElementConfig({
c: "IonContent",
className: "main-view-grid"
}), this.pageConf.children.push(this.pageHeaderConf), this.pageConf.children.push(e), 
this.pageConf.children.push(this.pageContentConf), this.mainContainerConf.children.push(this.pageConf), 
this.topGridConf = this.createElementConfig({
c: "Container",
className: "grid-top"
}), this.leftGridConf = this.createElementConfig({
c: "Container",
className: "grid-left"
}), this.centerGridConf = this.createElementConfig({
c: "Container",
className: "grid-center"
}), this.rightGridConf = this.createElementConfig({
c: "Container",
className: "grid-right"
}), this.bottomGridConf = this.createElementConfig({
c: "Container",
className: "grid-bottom"
}), this.pageContentConf.children.push(this.topGridConf), this.pageContentConf.children.push(this.leftGridConf), 
this.pageContentConf.children.push(this.centerGridConf), this.pageContentConf.children.push(this.rightGridConf), 
this.pageContentConf.children.push(this.bottomGridConf), this.viewsContainerConf = this.createElementConfig({
c: "IonNavController",
className: "center-view-container"
}), this.centerGridConf.children.push(this.viewsContainerConf);
}, Client.IdfWebEntryPoint.prototype.realize = function(t, e, i) {
var n = document.getElementById("wait-box"), n = (n && (n.style.display = "none", 
clearTimeout(window.WaitTimer), window.WaitTimer = null), this.createElementsConfig(), 
this.customizeHeader(), this.mainObjects.push(i.createElement(this.headerConf, e, i)), 
i.createElement(this.mainContainerConf, e, i)), s = (this.mainObjects.push(n), []);
for (let e = 0; e < t.children.length; e++) {
var o = t.children[e];
"IdfView" === o.c && (s.push(o), t.children.splice(e, 1), e--);
}
this.createChildren(t), this.hasSideMenu() && (n.domObj.childNodes[0]?.classList.add("split-pane-side"), 
n.domObj.childNodes[1]?.classList.remove("split-pane-side"), n.domObj.childNodes[1]?.classList.add("split-pane-main"));
for (let e = 0; e < s.length; e++) this.insertBefore({
child: {
elements: [ s[e] ],
type: "view",
id: (Client.mainFrame.isIDF ? "view-" : "") + s[e].id
}
});
Client.mainFrame.isIDF && (Client.mainFrame.device.parentWidget = this), Client.mainFrame.idfMobile && ((e = Client.eleMap[this.mainContainerConf.id])?.checkWidth(), 
e.exposed) && this.commandList?.toggleMenu(), this.getRootObject(!0).focus();
}, Client.IdfWebEntryPoint.prototype.updateElement = function(e) {
Client.Widget.prototype.updateElement.call(this, e = e || {}), void 0 !== e.visualFlags && (this.visualFlags = e.visualFlags, 
e.showToolbar = 0 != (1024 & this.visualFlags), e.showStatusbar = 0 != (2048 & this.visualFlags), 
e.showCaption = 0 != (1 & this.visualFlags), e.showMenuButton = 0 != (2 & this.visualFlags), 
e.showIcon = 0 != (4 & this.visualFlags), e.showTitle = 0 != (8 & this.visualFlags), 
e.showDebugButton = 0 != (128 & this.visualFlags), e.showHelpButton = 0 != (64 & this.visualFlags), 
e.showCommandBox = 0 != (16 & this.visualFlags), e.showCloseButton = 0 != (32 & this.visualFlags), 
e.iconActive = 0 != (256 & this.visualFlags));
let t = !1, i = !1, n = !1, s = !1, o = !1;
for (var l in e) {
var a = e[l];
switch (-1 !== l.indexOf("SRV_MSG") && (this[l] = a), l.endsWith("Color") && (t = !0, 
Client.mainFrame.theme[l.replace("Color", "")] = a), l) {
case "caption":
this.setMainCaption(a);
break;

case "mainImage":
this.setMainImage(a);
break;

case "activeViewId":
this.activeViewChangedServerSide = !0, this.activeView = a, delete this.activeViewChangedServerSide;
break;

case "closeAllEventDef":
this.closeAllEventDef = a;
break;

case "closeAppEventDef":
this.closeAppEventDef = a;
break;

case "globalToolbarPosition":
this.globalToolbarPosition = a, Client.Widget.updateElementClassName(Client.eleMap[this.titleConf.id], "expand", this.isGlbToolbarHeader());
break;

case "language":
this.setLanguage(a);
break;

case "widgetMode":
i = !0, this.setWidgetMode(a);
break;

case "helpURL":
n = !0, this.helpURL = a;
break;

case "debugType":
s = !0, this.setDebugType(a);
break;

case "commandPrompt":
this.setCommandPrompt(a);
break;

case "showLogoff":
o = !0, this.showLogoff = a;
break;

case "showToolbar":
this.showToolbar = a;
break;

case "showStatusbar":
this.setShowStatusbar(a);
break;

case "showCaption":
i = !0, this.showCaption = a;
break;

case "showMenuButton":
this.setShowMenuButton(a);
break;

case "showIcon":
this.showIcon = a;
break;

case "showTitle":
this.setShowTitle(a);
break;

case "showDebugButton":
s = !0, this.showDebugButton = a;
break;

case "showHelpButton":
n = !0, this.showHelpButton = a;
break;

case "showCommandBox":
this.setShowCommandBox(a);
break;

case "showCloseButton":
o = !0, this.showCloseButton = a;
break;

case "iconActive":
this.iconActive = a;
break;

case "decimalDot":
this.decimalDot = a, glbThoSep = this.decimalDot ? (glbDecSep = ".", ",") : (glbDecSep = ",", 
".");
break;

case "sideMenuWidth":
this.setSideMenuWidth(a);
break;

case "comboNameSeparator":
this.comboNameSeparator = a;
break;

case "welcomeURL":
this.setWelcomeURL(a);
break;

case "refreshInterval":
this.setRefreshInterval(a);
break;

case "refreshLocation":
this.refreshLocation = a, Client.mainFrame.device.shell.postMessage({
obj: "device-geolocation",
id: 0 < this.refreshLocation ? "watchPosition" : "clearWatch"
});
break;

case "progressFile":
this.progressFile = a;
break;

case "entryPoint":
this.entryPoint = a;
break;

case "soundEnabled":
this.setSoundEnabled(a);
break;

case "appDarkTheme":
this.setDarkTheme(e), "YES" === this.appDarkTheme && (t = !0);
break;

case "resizableFrames":
this.resizableFrames = a;
break;

case "animationsEnabled":
this.animationsEnabled = a;
break;

case "motionThreshold":
this.setMotionThreshold(a);
}
}
t && this.updateThemeColors(), i && this.updateCaptionVisibility(), n && this.updateHelpButtonVisibility(), 
s && this.updateDebugButtonVisibility(), o && this.updateLogoffButtonVisibility();
}, Client.IdfWebEntryPoint.prototype.setMainCaption = function(e) {
var t = Client.Widget.getHTMLForCaption(this.caption);
Client.eleMap[this.titleConf.id].updateElement({
innerHTML: t
}), this.menuType === Client.IdfWebEntryPoint.menuTypes.GROUPED && Client.eleMap[this.commandList?.menuTitleConf.id]?.updateElement({
innerHTML: t
}), Client.eleMap[this.welcomeTitleConf?.id]?.updateElement({
innerHTML: t
}), document.title = Client.eleMap[this.titleConf.id].getRootObject().textContent;
}, Client.IdfWebEntryPoint.prototype.setMainImage = function(e) {
this.mainImage = e, this.mainImgConf || (this.mainImgConf = this.createElementConfig({
c: Client.Widget.isIconImage(this.mainImage) ? "IonIcon" : "Container",
className: "header-main-img"
}), Client.eleMap[this.navbarContainerConf.id].insertBefore({
child: this.mainImgConf
}));
e = Client.eleMap[this.mainImgConf.id];
e.updateElement({
visible: !!this.mainImage
}), this.mainImage && Client.Widget.setIconImage({
image: this.mainImage,
el: e,
innerObj: e.getRootObject()
});
}, Client.IdfWebEntryPoint.prototype.setLanguage = function(e) {
this.language = e, Client.IdfResources.languagesMap[this.language] || (this.language = "ENG");
}, Client.IdfWebEntryPoint.prototype.setWidgetMode = function(e) {
this.widgetMode = e, Client.Widget.updateElementClassName(Client.eleMap[this.mainContainerConf.id], "widget-mode", !this.widgetMode);
}, Client.IdfWebEntryPoint.prototype.setDebugType = function(e) {
this.debugType = e, Client.eleMap[this.debugAppButtonConf.id].updateElement({
icon: this.debugType === Client.IdfWebEntryPoint.debugTypes.HELP ? "help-buoy" : "bug"
}), this.debugType === Client.IdfWebEntryPoint.debugTypes.DEBUG && top !== window && (e = top.document.getElementById("debug")) && (e.style.display = "");
}, Client.IdfWebEntryPoint.prototype.setCommandPrompt = function(e) {
this.commandPrompt = e, Client.eleMap[this.cmdInputConf.id].updateElement({
value: this.commandPrompt
});
}, Client.IdfWebEntryPoint.prototype.setShowStatusbar = function(e) {
this.showStatusbar = e, this.statusbar?.updateElement({
visible: this.showStatusbar
});
}, Client.IdfWebEntryPoint.prototype.setShowMenuButton = function(e) {
this.showMenuButton = e, this.hasSideMenu() && Client.eleMap[this.navbarConf.id].updateElement({
menuButton: this.showMenuButton
});
}, Client.IdfWebEntryPoint.prototype.setShowTitle = function(e) {
this.showTitle = e, Client.eleMap[this.titleConf.id].updateElement({
visible: this.showTitle
});
}, Client.IdfWebEntryPoint.prototype.setShowCommandBox = function(e) {
this.showCommandBox = e, Client.eleMap[this.cmdInputConf.id].updateElement({
visible: this.showCommandBox
});
}, Client.IdfWebEntryPoint.prototype.setSideMenuWidth = function(e) {
if (this.sideMenuWidth = e, this.hasSideMenu() && this.sideMenuWidth) {
let e = this.getRootObject(!0);
1 < e.domObj.childNodes.length && setTimeout(() => {
Client.eleMap[this.mainContainerConf.id]?.updateElement({
sidePaneMaxWidth: this.sideMenuWidth
}), e.domObj.childNodes[0].style.setProperty("max-width", this.sideMenuWidth + "px"), 
e.domObj.childNodes[0].style.setProperty("min-width", this.sideMenuWidth + "px");
}, 10);
}
}, Client.IdfWebEntryPoint.prototype.setWelcomeURL = function(e) {
if (this.welcomeURL = e, !this.welcomePageFrameConf && this.welcomeURL) {
this.welcomePageFrameConf = this.createElementConfig({
c: "IonPage",
className: "welcome-main-container"
});
e = this.createElementConfig({
c: "IonHeader",
className: "welcome-header",
visible: Client.mainFrame.idfMobile
}), e = (this.welcomePageFrameConf.children.push(e), this.welcomeNavbarConf = this.createElementConfig({
c: "IonNavBar",
className: "welcome-navbar",
menuButton: !0
}), e.children.push(this.welcomeNavbarConf), this.welcomeTitleConf = this.createElementConfig({
c: "IonTitle",
className: "welcome-title",
innerText: this.caption
}), this.welcomeNavbarConf.children.push(this.welcomeTitleConf), this.createElementConfig({
c: "IonContent",
className: "welcome-content"
})), e = (this.welcomePageFrameConf.children.push(e), this.welcomePageFrameIntConf = this.createElementConfig({
c: "Iframe",
className: "welcome-container",
src: this.welcomeURL
}), e.children.push(this.welcomePageFrameIntConf), this.view.createElement(this.welcomePageFrameConf, this.parent, this.view));
let t = Client.eleMap[this.welcomePageFrameIntConf.id].getRootObject();
t.onload = () => {
var e = t.contentWindow.document;
e.addEventListener("touchmove", e => Client.Widget.ddMouseMove(e, t.getBoundingClientRect()), !1), 
e.addEventListener("mousemove", e => Client.Widget.ddMouseMove(e, t.getBoundingClientRect()), !1), 
e.addEventListener("touchup", e => Client.Widget.ddMouseUp(e, t.getBoundingClientRect()), !1), 
e.addEventListener("mouseup", e => Client.Widget.ddMouseUp(e, t.getBoundingClientRect()), !1), 
e.addEventListener("touchcancel", Client.Widget.ddClearOperation, !1);
}, Client.eleMap[this.centerGridConf.id].insertBefore({
child: e
});
} else this.welcomePageFrameConf && Client.eleMap[this.welcomePageFrameIntConf.id].updateElement({
src: this.welcomeURL
});
this.checkWelcomePage();
}, Client.IdfWebEntryPoint.prototype.setRefreshInterval = function(e) {
this.refreshInterval = e, Client.mainFrame.isIDF && (this.refreshTimerId && (clearInterval(this.refreshTimerId), 
delete this.refreshTimerId), 0 < this.refreshInterval) && (this.refreshTimerId = setInterval(() => {
Client.mainFrame.sendEvents([ {
id: "rfi",
def: Client.IdfMessagesPump.eventTypes.ACTIVE,
content: {
oid: "wep"
}
} ]);
}, this.refreshInterval));
}, Client.IdfWebEntryPoint.prototype.setDarkTheme = function(e) {
var t;
"ionic" === this.theme.idfTheme && (this.appDarkTheme = e.appDarkTheme, "YES" === this.appDarkTheme ? (e.primaryColor && "rgb(56, 126, 245)" !== e.primaryColor && (Client.mainFrame.theme.darkPrimary = e.primaryColor), 
e.secondaryColor && "rgb(50, 219, 100)" !== e.secondaryColor && (Client.mainFrame.theme.darkSecondary = e.secondaryColor), 
e.dangerColor && "rgb(245, 61, 61)" !== e.dangerColor && (Client.mainFrame.theme.darkDanger = e.dangerColor), 
e.darkColor && "rgb(34, 34, 34)" !== e.darkColor && (Client.mainFrame.theme.darkDark = e.darkColor), 
e.lightColor && "rgb(244, 244, 244)" !== e.lightColor && (Client.mainFrame.theme.darkLight = e.lightColor), 
e.brightColor && "rgb(255, 193, 37)" !== e.brightColor && (Client.mainFrame.theme.darkBright = e.brightColor), 
e.vibrantColor && "rgb(102, 51, 153)" !== e.vibrantColor && (Client.mainFrame.theme.darkVibrant = e.vibrantColor)) : "AUTO" === this.appDarkTheme && (this.appDarkTheme = window.matchMedia("(prefers-color-scheme: dark)").matches ? "YES" : "NO", 
"YES" === this.appDarkTheme) && (t = void 0 !== Client.mainFrame.theme.darkPercent ? parseFloat(Client.mainFrame.theme.darkPercent) : .3, 
e.primaryColor && (Client.mainFrame.theme.darkPrimary = Client.IonHelper.shadeRGBColor(e.primaryColor, t)), 
e.secondaryColor && (Client.mainFrame.theme.darkSecondary = Client.IonHelper.shadeRGBColor(e.secondaryColor, t)), 
e.dangerColor && (Client.mainFrame.theme.darkDanger = Client.IonHelper.shadeRGBColor(e.dangerColor, t)), 
e.darkColor && (Client.mainFrame.theme.darkDark = Client.IonHelper.shadeRGBColor(e.darkColor, t)), 
e.lightColor && (Client.mainFrame.theme.darkLight = Client.IonHelper.shadeRGBColor(e.lightColor, t)), 
e.brightColor && (Client.mainFrame.theme.darkBright = Client.IonHelper.shadeRGBColor(e.brightColor, t)), 
e.vibrantColor) && (Client.mainFrame.theme.darkVibrant = Client.IonHelper.shadeRGBColor(e.vibrantColor, t)), 
Client.mainFrame.theme.darkMode = "YES" === this.appDarkTheme);
}, Client.IdfWebEntryPoint.prototype.setMotionThreshold = function(e) {
this.motionThreshold = e, 999 !== this.motionThreshold.acceleration || 999 !== this.motionThreshold.rotation ? (addEventListener("devicemotion", Client.IdfWebEntryPoint.onDeviceMotion), 
addEventListener("deviceorientation", Client.IdfWebEntryPoint.onDeviceOrientation)) : (removeEventListener("devicemotion", Client.IdfWebEntryPoint.onDeviceMotion), 
removeEventListener("deviceorientation", Client.IdfWebEntryPoint.onDeviceOrientationChange), 
delete Client.IdfWebEntryPoint.lastOrientationEvent);
}, Client.IdfWebEntryPoint.onDeviceOrientationChange = function(e) {
Client.IdfWebEntryPoint.lastOrientationEvent = e;
}, Client.IdfWebEntryPoint.onDeviceMotion = function(e) {
var t = Client.eleMap.wep.motionThreshold;
(Math.abs(e.acceleration.x) >= t.acceleration || Math.abs(e.acceleration.y) >= t.acceleration || Math.abs(e.acceleration.z) >= t.acceleration || Math.abs(e.rotationRate.alpha) >= t.rotation || Math.abs(e.rotationRate.beta) >= t.rotation || Math.abs(e.rotationRate.gamma) >= t.rotation) && (t = Client.IdfWebEntryPoint.lastOrientationEvent, 
e = [ e.acceleration.x, e.acceleration.y, e.acceleration.z, e.accelerationIncludingGravity.x, e.accelerationIncludingGravity.y, e.accelerationIncludingGravity.z, e.rotationRate.alpha, e.rotationRate.beta, e.rotationRate.gamma, t?.alpha, t?.beta, t?.gamma, t?.webkitCompassHeading, t?.webkitCompassAccuracy, new Date().getTime() ], 
Client.mainFrame.sendEvents([ {
id: "chgmot",
def: Client.IdfMessagesPump.eventTypes.ACTIVE,
content: {
oid: "wep",
obn: "mot",
par1: e.join("|")
}
} ]));
}, Client.IdfWebEntryPoint.prototype.updateCaptionVisibility = function() {
var e = this.showCaption && !this.widgetMode;
Client.eleMap[this.headerConf.id].updateElement({
visible: e
}), Client.Widget.updateElementClassName(Client.eleMap[this.mainContainerConf.id], "no-header", e), 
this.onResize();
}, Client.IdfWebEntryPoint.prototype.updateHelpButtonVisibility = function() {
Client.eleMap[this.helpAppButtonConf.id].updateElement({
visible: this.helpURL && this.showHelpButton
});
}, Client.IdfWebEntryPoint.prototype.updateDebugButtonVisibility = function() {
Client.eleMap[this.debugAppButtonConf.id].updateElement({
visible: this.debugType !== Client.IdfWebEntryPoint.debugTypes.NONE && this.showDebugButton
});
}, Client.IdfWebEntryPoint.prototype.updateLogoffButtonVisibility = function() {
Client.eleMap[this.closeAppButtonConf.id].updateElement({
visible: this.showLogoff && this.showCloseButton
});
}, Client.IdfWebEntryPoint.prototype.realizeStatusbar = function() {
var e = this.createElementConfig({
c: "Container",
className: "status-bar-container"
});
this.menuType === Client.IdfWebEntryPoint.menuTypes.TASKBAR ? (e.className += " bottom", 
this.statusbar = this.commandList.realizeStatusbar(e)) : this.statusbar = Client.eleMap[this.pageHeaderConf.id].insertBefore({
child: e,
sib: this.globalToolbar?.id
});
}, Client.IdfWebEntryPoint.prototype.realizeCommandSet = function(e) {
if (!this.globalToolbar) {
var t = this.createElementConfig({
c: "Container",
className: "main-global-toolbar"
});
if (this.menuType === Client.IdfWebEntryPoint.menuTypes.TASKBAR) t.className += " bottom", 
this.globalToolbar = this.commandList.realizeTaskBarToolbar(t); else {
let e = this.pageHeaderConf;
this.isGlbToolbarHeader() && (e = this.navbarContainerConf), this.globalToolbar = Client.eleMap[e.id].insertBefore({
child: t
});
}
}
this.globalToolbar.insertBefore({
child: e
});
}, Client.IdfWebEntryPoint.prototype.onEvent = function(e) {
var t = Client.Widget.prototype.onEvent.call(this, e);
switch (e.id) {
case "chgProp":
e.obj === this.cmdInputConf.id && "value" === e.content.name && t.push(...this.handleCommandInputChange(e));
break;

case "onMenuButton":
e.obj === this.navbarConf.id && this.commandList && t.push(...this.commandList.onEvent(e));
break;

case "onClick":
e.obj === this.closeAppButtonConf.id && t.push(...this.handleCloseAppButtonClick(e)), 
e.obj === this.helpAppButtonConf.id && this.handleHelpButtonClick(e), e.obj === this.debugAppButtonConf.id && t.push(...this.handleDebugButtonClick(e));
break;

case "onPosition":
t.push(...this.handlePositionChange(e));
break;

case "onKey":
t.push(...this.handleFunctionKeys(e)), t.push(...this.handleAcceleratorKeys(e));
}
return Client.mainFrame.isIDF && t.push(...this.handleCustomEvent(e)), t;
}, Client.IdfWebEntryPoint.prototype.handleCommandInputChange = function(e) {
e = e.content.value.toUpperCase();
switch (e) {
case "ANI-":
case "ANIOFF":
this.animationsEnabled = !1;
break;

case "ANI+":
case "ANION":
this.animationsEnabled = !0;
break;

case "SOUND-":
case "SND-":
case "SNDOFF":
this.setSoundEnabled(!1);
break;

case "SOUND+":
case "SND+":
case "SNDON":
this.setSoundEnabled(!0);
}
return Client.IdfWebEntryPoint.sendCommand(e), Client.eleMap[this.cmdInputConf.id].updateElement({
value: ""
}), [];
}, Client.IdfWebEntryPoint.prototype.handleCloseAppButtonClick = function(e) {
var t = [];
return Client.mainFrame.isIDF && t.push({
id: "clk",
def: this.closeAppEventDef,
content: {
oid: "cloapp",
xck: e?.content.offsetX,
yck: e?.content.offsetY
}
}), t;
}, Client.IdfWebEntryPoint.prototype.handleHelpButtonClick = function(e) {
open(this.helpURL, "help");
}, Client.IdfWebEntryPoint.prototype.handleDebugButtonClick = function(e) {
var t = [];
if (Client.mainFrame.isIDF) switch (this.debugType) {
case Client.IdfWebEntryPoint.debugTypes.HELP:
t.push({
id: "cmd",
def: this.closeAppEventDef,
content: {
oid: "wep",
obn: "DTTHELP"
}
});
break;

case Client.IdfWebEntryPoint.debugTypes.DEBUG:
Client.idfOffline ? t.push({
id: "IWDTT",
def: Client.IdfMessagesPump.eventTypes.ACTIVE,
content: {}
}) : open(location.href + "?WCI=IWDTT&WCE=", "debug");
}
return t;
}, Client.IdfWebEntryPoint.prototype.handlePositionChange = function(e) {
var t, i = [];
return (!this.lastWatchTime || new Date() - this.lastWatchTime >= this.refreshLocation) && (t = "", 
t = (t = (t = (t = (t = (t = (t += e.content.latitude + "|") + e.content.longitude + "|") + e.content.accuracy + "|") + e.content.altitude + "|") + e.content.altitudeAccuracy + "|") + e.content.heading + "|") + e.content.speed + "|", 
i.push({
id: "chgloc",
def: Client.IdfMessagesPump.eventTypes.ACTIVE,
content: {
oid: "wep",
obn: "loc",
par1: t
}
})), this.lastWatchTime = new Date(), i;
}, Client.IdfWebEntryPoint.prototype.handleFunctionKeys = function(e) {
return this.commandList?.handleFunctionKeys(e, -1, -1) || [];
}, Client.IdfWebEntryPoint.prototype.handleAcceleratorKeys = function(e) {
return this.commandList?.handleAcceleratorKeys(e) || [];
}, Client.IdfWebEntryPoint.prototype.insertBefore = function(t) {
if (Client.mainFrame.loadClientRequirements(t.child) && "view" === t?.child.type) {
let e;
var i, n = t.child.elements[0];
n.modal ? (i = n.modal === Client.IdfView.modalMode.MODAL && Client.mainFrame.idfMobile && n.closeOnSelection || n.relatedTo, 
t.child.options = {
mode: "popup",
modal: !0,
extcls: n.modal === Client.IdfView.modalMode.POPUP ? "popup-modal-view" : "modal-modal-view",
autoclose: i
}, e = new Client.View(t.child), this.secondaryViews.push(e)) : n.docked ? (i = [ "", "", this.leftGridConf.id, this.rightGridConf.id, this.topGridConf.id, this.bottomGridConf.id ], 
i = Client.eleMap[i[n.dockType]], e = i.insertBefore(t), this.secondaryViews.push(e)) : (i = Client.eleMap[this.viewsContainerConf.id], 
e = i.insertBefore(t), this.navStack.push(e), this.checkWelcomePage()), this.elements.push(e), 
n.docked || this.updateElement({
activeViewId: n.id
}), this.calcDockGridLayout();
}
}, Client.IdfWebEntryPoint.prototype.removeChild = function(e) {
Client.Element.prototype.removeChild.call(this, e);
var t = Client.eleMap[this.viewsContainerConf.id], i = (t.removeChild(e), e.id.replace("view-", ""));
Client.mainFrame.isIDF ? (e = Client.eleMap[i]) && e.close(!0) : Client.mainFrame.sendEvents([ {
obj: i,
id: "close"
} ]);
let n, s = !1;
for (let e = 0; e < this.navStack.length; e++) if ((n = this.navStack[e].elements[0]).id === i) {
s = !0, this.navStack.splice(e, 1);
break;
}
if (!s) for (let e = 0; e < this.secondaryViews.length; e++) {
var o = this.secondaryViews[e];
if ((n = o.elements[0]).id === i) {
o.close(!0), this.secondaryViews.splice(e, 1);
break;
}
}
this.checkWelcomePage(), this.commandList?.removeViewOpenItem(n);
e = this.navStack[this.navStack.length - 1]?.elements[0];
e && this.updateElement({
activeViewId: e.id
}), s && t.updateElement({
selectedPage: this.getPageOfView(e)
}), this.calcDockGridLayout();
}, Client.IdfWebEntryPoint.prototype.checkWelcomePage = function() {
this.welcomePageFrameConf && Client.eleMap[this.welcomePageFrameConf.id].updateElement({
visible: this.welcomeURL && !this.navStack.find(e => e.elements[0].idfVisible)
});
}, Client.IdfWebEntryPoint.prototype.closeAllViews = function() {
for (;this.navStack.length; ) this.removeChild(this.navStack[this.navStack.length - 1]);
}, Client.IdfWebEntryPoint.getRequirements = function(e) {
var t = Client.mainFrame.isIDF ? "fluid/" : "", i = {};
let n = "md";
return (window.top !== window.self && "ios" === window.localStorage?.getItem("platform") || "ios" === Client.mainFrame.device.operatingSystem) && (n = "ios"), 
i[t + "objects/fluid/bundles/idf.css"] = {
type: "cs",
name: "idfcss"
}, i[t + "objects/ionic/bundles/extra.css"] = {
type: "cs",
name: "extracss"
}, i[t + `objects/ionic/bundles/ionic.${n}.min.css`] = {
type: "cs",
name: "ionincss"
}, i[t + "objects/ionic/bundles/ionicons4.css"] = {
type: "cs",
name: "ionicons"
}, i[t + "objects/ionic/bundles/ionicons4.svg"] = {
type: "sv",
name: "ionicons5"
}, i[t + `objects/ionic/ionic-${n}.js`] = {
type: "jc",
name: "ionicplat"
}, i[t + "objects/ionic/ionic.min.js"] = {
type: "jc",
name: "ionmin"
}, i;
}, Client.IdfWebEntryPoint.prototype.getCommandZone = function(e) {
return this.commandsZones[e];
}, Client.IdfWebEntryPoint.prototype.hasSideMenu = function() {
return [ Client.IdfWebEntryPoint.menuTypes.LEFT, Client.IdfWebEntryPoint.menuTypes.RIGHT, Client.IdfWebEntryPoint.menuTypes.GROUPED ].includes(this.menuType);
}, Client.IdfWebEntryPoint.prototype.isGlbToolbarHeader = function() {
return this.globalToolbarPosition === Client.IdfWebEntryPoint.globalTlbPos.HEADER;
}, Client.IdfWebEntryPoint.prototype.getMDIRect = function() {
var e = Client.eleMap[this.pageContentConf.id];
return e ? e.domObj.firstChild.getBoundingClientRect() : {
left: 0,
top: 0,
width: document.body.offsetWidth,
height: document.body.offsetHeight
};
}, Client.IdfWebEntryPoint.prototype.calcDockGridLayout = function() {
var t = {
top: 0,
left: 0,
right: 0,
bottom: 0
};
for (let e = 0; e < this.secondaryViews.length; e++) {
var i = this.secondaryViews[e].elements[0];
if (i.docked) {
var n = window.getComputedStyle(Client.eleMap[i.pageConf.id].domObj), s = n.borderTopWidth, o = n.borderLeftWidth, l = n.borderRightWidth, a = n.borderBottomWidth;
switch (i.dockType) {
case Client.IdfView.dockType.LEFT:
t.left = (-1 !== i.width ? i.width : 250) + (i.canResize ? parseInt("0" + l, 10) : 0);
break;

case Client.IdfView.dockType.RIGHT:
t.right = (-1 !== i.width ? i.width : 250) + (i.canResize ? parseInt("0" + o, 10) : 0);
break;

case Client.IdfView.dockType.TOP:
t.top = (-1 !== i.height ? i.height : 250) + (i.canResize ? parseInt("0" + a, 10) : 0);
break;

case Client.IdfView.dockType.BOTTOM:
t.bottom = (-1 !== i.height ? i.height : 250) + (i.canResize ? parseInt("0" + s, 10) : 0);
}
}
}
var e = Client.eleMap[this.pageContentConf.id];
e.scrollContent.style.gridTemplateColumns = t.left + "px 1fr " + t.right + "px", 
e.scrollContent.style.gridTemplateRows = t.top + "px 1fr " + t.bottom + "px", this.onResize();
}, Client.IdfWebEntryPoint.prototype.showMessageBox = function(e, t) {
Client.Widget.showMessageBox(e, t);
}, Client.IdfWebEntryPoint.prototype.showErrorBox = function(e) {
let t = "";
t = (t += `<div class="row-error row-red"><span><img src="images/errpg.gif"></span><span>${e.errorHeader}</span></div>`) + `<div class="row-error"><span>${this.SRV_MSG_ErrorNum}</span><span>${e.errorNumber}</span></div>`, 
e.errorDescription && (t += `<div class="row-error"><span></span><span>${e.errorDescription}</span></div>`), 
e.errorEffects && (t += `<div class="row-error"><span>${this.SRV_MSG_ErrorEffects}</span><span>${e.errorEffects}</span></div>`), 
e.errorActions && (t += `<div class="row-error"><span>${this.SRV_MSG_ErrorAction}</span><span>${e.errorActions}</span></div>`), 
e.errorSource && (t += `<div class="row-error"><span>${this.SRV_MSG_ErrorSource}</span><span>${e.errorSource}</span></div>`), 
e.errorMessage && (t += `<div class="row-error"><span>Error Details:</span><span>${e.errorMessage}</span></div>`), 
e.errorException && (t += `<div class="row-error"><span>Stack Trace:</span><span>${e.errorException}</span></div>`);
e = {
type: "alert",
title: Client.IdfResources.t("MSG_POPUP_MsgErrorCaption"),
message: t,
style: "error-message-popup",
buttons: [ {
text: this.SRV_MSG_ErrorButton,
cancel: !0
} ]
};
Client.IonHelper.createAlert(e, function(e, t) {}), this.soundAction(Client.IdfWebEntryPoint.soundDef.error);
}, Client.IdfWebEntryPoint.prototype.showPreview = function(e, t) {
Client.Widget.showPreview(e, t);
}, Client.IdfWebEntryPoint.prototype.showPopup = function(t) {
let i = Client.eleMap[t.commandsetId], n = !1;
var s = [];
for (let e = 0; e < i.elements.length; e++) {
var o, l, a, r = i.elements[e];
r instanceof Client.IdfCommand && r.visible && ({
caption: l,
icon: a,
color: o
} = Client.Widget.extractCaptionData(r.caption), l = {
id: r.id,
title: l,
tooltip: r.tooltip || ""
}, a && (l.icon = a), o && (l.color = o), r.image && (Client.Widget.isIconImage(r.image) ? l.icon = r.image : (n = !0, 
a = (Client.mainFrame.isIDF ? "images/" : "") + r.image, l.style = "background-image: url('" + a + "'); ")), 
s.push(l));
}
let d;
if (t.targetId) {
var h, c = t.targetId.replace(":fv", "").replace(":lvd+", "").replace(":lc", "").replace(":fc", "");
let e = Client.eleMap[c];
c.startsWith("val:") && (c = c.split(":"), h = parseInt(c[1]), (c = Client.eleMap["fld:" + c.slice(2).join(":")])?.parent) && (h = h + c.parent.actualPosition - 1, 
h = c.parent.hasGroupedRows() ? c.parent.groupedRowsRoot.realIndexToGroupedIndex(h) : h, 
e = c.getValueByIndex(h)), e = e ? e.getPopupTarget(t.targetId) : (e = document.getElementById(t.targetId)) || document.body.querySelector("[customid='" + t.targetId.replace(/:/g, "_") + "']"), 
d = e?.id;
}
0 < s.length && (c = {
options: {
type: "menu",
offset: 2,
style: "menu-popup" + (n ? " with-background" : ""),
items: s,
animation: !1,
callback: e => {
Client.mainFrame.sendEvents(i.handlePopupResponse({
id: "popupCallback",
content: {
res: e
}
}));
}
}
}, d ? (c.options.refObj = d, c.options.position = this.getPopupPosition(t.direction)) : t.x && t.y && (c.options.rect = {
top: t.y + "px",
left: t.x + "px"
}), Client.mainFrame.popup(c));
}, Client.IdfWebEntryPoint.prototype.showTooltip = function(i) {
if (Client.mainFrame.idfMobile) Client.IonHelper.createToast({
html: !0,
message: i.text.replace(/\n/g, "<br/>"),
duration: i.hidedelay || 4e3
}); else {
let t = i.anchorx && i.anchory ? document.body : document.getElementById(i.id);
if (!t && i.id) {
0 < i.id.indexOf(":lv") && (n = Client.eleMap[i.id.substring(0, i.id.indexOf(":lv"))], 
s = parseInt(i.id.substring(i.id.indexOf(":lv") + 3)), s = n.parent.actualPosition + s, 
i.id = n.id + ":lv" + s);
try {
t = (t = document.querySelector(`[customid=${i.id.replace(/:/g, "_")}]`)) || document.querySelector(`[customid=${i.id}]`);
} catch (e) {}
t = t || Client.eleMap[i.id]?.getRootObject();
}
if (t) {
let e = "manual";
-1 === i.showdelay && (e = "mouseenter focus", i.showdelay = 0);
var n = {
inlinePositioning: !0,
delay: [ i.showdelay, 0 ],
allowHTML: !0,
content: Client.Widget.getHTMLTooltip(i.title, i.text).content,
placement: [ "top", "right", "bottom", "left" ][i.position],
arrow: i.haswhisker,
trigger: e,
maxWidth: i.width || 350,
theme: i.style
}, s = (i.anchorx && i.anchory && (n.offset = i.anchorx + ", " + i.anchory, n.placement = n.placement + "-start", 
n.flip = !1), "manual" === e && (n.onShown = function(e) {
setTimeout(() => {
e.hide();
}, i.hidedelay);
}, n.onHidden = function(e) {
0 <= Client.mainFrame.wep.tooltips.indexOf(e) && Client.mainFrame.wep.tooltips.splice(Client.mainFrame.wep.tooltips.indexOf(e), 1), 
e.destroy();
}), tippy(t, n));
s && ("manual" === e && s.show(), this.tooltips.push(s));
}
}
}, Client.IdfWebEntryPoint.prototype.resetTooltips = function(e) {
var t = Client.eleMap[e.id]?.getRootObject();
if (t) for (let e = 0; e < this.tooltips.length; e++) Client.Utils.isMyParent(this.tooltips[e].reference, t.id) && (this.tooltips[e].destroy(), 
this.tooltips.splice(e, 1), e--);
}, Client.IdfWebEntryPoint.prototype.getPopupPosition = function(e) {
let t;
switch (e) {
case 0:
t = "right-top";
break;

case 1:
t = "bottom-left";
break;

case 2:
t = "left-top";
break;

default:
t = "top-left";
}
return t;
}, Client.IdfWebEntryPoint.prototype.setSoundEnabled = function(e) {
e || this.soundAction("", Client.IdfWebEntryPoint.soundActions.STOPALL), this.soundEnabled = e;
}, Client.IdfWebEntryPoint.prototype.soundAction = function(i, e, t) {
if (this.soundEnabled) {
if (t = t || {}, e = e || Client.IdfWebEntryPoint.soundActions.PLAY, (i = Client.IdfWebEntryPoint.soundDef[i] || i).includes(".") && !i.includes("/")) {
let e = location.href;
var n = e.lastIndexOf("/");
0 < n && (e = e.substr(0, n) + "/mmedia/"), i = e + i;
}
if (i.includes(".") || i.includes("/")) switch (isNaN(t.volume) || s("setVolume", {
volume: Math.min(100, Math.max(0, t.volume)) / 100
}), e) {
case Client.IdfWebEntryPoint.soundActions.PLAY:
this.audioMap = this.audioMap || {}, this.audioMap[i] = i, s("stop"), s("play");
break;

case Client.IdfWebEntryPoint.soundActions.PAUSE:
s("pause");
break;

case Client.IdfWebEntryPoint.soundActions.CONTINUE:
s("play");
break;

case Client.IdfWebEntryPoint.soundActions.STOP:
s("stop"), s("remove"), delete this.audioMap[i];
break;

case Client.IdfWebEntryPoint.soundActions.STOPALL:
for (i in this.audioMap) this.soundAction(i, Client.IdfWebEntryPoint.soundActions.STOP);
delete this.audioMap;
}
}
function s(e, t) {
Client.mainFrame.processRequest([ {
id: e,
obj: "device-media",
cnt: {
src: i,
...t
}
} ]);
}
}, Client.IdfWebEntryPoint.getAnimationByDef = function(n) {
if (!Client.mainFrame.wep || Client.mainFrame.wep.animationsEnabled) {
let [ e, t ] = n.replace("!", "").split(":"), i;
switch ([ e, i ] = e.split("-"), i) {
case "v":
i = "top";
break;

case "h":
i = "left";
}
switch (e) {
case "fade":
e = "fade";
break;

case "fold":
break;

case "scroll":
e = "slide";
}
return e ? {
type: e,
from: i,
easing: "ease",
duration: parseInt(t),
delay: 0
} : void 0;
}
}, Client.IdfWebEntryPoint.getAnimationDefault = function(e) {
return Client.mainFrame.wep ? Client.mainFrame.wep[e + "AnimationDef"] : Client.IdfWebEntryPoint.animationDefs[e];
}, Client.IdfWebEntryPoint.prototype.updateThemeColors = function() {
var e = getComputedStyle(document.documentElement, null), t = e.getPropertyValue("--col-primary").trim(), i = e.getPropertyValue("--col-secondary").trim(), n = e.getPropertyValue("--col-danger").trim(), s = e.getPropertyValue("--col-dark").trim(), o = e.getPropertyValue("--col-light").trim(), l = e.getPropertyValue("--col-bright").trim(), e = e.getPropertyValue("--col-vibrant").trim();
t && (Client.IonHelper.defaultThemeColors.primary = t, Client.IonHelper.defaultThemeColors.primaryShade1 = Client.IonHelper.shadeRGBColor(t, -.05), 
Client.IonHelper.defaultThemeColors.primaryShade2 = Client.IonHelper.shadeRGBColor(t, -.1), 
Client.IonHelper.defaultThemeColors.primaryShade3 = Client.IonHelper.shadeRGBColor(t, -.2)), 
i && (Client.IonHelper.defaultThemeColors.secondary = i, Client.IonHelper.defaultThemeColors.secondaryShade1 = Client.IonHelper.shadeRGBColor(i, -.05), 
Client.IonHelper.defaultThemeColors.secondaryShade2 = Client.IonHelper.shadeRGBColor(i, -.1), 
Client.IonHelper.defaultThemeColors.secondaryShade3 = Client.IonHelper.shadeRGBColor(i, -.2)), 
n && (Client.IonHelper.defaultThemeColors.danger = n, Client.IonHelper.defaultThemeColors.dangerShade1 = Client.IonHelper.shadeRGBColor(n, -.05), 
Client.IonHelper.defaultThemeColors.dangerShade2 = Client.IonHelper.shadeRGBColor(n, -.1), 
Client.IonHelper.defaultThemeColors.dangerShade3 = Client.IonHelper.shadeRGBColor(n, -.2)), 
s && (Client.IonHelper.defaultThemeColors.dark = s, Client.IonHelper.defaultThemeColors.darkShade1 = Client.IonHelper.shadeRGBColor(s, .05), 
Client.IonHelper.defaultThemeColors.darkShade2 = Client.IonHelper.shadeRGBColor(s, .1), 
Client.IonHelper.defaultThemeColors.darkShade3 = Client.IonHelper.shadeRGBColor(s, .2)), 
o && (Client.IonHelper.defaultThemeColors.light = o, Client.IonHelper.defaultThemeColors.lightShade1 = Client.IonHelper.shadeRGBColor(o, -.05), 
Client.IonHelper.defaultThemeColors.lightShade2 = Client.IonHelper.shadeRGBColor(o, -.1), 
Client.IonHelper.defaultThemeColors.lightShade3 = Client.IonHelper.shadeRGBColor(o, -.2)), 
l && (Client.IonHelper.defaultThemeColors.bright = l, Client.IonHelper.defaultThemeColors.brightShade1 = Client.IonHelper.shadeRGBColor(l, -.05), 
Client.IonHelper.defaultThemeColors.brightShade2 = Client.IonHelper.shadeRGBColor(l, -.1), 
Client.IonHelper.defaultThemeColors.brightShade3 = Client.IonHelper.shadeRGBColor(l, -.2)), 
e && (Client.IonHelper.defaultThemeColors.vibrant = e, Client.IonHelper.defaultThemeColors.vibrantShade1 = Client.IonHelper.shadeRGBColor(e, .05), 
Client.IonHelper.defaultThemeColors.vibrantShade2 = Client.IonHelper.shadeRGBColor(e, .1), 
Client.IonHelper.defaultThemeColors.vibrantShade3 = Client.IonHelper.shadeRGBColor(e, .2)), 
Client.mainFrame.cssUpdated = !0, Client.mainFrame.updateTheme({
theme: {}
});
}, Client.IdfWebEntryPoint.prototype.OnBackButton = function() {
if (Client.mainFrame.messagesPump.delayDlg.open) return !0;
var t = document.getElementsByClassName("ion-modal-cmp ion-autocomplete-cmp");
if (0 < t.length) for (let e = 0; e < t.length; e++) if ("block" === t[e].style.display) return Client.eleMap[t[e].getAttribute("parentcombo")]?.closeCombo(!0), 
!0;
let e = document.querySelector("ion-popover[parentdate], ion-picker-cmp[parentdate]");
if (e) return Client.eleMap[e.getAttribute("parentdate")]?.closePicker(!0), !0;
if (e = document.querySelector("ion-popover.popover-num-keyboard[for], ion-picker-cmp.numpad[for]")) return Client.eleMap[e.getAttribute("for")]?.closeNumericKeyboard(!0), 
!0;
if (e = document.querySelector("ion-alert.class-alertbox button:last-child.alert-button-default")) return e.click(), 
!0;
if (Client.mainFrame.idfMobile && this.commandList) {
var i = Client.eleMap[this.commandList.menuConf.id];
if (!1 === i?.parent?.exposed && i?.visible) return i.setVisible(!1, !0), !0;
}
if (this.activeView?.onHardwareBackButton()) return !0;
Client.Shell.isInsideShell && Client.Shell.sendCmd("EXIT");
}, Client.IdfWebEntryPoint.prototype.onResize = function(t) {
Client.mainFrame.sendEvents(this.handleResize()), Client.Widget.prototype.onResize.call(this, t), 
this.secondaryViews.forEach(e => e.onResize(t));
}, Client.IdfWebEntryPoint.prototype.handleResize = function() {
var e, t = [];
return !Client.mainFrame.isIDF || (e = Client.eleMap[this.centerGridConf.id].getRootObject().getBoundingClientRect()).width === this.lastRect?.width && e.height === this.lastRect?.height && e.left === this.lastRect?.left && e.top === this.lastRect?.top || (t.push({
id: "resize",
def: Client.IdfMessagesPump.eventTypes.SERVERSIDE,
content: {
oid: this.id,
par1: Math.floor(e.width),
par2: Math.floor(e.height),
par3: Math.floor(e.left),
par4: Math.floor(e.top),
par5: Math.floor(document.body.offsetWidth),
par6: Math.floor(document.body.offsetHeight)
}
}), this.lastRect = e), t;
}, Client.IdfWebEntryPoint.prototype.getPageOfView = function(t) {
return Client.eleMap[this.viewsContainerConf.id].elements.findIndex(e => e.elements[0] === t);
}, Client.IdfWebEntryPoint.sendCommand = function(e, t) {
var i = [];
Client.mainFrame.isIDF && i.push({
id: "cmd",
def: Client.IdfMessagesPump.eventTypes.ACTIVE,
content: {
oid: "wep",
obn: e + (t ? "&" + t : "")
}
}), Client.mainFrame.sendEvents(i);
}, RD3_SendCommand = Client.IdfWebEntryPoint.sendCommand, Client.IdfWebEntryPoint.prototype.customizeHeader = function() {}, 
Client.IdfWebEntryPoint.prototype.handleCustomEvent = function(e) {
return [];
}, Client || {}), Client = (Client.IdfBook = function(e, t, i) {
e = Object.assign({
showStatusbar: !0,
selectedPage: -1,
totalPages: 0,
totalPagesConfirmed: !1,
hideBorder: !1,
enabledCommands: -5,
cacheSize: 1,
fixedWidth: 0,
fixedHeight: 0,
scrollDirections: Client.IdfBook.scrollDirections.HORIZONTAL,
snapToPage: !0,
optimizeDOM: !1,
toolbarEventDef: Client.mainFrame.isIDF ? Client.IdfMessagesPump.eventTypes.ACTIVE : void 0,
changePageAnimationDef: Client.IdfWebEntryPoint.getAnimationDefault("book")
}, e), Client.IdfFrame.call(this, e, t, i), Client.mainFrame.sendEvents(this.handleResize());
}, Client.IdfBook.prototype = new Client.IdfFrame(), Client.IdfBook.transPropMap = Object.assign({}, Client.IdfFrame.transPropMap, {
pag: "selectedPage",
ptt: "totalPages",
pcf: "totalPagesConfirmed",
hib: "hideBorder",
enc: "enabledCommands",
dgp: "deletePage",
csz: "cacheSize",
fiw: "fixedWidth",
fih: "fixedHeight",
scd: "scrollDirection",
fsn: "forceSnap",
opt: "optimizeDOM",
tck: "toolbarEventDef",
cpa: "changePageAnimationDef"
}), Client.IdfBook.scrollDirections = {
HORIZONTAL: 0,
VERTICAL: 1
}, Client.IdfBook.commands = {
CMD_PRINT: 1,
CMD_NAVIGATION: 2,
CMD_CSV: 4
}, Client.IdfBook.convertPropValues = function(e) {
for (var t in Client.IdfFrame.convertPropValues(e = e || {}), e) switch (t) {
case Client.IdfBook.transPropMap.pag:
case Client.IdfBook.transPropMap.dgp:
e[t] = parseInt(e[t]) - 1;
break;

case Client.IdfBook.transPropMap.ptt:
case Client.IdfBook.transPropMap.enc:
case Client.IdfBook.transPropMap.csz:
case Client.IdfBook.transPropMap.fiw:
case Client.IdfBook.transPropMap.fih:
case Client.IdfBook.transPropMap.scd:
case Client.IdfBook.transPropMap.tck:
e[t] = parseInt(e[t]);
break;

case Client.IdfBook.transPropMap.pcf:
case Client.IdfBook.transPropMap.hib:
case Client.IdfBook.transPropMap.fsn:
case Client.IdfBook.transPropMap.opt:
e[t] = "1" === e[t];
}
}, Client.IdfBook.getRequirements = function(e) {
var t = Client.mainFrame.isIDF ? "fluid/" : "", e = Client.IdfFrame.getRequirements(e);
return Client.mainFrame.idfMobile && (e[t + "objects/swiper/swadapter.js"] = {
type: "jc",
name: "adapter"
}, e[t + "objects/swiper/swiper.min.js"] = {
type: "jc",
name: "swiper"
}, e[t + "objects/swiper/swiper.min.css"] = {
type: "cs",
name: "css"
}), e;
}, Client.IdfBook.prototype.getRootObject = function(e) {
var t;
return this.moving ? Client.IdfFrame.prototype.getRootObject.call(this, e) : (t = Client.eleMap[this.bookContainerConf.id], 
e ? t : t.domObj);
}, Client.IdfBook.prototype.getResizeRootObject = function(e) {
return this.getRootObject(e);
}, Client.IdfBook.prototype.createElementsConfig = function(e) {
Client.IdfFrame.prototype.createElementsConfig.call(this, e);
e = {
events: [ "onDragstart", "onDragenter", "onDragover", "onDragleave", "onDragend", "onDrop" ]
}, Client.mainFrame.idfMobile ? (e.c = "Swiper", e.options = {
noSwipingClass: "book-box-draggable"
}, e.events.push("onChange")) : e.c = "AltContainer", this.bookContainerConf = this.createElementConfig(e), 
this.contentContainerConf.children.push(this.bookContainerConf), e = Client.IdfWebEntryPoint.getAnimationByDef(this.changePageAnimationDef);
e && (this.bookContainerConf.animations = [ {
trigger: "change",
...e
} ]), this.statusbarConf = this.createElementConfig({
c: "Span",
className: "panel-statusbar"
}), this.titleConf.children.push(this.statusbarConf), this.topButtonConf = this.createElementConfig({
c: "IonButton",
icon: "rewind",
className: "generic-btn panel-toolbar-btn top-btn",
events: [ "onClick" ]
}), this.toolbarConf.children.push(this.topButtonConf), this.prevButtonConf = this.createElementConfig({
c: "IonButton",
icon: "play",
className: "generic-btn panel-toolbar-btn prev-btn",
events: [ "onClick" ]
}), this.toolbarConf.children.push(this.prevButtonConf), this.nextButtonConf = this.createElementConfig({
c: "IonButton",
icon: "play",
className: "generic-btn panel-toolbar-btn next-btn",
events: [ "onClick" ]
}), this.toolbarConf.children.push(this.nextButtonConf), this.bottomButtonConf = this.createElementConfig({
c: "IonButton",
icon: "fastforward",
className: "generic-btn panel-toolbar-btn bottom-btn",
events: [ "onClick" ]
}), this.toolbarConf.children.push(this.bottomButtonConf), this.printButtonConf = this.createElementConfig({
c: "IonButton",
icon: "print",
className: "generic-btn panel-toolbar-btn",
events: [ "onClick" ]
}), this.toolbarConf.children.push(this.printButtonConf), this.csvButtonConf = this.createElementConfig({
c: "IonButton",
icon: "open",
className: "generic-btn panel-toolbar-btn",
events: [ "onClick" ]
}), this.toolbarConf.children.push(this.csvButtonConf);
}, Client.IdfBook.prototype.createChildren = function(n) {
n.deletePage && (this.deletePage(this.elements.find(e => e.number === n.deletePage)), 
delete n.deletePage), n.children.forEach((t, e) => {
if (0 === e) for (let e = this.elements.length - 1; 0 <= e; e--) {
var i = this.elements[e];
if (i.number === t.number) this.replacingPage = !0, this.removeChild(i), delete this.replacingPage; else if (i.number < t.number) {
t.previd = i.id;
break;
}
} else t.previd = n.children[e - 1].id;
}), Client.Widget.prototype.createChildren.call(this, n), n.children.find(e => e.number === n.selectedPage) && (this.selectedPage = -1);
}, Client.IdfBook.prototype.updateElement = function(e) {
Client.IdfFrame.prototype.updateElement.call(this, e);
var t, i = {};
let n = !1;
for (t in e) {
var s = e[t];
switch (t) {
case "selectedPage":
this.setSelectedPage(s, i);
break;

case "totalPages":
this.setTotalPages(s, i);
break;

case "totalPagesConfirmed":
this.setTotalPagesConfirmed(s, i);
break;

case "hideBorder":
this.setHideBorder(s, i);
break;

case "enabledCommands":
this.setEnabledCommands(s);
break;

case "cacheSize":
this.cacheSize = s;
break;

case "fixedWidth":
this.fixedWidth = s, n = !0;
break;

case "fixedHeight":
this.fixedHeight = s, n = !0;
break;

case "scrollDirection":
this.scrollDirection = s, this.refreshMobileContainer = !0;
break;

case "snapToPage":
this.snapToPage = s, this.refreshMobileContainer = !0;
break;

case "optimizeDOM":
this.optimizeDOM = s, this.refreshMobileContainer = !0;
}
}
i.updateStatusbar && (delete i.updateStatusbar, this.updateStatusbar()), this.getRootObject(!0).updateElement(i), 
this.refreshMobileContainer && this.updateMobileContainer(), n && this.updateFixedZones();
}, Client.IdfBook.prototype.onEvent = function(n) {
var s = Client.IdfFrame.prototype.onEvent.call(this, n);
switch (n.id) {
case "onClick":
{
let e = "page" in n ? n.page : this.selectedPage, t = n.button;
switch (n.obj) {
case this.topButtonConf.id:
t = "top", e = 0;
break;

case this.prevButtonConf.id:
t = "prev", 0 < this.selectedPage && (e = this.selectedPage - 1);
break;

case this.nextButtonConf.id:
t = "next", (!this.totalPagesConfirmed || this.selectedPage < this.totalPages - 1) && (e = this.selectedPage + 1);
break;

case this.bottomButtonConf.id:
t = "bottom", e = this.totalPagesConfirmed ? this.totalPages - 1 : -1;
break;

case this.printButtonConf.id:
t = "print";
break;

case this.csvButtonConf.id:
t = "csv";
}
let i = this.toolbarEventDef;
"csv" === t || "print" === t || this.getPageByIndex(e) && 1 === this.cacheSize || (i |= Client.IdfMessagesPump.eventTypes.IMMEDIATE), 
t && s.push({
id: "booktb",
def: i,
content: {
oid: this.id,
obn: t,
par1: e + 1,
xck: n.content?.offsetX,
yck: n.content?.offsetY
}
}), this.selectedPage === e || -1 === e || Client.mainFrame.isIDF && !Client.IdfMessagesPump.isClientSideEvent(i) || this.updateElement({
selectedPage: e
});
break;
}

case "onChange":
return this.onEvent({
id: "onClick",
button: "goto",
page: this.elements[n.content.activeIndex].number
});

case "onDragstart":
this.handleDragStart(n);
break;

case "onDragenter":
this.handleDragEnter(n);
break;

case "onDragover":
this.handleDragOver(n);
break;

case "onDragleave":
this.handleDragLeave(n);
break;

case "onDragend":
this.handleDragEnd(n);
break;

case "onDrop":
s.push(...this.handleDrop(n));
}
return s;
}, Client.IdfBook.getDroppableBoxOver = function(e) {
for (;e && e !== document; ) {
if (e.classList.contains("book-box-droppable")) return e;
if (e.classList.contains("book-box")) return;
e = e.parentNode;
}
}, Client.IdfBook.prototype.handleDragStart = function(e) {
let t = e.content.srcEvent;
e = Client.eleMap[t.target.id].parentWidget;
t.dataTransfer.setData("text", e.id), t.dataTransfer.effectAllowed = "move", setTimeout(() => t.target.classList.add("book-box-dragged"));
}, Client.IdfBook.prototype.handleDragEnter = function(e) {
var e = e.content.srcEvent, t = Client.IdfBook.getDroppableBoxOver(e.target);
t && (e.preventDefault(), t.classList.add("book-box-drop-hover"), e.dataTransfer.dropEffect = "move");
}, Client.IdfBook.prototype.handleDragOver = function(e) {
e = e.content.srcEvent;
Client.IdfBook.getDroppableBoxOver(e.target) && (e.preventDefault(), e.dataTransfer.dropEffect = "move");
}, Client.IdfBook.prototype.handleDragLeave = function(e) {
var e = e.content.srcEvent, t = Client.IdfBook.getDroppableBoxOver(e.toElement), e = Client.IdfBook.getDroppableBoxOver(e.fromElement);
!t || e && t === e || t.classList.remove("book-box-drop-hover");
}, Client.IdfBook.prototype.handleDragEnd = function(e) {
e.content.srcEvent.target.classList.remove("book-box-dragged");
}, Client.IdfBook.prototype.handleDrop = function(e) {
var e = e.content.srcEvent, t = Client.eleMap[e.dataTransfer.getData("text")], e = Client.eleMap[Client.IdfBook.getDroppableBoxOver(e.target).id].parentWidget, i = (e.getRootObject().classList.remove("book-box-drop-hover"), 
[]);
return i.push({
id: "drp",
def: e.dropEventDef,
content: {
oid: e.id,
obn: t.id
}
}), i;
}, Client.IdfBook.prototype.isCommandEnabled = function(e) {
return this.enabledCommands & e && this.showToolbar && !this.collapsed;
}, Client.IdfBook.prototype.updateToolbar = function() {
Client.IdfFrame.prototype.updateToolbar.call(this), this.updateStatusbar();
var e = !!this.isCommandEnabled(Client.IdfBook.commands.CMD_NAVIGATION), e = (Client.eleMap[this.topButtonConf.id].updateElement({
visible: e,
tooltip: this.getTooltip(this.topButtonConf.id)
}), Client.eleMap[this.prevButtonConf.id].updateElement({
visible: e,
tooltip: this.getTooltip(this.prevButtonConf.id)
}), Client.eleMap[this.nextButtonConf.id].updateElement({
visible: e,
tooltip: this.getTooltip(this.nextButtonConf.id)
}), Client.eleMap[this.bottomButtonConf.id].updateElement({
visible: e,
tooltip: this.getTooltip(this.bottomButtonConf.id)
}), !!this.isCommandEnabled(Client.IdfBook.commands.CMD_PRINT)), e = (Client.eleMap[this.printButtonConf.id].updateElement({
visible: e,
tooltip: this.getTooltip(this.printButtonConf.id)
}), !!this.isCommandEnabled(Client.IdfBook.commands.CMD_CSV));
Client.eleMap[this.csvButtonConf.id].updateElement({
visible: e,
tooltip: this.getTooltip(this.csvButtonConf.id)
});
}, Client.IdfBook.prototype.getTooltip = function(e) {
var t = Client.IdfFrame.prototype.getTooltip.call(this, e);
if (t) return t;
var i = Client.mainFrame.wep;
let n, s;
switch (e) {
case this.topButtonConf.id:
n = Client.IdfResources.t("TIP_TITLE_PanelStart"), s = i?.SRV_MSG_PanelStart || Client.IdfResources.t("SRV_MSG_PanelStart");
break;

case this.prevButtonConf.id:
n = Client.IdfResources.t("TIP_TITLE_PanelPrevPage"), s = i?.SRV_MSG_PanelPrevPage || Client.IdfResources.t("SRV_MSG_PanelPrevPage");
break;

case this.nextButtonConf.id:
n = Client.IdfResources.t("TIP_TITLE_PanelNextPage"), s = i?.SRV_MSG_PanelNextPage || Client.IdfResources.t("SRV_MSG_PanelNextPage");
break;

case this.bottomButtonConf.id:
n = Client.IdfResources.t("TIP_TITLE_PanelEnd"), s = i?.SRV_MSG_PanelEnd || Client.IdfResources.t("SRV_MSG_PanelEnd");
break;

case this.printButtonConf.id:
n = Client.IdfResources.t("TIP_TITLE_Print"), s = i?.SRV_MSG_CreatePDF || Client.IdfResources.t("SRV_MSG_CreatePDF");
break;

case this.csvButtonConf.id:
n = Client.IdfResources.t("TIP_TITLE_Export"), s = i?.SRV_MSG_Export || Client.IdfResources.t("SRV_MSG_Export");
}
return Client.Widget.getHTMLTooltip(n, s);
}, Client.IdfBook.prototype.updateStatusbar = function() {
var e = this.showStatusbar && !this.collapsed, t = Client.IdfResources.t("SRV_MSG_PageNumOf", [ this.selectedPage + 1, this.totalPages + (this.totalPagesConfirmed ? "" : "+") ]);
Client.eleMap[this.statusbarConf.id].updateElement({
innerText: t,
visible: e
});
}, Client.IdfBook.prototype.setSelectedPage = function(e, t) {
this.selectedPage = e, this.refreshMobileContainer = !0;
var i, e = Client.mainFrame.idfMobile ? "index" : "selectedPage";
0 <= this.selectedPage ? 0 <= (i = this.elements.findIndex(e => e.number === this.selectedPage)) && (t[e] = i) : t[e] = 0, 
t.updateStatusbar = !0;
}, Client.IdfBook.prototype.setTotalPages = function(e, t) {
if (this.totalPages !== e) {
if (this.totalPages = e, this.refreshMobileContainer = !0, 0 === this.totalPages) {
for (;0 < this.elements.length; ) this.removeChild(this.elements[0]);
this.setSelectedPage(-1, t);
}
t.updateStatusbar = !0;
}
}, Client.IdfBook.prototype.setTotalPagesConfirmed = function(e, t) {
this.totalPagesConfirmed !== e && (this.totalPagesConfirmed = e, this.refreshMobileContainer = !0, 
t.updateStatusbar = !0);
}, Client.IdfBook.prototype.setHideBorder = function(e, t) {
var i = this.getRootObject(!0);
Client.Widget.updateElementClassName(i, this.getClassForHideBorder(), !0), this.hideBorder = e, 
Client.Widget.updateElementClassName(i, this.getClassForHideBorder()), this.onResize();
}, Client.IdfBook.prototype.getClassForHideBorder = function() {
return "book-container" + (this.hideBorder ? "-noborder" : "");
}, Client.IdfBook.prototype.setEnabledCommands = function(e) {
this.enabledCommands = e, this.updateToolbar();
}, Client.IdfBook.prototype.getPageByIndex = function(t) {
return this.elements.find(e => e.number === t);
}, Client.IdfBook.prototype.updateFixedZones = function() {
this.elements.forEach(e => e.updateFixedZones());
}, Client.IdfBook.prototype.deletePage = function(e) {
this.removeChild(e);
}, Client.IdfBook.prototype.resetCache = function(e) {
var i = 1 === this.cacheSize ? 0 : e.from, n = 1 === this.cacheSize ? 0 : e.to;
for (let t = 0; t < this.elements.length; t++) {
var s = this.elements[t];
let e = !1;
(e = 1 === this.cacheSize || 0 === i || 0 === n ? s.number !== this.selectedPage : s.number < i || n < s.number) && (this.deletePage(s), 
t--);
}
}, Client.IdfBook.prototype.updateMobileContainer = function() {
if (delete this.refreshMobileContainer, Client.mainFrame.idfMobile && !this.replacingPage) {
var e = this.elements.findIndex(e => e.number === this.selectedPage);
if (0 < this.selectedPage && !this.elements[e - 1] && this.createPagePlaceHolder(this.selectedPage - 1, this.elements[e].id), 
0 <= this.selectedPage && (this.selectedPage < this.totalPages - 1 || !this.totalPagesConfirmed) && !this.elements[e + 1] && this.createPagePlaceHolder(this.selectedPage + 1), 
this.totalPagesConfirmed) for (let e = this.elements.length - 1; 0 <= e; e--) {
var t = this.elements[e];
if (!t.isPlaceHolder) break;
this.removeChild(t);
}
}
}, Client.IdfBook.prototype.createPagePlaceHolder = function(e, t) {
var i = this.elements[0], i = this.createElementConfig({
c: "IdfBookPage",
number: e,
width: i._width,
height: i._height,
unitOfMeasure: i.unitOfMeasure,
fitMode: i.fitMode,
isPlaceHolder: !0
}), i = this.insertBefore({
child: i,
sib: t
});
return i.getRootObject(!0).updateElement({
className: "book-page-placeholder " + i.getRootObject().className,
innerText: e + 1
}), i;
}, Client.IdfBook.prototype.getClickDetail = function(e, t) {
var i, n = Client.IdfFrame.prototype.getClickDetail.call(this, e, t);
let s = -1;
return (t = (t = t instanceof Client.IdfControl ? t.parent : t) instanceof Client.IdfSpan ? t.parent : t) instanceof Client.IdfBox && (i = getComputedStyle(t.getRootObject()), 
n.x = Math.round(Client.IdfBookPage.convertFromPx(e.content.offsetX + parseInt(i.borderLeftWidth), t.page.unitOfMeasure)), 
n.y = Math.round(Client.IdfBookPage.convertFromPx(e.content.offsetY + parseInt(i.borderTopWidth), t.page.unitOfMeasure)), 
s = t.id), Client.mainFrame.isIDF ? n.par4 = s : n.box = s, n;
}, Client.IdfBook.prototype.acceptsDrop = function(e) {
return !1;
}, Client || {}), Client = (Client.IdfBookPage = function(e, t, i) {
e = Object.assign({
width: 0,
height: 0,
unitOfMeasure: Client.IdfBookPage.unitsOfMeasure.MILLIMETERS,
fitMode: Client.IdfBookPage.fitModes.NONE
}, e), Client.Widget.call(this, e, t, i);
}, Client.IdfBookPage.prototype = new Client.Widget(), Client.IdfBookPage.transPropMap = {
num: "number",
um: "unitOfMeasure",
fit: "fitMode"
}, Client.IdfBookPage.unitsOfMeasure = {
MILLIMETERS: "mm",
INCHES: "in"
}, Client.IdfBookPage.fitModes = {
NONE: 1,
WIDTH: 2,
PAGE: 3
}, Client.IdfBookPage.convertToMeasure = function(e, t) {
switch (t) {
case Client.IdfBookPage.unitsOfMeasure.MILLIMETERS:
return e / 100;

case Client.IdfBookPage.unitsOfMeasure.INCHES:
return e / 1e3;
}
}, Client.IdfBookPage.convertIntoPx = function(e, t) {
switch (t) {
case Client.IdfBookPage.unitsOfMeasure.MILLIMETERS:
return 96 * e / 25.4;

case Client.IdfBookPage.unitsOfMeasure.INCHES:
return 96 * e;
}
}, Client.IdfBookPage.convertFromPx = function(e, t) {
switch (t) {
case Client.IdfBookPage.unitsOfMeasure.MILLIMETERS:
return e / 96 * 25.4;

case Client.IdfBookPage.unitsOfMeasure.INCHES:
return e / 96;
}
}, Client.IdfBookPage.convertPropValues = function(e) {
for (var t in e = e || {}) switch (t) {
case Client.IdfBookPage.transPropMap.num:
e[t] = parseInt(e[t]) - 1;
break;

case Client.IdfBookPage.transPropMap.fit:
e[t] = parseInt(e[t]);
}
}, Client.IdfBookPage.prototype.realize = function(e, t, i) {
var n = this.createElementConfig({
c: "Container",
className: "book-page-container" + (this.parent.hideBorder ? "-noborder" : "")
});
this.mainObjects.push(i.createElement(n, t, i)), this.createChildren(e);
}, Client.IdfBookPage.prototype.createChildren = function(i) {
for (let e = 0; e < i.children.length; e++) {
let t = i.children[e];
var n;
"IdfSection" === t.c && (n = i.children.find(function(e) {
return "IdfBox" === e.c && e.id === t.mastroBox;
}), i.children.splice(e--, 1), delete t.mastroBox, n.children.push(t));
}
Client.Widget.prototype.createChildren.call(this, i);
}, Client.IdfBookPage.prototype.updateElement = function(e) {
Client.Widget.prototype.updateElement.call(this, e);
var t, i = {
style: {}
};
for (t in e) {
var n = e[t];
switch (t) {
case "number":
this.number = n;
break;

case "width":
this._width = n, this.width = Client.IdfBookPage.convertToMeasure(n, this.unitOfMeasure), 
i.style.width = Client.IdfBookPage.convertIntoPx(this.width, this.unitOfMeasure) + "px";
break;

case "height":
this._height = n, this.height = Client.IdfBookPage.convertToMeasure(n, this.unitOfMeasure), 
i.style.height = Client.IdfBookPage.convertIntoPx(this.height, this.unitOfMeasure) + "px";
break;

case "fitMode":
this.setFitMode(n, i);
}
}
this.getRootObject(!0).updateElement(i);
}, Client.IdfBookPage.prototype.setFitMode = function(e, t) {
this.fitMode = e, t.style.overflowX = this.fitMode !== Client.IdfBookPage.fitModes.NONE ? "hidden" : "auto", 
t.style.overflowY = this.fitMode === Client.IdfBookPage.fitModes.PAGE ? "hidden" : "auto";
}, Client.IdfBookPage.prototype.updateFixedZones = function() {
let t = Math.min(this.width, Client.IdfBookPage.convertToMeasure(this.parent.fixedWidth, this.unitOfMeasure)), i = Math.min(this.height, Client.IdfBookPage.convertToMeasure(this.parent.fixedHeight, this.unitOfMeasure));
var e, n, s = this.parent.getRootObject(!0);
if (!t && !i || this.fixedPageBox || (o = this.createElementConfig({
c: "Container",
className: "book-page-wrapper-fixed"
}), this.fixedPageWrapper = s.insertBefore({
child: o
}), o = this.createElementConfig({
c: "Container",
className: "book-page-container-fixed"
}), this.fixedPageBox = this.fixedPageWrapper.insertBefore({
child: o
}), this.fixedPageBox.insertBefore({
child: this.getRootObject(!0)
}), s.updateElement({
style: {
overflow: "hidden"
}
}), this.fixedPageBox.updateElement({
style: {
overflow: "auto"
}
}), this.fixedPageBox.getRootObject().addEventListener("scroll", this.onScroll.bind(this))), 
t && !this.fixedLeftPageBox) {
var o = this.createElementConfig({
c: "Container",
className: "book-page-container-fixed book-page-container-fixed-left"
});
this.fixedLeftPageBox = this.fixedPageWrapper.insertBefore({
child: o
});
} else if (!t && this.fixedLeftPageBox) {
for (;this.fixedLeftPageBox.elements.length; ) this.getRootObject(!0).insertBefore({
child: this.fixedLeftPageBox.elements[0].getRootObject()
});
this.fixedLeftPageBox.parent.removeChild({
id: this.fixedLeftPageBox.id
}), delete this.fixedLeftPageBox, this.fixedLeftScroll && this.fixedLeftScroll.close(), 
delete this.fixedLeftScroll;
}
if (i && !this.fixedTopPageBox) {
var o = this.createElementConfig({
c: "Container",
className: "book-page-container-fixed book-page-container-fixed-top"
});
this.fixedTopPageBox = this.fixedPageWrapper.insertBefore({
child: o
});
} else if (!i && this.fixedTopPageBox) {
for (;this.fixedTopPageBox.elements.length; ) this.getRootObject(!0).insertBefore({
child: this.fixedTopPageBox.elements[0].getRootObject()
});
this.fixedTopPageBox.parent.removeChild({
id: this.fixedTopPageBox.id
}), delete this.fixedTopPageBox, this.fixedTopScroll && this.fixedTopScroll.close(), 
delete this.fixedTopScroll;
}
if (t && t && !this.fixedTopLeftPageBox) {
o = this.createElementConfig({
c: "Container",
className: "book-page-container-fixed book-page-container-fixed-left book-page-container-fixed-top"
});
this.fixedTopLeftPageBox = this.fixedPageWrapper.insertBefore({
child: o
});
} else if ((!t || !t) && this.fixedTopLeftPageBox) {
for (;this.fixedTopLeftPageBox.elements.length; ) this.getRootObject(!0).insertBefore({
child: this.fixedTopLeftPageBox.elements[0].getRootObject()
});
this.fixedTopLeftPageBox.parent.removeChild({
id: this.fixedTopLeftPageBox.id
}), delete this.fixedTopLeftPageBox, this.fixedTopLeftScroll && this.fixedTopLeftScroll.close(), 
delete this.fixedTopLeftScroll;
}
if (!t && !i && this.fixedPageBox) {
for (;this.fixedPageBox.elements.length; ) s.insertBefore({
child: this.fixedPageBox.elements[0]
});
s.removeChild({
id: this.fixedPageWrapper.id
}), delete this.fixedPageWrapper, delete this.fixedPageBox, s.updateElement({
style: {
overflow: ""
}
}), this.getRootObject(!0).updateElement({
style: {
marginLeft: "",
marginTop: ""
}
});
}
(this.fixedLeftPageBox || this.fixedTopPageBox) && (o = Math.round(Client.IdfBookPage.convertIntoPx(t, this.unitOfMeasure)), 
e = Math.round(Client.IdfBookPage.convertIntoPx(i, this.unitOfMeasure)), n = getComputedStyle(this.getRootObject()).backgroundColor, 
this.fixedLeftPageBox && this.fixedLeftPageBox.updateElement({
style: {
height: Client.IdfBookPage.convertIntoPx(this.height, this.unitOfMeasure) + 1 + "px",
width: o + 1 + "px",
backgroundColor: n
}
}), this.fixedTopPageBox && this.fixedTopPageBox.updateElement({
style: {
width: Client.IdfBookPage.convertIntoPx(this.width, this.unitOfMeasure) + 1 + "px",
height: e + "px",
backgroundColor: n
}
}), this.fixedTopLeftPageBox && this.fixedTopLeftPageBox.updateElement({
style: {
width: o + 1 + "px",
height: e + "px",
backgroundColor: n,
zIndex: 2
}
}), this.fixedPageWrapper.updateElement({
visible: !0
}), n = {
left: o + "px",
top: e + "px"
}, this.fixedPageWrapper.getRootObject().clientWidth > o && (n.width = this.fixedPageWrapper.getRootObject().clientWidth - o + "px"), 
this.fixedPageWrapper.getRootObject().clientHeight > e && (n.height = this.fixedPageWrapper.getRootObject().clientHeight - e + "px"), 
this.fixedPageBox.updateElement({
style: n
}), this.getRootObject(!0).updateElement({
style: {
marginLeft: -o + "px",
marginTop: -e + "px"
}
})), this.elements.slice().forEach(e => {
this.fixedLeftPageBox && e.xPos + e.width <= t && e.yPos >= i ? this.fixedLeftPageBox.insertBefore({
child: e.getRootObject(!0)
}) : this.fixedTopPageBox && e.yPos + e.height <= i && e.xPos >= t ? this.fixedTopPageBox.insertBefore({
child: e.getRootObject(!0)
}) : this.fixedTopLeftPageBox && e.xPos + e.width <= t && e.yPos + e.height <= i && this.fixedTopLeftPageBox.insertBefore({
child: e.getRootObject(!0)
});
});
}, Client.IdfBookPage.prototype.onScroll = function(e) {
(this.fixedLeftPageBox || this.fixedTopPageBox) && (e = e.srcElement) && (this.fixedLeftPageBox && this.fixedLeftPageBox.updateElement({
style: {
top: -Math.max(e.scrollTop, 0) + "px"
}
}), this.fixedTopPageBox) && this.fixedTopPageBox.updateElement({
style: {
left: -Math.max(e.scrollLeft, 0) + "px"
}
});
}, Client || {}), Client = (Client.IdfSection = function(e, t, i) {
e = Object.assign({
xPos: 0,
yPos: 0,
width: 0,
height: 0,
visualStyle: 0,
numberOfColumns: 1,
columnSpace: 0,
recordNumber: 0,
visible: !0,
overlay: !1,
className: ""
}, e), Client.Widget.call(this, e, t, i);
}, Client.IdfSection.prototype = new Client.Widget(), Object.defineProperty(Client.IdfSection.prototype, "page", {
get: function() {
return this.parent.page;
}
}), Client.IdfSection.transPropMap = {
xp: "xPos",
yp: "yPos",
vis: "visible",
col: "numberOfColumns",
csp: "columnSpace",
mas: "mastroBox",
rec: "recordNumber",
ovr: "overlay"
}, Client.IdfSection.convertPropValues = function(e) {
for (var t in e = e || {}) switch (t) {
case Client.IdfSection.transPropMap.col:
case Client.IdfSection.transPropMap.csp:
case Client.IdfSection.transPropMap.rec:
case Client.IdfSection.transPropMap.xp:
case Client.IdfSection.transPropMap.yp:
e[t] = parseInt(e[t]);
break;

case Client.IdfSection.transPropMap.vis:
case Client.IdfSection.transPropMap.ovr:
e[t] = "1" === e[t];
}
}, Client.IdfSection.prototype.realize = function(e, t, i) {
var n = this.createElementConfig({
c: "Container",
className: "book-section"
});
this.mainObjects.push(i.createElement(n, t, i)), this.createChildren(e);
}, Client.IdfSection.prototype.updateElement = function(e) {
Client.Widget.prototype.updateElement.call(this, e);
var t, i = {
style: {}
};
for (t in e) {
var n = e[t];
switch (t) {
case "xPos":
this.setXPos(n, i);
break;

case "yPos":
this.setYPos(n, i);
break;

case "width":
this.setWidth(n, i);
break;

case "height":
this.setHeight(n, i);
break;

case "numberOfColumns":
this.numberOfColumns = n;
break;

case "columnSpace":
this.columnSpace = n;
break;

case "recordNumber":
this.setRecordNumber(n, i);
break;

case "visible":
this.setVisible(n, i);
break;

case "mastroBox":
this.mastroBox = n;
break;

case "overlay":
this.overlay = n;
break;

case "className":
this.setClassName(n, i);
}
}
this.getRootObject(!0).updateElement(i);
}, Client.IdfSection.prototype.setXPos = function(e, t) {
this.xPos = Client.IdfBookPage.convertToMeasure(e, this.page.unitOfMeasure), t.style.left = Math.round(Client.IdfBookPage.convertIntoPx(this.xPos, this.page.unitOfMeasure)) + "px";
}, Client.IdfSection.prototype.setYPos = function(e, t) {
this.yPos = Client.IdfBookPage.convertToMeasure(e, this.page.unitOfMeasure), t.style.top = Math.round(Client.IdfBookPage.convertIntoPx(this.yPos, this.page.unitOfMeasure)) + "px";
}, Client.IdfSection.prototype.setWidth = function(e, t) {
this.width = Client.IdfBookPage.convertToMeasure(e, this.page.unitOfMeasure), t.style.width = Math.round(Client.IdfBookPage.convertIntoPx(this.width, this.page.unitOfMeasure)) + "px";
}, Client.IdfSection.prototype.setHeight = function(e, t) {
this.height = Client.IdfBookPage.convertToMeasure(e, this.page.unitOfMeasure), t.style.height = Math.round(Client.IdfBookPage.convertIntoPx(this.height, this.page.unitOfMeasure)) + "px";
}, Client.IdfSection.prototype.setRecordNumber = function(e, t) {
if (this.recordNumber !== e) {
var o = this.recordNumber;
this.recordNumber = e;
let i = -1, n = -1, s = -1;
this.parent.elements.forEach((e, t) => {
e.recNumber === this.recNumber - 1 && (i = t), 1 === e.recNumber && (n = t), e === this && (s = t);
}), 0 <= i ? (this.parent.elements.splice(s, 1), s < i && i--, this.parent.elements.splice(i + 1, 0, this)) : (this.parent.elements.splice(s, 1), 
this.parent.elements.splice(n, 0, this)), o % 2 != this.recordNumber % 2 && (this.applyVisualStyle(), 
this.elements.forEach(e => e.applyVisualStyle()));
}
}, Client.IdfSection.prototype.setVisible = function(e, t) {
this.visible = e, t.visible = e;
}, Client.IdfSection.prototype.setClassName = function(e, t) {
var i = this.getRootObject(!0);
Client.Widget.updateElementClassName(i, this.className, !0), this.className = e, 
Client.Widget.updateElementClassName(i, this.className);
}, Client.IdfSection.prototype.applyVisualStyle = function() {
var e;
this.owneSection || (e = {
objType: "field",
list: !0,
alternate: this.recordNumber % 2 == 0,
bookBox: !0
}, this.addVisualStyleClasses(this.getRootObject(!0), e));
}, Client || {}), Client = (Client.IdfBox = function(e, t, i) {
e = Object.assign({
xPos: 0,
yPos: 0,
width: 0,
height: 0,
visualStyle: null,
image: "",
interline: 0,
stretch: Client.IdfBox.stretches.AUTO,
visible: !0,
canDrag: !1,
canDrop: !1,
canTransform: !1,
canScroll: !1,
canClick: !1,
tooltip: "",
graphFile: "",
graphMap: "",
numRows: 1,
visualFlags: -1,
subForm: null,
badge: "",
className: "",
backColor: "",
color: "",
fontModifiers: "",
horizontalAlignment: Client.IdfVisualStyle.alignments.AUTO,
verticalAlignment: Client.IdfVisualStyle.alignments.AUTO,
clickEventDef: Client.IdfMessagesPump?.eventTypes.ACTIVE,
dropEventDef: Client.IdfMessagesPump?.eventTypes.ACTIVE,
transformEventDef: Client.IdfMessagesPump?.eventTypes.ACTIVE
}, e), Client.Widget.call(this, e, t, i);
}, Client.IdfBox.prototype = new Client.Widget(), Object.defineProperty(Client.IdfBox.prototype, "page", {
get: function() {
return this.parent instanceof Client.IdfBookPage ? this.parent : this.parent instanceof Client.IdfSection ? this.parent.page : void 0;
}
}), Client.IdfBox.transPropMap = {
xp: "xPos",
yp: "yPos",
img: "image",
int: "interline",
str: "stretch",
vis: "visible",
vfl: "visualFlags",
dra: "canDrag",
dro: "canDrop",
tra: "canTransform",
scr: "canScroll",
act: "canClick",
grf: "graphFile",
grm: "graphMap",
num: "numRows",
csf: "subForm",
bkc: "backColor",
frc: "color",
ftm: "fontModifiers",
aln: "horizontalAlignment",
valn: "verticalAlignment"
}, Client.IdfBox.stretches = {
AUTO: 1,
NONE: 2,
FILL: 3,
ENLARGE: 4,
CROP: 5
}, Client.IdfBox.convertPropValues = function(e) {
for (var t in e = e || {}) switch (t) {
case Client.IdfBox.transPropMap.int:
case Client.IdfBox.transPropMap.str:
case Client.IdfBox.transPropMap.vfl:
case Client.IdfBox.transPropMap.num:
case Client.IdfBox.transPropMap.csf:
case Client.IdfBox.transPropMap.aln:
case Client.IdfBox.transPropMap.valn:
case Client.IdfBox.transPropMap.clk:
case Client.IdfBox.transPropMap.xp:
case Client.IdfBox.transPropMap.yp:
e[t] = parseInt(e[t]);
break;

case Client.IdfBox.transPropMap.vis:
case Client.IdfBox.transPropMap.dra:
case Client.IdfBox.transPropMap.dro:
case Client.IdfBox.transPropMap.tra:
case Client.IdfBox.transPropMap.scr:
case Client.IdfBox.transPropMap.act:
e[t] = "1" === e[t];
}
}, Client.IdfBox.prototype.createChildren = function(e) {
this.setSubForm(), e.subForm && Client.eleMap[e.children[0].id] && Client.eleMap[e.children[0].id].close(), 
Client.Widget.prototype.createChildren.call(this, e);
}, Client.IdfBox.prototype.realize = function(e, t, i) {
var n = this.createElementConfig({
c: "Container",
className: "book-box",
events: [ "onClick" ]
});
this.mainObjects.push(i.createElement(n, t, i)), this.createChildren(e);
}, Client.IdfBox.prototype.updateElement = function(e) {
Client.Widget.prototype.updateElement.call(this, e);
let t = !1;
var i, n = {
style: {}
};
for (i in e) {
var s = e[i];
switch (i) {
case "xPos":
Client.IdfSection.prototype.setXPos.call(this, s, n);
break;

case "yPos":
Client.IdfSection.prototype.setYPos.call(this, s, n);
break;

case "width":
Client.IdfSection.prototype.setWidth.call(this, s, n);
break;

case "height":
Client.IdfSection.prototype.setHeight.call(this, s, n);
break;

case "image":
t = !0, this.setImage(s, n);
break;

case "interline":
this.setInterline(s, n);
break;

case "stretch":
this.setStretch(s, n);
break;

case "visible":
Client.IdfSection.prototype.setVisible.call(this, s, n);
break;

case "canDrag":
this.setCanDrag(s, n);
break;

case "canDrop":
this.setCanDrop(s, n);
break;

case "canTransform":
this.canTransform = s;
break;

case "canScroll":
this.setCanScroll(s, n);
break;

case "canClick":
this.setCanClick(s, n);
break;

case "tooltip":
this.setTooltip(s, n);
break;

case "graphFile":
t = !0, this.setGraphFile(s, n);
break;

case "graphMap":
break;

case "numRows":
this.setNumRows(s);
break;

case "visualFlags":
this.visualFlags = s;
break;

case "subForm":
t = !0, this.setSubForm(s);
break;

case "badge":
this.setBadge(s);
break;

case "className":
Client.IdfSection.prototype.setClassName.call(this, s, n);
break;

case "backColor":
this.setBackColor(s, n);
break;

case "color":
this.setColor(s, n);
break;

case "fontModifiers":
this.setFontModifiers(s, n);
break;

case "horizontalAlignment":
this.setHorizontalAlignment(s, n);
break;

case "verticalAlignment":
this.setVerticalAlignment(s, n);
break;

case "adjustPadding":
case "visualStyle":
t = !0;
}
}
t && this.adjustPadding(n), this.getRootObject(!0).updateElement(n);
}, Client.IdfBox.prototype.setImage = function(e, t) {
this.image = e, t.style.backgroundImage = this.image ? `url('${this.image}')` : "";
}, Client.IdfBox.prototype.setInterline = function(e, t) {
this.interline = e, t.style.lineHeight = this.interline ? this.interline + "pt" : "";
}, Client.IdfBox.prototype.setStretch = function(e, t) {
var i = this.getRootObject(!0);
Client.Widget.updateElementClassName(i, this.getClassForStretch(), !0), this.stretch = e, 
Client.Widget.updateElementClassName(i, this.getClassForStretch());
}, Client.IdfBox.prototype.getClassForStretch = function() {
switch (this.stretch) {
case Client.IdfBox.stretches.NONE:
return "";

case Client.IdfBox.stretches.CROP:
return "book-box-img-crop";

case Client.IdfBox.stretches.AUTO:
case Client.IdfBox.stretches.FILL:
return "book-box-img-fill";

case Client.IdfBox.stretches.ENLARGE:
return "book-box-img-enlarge";
}
}, Client.IdfBox.prototype.setTooltip = function(e, t) {
t.tooltip = Client.Widget.getHTMLTooltip(null, e);
}, Client.IdfBox.prototype.setGraphFile = function(e, t) {
this.graphFile = e, this.setImage(e || this.image, t);
}, Client.IdfBox.prototype.setCanDrag = function(e, t) {
this.canDrag = e, this.parentIdfFrame.canDrag || this.parentIdfFrame.canDrop || (t.draggable = e, 
Client.Widget.updateElementClassName(this.getRootObject(!0), "book-box-draggable", !this.canDrag));
}, Client.IdfBox.prototype.setCanDrop = function(e, t) {
this.canDrop = e, this.parentIdfFrame.canDrag || this.parentIdfFrame.canDrop || Client.Widget.updateElementClassName(this.getRootObject(!0), "book-box-droppable", !this.canDrop);
}, Client.IdfBox.prototype.setCanScroll = function(e, t) {
this.canScroll = e, t.style.overflow = e ? "auto" : "";
}, Client.IdfBox.prototype.setCanClick = function(e, t) {
this.canClick = e, Client.Widget.updateElementClassName(this.getRootObject(!0), "book-box-clickable", !this.canClick);
}, Client.IdfBox.prototype.setNumRows = function(e) {
this.numRows = e, this.elements.forEach(e => {
e instanceof Client.IdfSpan && e.updateElement({
numRows: this.numRows
});
});
}, Client.IdfBox.prototype.setSubForm = function(e) {
this.subForm && (this.removeChild(this.subForm), delete this.subForm), 0 !== e && this.elements[0] instanceof Client.IdfView && (this.subForm = this.elements[0]);
}, Client.IdfBox.prototype.setBadge = function(e) {
var t;
this.badge ? (this.badgeObj || (t = this.createElementConfig({
c: "IonBadge",
className: "generic-badge"
}), this.badgeObj = this.getRootObject(!0).insertBefore({
child: t
})), this.badgeObj.updateElement({
innerText: this.badge
})) : this.badgeObj && (this.getRootObject(!0).removeChild(this.badgeObj), delete this.badgeObj);
}, Client.IdfBox.prototype.setBackColor = function(e, t) {
this.backColor = e, t.style.backgroundColor = this.backColor || "";
}, Client.IdfBox.prototype.setColor = function(e, t) {
this.color = e, t.style.color = this.color || "";
}, Client.IdfBox.prototype.setFontModifiers = function(e, t) {
this.fontModifiers = e, t.style.fontWeight = -1 < e.indexOf("B") ? "bold" : "", 
t.style.fontStyle = -1 < e.indexOf("I") ? "italic" : "", -1 < e.indexOf("U") ? t.style.textDecoration = "underline" : -1 < e.indexOf("S") ? t.style.textDecoration = "line-through" : t.style.textDecoration = "";
}, Client.IdfBox.prototype.setHorizontalAlignment = function(e, t) {
switch (this.horizontalAlignment = e) {
case Client.IdfVisualStyle.alignments.LEFT:
t.style.justifyContent = "left";
break;

case Client.IdfVisualStyle.alignments.CENTER:
t.style.justifyContent = "center";
break;

case Client.IdfVisualStyle.alignments.RIGHT:
t.style.justifyContent = "right";
break;

case Client.IdfVisualStyle.alignments.JUSTIFY:
t.style.justifyContent = "justify";
break;

default:
t.style.justifyContent = "";
}
this.elements.forEach(e => {
e instanceof Client.IdfSpan && e.updateElement({
alignment: this.horizontalAlignment
});
});
}, Client.IdfBox.prototype.setVerticalAlignment = function(e, t) {
switch (this.verticlaAlignment = e) {
case 1:
t.style.alignItems = "";
break;

case 2:
t.style.alignItems = "center";
break;

case 3:
t.style.alignItems = "end";
}
}, Client.IdfBox.prototype.canResizeW = function() {
return 1 & this.visualFlags && this.canTransform;
}, Client.IdfBox.prototype.canResizeH = function() {
return 2 & this.visualFlags && this.canTransform;
}, Client.IdfBox.prototype.canMoveX = function() {
return 4 & this.visualFlags && this.canTransform;
}, Client.IdfBox.prototype.canMoveY = function() {
return 8 & this.visualFlags && this.canTransform;
}, Client.IdfBox.prototype.canCancelMove = function() {
return 16 & this.visualFlags;
}, Client.IdfBox.prototype.isMoveable = function() {
return this.canMoveX() || this.canMoveY();
}, Client.IdfBox.prototype.isResizable = function() {
return this.canResizeW() || this.canResizeH();
}, Client.IdfBox.prototype.isClickable = function() {
return 32 & this.visualFlags;
}, Client.IdfBox.prototype.isDraggable = function() {
return this.page.parent.canDrag && this.canDrag;
}, Client.IdfBox.prototype.isTransformable = function() {
return this.canTransform;
}, Client.IdfBox.prototype.acceptsDrop = function(e) {
return this.page.parent.canDrop && this.canDrop;
}, Client.IdfBox.prototype.applyVisualStyle = function() {
var e = {
objType: "field",
list: !0,
alternate: this.parent instanceof Client.IdfSection && this.parent.recordNumber % 2 == 0,
bookBox: !0
};
this.addVisualStyleClasses(this.getRootObject(!0), e);
}, Client.IdfBox.prototype.adjustPadding = function(e) {
let i = !0;
if (this.subForm || this.graphFile || this.image) i = !1; else {
let e = !1, t = (this.elements && this.elements[0] instanceof Client.IdfSpan && (e = !this.elements[0].mimeType || this.elements[0].mimeType.startsWith("text/")), 
!1);
var n;
this.visualStyle && (n = Client.IdfVisualStyle.getByIndex(this.visualStyle), [ Client.IdfVisualStyle.borderTypes.CUSTOM, Client.IdfVisualStyle.borderTypes.NONE ].includes(n.getPropertyValue(Client.IdfVisualStyle.transPropMap.bor1)) || (t = !0)), 
i = e && t;
}
Client.Widget.updateElementClassName(this.getRootObject(!0), "book-box-text", !i);
}, Client.IdfBox.prototype.onEvent = function(e) {
var t = Client.Widget.prototype.onEvent.call(this, e);
return "onClick" === e.id && t.push(...this.handleClick(e)), t;
}, Client.IdfBox.prototype.handleClick = function(e) {
var t = [];
return this.canClick && t.push({
id: "clk",
def: this.clickEventDef,
content: {
oid: this.id
}
}), t;
}, Client.IdfBox.prototype.applyDragDropCursor = function(e) {
var t = this.getRootObject();
e ? (t.setAttribute("opnt", "dd"), t.style.cursor = e, t.classList.add("system-cursor"), 
t.onmouseleave || (t.onmouseleave = Client.Widget.ddClearPointer)) : t.getAttribute("opnt") && (t.style.cursor = "", 
t.setAttribute("opnt", ""), t.classList.remove("system-cursor"));
}, Client.IdfBox.prototype.onTransform = function(e) {
var t = e.x, i = e.y, n = e.w, e = e.h, s = this.page, o = this.parent.getRootObject().getBoundingClientRect(), t = Client.IdfBookPage.convertFromPx(t - o.x, s.unitOfMeasure), i = Client.IdfBookPage.convertFromPx(i - o.y, s.unitOfMeasure), o = Client.IdfBookPage.convertFromPx(n, s.unitOfMeasure), n = Client.IdfBookPage.convertFromPx(e, s.unitOfMeasure);
let l = 1;
s.unitOfMeasure === Client.IdfBookPage.unitsOfMeasure.INCHES && (l = 25);
t = Math.round(t * l) / l, i = Math.round(i * l) / l, o = Math.round(o * l) / l, 
n = Math.round(n * l) / l, e = [];
Client.mainFrame.isIDF && e.push({
id: "trasf",
def: this.transformEventDef,
content: {
oid: this.id,
obn: "",
par1: t,
par2: i,
par3: o,
par4: n
}
}), Client.mainFrame.sendEvents(e);
}, Client || {}), Client = (Client.IdfSpan = function(e, t, i) {
e = Object.assign({
value: "",
text: "",
tooltip: "",
visualStyle: null,
dataType: Client.IdfField.dataTypes.CHARACTER,
maxLength: 255,
scale: 0,
visible: !0,
enabled: !1,
stretch: Client.IdfBox.stretches.AUTO,
mimeType: "",
hasImage: !1,
iconImage: "",
valueListIdx: -1,
backColor: "",
color: "",
fontModifiers: "",
mask: "",
placeholder: "",
className: "",
changeEventDef: Client.IdfMessagesPump?.eventTypes.DEFERRED
}, e), Client.Widget.call(this, e, t, i);
}, Client.IdfSpan.prototype = new Client.Widget(), Client.IdfSpan.transPropMap = {
txt: "text",
val: "value",
dat: "dataType",
max: "maxLength",
sca: "scale",
vis: "visible",
ena: "enabled",
str: "stretch",
mim: "mimeType",
him: "hasImage",
img: "iconImage",
idx: "valueListIdx",
bkc: "backColor",
frc: "color",
ftm: "fontModifiers",
msk: "mask",
wtk: "placeholder",
chg: "changeEventDef"
}, Client.IdfSpan.convertPropValues = function(e) {
for (var t in e = e || {}) switch (t) {
case Client.IdfSpan.transPropMap.dat:
case Client.IdfSpan.transPropMap.max:
case Client.IdfSpan.transPropMap.sca:
case Client.IdfSpan.transPropMap.str:
case Client.IdfSpan.transPropMap.idx:
case Client.IdfSpan.transPropMap.chg:
e[t] = parseInt(e[t]);
break;

case Client.IdfSpan.transPropMap.vis:
case Client.IdfSpan.transPropMap.ena:
case Client.IdfSpan.transPropMap.him:
e[t] = "1" === e[t];
}
}, Client.IdfSpan.prototype.realize = function(e, t, i) {
var n = this.createElementConfig({
c: "Container",
className: "book-span"
});
this.mainObjects.push(i.createElement(n, t, i));
}, Client.IdfSpan.prototype.updateElement = function(e) {
Client.Widget.prototype.updateElement.call(this, e);
let t = !1;
var i, n = {
style: {}
}, s = {};
for (i in e) {
var o = e[i];
switch (i) {
case "text":
this.setText(o, n), s.text = o;
break;

case "value":
this.value = o, s.value = o;
break;

case "tooltip":
this.setTooltip(o, n);
break;

case "dataType":
this.dataType = o, this.adjustAutoAlignment(), s.dataType = o;
break;

case "maxLength":
this.maxLength = o, s.maxLength = o;
break;

case "scale":
this.scale = o, s.scale = o;
break;

case "visible":
Client.IdfSection.prototype.setVisible.call(this, o, n);
break;

case "enabled":
t = !0, this.enabled = o, s.enabled = o;
break;

case "stretch":
this.stretch = o, s.imageResizeMode = o;
break;

case "hasImage":
break;

case "mimeType":
t = !0, this.mimeType = o, s.mimeType = o;
break;

case "iconImage":
break;

case "valueList":
this.valueList = o, s.valueList = o;
break;

case "valueListIdx":
break;

case "backColor":
Client.IdfBox.prototype.setBackColor.call(this, o, n), s.backColor = o;
break;

case "color":
Client.IdfBox.prototype.setColor.call(this, o, n), s.color = o;
break;

case "fontModifiers":
Client.IdfBox.prototype.setFontModifiers.call(this, o, n), s.fontModifiers = o;
break;

case "mask":
this.mask = o, s.mask = o;
break;

case "placeholder":
this.placeholder = o, s.placeholder = o;
break;

case "className":
Client.IdfSection.prototype.setClassName.call(this, o, n);
break;

case "alignment":
n.style.textAlign = o === Client.IdfVisualStyle.alignments.JUSTIFY ? "justify" : "", 
s.alignment = o;
break;

case "visualStyle":
s.visualStyle = o;
break;

case "numRows":
s.numRows = o;
}
}
t && this.parent.updateElement({
adjustPadding: !0
}), this.getRootObject(!0).updateElement(n), this.updateControl(s);
}, Client.IdfSpan.prototype.setText = function(e, t) {
this.text = e, this.control || (t.innerHTML = this.getHTMLIcon(this.text));
}, Client.IdfSpan.prototype.setTooltip = function(e, t) {
t.tooltip = Client.Widget.getHTMLTooltip(null, e);
}, Client.IdfSpan.prototype.applyVisualStyle = function() {
var e = {
objType: "field",
list: !0,
alternate: this.parent.parent instanceof Client.IdfSection && this.parent.parent.recordNumber % 2 == 0
};
this.addVisualStyleClasses(this.getRootObject(!0), e);
}, Client.IdfSpan.prototype.adjustAutoAlignment = function() {
Client.Widget.updateElementClassName(this.parent.getRootObject(!0), "book-box-numeric", !Client.IdfField.isNumeric(this.dataType));
}, Client.IdfSpan.prototype.onEvent = function(e) {
var t = Client.Widget.prototype.onEvent.call(this, e);
return "chgProp" === e.id && t.push(...this.handleValueChange(e)), t;
}, Client.IdfSpan.prototype.handleValueChange = function(e) {
var t = [];
return e.content.value !== this.value && (this.value = e.content.value, t.push({
id: "chg",
def: this.changeEventDef,
content: {
oid: this.id,
par1: this.value
}
})), t;
}, Client.IdfSpan.prototype.getVisualStyle = function() {
return Client.IdfVisualStyle.getByIndex(this.visualStyle || this.parent.visualStyle);
}, Client.IdfSpan.prototype.getControlType = function() {
let e = this.getVisualStyle().getControlType();
if (e === Client.IdfField.controlTypes.AUTO && (e = this.valueList && this.enabled ? Client.IdfField.controlTypes.COMBO : this.dataType === Client.IdfField.dataTypes.BLOB ? Client.IdfField.controlTypes.BLOB : Client.IdfField.controlTypes.EDIT), 
this.valueList || e !== Client.IdfField.controlTypes.OPTION || (e = Client.IdfField.controlTypes.EDIT), 
this.enabled || ![ Client.IdfField.controlTypes.EDIT, Client.IdfField.controlTypes.HTMLEDITOR ].includes(e)) return e;
}, Client.IdfSpan.prototype.updateControl = function(i) {
if (0 !== Object.keys(i).length) {
var e = this.getControlType();
if (e) {
"imageResizeMode" in i && this.stretch === Client.IdfBox.stretches.AUTO && (i.imageResizeMode = Client.IdfBox.stretches.NONE);
let t = this.value;
switch (e) {
case Client.IdfField.controlTypes.EDIT:
case Client.IdfField.controlTypes.BUTTON:
t = this.text, "text" in i && (i.value = t);
break;

case Client.IdfField.controlTypes.BLOB:
t = this.text;
let e;
this.mimeType ? (this.mimeType.startsWith("image/") ? e = Client.IdfFieldValue.blobMimeTypes.IMAGE : this.mimeType.startsWith("text/") ? e = Client.IdfFieldValue.blobMimeTypes.TEXT : "mimeType" in i && (i.blobUrl = this.text, 
e = Client.IdfFieldValue.blobMimeTypes.SIZE, t = Client.IdfResources.t("SRV_MSG_OpenDoc").replace(" (|1)", "")), 
"text" in i && (i.value = t)) : "mimeType" in i && (e = Client.IdfFieldValue.blobMimeTypes.EMPTY), 
"mimeType" in i && (i.blobMime = e);
}
if (this.control) return this.control.updateElement(i);
var e = this.getRootObject(!0), e = (Client.Widget.updateElementClassName(e, "book-span-control"), 
e.updateElement({
innerHTML: ""
}), this.createElementConfig({
c: "IdfControl",
container: this.getRootObject(!0),
dataType: this.dataType,
value: t,
maxLength: this.maxLength,
scale: this.scale,
enabled: this.enabled,
valueList: this.valueList,
color: this.color,
backColor: this.backColor,
fontModifiers: this.fontModifiers,
mask: this.mask,
placeholder: this.placeholder,
alignment: this.parent.horizontalAlignment,
visualStyle: this.getVisualStyle().index,
imageResizeMode: i.imageResizeMode,
blobMime: i.blobMime,
blobUrl: i.blobUrl
}));
this.control = this.insertBefore({
child: e
});
} else this.control && (this.control.close(!0), delete this.control, this.mimeType || (e = this.getRootObject(!0), 
Client.Widget.updateElementClassName(e, "book-span-control", !0), e.updateElement({
innerHTML: this.text
})));
}
}, Client.IdfSpan.prototype.getSupportedTransformOperation = function(e, t, i) {
return this.parent.getSupportedTransformOperation(e, t, i);
}, Client.IdfSpan.prototype.acceptsDrop = function(e) {
return this.parent.acceptsDrop(e);
}, Client.IdfSpan.prototype.getTransformOperationTargetWidget = function(e, t) {
return this.parent;
}, Client.IdfSpan.prototype.getTransformOperationTargetObj = function(e, t) {
return this.parent.getTransformOperationTargetObj(e, t);
}, Client || {}), Client = (Client.IdfButtonBar = function(e, t, i) {
Client.IdfFrame.call(this, e, t, i);
}, Client.IdfButtonBar.prototype = new Client.IdfFrame(), Client.IdfButtonBar.getRequirements = Client.IdfFrame.getRequirements, 
Client.IdfButtonBar.transPropMap = Object.assign({}, Client.IdfFrame.transPropMap, {
bvr: "vertical",
cms: "commandsSet"
}), Client.IdfButtonBar.convertPropValues = function(e) {
Client.IdfFrame.convertPropValues(e);
}, Client.IdfButtonBar.prototype.createElementsConfig = function(e) {
Client.IdfFrame.prototype.createElementsConfig.call(this, e), this.buttonsContainerConf = this.createElementConfig({
c: "Container",
className: "button-bar-list"
}), this.contentContainerConf.children.push(this.buttonsContainerConf);
}, Client.IdfButtonBar.prototype.realize = function(e, t, i) {
Client.IdfFrame.prototype.realize.call(this, e, t, i);
e = Client.eleMap[this.commandsSet];
e && (e.buttonBarId = this.id, this.createChildren({
children: e.children
}));
}, Client.IdfButtonBar.prototype.updateElement = function(e) {
var t;
Client.IdfFrame.prototype.updateElement.call(this, e = e || {}), void 0 !== e.vertical && (this.vertical = e.vertical, 
t = Client.eleMap[this.buttonsContainerConf.id]) && t.updateElement({
className: "button-bar-list " + (e.vertical ? "" : "horizontal")
});
}, Client || {}), Client = (Client.IdfChart = function(e, t, i) {
this.data, this.options, this.library, this.chartType, this.chartTypeInt, this.title, 
this.hLabel, this.vLabel, this.legendPos, this.showLegend, this.clickable, e = Object.assign({
library: Client.IdfChart.types.CHARTJS,
chartType: 1,
clickEventDef: Client.mainFrame.isIDF ? Client.IdfMessagesPump.eventTypes.ACTIVE : void 0
}, e), Client.IdfFrame.call(this, e, t, i);
}, Client.IdfChart.prototype = new Client.IdfFrame(), Client.IdfChart.transPropMap = Object.assign({}, Client.IdfFrame.transPropMap, {
lib: "library",
fil: "config",
ged: "showEditor"
}), Client.IdfChart.types = {
CHARTJS: 6,
GOOGLECHART: 7
}, Client.IdfChart.chartTypes = {
[Client.IdfChart.types.CHARTJS]: [ "line", "bar", "horizontalBar", "pie", "doughnut", "bubble", "scatter" ],
[Client.IdfChart.types.GOOGLECHART]: [ "LineChart", "ColumnChart", "BarChart", "PieChart", "DonutChart", "BubbleChart", "ScatterChart", "GeoChart", "Histogram", "ComboChart", "Gauge", "SteppedAreaChart", "OrgChart", "TreeMap", "Table", "Sankey", "Gantt", "CandlestickChart", "Timeline", "AreaChart" ]
}, Client.IdfChart.convertPropValues = function(t) {
for (var e in Client.IdfFrame.convertPropValues(t = t || {}), t) switch (e) {
case Client.IdfChart.transPropMap.lib:
t[e] = parseInt(t[e]);
break;

case Client.IdfChart.transPropMap.fil:
try {
"" === t[e] && (t[e] = "{}"), t[e] = JSON.parse(t[e]), t.parseError = "";
} catch (e) {
t.parseError = e.message;
}
break;

case Client.IdfChart.transPropMap.ged:
case Client.IdfChart.transPropMap.ena:
t[e] = "1" === t[e];
}
}, Client.IdfChart.prototype.updateElement = function(e) {
Client.IdfFrame.prototype.updateElement.call(this, e = e || {});
let t = [ "library", "config", "enabled", "data", "chartType", "title", "hLabel", "vLabel", "legendPos", "showLegend", "options" ], i = [ "title", "hLabel", "vLabel", "legendPos", "showLegend" ], n = !1;
var s, o = Object.getOwnPropertyNames(e).some(e => 0 <= t.indexOf(e)), l = Object.getOwnPropertyNames(e).some(e => 0 <= i.indexOf(e));
void 0 !== e.library && (this.library = e.library, n = !0), void 0 !== e.chartType && (this.chartType = e.chartType, 
s = Client.IdfChart.chartTypes[this.library], this.chartTypeInt = s[this.chartType] || s[0]), 
void 0 !== e.config && "object" == typeof e.config && (this.config = e.config, this.options = this.config.options, 
this.data = this.config.data, this.chartTypeInt = this.config.type, this.chartType = Client.IdfChart.chartTypes[this.library].indexOf(this.chartTypeInt), 
delete e.charType, n = !0), void 0 !== e.data && (this.data = e.data), void 0 !== e.title && (this.title = e.title), 
void 0 !== e.hLabel && (this.hLabel = e.hLabel), void 0 !== e.vLabel && (this.vLabel = e.vLabel), 
void 0 !== e.legendPos && (this.legendPos = e.legendPos), void 0 !== e.showLegend && (this.showLegend = e.showLegend), 
void 0 !== e.parseError && (this.parseError = e.parseError), void 0 !== e.options && (this.options = e.options), 
void 0 !== e.events && (this.events = e.events), e.showEditor && this.chartElement?.showEditor(), 
l && (this.options = this.generateOptions()), o && this.drawGraph(n), delete this.showEditor;
}, Client.IdfChart.prototype.generateOptions = function() {
var e = {};
return this.library === Client.IdfChart.types.GOOGLECHART ? (e.hAxis = {}, e.vAxis = {}, 
e.legend = {}, void 0 !== this.title && (e.title = this.title), void 0 !== this.hLabel && (e.hAxis.title = this.hLabel), 
void 0 !== this.vLabel && (e.vAxis.title = this.vLabel), e.legend.position = !1 === this.showLegend ? "none" : void 0 !== this.legendPos ? this.legendPos : null) : (e.legend = {}, 
e.scales = {
xAxes: [ {
scaleLabel: {}
} ],
yAxes: [ {
scaleLabel: {}
} ]
}, void 0 !== this.title && (e.title = {
text: this.title,
display: !0
}), void 0 !== this.hLabel && (e.scales.xAxes[0].scaleLabel = {
labelString: this.hLabel,
display: !0
}), void 0 !== this.vLabel && (e.scales.yAxes[0].scaleLabel = {
labelString: this.vLabel,
display: !0
}), void 0 !== this.showLegend && (e.legend.display = this.showLegend), void 0 !== this.legendPos && (e.legend.position = this.legendPos)), 
e;
}, Client.IdfChart.getRequirements = function(e) {
var t = Client.mainFrame.isIDF ? "fluid/" : "", i = Client.IdfFrame.getRequirements(e);
switch (e.library) {
case Client.IdfChart.types.CHARTJS:
i[t + "objects/chartjs/Chart.min.js"] = {
type: "jc",
name: "chartjs"
}, i[t + "objects/chartjs/chartJs.js"] = {
type: "jc",
name: "chartjsadapter"
};
break;

case Client.IdfChart.types.GOOGLECHART:
i["https://www.gstatic.com/charts/loader.js"] = {
type: "jc",
name: "gchartjs"
}, i[t + "objects/googlecharts/googlecharts.js"] = {
type: "jc",
name: "gchartadapter"
};
}
return i;
}, Client.IdfChart.prototype.onEvent = function(e) {
var t, i = Client.IdfFrame.prototype.onEvent.call(this, e);
switch (e.id) {
case "onSelect":
this.selectEvent = e;
break;

case "onClick":
Client.mainFrame.isIDF && void 0 !== (t = this.getClickDetail(e, this)).par4 && i.push({
id: "graclk",
def: this.clickEventDef,
content: {
oid: this.id,
screenX: e.content.clientX,
screenY: e.content.clientY,
button: e.content.button,
obn: t.par4
}
}), delete this.selectEvent;
break;

case "changeProp":
Client.mainFrame.isIDF && i.push({
id: "graopt",
def: Client.IdfMessagesPump.eventTypes.ACTIVE,
content: {
oid: this.id,
obn: e.content.options,
par1: e.content.type
}
});
}
return i;
}, Client.IdfChart.prototype.getClickDetail = function(e, t) {
var t = Client.IdfFrame.prototype.getClickDetail.call(this, e, t), i = this.selectEvent ? this.selectEvent.content.column - 1 : e.content.dataset, e = this.selectEvent ? this.selectEvent.content.row : e.content.pos;
return void 0 !== i && (Client.mainFrame.isIDF ? t.par4 = `S${(i + 1).toString().padStart(2, "0")}I` + (e + 1) : (t.serie = i, 
t.value = e)), t;
}, Client.IdfChart.prototype.drawGraph = function(e) {
var t, i;
this.parent instanceof Client.IdfTab && !this.parent.isActiveTab() ? this.delayedUpdate = !0 : (delete this.delayedUpdate, 
this.parseError ? Client.eleMap[this.contentContainerConf.id].getRootObject().innerHTML = Client.IdfResources.t("MSG_ChartException", [ this.parseError ]) : this.library && this.chartTypeInt && !this.chartElement || e && this.chartElement ? (this.chartElement && (e = this.elements.indexOf(this.chartElement), 
this.chartElement.close(!0), 0 <= e) && this.elements.splice(e, 1), e = this.createElementConfig({
c: this.library === Client.IdfChart.types.CHARTJS ? "ChartJs" : "GoogleCharts",
className: "idf-chart-body",
data: this.data,
options: this.options,
type: this.chartTypeInt,
visible: !0
}), (this.events || this.enabled) && (t = 0 < this.events.length ? this.events : [ "onClick" ], 
e.events = t, this.library === Client.IdfChart.types.GOOGLECHART) && (0 <= (i = t.indexOf("onClick")) && t.splice(i, 1), 
t.push("onSelect"), e.data) && (e.data.events = t), this.chartElement = this.view.createElement(e, this, this.view), 
this.elements.push(this.chartElement)) : this.chartElement.updateElement({
data: this.data,
options: this.options,
type: this.chartTypeInt
}));
}, Client.IdfChart.prototype.getResizeRootObject = function(e) {
return this.getRootObject(e);
}, Client.IdfChart.prototype.handleDelayedUpdate = function() {
this.delayedUpdate && this.drawGraph(!0), delete this.delayedUpdate;
}, Client || {}), Client = (Client.IdfCommandList = function(e, t, i) {
(Client.mainFrame.wep.commandList = this).expandedMenus = [], e = Object.assign({
clickEventDef: Client.mainFrame.isIDF ? Client.IdfMessagesPump.eventTypes.CLIENTSIDE : void 0,
sidebarAnimationDef: Client.IdfWebEntryPoint.getAnimationDefault("sidebar")
}, e), Client.Widget.call(this, e, t, i);
}, Client.IdfCommandList.prototype = new Client.Widget(), Client.IdfCommandList.transPropMap = {
sma: "sidebarAnimationDef",
sup: "suppressMenu"
}, Client.IdfCommandList.convertPropValues = function(e) {
for (var t in e = e || {}) t === Client.IdfCommandList.transPropMap.sup && (e[t] = "1" === e[t]);
}, Client.IdfCommandList.prototype.getRootObject = function(e) {
var t = this.parent.menuType === Client.IdfWebEntryPoint.menuTypes.MENUBAR, t = (this.parent.hasSideMenu() ? this.menuPage0 : t ? this.menuConf : this.menuIntConf).id, t = Client.eleMap[t];
return e ? t : t.domObj;
}, Client.IdfCommandList.prototype.createElementsConfig = function() {
var e, t;
this.parent.hasSideMenu() ? (this.menuConf = this.createElementConfig({
c: "IonMenu",
className: "main-menu main-menu-vertical",
animate: !0,
visible: !Client.mainFrame.idfMobile
}), this.parent.menuType === Client.IdfWebEntryPoint.menuTypes.RIGHT && (this.menuConf.side = "right"), 
this.menuHeaderConf = this.createElementConfig({
c: "IonNavBar",
className: "main-menu-header",
visible: this.parent.menuType === Client.IdfWebEntryPoint.menuTypes.GROUPED,
events: [ "onBackButton" ]
}), this.menuConf.children.push(this.menuHeaderConf), this.menuTitleConf = this.createElementConfig({
c: "IonTitle",
className: "main-menu-header-title"
}), this.menuHeaderConf.children.push(this.menuTitleConf), this.menuContentConf = this.createElementConfig({
c: "IonContent",
className: "main-menu-content"
}), this.menuConf.children.push(this.menuContentConf), this.menuInnerConf = this.createElementConfig({
c: "AltContainer",
className: "main-menu-inner-content",
selectedPage: 0
}), this.menuInnerConf.animations = [ {
trigger: "change",
type: "slide",
easing: "ease",
duration: 350,
delay: 0,
from: "left"
} ], this.menuContentConf.children.push(this.menuInnerConf), this.menuPage0 = this.createElementConfig({
c: "Container",
className: "main-menu-inner-page"
}), this.menuPage1 = this.createElementConfig({
c: "Container",
className: "main-menu-inner-page"
}), this.menuPage2 = this.createElementConfig({
c: "Container",
className: "main-menu-inner-page"
}), this.menuPage3 = this.createElementConfig({
c: "Container",
className: "main-menu-inner-page"
}), this.menuInnerConf.children.push(this.menuPage0), this.menuInnerConf.children.push(this.menuPage1), 
this.menuInnerConf.children.push(this.menuPage2), this.menuInnerConf.children.push(this.menuPage3), 
this.openViewsListConf = this.createElementConfig({
c: "IonList",
className: "main-menu-list open-views-box"
}), t = this.createElementConfig({
c: "IonItem",
type: "header",
className: "generic-item main-menu-header open-views-header",
customid: "form-list-header"
}), this.openViewsListConf.children.push(t), e = this.createElementConfig({
c: "IonLabel",
t: Client.IdfResources.t("SRV_MSG_OpenViews")
}), t.children.push(e), this.openViewsContainerConf = this.createElementConfig({
c: "Container"
}), this.openViewsListConf.children.push(this.openViewsContainerConf), this.closeAllItemConf = this.createElementConfig({
c: "IonItem",
type: "button",
className: "generic-item main-menu-item close-all-views-item",
events: [ "onClick" ],
visible: !1,
customid: "form-list-close-all-box"
}), this.openViewsListConf.children.push(this.closeAllItemConf), t = this.createElementConfig({
c: "IonIcon",
icon: "close"
}), this.closeAllItemConf.children.push(t), e = this.createElementConfig({
c: "IonLabel",
t: Client.IdfResources.t("SRV_MSG_CloseAll")
}), this.closeAllItemConf.children.push(e), Client.mainFrame.wep?.menuType === Client.IdfWebEntryPoint.menuTypes.GROUPED && (this.openViewsListConf.visible = !1, 
this.menuContentConf.className += " grouped-menu", this.visible = !0)) : (t = Client.mainFrame.wep?.menuType === Client.IdfWebEntryPoint.menuTypes.MENUBAR, 
this.menuConf = this.createElementConfig({
c: "Container",
className: "main-menu-horizontal container-main-horizontal" + (t ? "" : " bottom"),
visible: !0
}), t || (this.buttonContainer = this.createElementConfig({
c: "IonButton",
className: "main-menu-button",
icon: "menu",
clear: "true",
iconPosition: "only",
events: [ "onClick" ],
customid: "taskbar-start-cell"
}), this.menuConf.children.push(this.buttonContainer), this.menuIntBack = this.createElementConfig({
c: "Container",
className: "main-menu-background hidden",
animate: !0,
visible: !0,
events: [ "onClick" ]
}), this.menuConf.children.push(this.menuIntBack), this.menuIntConf = this.createElementConfig({
c: "Container",
className: "main-menu hidden",
animate: !0,
visible: !0
}), this.menuConf.children.push(this.menuIntConf), this.openViewsContainerConf = this.createElementConfig({
c: "Container",
className: "bottom-view-list-container"
}), this.menuConf.children.push(this.openViewsContainerConf)));
}, Client.IdfCommandList.prototype.realize = function(e, t, i) {
this.createElementsConfig();
let n;
n = Client.mainFrame.wep?.menuType === Client.IdfWebEntryPoint.menuTypes.MENUBAR && Client.mainFrame.wep.isGlbToolbarHeader() ? Client.eleMap[Client.mainFrame.wep.navbarContainerConf.id].insertBefore({
child: this.menuConf
}) : Client.mainFrame.wep.getRootObject(!0).insertBefore({
child: this.menuConf,
sib: Client.mainFrame.wep.pageConf.id
}), this.mainObjects.push(n), this.createChildren(e), this.parent.hasSideMenu() && Client.eleMap[this.menuPage0.id].insertBefore({
child: this.openViewsListConf
}), -1 < this.sidebarAnimationDef.indexOf("none") && (e = Client.eleMap[this.parent.mainContainerConf.id]).updateElement({
className: e.className + " notr"
}), this.checkMobileMenu(!0);
}, Client.IdfCommandList.prototype.updateElement = function(e) {
Client.Widget.prototype.updateElement.call(this, e = e || {}), void 0 !== e.suppressMenu && (this.suppressMenu = e.suppressMenu, 
Client.mainFrame.idfMobile ? Client.eleMap[this.parent.mainContainerConf.id]?.updateElement({
when: this.suppressMenu ? "never" : "lg"
}) : this.toggleMenu(!this.suppressMenu));
}, Client.IdfCommandList.prototype.onEvent = function(t) {
var e = Client.Widget.prototype.onEvent.call(this, t);
switch (t.id) {
case "onClick":
if (this.closeAllItemConf && t.obj === this.closeAllItemConf.id) Client.mainFrame.isIDF ? e.push({
id: "claclk",
def: this.parent.closeAllEventDef,
content: {
oid: this.parent.id,
xck: t.content.offsetX,
yck: t.content.offsetY
}
}) : this.parent.closeAllViews(); else if (this.buttonContainer && t.obj === this.buttonContainer.id) this.showMenu(); else if (this.menuIntBack && t.obj === this.menuIntBack.id) this.hideMenu(); else {
var i = this.openViews || this.openViewsContainerConf.children;
for (let e = 0; e < i.length; e++) {
var n = i[e];
if (t.obj === n.id) {
var s = Client.eleMap[n.viewId];
Client.mainFrame.isIDF && !Client.IdfMessagesPump.isClientSideEvent(s.clickViewListEventDef) || (this.parent.activeView = n.viewId);
break;
}
}
}
break;

case "onMenuButton":
Client.mainFrame.isIDF && !Client.IdfMessagesPump.isClientSideEvent(this.clickEventDef) || this.toggleMenu(), 
Client.mainFrame.isIDF ? e.push({
id: "clk",
def: this.clickEventDef,
content: {
oid: this.id,
xck: t.content.offsetX,
yck: t.content.offsetY
}
}) : (t.obj = this.id, e.push(t));
break;

case "onBackButton":
var o = this.expandedMenus.pop();
t.id = "onClick", t.obj = o.headerConf.id, e.push(...o.onEvent(t));
}
return e;
}, Client.IdfCommandList.prototype.realizeTaskBarToolbar = function(e) {
return Client.eleMap[this.menuConf.id].insertBefore({
child: e,
sib: this.openViewsContainerConf.id
});
}, Client.IdfCommandList.prototype.realizeStatusbar = function(e) {
return Client.eleMap[this.menuConf.id].insertBefore({
child: e
});
}, Client.IdfCommandList.prototype.toggleMenu = function(t) {
if (this.parent.hasSideMenu()) {
var i = Client.eleMap[this.menuConf.id], n = Client.eleMap[this.parent.mainContainerConf.id];
let e = t ?? !i.visible;
Client.mainFrame.idfMobile || "" != Client.mainFrame.wep.defaultResponsiveClass && !n.exposed ? (n.exposed && (e = !0, 
i.animate = !1, i.showTimer) && (clearTimeout(i.showTimer), delete i.showTimer), 
i.updateElement({
visible: e
}), i.animate = !0) : i.visible !== e && (0 <= this.sidebarAnimationDef.indexOf("fold") ? this.toggleMenuFold(e) : this.toggleMenuScroll(e));
}
}, Client.IdfCommandList.prototype.toggleMenuScroll = function(e) {
let t = Client.eleMap[this.menuConf.id], i = Client.eleMap[this.parent.mainContainerConf.id];
i.animate = !1, e ? (i.domObj.style.transition = "left 0ms ease 0s, right 0ms ease 0s", 
t.navObj.style.display = "", t.navObj.classList.toggle("hidden", !1), this.parent.menuType === Client.IdfWebEntryPoint.menuTypes.RIGHT ? i.domObj.style.right = "-" + (this.parent.sideMenuWidth || 200) + "px" : i.domObj.style.left = "-" + (this.parent.sideMenuWidth || 200) + "px", 
setTimeout(() => {
i.domObj.style.transition = "", i.domObj.style.left = "0", i.domObj.style.right = "0";
}, 30), setTimeout(() => t.updateElement({
visible: e
}), 260)) : (i.domObj.style.transition = "", this.parent.menuType === Client.IdfWebEntryPoint.menuTypes.RIGHT ? i.domObj.style.right = "-" + (this.parent.sideMenuWidth || 200) + "px" : i.domObj.style.left = "-" + (this.parent.sideMenuWidth || 200) + "px", 
setTimeout(() => {
i.domObj.style.transition = "left 0ms ease 0s, right 0ms ease 0s", t.navObj.style.display = "none", 
i.domObj.style.left = "0", i.domObj.style.right = "0", t.updateElement({
visible: e
}), t.navObj.classList.toggle("hidden", !e);
}, 260));
}, Client.IdfCommandList.prototype.toggleMenuFold = function(e) {
let t = Client.eleMap[this.menuConf.id];
e ? (t.updateElement({
visible: e
}), t.navObj.classList.toggle("hidden", !e), t.navObj.className = "has-scrollbar show-menu split-pane-side folding", 
setTimeout(() => t.navObj.className = "has-scrollbar show-menu split-pane-side", 260)) : (t.navObj.className = "has-scrollbar show-menu split-pane-side folding folded", 
setTimeout(() => {
t.updateElement({
visible: e
}), t.navObj.classList.toggle("hidden", !e);
}, 260));
}, Client.IdfCommandList.prototype.showMenu = function() {
Client.eleMap[this.menuIntBack.id].updateElement({
className: "main-menu-background"
});
var e = Client.eleMap[this.menuIntConf.id], t = e.getRootObject(!0), i = (t.style.height = "", 
t.offsetHeight);
t.style.height = i + "px", e.updateElement({
className: "main-menu"
});
}, Client.IdfCommandList.prototype.hideMenu = function() {
Client.eleMap[this.menuIntBack.id].updateElement({
className: "main-menu-background hidden"
}), Client.eleMap[this.menuIntConf.id].updateElement({
className: "main-menu hidden"
});
}, Client.IdfCommandList.prototype.addViewOpenItem = function(i) {
if (i.showViewList && !i.docked) if (this.parent.hasSideMenu() || this.parent.menuType === Client.IdfWebEntryPoint.menuTypes.TASKBAR) {
let e = this.createElementConfig({
c: "IonItem",
type: "button",
className: "generic-item open-views-item",
events: [ "onClick" ]
});
(e = this.parent.hasSideMenu() ? e : this.createElementConfig({
c: "Container",
className: "open-views-item-taskbar",
events: [ "onClick" ]
})).viewId = i.id, this.openViewsContainerConf.children.push(e);
var n = Client.Widget.getHTMLForCaption(i.caption);
let t = this.createElementConfig({
c: "IonLabel",
innerHTML: n
});
this.parent.hasSideMenu() || (t = this.createElementConfig({
c: "Container",
tag: "span",
innerHTML: n
})), e.children.push(t);
var n = Client.eleMap[this.openViewsContainerConf.id], s = this.view.createElement(e, n, this.view);
n.elements.push(s), this.parent.hasSideMenu() && Client.eleMap[this.closeAllItemConf.id].updateElement({
visible: !0
});
} else this.parent.menuType === Client.IdfWebEntryPoint.menuTypes.MENUBAR && (this.openViews || (this.openViews = []), 
{
caption: n,
icon: s
} = Client.Widget.extractCaptionData(i.caption), this.openViews.push({
id: i.id,
viewId: i.id,
viewName: n,
icon: s
}));
i === Client.mainFrame.wep.activeView && this.activateViewOpenItem(i);
}, Client.IdfCommandList.prototype.removeViewOpenItem = function(t) {
if (this.parent.hasSideMenu() || this.parent.menuType === Client.IdfWebEntryPoint.menuTypes.TASKBAR) for (let e = 0; e < this.openViewsContainerConf.children.length; e++) {
var i = this.openViewsContainerConf.children[e];
if (t.id === i.viewId) {
Client.eleMap[this.openViewsContainerConf.id].removeChild({
id: i.id
}), this.openViewsContainerConf.children.splice(e, 1), this.parent.hasSideMenu() && !this.openViewsContainerConf.children.length && Client.eleMap[this.closeAllItemConf.id].updateElement({
visible: !1
});
break;
}
} else if (this.parent.menuType === Client.IdfWebEntryPoint.menuTypes.MENUBAR && this.openViews) for (let e = 0; e < this.openViews.length; e++) if (this.openViews[e].viewId === t.id) {
this.openViews.splice(e, 1);
break;
}
}, Client.IdfCommandList.prototype.activateViewOpenItem = function(t) {
if (this.parent.hasSideMenu() || this.parent.menuType === Client.IdfWebEntryPoint.menuTypes.TASKBAR) for (let e = 0; e < this.openViewsContainerConf.children.length; e++) {
var i = this.openViewsContainerConf.children[e], n = Client.eleMap[i.id];
n.updateElement({
className: this.parent.hasSideMenu() ? "generic-item open-views-item" : "open-views-item-taskbar"
}), i.viewId === t.id && n.updateElement({
className: this.parent.hasSideMenu() ? "generic-item open-views-item active" : "open-views-item-taskbar active"
});
}
Client.mainFrame.isIDF && this.realizeViewCommandsets(t);
}, Client.IdfCommandList.prototype.realizeViewCommandsets = function(t) {
let i = [ t.id ];
t.getAllSubViews().forEach(e => {
i.push(e.id);
});
for (let e = 0; e < this.elements.length; e++) {
var n = this.elements[e];
if (i.includes("frm:" + n.form) && n.conf) {
if (n.isToolbar || n.isMenu) {
let e = !n.mainObjects?.length;
(e = e && n.isToolbar && !n.isMenu ? !Client.eleMap[n.toolBox?.id] : e) && n.isToolbar && (0 !== n.form && -2 === n.toolCont && (n.toRealizeToolbar = !0, 
e = !1), 0 < n.toolCont) && (t.getFrameByIndex(n.toolCont) || (e = !1)), e && (n.realize(n.conf, n.parent, n.view), 
n.realizing = !0, n.updateElement(JSON.parse(JSON.stringify(n.conf))), delete n.realizing);
}
n.isPopupMenu() && (n.realize(n.conf, n.parent, n.view), n.updateElement(n.conf), 
delete n.conf, delete n.children);
}
}
}, Client.IdfCommandList.prototype.closeViewCommandsets = function(t, i) {
for (let e = 0; e < this.elements.length; e++) {
var n = this.elements[e];
n && "frm:" + n.form === t && (i ? n.clearElements() : (n.close(!0), this.elements.splice(e--, 1)));
}
}, Client.IdfCommandList.prototype.canResizeW = function(e) {
return this.parent.hasSideMenu() && Client.mainFrame.wep.resizableFrames;
}, Client.IdfCommandList.prototype.applyDragDropCursor = function(e) {
var t = this.getRootObject();
e ? (t.setAttribute("opnt", "dd"), t.style.cursor = e, t.onmouseleave || (t.onmouseleave = Client.Widget.ddClearPointer)) : t.getAttribute("opnt") && (t.style.cursor = "", 
t.setAttribute("opnt", ""));
}, Client.IdfCommandList.prototype.onTransform = function(e) {
this.parent.updateElement({
sideMenuWidth: e.w
});
}, Client.IdfCommandList.prototype.handleFunctionKeys = function(t, i, n) {
var s = [];
for (let e = 0; e < this.elements.length && 0 === s.length; e++) s.push(...this.elements[e].handleFunctionKeys(t, i, n));
return s;
}, Client.IdfCommandList.prototype.handleAcceleratorKeys = function(t) {
var i = [], e = t.content.keyCode;
if (!(!t.content.altKey && !Client.mainFrame.wep.menuBarOpened || (e < 48 || 90 < e) && 27 !== e) && Client.mainFrame.wep.menuType === Client.IdfWebEntryPoint.menuTypes.MENUBAR) if (Client.mainFrame.wep.menuBarOpened && 27 === e) Client.mainFrame.wep.menuBarOpened.closePopup(); else for (let e = 0; e < this.elements.length && 0 === i.length; e++) i.push(...this.elements[e].handleAcceleratorKeys(t));
return i;
}, Client.IdfCommandList.prototype.hasMainMenu = function() {
if (!this.elements || 0 === this.elements.length) return !1;
let t = [];
return this.elements.forEach(e => {
e.isMenu && !e.form && e.visible && t.push(e);
}), 0 < t.length;
}, Client.IdfCommandList.prototype.checkMobileMenu = function(e) {
Client.mainFrame.idfMobile && (e ? (delete this.checkMenuTimer, Client.eleMap[this.menuConf.id].navObj.classList.toggle("main-menu-empty", !this.hasMainMenu()), 
Client.mainFrame.wep?.activeView?.checkMobileButtons()) : this.checkMenuTimer || (this.checkMenuTimer = setTimeout(() => this.checkMobileMenu(!0), 50)));
}, Client || {}), Client = (Client.IdfCommand = function(e, t, i) {
e = Object.assign({
expanded: !1,
clickEventDef: Client.mainFrame.isIDF ? Client.IdfMessagesPump.eventTypes.URGENT : void 0,
expandEventDef: Client.mainFrame.isIDF ? Client.IdfMessagesPump.eventTypes.CLIENTSIDE : void 0,
expandAnimationDef: Client.IdfWebEntryPoint.getAnimationDefault("menu"),
popupAnimationDef: Client.IdfWebEntryPoint.getAnimationDefault("popup"),
toolCont: -1,
vertical: !1,
enabled: !0,
visible: !0,
isMenu: !0,
isToolbar: !1,
level: 1,
isFormList: !1,
accelerator: "",
form: 0,
typeCommandSet: !1
}, e), Client.mainFrame.wep?.menuType === Client.IdfWebEntryPoint.menuTypes.GROUPED && (e.expanded = 1 === this.level || void 0, 
this.expanded = !1), Client.mainFrame.isIDF || (e.type === Client.IdfCommand.types.COMMANDSSET && (t instanceof Client.IdfView || t instanceof Client.IdfFrame) && (e.isMenu = !1, 
e.toolCont = -1 === e.toolCont ? 0 : e.toolCont), e.type === Client.IdfCommand.types.COMMAND && t instanceof Client.IdfCommand && (e.isMenu = t.isMenu, 
e.isToolbar = t.isToolbar)), this.isCommandSet(e) && e.form && (this.children = e.children, 
this.conf = e, this.skipRealize = !0), Client.mainFrame.wep?.menuType === Client.IdfWebEntryPoint.menuTypes.MENUBAR && (-1 !== e.toolCont || e.type === Client.IdfCommand.types.COMMAND && e.isMenu) && (this.skipRealize = !0), 
Client.Widget.call(this, e, t, i), delete this.skipRealize;
}, Client.IdfCommand.prototype = new Client.Widget(), Client.IdfCommand.transPropMap = {
frm: "form",
exp: "expanded",
exe: "expandEventDef",
exa: "expandAnimationDef",
poa: "popupAnimationDef",
idx: "index",
lev: "level",
ism: "isMenu",
ist: "isToolbar",
img: "image",
ena: "enabled",
vis: "visible",
cnt: "toolCont",
fli: "isFormList",
fkn: "fknum",
acc: "accelerator",
cdg: "canDrag",
cdp: "canDrop",
rqc: "requireConf",
cmds: "typeCommandSet",
shn: "showNames",
cco: "commandCode",
del: "delete"
}, Client.IdfCommand.types = {
COMMANDSSET: "cms",
COMMAND: "cmd"
}, Client.IdfCommand.useToolbarIMG = !1, Client.IdfCommand.createConfigFromXml = function(e) {
return {
type: e.nodeName
};
}, Client.IdfCommand.convertPropValues = function(e) {
for (var t in e = e || {}) switch (t) {
case Client.IdfCommand.transPropMap.exp:
case Client.IdfCommand.transPropMap.fli:
case Client.IdfCommand.transPropMap.ism:
case Client.IdfCommand.transPropMap.ist:
case Client.IdfCommand.transPropMap.cdg:
case Client.IdfCommand.transPropMap.cdp:
case Client.IdfCommand.transPropMap.ena:
case Client.IdfCommand.transPropMap.vis:
case Client.IdfCommand.transPropMap.rqc:
case Client.IdfCommand.transPropMap.cmds:
case Client.IdfCommand.transPropMap.del:
e[t] = "1" === e[t];
break;

case Client.IdfCommand.transPropMap.idx:
case Client.IdfCommand.transPropMap.exe:
case Client.IdfCommand.transPropMap.clk:
case Client.IdfCommand.transPropMap.cnt:
case Client.IdfCommand.transPropMap.lev:
case Client.IdfCommand.transPropMap.fkn:
case Client.IdfCommand.transPropMap.frm:
e[t] = parseInt(e[t]);
}
}, Client.IdfCommand.prototype.createElementsConfig = function(t) {
if (this.isCommandSet()) this.isMenu && (this.listConf = this.createElementConfig({
c: "IonList",
className: "main-menu-list collapsible-container cmd-level-" + this.level
}), this.listConf.animations = [ {
trigger: "animation",
prop: "collapseElement",
duration: 0 === t.expandAnimationDef.indexOf("none") ? 0 : 250
}, {
trigger: "animation",
prop: "expandElement",
duration: 0 === t.expandAnimationDef.indexOf("none") ? 0 : 250
} ], this.headerConf = this.createElementConfig({
c: "IonItem",
type: "header",
className: "generic-item main-menu-header",
events: [ "onClick" ]
}), this.listConf.children.push(this.headerConf), this.labelConf = this.createElementConfig({
c: "IonLabel"
}), this.headerConf.children.push(this.labelConf), this.expandButtonConf = this.createElementConfig({
c: "IonButton",
className: "generic-btn extra-small main-menu-expand-btn",
icon: "arrow-dropup"
}), this.headerConf.children.push(this.expandButtonConf), this.commandsContainerConf = this.createElementConfig({
c: "Container",
className: "main-menu-items-container"
}), Client.mainFrame.wep?.menuType === Client.IdfWebEntryPoint.menuTypes.GROUPED && 1 !== this.level || this.listConf.children.push(this.commandsContainerConf), 
Client.mainFrame.wep?.menuType === Client.IdfWebEntryPoint.menuTypes.GROUPED && (this.level <= 1 && (this.headerConf.events = []), 
this.expandButtonConf.icon = "play", this.expandButtonConf.className = "generic-btn small main-menu-expand-btn"), 
Client.mainFrame.wep?.menuType === Client.IdfWebEntryPoint.menuTypes.MENUBAR) && 1 === this.level && (this.listConf.className = "main-menu-list top-menu", 
this.expandButtonConf.visible = !1), this.isToolbar && (this.toolBox = this.createElementConfig({
c: "IonButtons",
className: "main-menu-toolbar-list"
})); else if (this.type === Client.IdfCommand.types.COMMAND) {
if (this.isMenu || this.parent instanceof Client.IdfButtonBar) {
let e = "";
this.parent instanceof Client.IdfCommand ? e = "main-menu-item" : this.parent instanceof Client.IdfButtonBar && (e = "button-bar-item"), 
t.caption || (e += " menu-separator"), this.itemConf = this.createElementConfig({
c: "IonItem",
type: "button",
className: "generic-item " + e,
events: [ "onClick" ]
}), this.labelConf = this.createElementConfig({
c: "IonLabel"
}), this.itemConf.children.push(this.labelConf);
}
this.isToolbar && (this.toolbarButton = this.createElementConfig({
c: "IonButton",
className: "toolbar-cmd-btn " + (t.caption ? "" : "tool-separator"),
events: [ "onClick" ],
useHTML: !0
}));
}
}, Client.IdfCommand.prototype.realize = function(e, t, i) {
this.skipRealize || (this.createElementsConfig(e), this.isCommandSet() ? (this.isMenu && this.realizeMenuCommandSet(), 
this.isToolbar && this.realizeToolbarCommandSet(), this.createChildren(e)) : this.type === Client.IdfCommand.types.COMMAND && (this.parent instanceof Client.IdfButtonBar ? this.mainObjects.push(this.parent.getRootObject(!0).insertBefore({
child: this.itemConf
})) : this.isMenu && this.parent.isMenu && (Client.mainFrame.wep?.menuType === Client.IdfWebEntryPoint.menuTypes.GROUPED && 1 !== this.parent.level ? this.mainObjects.push(Client.eleMap[this.parent.commandsContainerConf.id].insertBefore({
child: this.itemConf
})) : this.mainObjects.push(Client.eleMap[this.parent.listConf.id].elements[1].insertBefore({
child: this.itemConf
}))), this.isToolbar) && this.parent?.toolBox && this.mainObjects.push(Client.eleMap[this.parent.toolBox.id].insertBefore({
child: this.toolbarButton
})));
}, Client.IdfCommand.prototype.realizeMenuCommandSet = function() {
var e = this.parent.getRootObject(!0).insertBefore({
child: this.listConf,
sib: this.parent.openViewsListConf?.id
});
Client.mainFrame.wep?.menuType !== Client.IdfWebEntryPoint.menuTypes.GROUPED || 1 === this.level ? this.mainObjects.push(e) : (this.commandsContainerConf.visible = !1, 
e = this.view.createElement(this.commandsContainerConf, Client.eleMap[Client.mainFrame.wep.commandList["menuPage" + (this.level - 1)].id], this.view), 
this.mainObjects.push(e));
}, Client.IdfCommand.prototype.realizeToolbarCommandSet = function() {
let i = this.toolCont, e = this.form;
if (Client.mainFrame.isIDF || (this.parent instanceof Client.IdfView && (i = 0, 
e = 1), parent instanceof Client.IdfFrame && (i = 1, e = 1)), -1 === i) Client.mainFrame.wep.realizeCommandSet(this.toolBox); else if (0 === i && 0 < e) (Client.mainFrame.isIDF ? Client.eleMap["frm:" + e] : this.parent)?.realizeCommandSet(this.toolBox); else if (0 < i && 0 < e) {
let t;
if (Client.mainFrame.isIDF) {
var n, s, o = Client.eleMap["frm:" + e].getFrameList();
for (let e = 0; e < o.length; e++) if (o[e].id && (n = o[e].id.indexOf(":"), s = o[e].id.lastIndexOf(":"), 
parseInt(o[e].id.substring(n + 1, s)) === i)) {
t = o[e];
break;
}
} else t = this.parent;
t?.realizeCommandSet(this.toolBox);
}
}, Client.IdfCommand.prototype.createChildren = function(s) {
if (s.children) {
this.elements = this.elements || [];
for (let n = 0; n < s.children.length; n++) {
let i = Client.eleMap[s.children[n].id];
if (i) {
let e = i && (this.isMenu || this.isToolbar) && 0 !== this.form && !i.mainObjects?.length;
if (e = this.isMenu && Client.mainFrame.wep?.menuType === Client.IdfWebEntryPoint.menuTypes.MENUBAR && this.isCommandSet() ? !1 : e) {
i.realize({
caption: i.caption
}, i.parent, i.view);
var t, o, l, a = {}, r = [];
for (t in Client.IdfCommand.transPropMap) r.push(Client.IdfCommand.transPropMap[t]);
for (o in Client.Widget.transPropMap) r.push(Client.Widget.transPropMap[o]);
for (l in i) 0 < r.indexOf(l) && (a[l] = i[l]);
i.realizing = !0, i.updateElement(a), delete i.realizing;
} else i.createChildren(s.children[n]), i.updateElement(s.children[n]);
} else {
let t = s.children[n].previd;
delete s.children[n].previd, delete s.children[n].parid, i = this.view.createElement(s.children[n], this, this.view), 
t ? this.elements.splice(this.elements.findIndex(e => e.id === t), 0, i) : this.elements.push(i);
}
}
}
}, Client.IdfCommand.prototype.updateElement = function(i) {
if (!this.skipRealize) {
i = i || {};
let e, t = (this.toRealizeToolbar && (e = Object.assign({}, i)), Client.Widget.prototype.updateElement.call(this, i), 
!1);
var n, s, o, l;
if (void 0 !== (i = e ? e : i).caption && (t = !0, {
caption: n,
icon: a,
color: l
} = Client.Widget.extractCaptionData(this.caption), a && (this.image = a, this.iconColor = l || "primary"), 
(this.isMenu || this.buttonBarId || this.parent instanceof Client.IdfButtonBar) && ((Client.eleMap[this.buttonBarId] || Client.eleMap[this.labelConf?.id])?.updateElement({
innerHTML: this.getCaptionWithAccelerator()
}), this.itemConf) && Client.Widget.updateElementClassName(Client.eleMap[this.itemConf.id], "menu-separator", !0), 
this.isToolbar) && this.toolbarButton && Client.eleMap[this.toolbarButton.id]?.updateElement({
label: Client.Widget.getHTMLForCaption(this.caption)
}), void 0 !== i.enabled && (this.enabled = i.enabled, this.isToolbar) && this.toolbarButton && Client.eleMap[this.toolbarButton.id]?.updateElement({
enabled: i.enabled
}), void 0 !== i.visible && (this.visible = i.visible, (this.isMenu || this.parent instanceof Client.IdfButtonBar) && ((this.itemConf ? Client.eleMap[this.itemConf.id] : Client.eleMap[this.listConf.id])?.updateElement({
visible: i.visible
}), Client.mainFrame.wep?.commandList?.checkMobileMenu()), this.isToolbar) && (this.toolbarButton ? Client.eleMap[this.toolbarButton.id] : Client.eleMap[this.toolBox?.id])?.updateElement({
visible: i.visible
}), void 0 !== i.type && (this.type = i.type), void 0 !== i.requireConf && (this.requireConf = i.requireConf), 
void 0 !== i.showNames && (this.showNames = i.showNames), void 0 !== i.commandCode && (this.commandCode = i.commandCode), 
void 0 !== i.toolCont && (this.toolCont = i.toolCont, this.toRealizeToolbar) && this.isToolbar && 0 !== this.form && 0 < this.toolCont && ((a = Client.eleMap["frm:" + this.form]?.getFrameByIndex(this.toolCont)) || (toRealize = !1), 
a) && (this.realize(this.conf, this.parent, this.view), this.updateElement(JSON.parse(JSON.stringify(this.conf))), 
delete this.toRealizeToolbar), void 0 !== i.expanded && this.isCommandSet() && this.isMenu && (this.expanded = i.expanded, 
this.handleExpansion()), void 0 !== i.image && (this.image = i.image, t = !0), void 0 !== i.badge && (this.badge ? this.type === Client.IdfCommand.types.COMMAND && (this.isMenu || this.parent instanceof Client.IdfButtonBar) && (!this.menuBadge && (l = this.headerConf || this.itemConf, 
a = Client.eleMap[l.id]) && (l = this.createElementConfig({
c: "IonBadge",
className: "generic-badge"
}), this.menuBadge = a.insertBefore({
child: l
})), this.menuBadge) && this.menuBadge.updateElement({
visible: !0,
innerText: this.badge
}) : this.menuBadge && this.menuBadge.updateElement({
visible: !1
})), void 0 !== i.tooltip && ({
caption: a,
icon: s,
color: o
} = Client.Widget.extractCaptionData(this.caption), l = Client.Widget.getHTMLTooltip(a, this.tooltip, this.fknum, this.commandCode), 
this.headerConf && Client.eleMap[this.headerConf.id].updateElement({
tooltip: l
}), this.itemConf && Client.eleMap[this.itemConf.id].updateElement({
tooltip: l
}), this.toolbarButton) && Client.eleMap[this.toolbarButton.id]?.updateElement({
tooltip: l
}), void 0 !== i.className) {
var a = this.className || "";
this.className = i.className, t = !0;
let e;
this.isCommandSet() ? this.isMenu ? e = Client.eleMap[this.listConf.id] : this.isToolbar && (e = Client.eleMap[this.toolBox.id]) : this.isMenu || this.parent instanceof Client.IdfButtonBar ? e = Client.eleMap[this.itemConf.id] : this.isToolbar && (e = Client.eleMap[this.toolbarButton.id]), 
Client.Widget.updateElementClassName(e, a, !0), Client.Widget.updateElementClassName(e, this.className);
}
void 0 !== i.fknum && (this.fknum = i.fknum), void 0 !== i.accelerator && (this.accelerator = i.accelerator), 
void 0 !== i.canDrag && (this.canDrag = i.canDrag), void 0 !== i.canDrop && (this.canDrop = i.canDrop), 
void 0 !== i.expandEventDef && (this.expandEventDef = i.expandEventDef), t && this.handleImage(), 
i.delete && (this.close(!0, !1), this.parent.conf?.children && -1 < (l = this.parent.conf.children.findIndex(e => e.id === this.id)) && this.parent.conf.children.splice(l, 1), 
-1 < (a = this.parent?.elements?.indexOf(this) ?? -1)) && this.parent.elements.splice(a, 1);
}
}, Client.IdfCommand.prototype.getCaptionWithAccelerator = function() {
var e = Client.Widget.extractCaptionData(this.caption).caption;
if (!this.accelerator) return e;
let t = e;
e = t.toUpperCase().indexOf(this.accelerator);
return t = -1 < e ? t.substr(0, e) + "<u>" + t.substr(e, 1) + "</u>" + t.substr(e + 1) : t;
}, Client.IdfCommand.prototype.onEvent = function(e) {
var t = Client.Widget.prototype.onEvent.call(this, e);
return "onClick" === e.id && t.push(...this.handleClick(e)), t;
}, Client.IdfCommand.prototype.handlePopupResponse = function(t) {
Client.mainFrame.wep && delete Client.mainFrame.wep.menuBarOpened;
var e, i = [];
let n = !1;
for (let e = 0; e < this.elements.length; e++) {
var s = this.elements[e];
s.id === t.content.res ? (t.id = "onClick", i.push(...s.onEvent(t)), n = !0) : Client.mainFrame.isIDF && 0 < s.children?.length && 0 <= s.getChildList().indexOf(t.content.res) && (n = !0, 
i.push({
id: "clk",
def: this.clickEventDef,
content: {
oid: t.content.res
}
}));
}
return this.isFormList && !n && (e = Client.mainFrame.wep?.commandList) && (t.id = "onClick", 
t.obj = t.content.res, i.push(...e.onEvent(t))), this.closePopup(), i;
}, Client.IdfCommand.prototype.handleClick = function(e) {
var t = [];
return this.isCommandSet() ? t.push(...this.handleCommandSetClick(e)) : this.type === Client.IdfCommand.types.COMMAND && t.push(...this.handleCommandClick(e)), 
t;
}, Client.IdfCommand.prototype.openMenubar = function() {
var t = [];
let i = !1;
for (let e = 0; e < this.elements.length; e++) {
var n, s = this.elements[e];
s.visible && ({
it: s,
hasBackground: n
} = this.createCommandPopupConfiguration(s), t.push(s), i = i || n);
}
if (this.isFormList) {
var o = Client.mainFrame.wep?.commandList?.openViews || [];
for (let e = 0; e < o.length; e++) t.push({
id: o[e].viewId,
html: !0,
title: `<u>${e + 1}</u> ` + o[e].viewName
});
}
t.length && (Client.mainFrame.wep.menuBarOpened = this, Client.mainFrame.popup({
options: {
type: "menu",
refObj: this.headerConf.id,
offset: 15,
style: "top-menu-popup" + (i ? " with-background" : ""),
items: t,
callback: e => Client.mainFrame.sendEvents(this.handlePopupResponse({
id: "popupCallback",
content: {
res: e
}
}))
}
}));
}, Client.IdfCommand.prototype.createCommandPopupConfiguration = function(t) {
let i = !1;
var {
caption: e,
icon: n,
color: s
} = Client.Widget.extractCaptionData(t.caption), o = {
id: t.id,
html: !0,
title: t.getCaptionWithAccelerator ? t.getCaptionWithAccelerator() : e
};
if (n && (o.icon = n), s && (o.color = s), t.tooltip && (o.tooltip = t.tooltip + Client.Widget.getFKTip(t.fknum, t.commandCode)), 
t.image && (Client.Widget.isIconImage(e = t.image) ? o.icon = e : (i = !0, n = (Client.mainFrame.isIDF ? "images/" : "") + e, 
o.style = "background-image: url('" + n + "');")), t.children?.length) {
o.children = [];
for (let e = 0; e < t.children.length; e++) {
var l = t.children[e];
!1 !== l.visible && (l = this.createCommandPopupConfiguration(l), o.children.push(l.it), 
i = i || l.hasBackground);
}
}
return {
it: o,
hasBackground: i
};
}, Client.IdfCommand.prototype.handleCommandSetClick = function(e) {
var t = [];
return e.obj === this.headerConf?.id && (Client.mainFrame.wep?.menuType === Client.IdfWebEntryPoint.menuTypes.MENUBAR && this.openMenubar(), 
Client.mainFrame.isIDF && !Client.IdfMessagesPump.isClientSideEvent(this.expandEventDef) || this.updateElement({
expanded: !this.expanded
}), Client.mainFrame.isIDF ? t.push({
id: "clk",
def: this.expandEventDef,
content: {
oid: this.id
}
}) : t.push({
id: "onExpand",
obj: this.id,
content: this.expanded
})), t;
}, Client.IdfCommand.prototype.handleCommandClick = function(e) {
var t = [], i = Client.eleMap[Client.mainFrame.wep?.mainContainerConf.id], n = i && "" !== Client.mainFrame.wep?.defaultResponsiveClass && void 0 !== Client.mainFrame.wep?.defaultResponsiveClass;
(Client.mainFrame.wep?.menuType === Client.IdfWebEntryPoint.menuTypes.TASKBAR || Client.mainFrame.idfMobile && !this.isToolbar || n && !i?.exposed) && (n = Client.mainFrame.wep?.commandList) && (Client.mainFrame.idfMobile || Client.mainFrame.wep?.menuType !== Client.IdfWebEntryPoint.menuTypes.TASKBAR ? n.toggleMenu() : n.hideMenu());
let s = !0;
return (s = this.requireConf ? confirm(this.caption + ": " + Client.mainFrame.wep?.SRV_MSG_Confirm) : s) && (Client.mainFrame.isIDF ? (t.push({
id: "clk",
def: this.clickEventDef,
content: {
oid: this.id
}
}), Client.mainFrame.wep?.soundAction(Client.IdfWebEntryPoint.soundDef.command)) : (e.obj = this.id, 
t.push(e))), t;
}, Client.IdfCommand.prototype.handleExpansion = function() {
var e = Client.eleMap[this.expandButtonConf.id];
let t = Client.eleMap[this.listConf.id];
var i = this.expanded ? "arrow-dropup" : "arrow-dropdown";
Client.mainFrame.wep?.menuType !== Client.IdfWebEntryPoint.menuTypes.GROUPED && e.updateElement({
icon: i
}), Client.mainFrame.wep?.menuType !== Client.IdfWebEntryPoint.menuTypes.GROUPED || 1 === this.level ? (e = this.expanded ? " expanded" : " collapsed", 
i = `main-menu-list collapsible-container cmd-level-${this.level} ` + e, t.updateElement({
className: i
})) : ((t = Client.eleMap[this.commandsContainerConf.id]).updateElement({
visible: this.expanded
}), e = Client.eleMap[Client.mainFrame.wep.commandList.menuInnerConf.id], i = Client.eleMap[Client.mainFrame.wep.commandList.menuHeaderConf.id], 
e.updateElement({
selectedPage: this.expanded ? this.level - 1 : this.level - 2
}), i.updateElement({
backButton: this.expanded || 2 < this.level
}), this.expanded && Client.mainFrame.wep.commandList.expandedMenus.push(this));
}, Client.IdfCommand.prototype.clearElements = function() {
this.toolBox && Client.eleMap[this.toolBox.id] && Client.eleMap[this.toolBox.id].close(!0), 
this.toolbarButton && Client.eleMap[this.toolbarButton.id] && Client.eleMap[this.toolbarButton.id].close(!0), 
this.listConf && Client.eleMap[this.listConf.id] && Client.eleMap[this.listConf.id].close(!0), 
this.itemConf && Client.eleMap[this.itemConf.id] && Client.eleMap[this.itemConf.id].close(!0);
for (let e = 0; e < this.elements.length; e++) this.elements[e].clearElements();
for (let e = 0; e < this.mainObjects.length; e++) Client.eleMap[this.mainObjects[e].id] && this.mainObjects[e].close(!0);
this.mainObjects = [];
}, Client.IdfCommand.prototype.close = function(e, t) {
Client.Widget.prototype.close.call(this, e, t), this.toolBox && Client.eleMap[this.toolBox.id] && Client.eleMap[this.toolBox.id].close(e), 
this.toolbarButton && Client.eleMap[this.toolbarButton.id] && Client.eleMap[this.toolbarButton.id].close(e);
}, Client.IdfCommand.prototype.handleImage = function() {
var e, t;
this.image && this.caption?.trim(), this.image;
if (this.toolbarButton && Client.eleMap[this.toolbarButton.id] && !Client.Widget.isIconImage(this.image)) {
var i = Client.eleMap[this.toolbarButton.id];
let e, t;
!this.image || Client.Widget.isIconImage(this.image) || this.parent.showNames || (e = "", 
Client.IdfCommand.useToolbarIMG && (e = `<img src='${(Client.mainFrame.isIDF ? "images/" : "") + this.image}' />`, 
t = !0)), Client.Widget.updateElementClassName(i, "no-background", !t), Client.Widget.updateObject(i, {
label: e
}), Client.IdfCommand.useToolbarIMG || Client.Widget.setIconImage({
image: this.image,
el: i,
color: this.iconColor
});
}
(this.isMenu || this.parent instanceof Client.IdfButtonBar) && (i = this.headerConf || this.itemConf, 
i = Client.eleMap[i.id]) && (this.image ? (t = Client.Widget.isIconImage(this.image) ? "IonIcon" : "Container", 
e = this.menuImageConf?.class ? "class" : "c", (!this.menuImageConf || this.menuImageConf && this.menuImageConf[e] !== t || this.menuImageConf && !Client.eleMap[this.menuImageConf.id]) && (this.menuImageConf && (e = Client.eleMap[this.menuImageConf.id]) && (-1 !== i.elements.indexOf(e) && i.elements.splice(i.elements.indexOf(e), 1), 
e.close(!0)), this.menuImageConf = this.createElementConfig({
c: t,
className: "menu-img-obj"
}), e = this.view.createElement(this.menuImageConf, this.parent, this.view), i.appendChildObject(e, e.domObj), 
i.elements.push(e)), t = Client.eleMap[this.menuImageConf.id], Client.Widget.setIconImage({
image: this.image,
el: t,
innerObj: t.getRootObject(),
color: this.iconColor
})) : this.menuImageConf && Client.eleMap[this.menuImageConf.id].updateElement({
visibile: !1
}));
}, Client.IdfCommand.prototype.isCommandSet = function(e) {
return e ? e.type === Client.IdfCommand.types.COMMANDSSET || e.typeCommandSet : this.type === Client.IdfCommand.types.COMMANDSSET || this.typeCommandSet;
}, Client.IdfCommand.prototype.getRootObject = function(e) {
let t = this.mainObjects[0];
return !t && this.isToolbar && (t = Client.eleMap[(this.isCommandSet() ? this.toolBox : this.toolbarButton).id]), 
e ? t : t?.domObj;
}, Client.IdfCommand.prototype.acceptsDrop = function(e) {
return !this.isCommandSet() && this.parent.canDrop;
}, Client.IdfCommand.prototype.isDraggable = function(e) {
return !this.isCommandSet() && this.parent.canDrag;
}, Client.IdfCommand.prototype.handleFunctionKeys = function(t, i, n) {
let e = t.content.keyCode - 111 + (t.content.shiftKey ? 12 : 0) + (t.content.ctrlKey ? 24 : 0) === this.fknum;
e = e && (this.isMenu || this.isToolbar), -1 < i && (e = e && i === this.form && this.toolCont === n);
var s = [];
if (e && (s.push(...this.handleClick(t)), 0 < s.length)) t.content.srcEvent.preventDefault(); else for (let e = 0; e < this.elements.length && 0 === s.length; e++) s.push(...this.elements[e].handleFunctionKeys(t, i, n));
return s;
}, Client.IdfCommand.prototype.handleAcceleratorKeys = function(e, t) {
var i = [];
if (!(1 < this.level) && this.isMenu && this.isCommandSet() || t) {
t = e.content.keyCode;
if (Client.mainFrame.wep.menuBarOpened) {
for (var n, s = 0; s < this.elements.length && 0 === i.length; s++) i.push(...this.elements[s].handleAcceleratorKeys(e, !0));
0 === i.length && this.isFormList && 48 < t && t <= 57 && (n = (Client.mainFrame.wep?.commandList?.openViews || [])[t - 49]) && i.push(...this.handlePopupResponse({
id: "popupCallback",
content: {
res: n.id
}
}));
}
0 === i.length && this.accelerator?.charCodeAt(0) === t && (Client.mainFrame.wep.menuBarOpened ? i.push(...this.parent.handlePopupResponse({
id: "popupCallback",
content: {
res: this.id
}
})) : i.push(...this.handleClick({
obj: this.headerConf?.id
}))), 0 < i.length && e.content.srcEvent.preventDefault();
}
return i;
}, Client.IdfCommand.prototype.closePopup = function() {
var e = document.getElementsByTagName("ion-popover");
e.item(e.lnegth - 1)?.click();
}, Client.IdfCommand.prototype.isPopupMenu = function() {
return this.isCommandSet() && !this.isToolbar && !this.isMenu && !this.buttonBarId;
}, Client.IdfCommand.prototype.getChildList = function() {
var t = [];
t.push(...this.children);
for (let e = 0; e < t.length; e++) 0 < t[e].children?.length && t.push(...t[e].children);
var i = [];
for (let e = 0; e < t.length; e++) i.push(t[e].id);
return i;
}, Client || {}), Client = (Client.IdfIndicator = function(e, t, i) {
e = Object.assign({
width: 0,
style: -1,
enabled: !0,
visible: !0,
image: "",
caption: "",
alignment: Client.IdfIndicator.alignments.LEFT,
clickEventDef: Client.IdfMessagesPump?.eventTypes.ACTIVE
}, e), Client.Widget.call(this, e, t, i);
}, Client.IdfIndicator.prototype = new Client.Widget(), Client.IdfIndicator.transPropMap = {
frm: "viewId",
ena: "enabled",
vis: "visible",
sty: "style",
img: "image",
ali: "alignment"
}, Client.IdfIndicator.styles = {
TIME: 6,
DATE: 7
}, Client.IdfIndicator.alignments = {
LEFT: 2,
CENTER: 3,
RIGHT: 4
}, Client.IdfIndicator.convertPropValues = function(e) {
for (var t in e = e || {}) switch (t) {
case Client.IdfIndicator.transPropMap.frm:
e[t] && (e[t] = "frm:" + parseInt(e[t]));
break;

case Client.IdfIndicator.transPropMap.sty:
case Client.IdfIndicator.transPropMap.ali:
e[t] = parseInt(e[t]);
break;

case Client.IdfIndicator.transPropMap.ena:
case Client.IdfIndicator.transPropMap.vis:
e[t] = "1" === e[t];
}
}, Client.IdfIndicator.prototype.updateElement = function(e) {
for (var t in Client.Widget.prototype.updateElement.call(this, e), e) {
var i = e[t];
switch (t) {
case "width":
this.setWidth(i);
break;

case "tooltip":
this.setTooltip(i);
break;

case "style":
this.setStyle(i);
break;

case "enabled":
this.setEnabled(i);
break;

case "visible":
this.setVisible(i);
break;

case "caption":
this.setText(i);
break;

case "image":
this.setImage(i);
break;

case "alignment":
this.setAlignment(i);
}
}
}, Client.IdfIndicator.prototype.setWidth = function(e) {
this.width = e;
let t = "", i;
0 === this.width ? i = !0 : 1 < this.width && (t = this.width + "px"), this.getRootObject(!0).updateElement({
style: {
width: t
}
}), Client.Widget.updateElementClassName(this.getRootObject(!0), "dynamic-width", !i);
}, Client.IdfIndicator.prototype.setTooltip = function(e) {
this.getRootObject(!0).updateElement({
tooltip: this.tooltip
});
}, Client.IdfIndicator.prototype.setStyle = function(e) {
switch (this.style = e, clearInterval(this.timer), delete this.timer, this.style) {
case Client.IdfIndicator.styles.TIME:
var t = () => this.textBox.updateElement({
innerHTML: moment().format("H.mm")
});
this.timer = setInterval(t, 1e3), t();
break;

case Client.IdfIndicator.styles.DATE:
t = () => this.textBox.updateElement({
innerHTML: moment().format("L")
});
this.timer = setInterval(t, 6e4), t();
break;

default:
this.textBox.updateElement({
innerHTML: this.caption
});
}
}, Client.IdfIndicator.prototype.setEnabled = function(e) {
this.enabled = e, Client.Widget.updateElementClassName(this.textBox, "indicator-disabled", this.enabled), 
Client.Widget.updateElementClassName(this.imageObj, "indicator-disabled", this.enabled);
}, Client.IdfIndicator.prototype.setVisible = function(e) {
this.visible = e, this.getRootObject(!0).updateElement({
visible: this.visible
});
}, Client.IdfIndicator.prototype.setText = function(e) {
var {
caption: t,
icon: i
} = Client.Widget.extractCaptionData(this.caption);
i && this.setImage(i), this.textBox.updateElement({
innerHTML: t
});
}, Client.IdfIndicator.prototype.setImage = function(e) {
this.image = e, this.image ? (this.imageObj || (e = this.createElementConfig({
c: "IonButton",
className: "indicator-image"
}), this.imageObj = this.getRootObject(!0).insertBefore({
child: e,
sib: this.textBox.id
})), Client.Widget.setIconImage({
image: this.image,
el: this.imageObj
})) : this.imageObj && this.getRootObject(!0).removeChild(this.imageObj);
}, Client.IdfIndicator.prototype.setAlignment = function(e) {
Client.Widget.updateElementClassName(this.getRootObject(!0), this.getAlignmentClass(), !0), 
this.alignment = e, Client.Widget.updateElementClassName(this.getRootObject(!0), this.getAlignmentClass());
}, Client.IdfIndicator.prototype.getAlignmentClass = function() {
switch (this.alignment) {
case Client.IdfIndicator.alignments.LEFT:
return "left-aligned";

case Client.IdfIndicator.alignments.CENTER:
return "center-aligned";

case Client.IdfIndicator.alignments.RIGHT:
return "right-aligned";
}
}, Client.IdfIndicator.prototype.createElementsConfig = function() {
return this.createElementConfig({
c: "Container",
type: "span",
events: [ "onClick" ],
className: "indicator-box",
children: [ this.createElementConfig({
c: "Container",
type: "span",
className: "indicator-text"
}) ]
});
}, Client.IdfIndicator.prototype.realize = function(e, t, i) {
e = i.createElement(this.createElementsConfig(e), t, i);
this.mainObjects.push(e), this.textBox = e.elements[0];
}, Client.IdfIndicator.prototype.onEvent = function(e) {
var t = Client.Widget.prototype.onEvent.call(this, e);
return "onClick" === e.id && t.push(...this.handleClick(e)), t;
}, Client.IdfIndicator.prototype.handleClick = function(e) {
var t = [];
return this.enabled && t.push({
id: "clk",
def: this.clickEventDef,
content: {
oid: this.id
}
}), t;
}, Client || {}), Client = (Client.IdfIndicatorList = function(e, t, i) {
e = Object.assign({
id: "inh"
}, e), Client.mainFrame.wep.indicatorList = this, Client.Widget.call(this, e, t, i);
}, Client.IdfIndicatorList.prototype = new Client.Widget(), Client.IdfIndicatorList.prototype.realize = function(e, t, i) {
Client.mainFrame.wep.realizeStatusbar(), this.createChildren(e);
}, Client.IdfIndicatorList.prototype.appendChildObject = function(e, t) {
Client.mainFrame.wep.statusbar.getRootObject().appendChild(t);
}, Client || {}), Client = (Client.IdfPanel = function(e, t, i) {
this.fields = [], this.groups = [], this.pages = [], this.newFields = [], this.multiSelStatus = [], 
this.visibleAggregateFields = [], this.viewportListFields = [], this.listGridRows = [], 
this.formGridRows = [], this.rows = [], this.detachedRows = {}, this.commandsZones = [ 4, 4, 4, 6, 5, 4, 4, 6, 6, 0, 0, 0, 0, 0, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 3, 0, 1, 1, 2, 9, 2, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0 ], 
this.customCommands = [], this.showFieldImageInValue = void 0 === Client.mainFrame.wep?.showFieldImageInValue || Client.mainFrame.wep.showFieldImageInValue, 
(e = Object.assign({
showStatusbar: !0,
gridHeight: t.height,
gridTop: 0,
gridLeft: 0,
headerHeight: Client.IdfPanel.defaultHeaderHeight,
layout: Client.IdfPanel.layouts.list,
status: Client.mainFrame.isEditing() ? Client.IdfPanel.statuses.data : Client.IdfPanel.statuses.qbe,
showRowSelector: !0,
showMultipleSelection: !1,
enableMultipleSelection: !0,
selectOnlyVisibleRows: !1,
hasList: !0,
hasForm: !0,
rowHeightResize: !1,
canUpdate: !0,
canDelete: !0,
canInsert: !0,
canSearch: !0,
canSort: !0,
canGroup: !1,
showGroups: !1,
confirmDelete: !0,
highlightDelete: !0,
totalRows: 0,
actualPosition: 1,
actualRow: 0,
resizeWidth: Client.IdfPanel.resizeModes.stretch,
resizeHeight: Client.IdfPanel.resizeModes.stretch,
fixedColumns: 0,
blockingCommands: 0,
enabledCommands: -1,
extEnabledCommands: -1,
automaticLayout: !1,
searchMode: Client.IdfPanel.searchModes.toolbar,
allowNavigationWhenModified: !0,
enableInsertWhenLocked: !1,
hasBook: !1,
isDO: !1,
hasDocTemplate: !1,
DOMaster: !1,
DOModified: !1,
DOSingleDoc: !1,
DOCanSave: !0,
activateOnRightClick: !1,
pullToRefresh: !0,
activePage: 0,
advancedTabOrder: !1,
canReorderColumn: !1,
canResizeColumn: !1,
searchInContent: !0,
toolbarEventDef: Client.IdfMessagesPump?.eventTypes.ACTIVE,
scrollEventDef: Client.IdfMessagesPump?.eventTypes.ACTIVE,
rowSelectEventDef: Client.IdfMessagesPump?.eventTypes.ACTIVE,
pageClickEventDef: Client.IdfMessagesPump?.eventTypes.ACTIVE,
multiSelEventDef: Client.IdfMessagesPump?.eventTypes.DEFERRED,
focusEventDef: Client.IdfMessagesPump?.eventTypes.CLIENTSIDE,
selectionChangeEventDef: Client.IdfMessagesPump?.eventTypes.DEFERRED,
changeLayoutAnimationDef: Client.IdfWebEntryPoint.getAnimationDefault("list"),
qbeTipAnimationDef: Client.IdfWebEntryPoint.getAnimationDefault("qbeTip")
}, e)).disableAnimations && (e.changeLayoutAnimationDef = "none:250", e.collapseAnimationDef = "none:250");
var n = (t instanceof Client.IdfTab ? t.parent : e).height || 0;
this.orgGridHeight = e.gridHeight - (n - e.originalHeight), this.orgGridWidth = e.gridWidth + Client.IdfPanel.scrollbarWidth, 
e.gridHeight = this.orgGridHeight, this.orgGridTop = e.gridTop, this.orgGridLeft = e.gridLeft, 
this.gridStyle = {}, this.gridColStyle = {}, this.rowSelectorStyle = {}, this.aggregateRowSelectorStyle = {}, 
Client.mainFrame.isEditing() && (e.totalRows = Client.IdfPanel.maxReusableRows, 
e.data = {}, e.dataBlockStart = 1, e.dataBlockEnd = e.totalRows), i?.parent instanceof Client.IonNavController && (n = i.parent?.domObj?.style) && !n.height && (n.height = "100%"), 
this.numSubRows = 1, this.wrapRows = [], Client.mainFrame.isIDF && Client.IdfPanel.handleListTabOrder(e), 
Client.IdfFrame.call(this, e, t, i);
}, Client.IdfPanel.prototype = new Client.IdfFrame(), Client.IdfPanel.getRequirements = Client.IdfFrame.getRequirements, 
Client.IdfPanel.transPropMap = Object.assign({}, Client.IdfFrame.transPropMap, {
mod: "layout",
sta: "status",
num: "numRows",
mor: "moreRows",
mhr: "maxRowHeight",
hds: "headerHeight",
srs: "showRowSelector",
sms: "showMultipleSelection",
ems: "enableMultipleSelection",
sov: "selectOnlyVisibleRows",
hli: "hasList",
hfo: "hasForm",
upd: "canUpdate",
del: "canDelete",
ins: "canInsert",
sea: "canSearch",
sor: "canSort",
grn: "canGroup",
sgr: "showGroups",
cde: "confirmDelete",
hde: "highlightDelete",
lle: "gridLeft",
lto: "gridTop",
lwi: "gridWidth",
lhe: "gridHeight",
atr: "actualRow",
vre: "resizeHeight",
hre: "resizeWidth",
fix: "fixedColumns",
qtp: "qbeTip",
acp: "actualPosition",
tot: "totalRows",
cbk: "blockingCommands",
enc: "enabledCommands",
eec: "extEnabledCommands",
qbf: "automaticLayout",
lqb: "searchMode",
rhr: "rowHeightResize",
amp: "allowNavigationWhenModified",
eil: "enableInsertWhenLocked",
bok: "hasBook",
ido: "isDO",
hdt: "hasDocTemplate",
dom: "DOModified",
mst: "DOMaster",
csa: "DOCanSave",
sdo: "DOSingleDoc",
arc: "activateOnRightClick",
pag: "activePage",
tck: "toolbarEventDef",
sck: "scrollEventDef",
rck: "rowSelectEventDef",
pck: "pageClickEventDef",
mse: "multiSelEventDef",
fed: "focusEventDef",
tsk: "selectionChangeEventDef",
cla: "changeLayoutAnimationDef",
qta: "qbeTipAnimationDef",
rsc: "canResizeColumn",
rcl: "canReorderColumn",
pre: "pullToRefresh",
ata: "advancedTabOrder",
vfl: "visualFlags",
tor: "tooltipOnEachRow",
ssc: "searchInContent"
}), Client.IdfPanel.defaultHeaderHeight = 32, Client.IdfPanel.defaultListRowHeight = 32, 
Client.IdfPanel.defaultRowSelectorWidth = 40, Client.IdfPanel.rowSelectorOffset = 20, 
Client.IdfPanel.maxToolbarZones = 11, Client.IdfPanel.maxReusableRows = 70, Client.IdfPanel.scrollbarWidth = 14, 
Client.IdfPanel.hardScrollLimit = 20, Client.IdfPanel.FKActField = 2, Client.IdfPanel.FKEnterQBE = 3, 
Client.IdfPanel.FKFindData = 3, Client.IdfPanel.FKFormList = 4, Client.IdfPanel.FKRefresh = 6, 
Client.IdfPanel.FKCancel = 6, Client.IdfPanel.FKInsert = 7, Client.IdfPanel.FKDelete = 8, 
Client.IdfPanel.FKUpdate = 9, Client.IdfPanel.FKLocked = 11, Client.IdfPanel.FKActRow = 12, 
Client.IdfPanel.FKSelAll = 14, Client.IdfPanel.FKSelNone = 15, Client.IdfPanel.FKSelTog = 16, 
Client.IdfPanel.FKDuplicate = 19, Client.IdfPanel.FKCloseView = 26, Client.IdfPanel.FKPrint = 36, 
Client.IdfPanel.commands = {
CZ_FORMLIST: 0,
CZ_SEARCH: 1,
CZ_FIND: 2,
CZ_INSERT: 3,
CZ_DELETE: 4,
CZ_CANCEL: 5,
CZ_REQUERY: 6,
CZ_UPDATE: 7,
CZ_DUPLICATE: 8,
CZ_LOOKUP: 9,
CZ_BLOBEDIT: 10,
CZ_BLOBDELETE: 11,
CZ_BLOBNEW: 12,
CZ_BLOBSAVEAS: 13,
CZ_PRINT: 14,
CZ_GROUP: 15,
CZ_ATTACH: 16,
CZ_CSV: 17,
CZ_CUSTOM1: 18,
CZ_CUSTOM2: 19,
CZ_CUSTOM3: 20,
CZ_CUSTOM4: 21,
CZ_CUSTOM5: 22,
CZ_CUSTOM6: 23,
CZ_CUSTOM7: 24,
CZ_CUSTOM8: 25,
CZ_NAVIGATE: 30,
CZ_COLLAPSE: 32,
CZ_LOCK: 33,
CZ_STATUSBAR: 34,
CZ_CMDSET: 35,
CZ_QBETIP: 36,
CMD_FORMLIST: 1,
CMD_SEARCH: 2,
CMD_FIND: 4,
CMD_INSERT: 8,
CMD_DELETE: 16,
CMD_CANCEL: 32,
CMD_REFRESH: 64,
CMD_SAVE: 128,
CMD_DUPLICATE: 256,
CMD_LOOKUP: 512,
CMD_BLOBEDIT: 1024,
CMD_BLOBDELETE: 2048,
CMD_BLOBNEW: 4096,
CMD_BLOBSAVEAS: 8192,
CMD_PRINT: 16384,
CMD_ATTACH: 65536,
CMD_CSV: 131072,
CMD_GROUP: 32768,
CMD_CUSTOM1: -1,
CMD_CUSTOM2: -2,
CMD_CUSTOM3: -4,
CMD_CUSTOM4: -8,
CMD_CUSTOM5: -22,
CMD_CUSTOM6: -50,
CMD_CUSTOM7: -100,
CMD_CUSTOM8: -296,
CMD_NAVIGATION: 1073741824
}, Client.IdfPanel.resizeModes = {
none: 1,
move: 2,
stretch: 3
}, Client.IdfPanel.statuses = {
qbe: 1,
data: 2,
updated: 3
}, Client.IdfPanel.layouts = {
list: 0,
form: 1
}, Client.IdfPanel.searchModes = {
toolbar: 0,
header: -1,
row: -2
}, Client.IdfPanel.editOperations = {
drag: 1,
resize: 2,
movegrid: 3
}, Client.IdfPanel.createConfigFromXml = function(t) {
var i = {};
let n = !1, s, o;
for (let e = 0; e < t.childNodes.length; e++) {
var l = t.childNodes[e];
"lsg" === l.nodeName ? i.groupedRows = !0 : (l = Client.Widget.createConfigFromXml(l)) && Client.Widget.isFieldClass(l.c) && l.valuesConfig.length && (n = !0, 
void 0 === s && (s = parseInt(l.valuesConfig[0].idx)), void 0 === o) && (o = parseInt(l.valuesConfig[l.valuesConfig.length - 1].idx));
}
return n && (i.dataBlockStart = s || 1, i.dataBlockEnd = o || 1, i.data = {}), i;
}, Client.IdfPanel.convertPropValues = function(e) {
for (var t in Client.IdfFrame.convertPropValues(e = e || {}), e) switch (t) {
case Client.IdfPanel.transPropMap.mod:
case Client.IdfPanel.transPropMap.sta:
case Client.IdfPanel.transPropMap.num:
case Client.IdfPanel.transPropMap.hds:
case Client.IdfPanel.transPropMap.tot:
case Client.IdfPanel.transPropMap.lwi:
case Client.IdfPanel.transPropMap.lhe:
case Client.IdfPanel.transPropMap.lle:
case Client.IdfPanel.transPropMap.lto:
case Client.IdfPanel.transPropMap.hre:
case Client.IdfPanel.transPropMap.vre:
case Client.IdfPanel.transPropMap.atr:
case Client.IdfPanel.transPropMap.acp:
case Client.IdfPanel.transPropMap.cbk:
case Client.IdfPanel.transPropMap.enc:
case Client.IdfPanel.transPropMap.eec:
case Client.IdfPanel.transPropMap.lqb:
case Client.IdfPanel.transPropMap.pag:
case Client.IdfPanel.transPropMap.tck:
case Client.IdfPanel.transPropMap.sck:
case Client.IdfPanel.transPropMap.rck:
case Client.IdfPanel.transPropMap.pck:
case Client.IdfPanel.transPropMap.mse:
case Client.IdfPanel.transPropMap.rsc:
case Client.IdfPanel.transPropMap.rcl:
case Client.IdfPanel.transPropMap.fix:
case Client.IdfPanel.transPropMap.vfl:
e[t] = parseInt(e[t]);
break;

case Client.IdfPanel.transPropMap.srs:
case Client.IdfPanel.transPropMap.mor:
case Client.IdfPanel.transPropMap.sms:
case Client.IdfPanel.transPropMap.ems:
case Client.IdfPanel.transPropMap.sov:
case Client.IdfPanel.transPropMap.hli:
case Client.IdfPanel.transPropMap.hfo:
case Client.IdfPanel.transPropMap.upd:
case Client.IdfPanel.transPropMap.del:
case Client.IdfPanel.transPropMap.ins:
case Client.IdfPanel.transPropMap.sea:
case Client.IdfPanel.transPropMap.sor:
case Client.IdfPanel.transPropMap.grn:
case Client.IdfPanel.transPropMap.sgr:
case Client.IdfPanel.transPropMap.cde:
case Client.IdfPanel.transPropMap.hde:
case Client.IdfPanel.transPropMap.amp:
case Client.IdfPanel.transPropMap.eil:
case Client.IdfPanel.transPropMap.qbf:
case Client.IdfPanel.transPropMap.bok:
case Client.IdfPanel.transPropMap.ido:
case Client.IdfPanel.transPropMap.dom:
case Client.IdfPanel.transPropMap.mst:
case Client.IdfPanel.transPropMap.csa:
case Client.IdfPanel.transPropMap.sdo:
case Client.IdfPanel.transPropMap.arc:
case Client.IdfPanel.transPropMap.pre:
case Client.IdfPanel.transPropMap.ata:
case Client.IdfPanel.transPropMap.tor:
case Client.IdfPanel.transPropMap.ssc:
e[t] = "1" === e[t];
}
}, Client.IdfPanel.prototype.getRootObject = function(e) {
var t;
return this.moving ? Client.IdfFrame.prototype.getRootObject.call(this, e) : (t = Client.eleMap[this.panelContainerConf.id], 
e ? t : t.domObj);
}, Client.IdfPanel.prototype.createElementsConfig = function(e) {
Client.IdfFrame.prototype.createElementsConfig.call(this, e);
var t = "vela" === Client.mainFrame.idfTheme, e = (this.pagesContainerConf = this.createElementConfig({
c: "Container",
className: "panel-pages-container",
visible: !1
}), this.mainContainerConf.children.splice(1, 0, this.pagesContainerConf), this.panelContainerConf = this.createElementConfig({
c: "AltContainer",
selectedPage: e.layout || 0,
className: "panel-container"
}), Client.IdfWebEntryPoint.getAnimationByDef(this.changeLayoutAnimationDef)), t = (e && !t && (this.panelContainerConf.animations = [ {
trigger: "change",
...e
} ]), this.contentContainerConf.children.push(this.panelContainerConf), this.createElementConfig({
c: "Container",
style: {
width: "100%",
height: "100%"
}
})), e = (this.listContainerConf = this.createElementConfig({
c: "IonGrid",
className: "panel-list-container"
}), this.createGridConfig(), t.children.push(this.listContainerConf), t.children.push(this.extGridConf), 
this.panelContainerConf.children.push(t), this.createElementConfig({
c: "Container",
style: {
width: "100%",
height: "100%"
}
}));
this.formContainerConf = this.createElementConfig({
c: "IonGrid",
className: "panel-form-container"
}), e.children.push(this.formContainerConf), this.panelContainerConf.children.push(e);
}, Client.IdfPanel.prototype.createGridConfig = function() {
this.extGridConf = this.createElementConfig({
c: "IonContent",
className: "panel-list-ext-grid",
noBounce: !0
}), this.extGridListConf = this.createElementConfig({
c: "IonList",
className: "panel-list-ext-grid",
events: [ "onRefresh" ],
pullText: " ",
refreshText: " "
}), this.extGridConf.children.push(this.extGridListConf), this.gridConf = this.createElementConfig({
c: "IonGrid",
className: "panel-list-grid"
}), this.extGridListConf.children.push(this.gridConf), this.gridHeaderConf = this.createElementConfig({
c: "IonRow",
className: "panel-list-row panel-list-header-row",
noWrap: !0
}), this.gridConf.children.push(this.gridHeaderConf);
var e = this.getHeaderOffset() ? " offset-col" : "";
this.rowSelectorColumnConf = this.createElementConfig({
c: "IonCol",
className: "panel-list-col row-selector-col" + e,
xs: "auto",
visible: !1
}), this.gridHeaderConf.children.push(this.rowSelectorColumnConf), this.multiSelButtonConf = this.createElementConfig({
c: "IonButton",
icon: "checkbox",
className: "generic-btn panel-multisel-button",
events: [ "onClick" ]
}), this.rowSelectorColumnConf.children.push(this.multiSelButtonConf), this.windowScrollerConf = this.createElementConfig({
c: "Container",
className: "panel-list-scroller"
}), this.gridConf.children.push(this.windowScrollerConf), this.windowConf = this.createElementConfig({
c: "Container",
className: "panel-list-window"
}), this.windowScrollerConf.children.push(this.windowConf), this.aggregateRowConf = this.createElementConfig({
c: "IonRow",
className: "panel-list-row panel-list-aggregate-row",
noWrap: !0
}), this.gridConf.children.push(this.aggregateRowConf), this.aggregateRowSelectorConf = this.createElementConfig({
c: "IonCol",
className: "panel-list-col row-selector-col",
xs: "auto"
}), this.aggregateRowConf.children.push(this.aggregateRowSelectorConf), Client.mainFrame.isIDF || (this.noResultsRowConf = this.createElementConfig({
c: "IonRow",
className: "panel-list-noresults-row",
noWrap: !0,
visible: !1
}), this.gridConf.children.push(this.noResultsRowConf), e = this.createElementConfig({
c: "IonCol",
xs: "auto"
}), this.noResultsRowConf.children.push(e), this.noResultsTextConf = this.createElementConfig({
c: "Span",
className: "panel-list-noresults-text"
}), e.children.push(this.noResultsTextConf));
}, Client.IdfPanel.prototype.createToolbarConfig = function(e) {
Client.IdfFrame.prototype.createToolbarConfig.call(this, e), this.hasFAB = 0 <= e.className?.toUpperCase()?.indexOf("FAB") && Client.mainFrame.idfMobile, 
this.toolbarZonesConfig = [];
for (let e = 0; e < Client.IdfPanel.maxToolbarZones; e++) Client.mainFrame.idfMobile ? this.toolbarZonesConfig[e] = this.toolbarConf : (this.toolbarZonesConfig[e] = this.createElementConfig({
c: "Container",
className: "panel-toolbar-zone"
}), this.toolbarConf.children.push(this.toolbarZonesConfig[e]));
let t, i;
i = this.toolbarConf.children.indexOf(this.collapseButtonConf), this.toolbarConf.children.splice(i, 1), 
t = this.getCommandZone(Client.IdfPanel.commands.CZ_COLLAPSE), this.toolbarZonesConfig[t].children.push(this.collapseButtonConf), 
this.collapseButtonConf.className += " panel-toolbar-btn", i = this.toolbarConf.children.indexOf(this.menuButtonConf), 
this.toolbarConf.children.splice(i, 1), t = this.getCommandZone(Client.IdfPanel.commands.CZ_COLLAPSE), 
this.toolbarZonesConfig[t].children.push(this.menuButtonConf), this.menuButtonConf.className += " panel-toolbar-btn", 
i = this.toolbarConf.children.indexOf(this.lockButtonConf), this.toolbarConf.children.splice(i, 1), 
this.lockButtonConf.className += " panel-toolbar-btn", (this.hasFAB ? (this.lockButtonConf.fab = "bottom", 
this.lockButtonConf.fabAlignment = "right", this.mainContainerConf) : (t = this.getCommandZone(Client.IdfPanel.commands.CZ_LOCK), 
this.toolbarZonesConfig[t])).children.push(this.lockButtonConf), i = this.toolbarConf.children.indexOf(this.iconButtonConf), 
this.toolbarConf.children.splice(i, 1), t = this.getCommandZone(Client.IdfPanel.commands.CZ_STATUSBAR), 
this.toolbarZonesConfig[t].children.push(this.iconButtonConf), this.iconButtonConf.className += " panel-toolbar-btn", 
i = this.toolbarConf.children.indexOf(this.titleConf), this.toolbarConf.children.splice(i, 1), 
t = this.getCommandZone(Client.IdfPanel.commands.CZ_STATUSBAR), this.toolbarZonesConfig[t].children.push(this.titleConf), 
this.statusbarConf = this.createElementConfig({
c: "Span",
className: "panel-statusbar"
}), this.titleConf.children.push(this.statusbarConf), this.qbeButtonConf = this.createElementConfig({
c: "IonButton",
icon: "information-circle-outline",
className: "generic-btn panel-toolbar-btn qbe-tip-btn"
}), t = this.getCommandZone(Client.IdfPanel.commands.CZ_STATUSBAR), this.toolbarZonesConfig[t].children.push(this.qbeButtonConf), 
this.topButtonConf = this.createElementConfig({
c: "IonButton",
icon: "rewind",
className: "generic-btn panel-toolbar-btn top-btn",
events: [ "onClick" ],
customid: this.id.replace(/:/g, "_") + "_top"
}), this.topButtonConf.tooltip = this.getTooltip(this.topButtonConf.id), t = this.getCommandZone(Client.IdfPanel.commands.CZ_NAVIGATE), 
this.toolbarZonesConfig[t].children.push(this.topButtonConf), this.prevButtonConf = this.createElementConfig({
c: "IonButton",
icon: "play",
className: "generic-btn panel-toolbar-btn prev-btn",
events: [ "onClick" ]
}), this.prevButtonConf.tooltip = this.getTooltip(this.prevButtonConf.id), t = this.getCommandZone(Client.IdfPanel.commands.CZ_NAVIGATE), 
this.toolbarZonesConfig[t].children.push(this.prevButtonConf), this.nextButtonConf = this.createElementConfig({
c: "IonButton",
icon: "play",
className: "generic-btn panel-toolbar-btn next-btn",
events: [ "onClick" ]
}), this.nextButtonConf.tooltip = this.getTooltip(this.nextButtonConf.id), t = this.getCommandZone(Client.IdfPanel.commands.CZ_NAVIGATE), 
this.toolbarZonesConfig[t].children.push(this.nextButtonConf), this.bottomButtonConf = this.createElementConfig({
c: "IonButton",
icon: "fastforward",
className: "generic-btn panel-toolbar-btn bottom-btn",
events: [ "onClick" ]
}), this.bottomButtonConf.tooltip = this.getTooltip(this.bottomButtonConf.id), t = this.getCommandZone(Client.IdfPanel.commands.CZ_NAVIGATE), 
this.toolbarZonesConfig[t].children.push(this.bottomButtonConf), this.searchButtonConf = this.createElementConfig({
c: "IonButton",
icon: "search",
className: "generic-btn panel-toolbar-btn search-btn",
events: [ "onClick" ],
customid: this.id.replace(/:/g, "_") + "_search"
}), this.searchButtonConf.tooltip = this.getTooltip(this.searchButtonConf.id), t = this.getCommandZone(Client.IdfPanel.commands.CZ_SEARCH), 
this.toolbarZonesConfig[t].children.push(this.searchButtonConf), this.findButtonConf = this.createElementConfig({
c: "IonButton",
icon: "flash",
className: "generic-btn panel-toolbar-btn find-btn",
events: [ "onClick" ],
customid: this.id.replace(/:/g, "_") + "_find"
}), this.findButtonConf.tooltip = this.getTooltip(this.findButtonConf.id), t = this.getCommandZone(Client.IdfPanel.commands.CZ_FIND), 
this.toolbarZonesConfig[t].children.push(this.findButtonConf), this.formListButtonConf = this.createElementConfig({
c: "IonButton",
icon: Client.mainFrame.idfMobile ? "arrow-back" : "list",
className: "generic-btn panel-toolbar-btn formlist-btn",
events: [ "onClick" ],
customid: this.id.replace(/:/g, "_") + "_formlist"
}), this.formListButtonConf.tooltip = this.getTooltip(this.formListButtonConf.id), 
t = this.getCommandZone(Client.IdfPanel.commands.CZ_FORMLIST), this.toolbarZonesConfig[t].children.push(this.formListButtonConf), 
this.formListAutoButtonConf = this.createElementConfig({
c: "IonButton",
icon: "arrow-back",
visible: !1,
className: "generic-btn panel-toolbar-btn formlist-auto-btn",
events: [ "onClick" ]
}), this.formListAutoButtonConf.tooltip = this.getTooltip(this.formListAutoButtonConf.id), 
t = this.getCommandZone(Client.IdfPanel.commands.CZ_COLLAPSE), this.toolbarZonesConfig[t].children.unshift(this.formListAutoButtonConf), 
this.cancelButtonConf = this.createElementConfig({
c: "IonButton",
icon: "undo",
className: "generic-btn panel-toolbar-btn undo-btn",
events: [ "onClick" ],
customid: this.id.replace(/:/g, "_") + "_cancel"
}), this.cancelButtonConf.tooltip = this.getTooltip(this.cancelButtonConf.id), t = this.getCommandZone(Client.IdfPanel.commands.CZ_CANCEL), 
this.toolbarZonesConfig[t].children.push(this.cancelButtonConf), this.refreshButtonConf = this.createElementConfig({
c: "IonButton",
icon: "refresh",
className: "generic-btn panel-toolbar-btn refresh-btn",
events: [ "onClick" ],
customid: this.id.replace(/:/g, "_") + "_refresh"
}), this.refreshButtonConf.tooltip = this.getTooltip(this.refreshButtonConf.id), 
t = this.getCommandZone(Client.IdfPanel.commands.CZ_REQUERY), this.toolbarZonesConfig[t].children.push(this.refreshButtonConf), 
this.deleteButtonConf = this.createElementConfig({
c: "IonButton",
icon: "trash",
className: "generic-btn panel-toolbar-btn delete-btn",
events: [ "onClick" ],
customid: this.id.replace(/:/g, "_") + "_del"
}), this.deleteButtonConf.tooltip = this.getTooltip(this.deleteButtonConf.id), t = this.getCommandZone(Client.IdfPanel.commands.CZ_DELETE), 
this.toolbarZonesConfig[t].children.push(this.deleteButtonConf), this.insertButtonConf = this.createElementConfig({
c: "IonButton",
icon: "add",
className: "generic-btn panel-toolbar-btn insert-btn",
events: [ "onClick" ],
customid: this.id.replace(/:/g, "_") + "_new"
}), this.insertButtonConf.tooltip = this.getTooltip(this.insertButtonConf.id), (this.hasFAB ? (this.insertButtonConf.fab = "bottom", 
this.insertButtonConf.fabAlignment = "right", this.mainContainerConf) : (t = this.getCommandZone(Client.IdfPanel.commands.CZ_INSERT), 
this.toolbarZonesConfig[t])).children.push(this.insertButtonConf), this.multipleMobileButtonConf = this.createElementConfig({
c: "IonButton",
icon: "done-all",
visible: !(!this.enableMultipleSelection || !Client.mainFrame.idfMobile),
className: "generic-btn panel-toolbar-btn multiple-mob-btn",
events: [ "onClick" ]
}), t = this.getCommandZone(Client.IdfPanel.commands.CZ_INSERT), this.toolbarZonesConfig[t].children.push(this.multipleMobileButtonConf), 
this.duplicateButtonConf = this.createElementConfig({
c: "IonButton",
icon: "copy",
className: "generic-btn panel-toolbar-btn duplicate-btn",
events: [ "onClick" ],
customid: this.id.replace(/:/g, "_") + "_dupl"
}), this.duplicateButtonConf.tooltip = this.getTooltip(this.duplicateButtonConf.id), 
t = this.getCommandZone(Client.IdfPanel.commands.CZ_DUPLICATE), this.toolbarZonesConfig[t].children.push(this.duplicateButtonConf), 
this.saveButtonConf = this.createElementConfig({
c: "IonButton",
icon: "save",
className: "generic-btn panel-toolbar-btn save-btn",
events: [ "onClick" ],
customid: this.id.replace(/:/g, "_") + "_save"
}), this.saveButtonConf.tooltip = this.getTooltip(this.saveButtonConf.id), t = this.getCommandZone(Client.IdfPanel.commands.CZ_UPDATE), 
this.toolbarZonesConfig[t].children.push(this.saveButtonConf), this.printButtonConf = this.createElementConfig({
c: "IonButton",
icon: "print",
className: "generic-btn panel-toolbar-btn print-btn",
events: [ "onClick" ],
customid: this.id.replace(/:/g, "_") + "_print"
}), this.printButtonConf.tooltip = this.getTooltip(this.printButtonConf.id), t = this.getCommandZone(Client.IdfPanel.commands.CZ_PRINT), 
this.toolbarZonesConfig[t].children.push(this.printButtonConf), this.csvButtonConf = this.createElementConfig({
c: "IonButton",
icon: "open",
className: "generic-btn panel-toolbar-btn csv-btn",
events: [ "onClick" ],
customid: this.id.replace(/:/g, "_") + "_csv"
}), this.csvButtonConf.tooltip = this.getTooltip(this.csvButtonConf.id), t = this.getCommandZone(Client.IdfPanel.commands.CZ_CSV), 
this.toolbarZonesConfig[t].children.push(this.csvButtonConf), this.attachButtonConf = this.createElementConfig({
c: "IonButton",
icon: "attach",
className: "generic-btn panel-toolbar-btn attach-btn",
events: [ "onClick" ],
customid: this.id.replace(/:/g, "_") + "_attach"
}), this.attachButtonConf.tooltip = this.getTooltip(this.attachButtonConf.id), t = this.getCommandZone(Client.IdfPanel.commands.CZ_ATTACH), 
this.toolbarZonesConfig[t].children.push(this.attachButtonConf), this.groupButtonConf = this.createElementConfig({
c: "IonButton",
icon: "grid",
className: "generic-btn panel-toolbar-btn group-btn",
events: [ "onClick" ],
customid: this.id.replace(/:/g, "_") + "_group"
}), this.groupButtonConf.tooltip = this.getTooltip(this.groupButtonConf.id), t = this.getCommandZone(Client.IdfPanel.commands.CZ_GROUP), 
this.toolbarZonesConfig[t].children.push(this.groupButtonConf), this.customButtonsConf = [], 
Client.mainFrame.wep?.customCommands.forEach(e => this.addCustomCommand(e));
for (let e = 0; e < this.toolbarZonesConfig.length; e++) this.toolbarZonesConfig[e].children.length || (this.toolbarZonesConfig[e].visible = !1);
Client.mainFrame.idfMobile && this.canSearch && this.searchMode === Client.IdfPanel.searchModes.toolbar && this.hasList && !this.searchInContent && ((e = this.createElementConfig({
c: "IonHeader",
className: "frame-toolbar mobile-toolbar-vertical-container"
})).children.push(this.toolbarConf), this.toolbarFirstZoneConf = this.toolbarConf, 
this.toolbarConf = e, e = this.mainContainerConf.children.indexOf(this.toolbarFirstZoneConf), 
this.mainContainerConf.children[e] = this.toolbarConf, e = this.createElementConfig({
c: "IonToolbar",
className: ""
}), this.toolbarConf.children.push(e), this.toolbarSearchConf = this.createElementConfig({
c: "IonSearchbar",
className: "toolbar-mobile-search-bar",
events: [ "onChange" ]
}), e.children.push(this.toolbarSearchConf));
}, Client.IdfPanel.prototype.cloneDataRow = function(o, l) {
var e = this.getRow(l);
if (e) {
var a = e.clone();
a.parent = e.parent, a.parentWidget = e.parentWidget, this.reuseRows && (a.getRootObject().style.order = o);
let s = 0;
var r = this.fields.filter(e => e.isShown() && e.isInList());
for (let n = 0; n < r.length; n++) {
let t = r[n];
var d, h, c, p = t.getValueByIndex(o);
let e = a.elements[s], i = (0 === n && (p.rowSelectorId = e.id, e.parentWidget = p, 
s++, e = a.elements[s]), t.rowBreakBefore && (p.rowBreakerId = e.id, e.parentWidget = p, 
s++, e = a.elements[s]), !0);
t.group && (e.parentWidget = t.group, (d = e.elements[0]).parentWidget = t.group, 
(h = (c = t.group.fields.filter(e => e.isShown() && e.isInList())).findIndex(e => e.id === t.id)) !== c.length - 1 && (i = !1), 
(c = d.elements[h]).parentWidget = p, t.group.listContainersConf[o] || (t.group.listContainersConf[o] = {
id: e.id
}, t.group.listColumnStyles[o] = {
...t.group.listColumnsStyles?.[l]
}), e = c), p.listContainerId = e.id, p.listControlId = e.elements.find(e => e instanceof Client.IdfControl)?.id, 
e.parentWidget = p, i && s++;
}
return a;
}
}, Client.IdfPanel.prototype.createDataRowConfig = function(l, e) {
var t = this.getRow(l), a = 0 === l && this.canUseRowQbe();
let i = !1, r;
if (!t) {
var e = this.cloneDataRow(l, e);
if (e) return e;
if ((r = this.createElementConfig({
c: "IonRow",
className: "panel-list-row",
noWrap: !0
})).style = {}, a ? (r.className += " panel-list-qbe-row", r.style = {
top: this.getHeaderHeight() * this.numSubRows + "px"
}) : this.hasGroupedRows() ? (e = this.getRowsGroupByIndex(l)) && (r.className += " panel-rows-group-header level" + Math.min(e.level, 2)) : r.className += " panel-list-data-row", 
r.style.order = l, this.fixedColumns && (r.minWidth = this.rowMinWidth, r.style.minWidth = this.rowMinWidth + "px"), 
1 < this.numSubRows) {
var n = this.createElementConfig({
c: "IonCol",
className: "col-subrow-parent subrow-body",
xs: "auto"
});
r.children.push(n);
for (let e = 1; e <= this.numSubRows; e++) {
var s, o = this.createElementConfig({
c: "IonRow",
className: "panel-list-row panel-list-subrow",
noWrap: !0
});
n.children.push(o), 1 < e && (s = this.getHeaderOffset() ? " offset-col" : "", s = this.createElementConfig({
c: "IonCol",
className: "panel-list-col row-selector-col row-selector-subrow" + s,
xs: "auto",
visible: this.showRowSelector
}), o.children.push(s));
}
}
this.canDelete && Client.mainFrame.idfMobile && (i = !0);
}
var d = this.getFirstInListFieldIndex();
for (let o = 0; o < this.fields.length; o++) {
let n = t, s = r;
var h = this.fields[o];
if (1 < this.numSubRows && (r && (s = r.children[0].children[this.wrapRows[h.id] - 1]), 
t) && (n = t.elements[0].elements[this.wrapRows[h.id] - 1]), h.isInList()) {
var c, p = h.getValueByIndex(l);
if (p && !p.listContainerId) {
let t;
if (n) for (let e = o + 1; e < this.fields.length; e++) {
var u = this.fields[e];
if (u.isInList()) {
u = u.getValueByIndex(l);
if (u && u.listContainerId) {
t = u.listContainerId;
break;
}
}
}
d === o && (p.rowSelectorId || (c = p.createRowSelectorConfig(), n ? n.insertBefore({
child: c,
sib: t
}) : s.children.push(c)), p.rowsGroupHeaderId || a || (c = p.createRowsGroupHeaderConfig(), 
n ? n.insertBefore({
child: c,
sib: p.rowSelectorId
}) : s.children.push(c)));
let i = null;
var f = p.createListConfig();
if (h.group) {
let e = h.group.listContainersConf[l];
e || (e = h.group.createListConfig(l), n ? n.insertBefore({
child: e,
sib: t
}) : s.children.push(e)), n ? (h = Client.eleMap[e.id]) ? i = h.elements[0].insertBefore({
child: f,
sib: t
}) : (e.children[0].children.push(f), n.insertBefore({
child: e,
sib: t
})) : e.children[0].children.push(f);
} else n ? i = n.insertBefore({
child: f,
sib: t
}) : s.children.push(f);
i && p.updateControls({
all: !0
});
}
}
}
return r && i && (e = this.createElementConfig({
c: "SwipeMenu",
visible: !0,
commands: [ {
n: Client.IdfResources.t("TIP_TITLE_Delete"),
v: "DELETE",
s: "danger"
} ],
events: [ "onSwipeSelected" ]
}), r.children.push(e)), r;
}, Client.IdfPanel.prototype.createChildren = function(d) {
if (d.children) {
Client.mainFrame.isIDF || [ Client.Widget.transXmlNodeMap.ppg, Client.Widget.transXmlNodeMap.grp ].forEach(s => {
var o = d.children.filter(e => e.c === s || e.class === s);
for (let n = 0; n < o.length; n++) {
let i = o[n], e = (i.children = i.children || [], d.children.findIndex(e => e.id === i.id)), t = i.sib;
for (;0 < i.children.length; ) {
var l = i.children.shift();
t && (l.sib = t), d.children.splice(e++, 0, l);
}
if (delete i.sib, t && 0 === i.children.length && Client.mainFrame.isEditing() && (i.fsib = t), 
s === Client.Widget.transXmlNodeMap.ppg && t && Client.mainFrame.isEditing()) {
var a = this.elements.findIndex(e => e.id === t);
if (0 <= a) {
let t;
for (let e = a; e < this.elements.length && !t; e++) {
var r = this.elements[e];
r instanceof Client.IdfPage && r.id !== i.id ? t = r.id : r.page && r.page.id !== i.id && (t = r.page.id);
}
t && (i.sib = t);
}
}
i = d.children.splice(e, 1)[0], d.children.push(i);
}
});
let i = d.children.filter(e => e.c === Client.Widget.transXmlNodeMap.ppg || e.class === Client.Widget.transXmlNodeMap.ppg);
for (let t = 0; t < i.length; t++) {
var e = d.children.findIndex(e => e.id === i[t].id), e = d.children.splice(e, 1)[0];
d.children.push(e);
}
d.hasPages = !!i.length, this.creatingChildren = !0, Client.Widget.prototype.createChildren.call(this, d), 
delete this.creatingChildren;
for (let e = 0; e < d.children.length; e++) {
let t = d.children[e];
if (t.sib) {
var n = Client.eleMap[t.id], s = this.elements.findIndex(e => e.id === t.id);
if (0 <= s && this.elements.splice(s, 1), 0 <= (s = this.elements.findIndex(e => e.id === t.sib)) && this.elements.splice(s, 0, n), 
n instanceof Client.IdfField && (0 <= (s = this.fields.findIndex(e => e.id === t.id)) && this.fields.splice(s, 1), 
0 <= (s = this.fields.findIndex(e => e.id === t.sib)) ? this.fields.splice(s, 0, n) : this.fields.push(n)), 
n instanceof Client.IdfPage && Client.mainFrame.isEditing()) {
s = this.pages.findIndex(e => e.id === t.id);
0 <= s && this.pages.splice(s, 1), 0 <= (s = this.pages.findIndex(e => e.id === t.sib)) && this.pages.splice(s, 0, n);
try {
Client.eleMap[this.pagesContainerConf.id].getRootObject().insertBefore(this.pages[s].getRootObject(), this.pages[s + 1].getRootObject());
} catch (e) {}
}
}
}
if (d.hasPages && Client.mainFrame.isEditing()) {
this.updatePagesFields();
let i = 0;
this.pages.forEach((e, t) => {
e.isActive && (i = t);
}), this.activePage = i, this.updateActivePage();
}
d.hasPages && this.updateObjects({
pagesContainer: !0
});
}
}, Client.IdfPanel.prototype.realize = function(e, t, i) {
Client.IdfFrame.prototype.realize.call(this, e, t, i), void 0 !== e.formStructure && (this.formStruct = JSON.parse(e.formStructure), 
delete e.formStructure, delete this.formStructure, delete this.clientGeneratedFormStructure), 
this.updateActivePage(), this.updateStructure(), this.initializeListFilters(), this.gridConf && this.hasListLayout() && ((t = Client.eleMap[this.gridConf.id].getRootObject()).onscroll = () => this.handleScroll(), 
this.intersectionObserver = new IntersectionObserver((e, t) => {
e.forEach(e => {
var t = Client.Widget.getElementByObj(e.target), i = e.rootBounds, e = e.boundingClientRect, i = e.left <= i.right && i.left <= e.right && e.top <= i.bottom && i.top <= e.bottom;
this.updateViewportListFields(t?.parentWidget, i);
});
}, {
root: t
}), this.fields.forEach(e => {
e.isShown() && e.isInList() && this.intersectionObserver.observe(Client.eleMap[e.listContainerId].getRootObject());
})), this.resizeObserver = new ResizeObserver(() => {
clearTimeout(this.observeTimeout), this.observeTimeout = setTimeout(() => {
delete this.observeTimeout, Client.mainFrame.sendEvents(this.handleResize());
}, 100);
});
i = Client.eleMap[this.panelContainerConf.id];
this.hasListLayout() && this.resizeObserver.observe(i.elements[0].getRootObject()), 
this.hasFormLayout() && this.resizeObserver.observe(i.elements[1].getRootObject());
}, Client.IdfPanel.prototype.addField = function(e) {
this.fields.push(e), this.newFields.push(e);
}, Client.IdfPanel.prototype.addGroup = function(e) {
this.groups.push(e);
}, Client.IdfPanel.prototype.addPage = function(e) {
this.pages.push(e);
}, Client.IdfPanel.prototype.updateStructure = function() {
this.resetCachedStyles();
var e = Client.eleMap[this.gridConf?.id]?.getRootObject(), t = e?.scrollTop, i = e?.scrollLeft;
if (this.unplace(), this.hasListLayout()) {
var n = Client.eleMap[this.listContainerConf.id];
this.removeGridRows(), this.checkWrapRow(), this.updateListHeaderStructure(), this.listGridRows = this.createStructure();
for (let e = 0; e < this.listGridRows.length; e++) {
var s = this.view.createElement(this.listGridRows[e].conf, n, this.view);
n.elements.push(s);
}
}
if (this.hasFormLayout()) {
var o = Client.eleMap[this.formContainerConf.id];
this.removeGridRows(!0), this.formGridRows = this.createStructure(!0);
for (let e = 0; e < this.formGridRows.length; e++) {
var l = this.view.createElement(this.formGridRows[e].conf, o, this.view);
o.elements.push(l);
}
}
this.place(), e && (e.scrollTop = t, e.scrollLeft = i);
}, Client.IdfPanel.prototype.updateListHeaderStructure = function() {
let i = Client.eleMap[this.rowSelectorColumnConf.id];
if (Client.mainFrame.isEditing() || !(1 === this.numSubRows || 1 < this.numSubRows && i.parent.id !== this.gridHeaderConf.id)) {
var n = i?.getRootObject(), s = (n?.parentNode?.removeChild(n), i?.parent?.elements?.findIndex(e => e.id === i.id));
if (0 <= s && i.parent.elements.splice(s, 1), this.gridHeaderConf.children = [], 
this.gridHeaderConf.className = "panel-list-row panel-list-header-row", this.gridHeaderConf.noWrap = !0, 
1 < this.numSubRows) {
var o = this.createElementConfig({
c: "IonCol",
className: "col-subrow-parent col-header",
xs: "auto"
});
this.gridHeaderConf.children.push(o);
for (let e = 1; e <= this.numSubRows; e++) {
var l, a = this.createElementConfig({
c: "IonRow",
className: "panel-list-row panel-list-header-row panel-list-header-subrow",
noWrap: !0
});
o.children.push(a), 1 < e && (l = this.getHeaderOffset() ? " offset-col" : "", l = this.createElementConfig({
c: "IonCol",
className: "panel-list-col row-selector-col panel-subrow-rowselector" + l,
xs: "auto",
visible: i.visible
}), a.children.push(l));
}
}
let t = Client.eleMap[this.gridHeaderConf.id];
t.close(!0), 0 <= (s = t?.parent?.elements?.findIndex(e => e.id === t.id)) && t.parent.elements.splice(s, 1), 
Client.eleMap[this.gridConf.id].insertBefore({
child: this.gridHeaderConf,
sib: (this.qbeRowConf || this.windowScrollerConf).id
});
let e;
(e = 1 < this.numSubRows ? Client.eleMap[this.gridHeaderConf.children[0].children[0].id] : Client.eleMap[this.gridHeaderConf.id]).appendChildObject(void 0, n), 
e.elements.push(i), i.parent = e;
}
}, Client.IdfPanel.prototype.removeGridRows = function(e) {
var t = e ? this.formGridRows : this.listGridRows, i = e ? Client.eleMap[this.formContainerConf.id] : Client.eleMap[this.listContainerConf.id];
for (let e = 0; e < t.length; e++) i.removeChild(t[e].conf), t.splice(e--, 1);
}, Client.IdfPanel.prototype.place = function() {
var e, t = this.getListFieldColumn(this.id);
this.hasListLayout() && t && (this.gridColConf = t.conf, this.gridColConf.className = "panel-list-grid-col", 
t = Client.eleMap[this.gridColConf.id], e = Client.eleMap[this.extGridConf.id], 
t.appendChildObject(void 0, e.getRootObject()), t.elements.push(e), e.parent = t);
for (let e = 0; e < this.fields.length; e++) this.fields[e].place();
for (let e = 0; e < this.groups.length; e++) this.groups[e].place();
}, Client.IdfPanel.prototype.unplace = function() {
if (this.hasListLayout()) {
var t = Client.eleMap[this.extGridConf.id];
for (let e = 0; e < t.parent.elements.length; e++) if (t.parent.elements[e].id === t.id) {
t.parent.elements.splice(e, 1), t.getRootObject().remove();
break;
}
}
for (let e = 0; e < this.groups.length; e++) this.groups[e].unplace();
for (let e = 0; e < this.fields.length; e++) this.fields[e].unplace();
}, Client.IdfPanel.prototype.updateElement = function(t) {
this.lastActiveRowIndex = this.getActiveRowIndex();
var e = {};
(t = t || {}).data && void 0 === t.dataBlockStart && void 0 === t.dataBlockEnd && delete t.data, 
this.scrollingTo && "actualPosition" in t && "actualRow" in t && t.actualPosition + t.actualRow === this.getActiveRowIndex(!0) && (this.scrollingTo === t.actualPosition && delete this.scrollingTo, 
delete t.actualPosition, delete t.actualRow), void 0 === t.totalRows && void 0 === t.layout || (this.noDataLoaded = 0 === (t.totalRows ?? this.totalRows), 
e.toolbar = !0), t.skipWidgetApplyVisualStyle = !0, Client.IdfFrame.prototype.updateElement.call(this, t), 
delete t.skipWidgetApplyVisualStyle, e.visualStyle = t.applyVisualStyle, delete t.applyVisualStyle, 
t.calcLayout && (delete t.calcLayout, e.calcLayout = !0), t.updateToolbar && (delete t.updateToolbar, 
e.toolbar = !0), t.updateStructure && (delete t.updateStructure, e.structure = !0, 
e.calcLayout = !0), void 0 !== t.totalRows && (this.totalRows = t.totalRows, e.toolbar = !0, 
e.multiSel = !0, e.bufferVideo = !0), void 0 !== t.moreRows && (this.moreRows = t.moreRows, 
e.toolbar = !0), void 0 !== t.activePage && (this.activePage = t.activePage, e.activePage = !0, 
e.structure = !0, e.calcLayout = !0), void 0 !== t.headerHeight && (this.headerHeight = t.headerHeight, 
e.calcLayout = !0), void 0 !== t.rowHeightResize && (this.rowHeightResize = t.rowHeightResize, 
e.calcLayout = !0, this.fields.forEach(e => e.updateControls({
rowHeightResize: !0
}))), void 0 !== t.dataBlockStart && (this.dataBlockStart = t.dataBlockStart), void 0 !== t.dataBlockEnd && (this.dataBlockEnd = t.dataBlockEnd), 
void 0 !== t.canResizeColumn && (this.canResizeColumn = t.canResizeColumn), void 0 !== t.canReorderColumn && (this.canReorderColumn = t.canReorderColumn), 
void 0 === t.groupedRows && !t.showGroups || (this.groupedRows = !0, e.groupedRows = !0, 
e.bufferVideo = !0), void 0 !== t.data && (this.data = t.data, e.data = !0, e.bufferVideo = !0, 
e.calcLayout = !0, e.multiSel = !0, e.toolbar = !0, e.visualStyle = !0, e.activeRow = !0, 
e.skipScroll = !0);
let i;
void 0 === t.actualRow || t.actualRow === this.actualRow && !this.realizing || (this.actualRow = t.actualRow, 
i = !0), void 0 === t.actualPosition || t.actualPosition === this.actualPosition && !this.realizing || (this.scrollUp = this.actualPosition > t.actualPosition, 
this.actualPosition = t.actualPosition, i = !0), i && (this.hasGroupedRows() && !t.fromClient && (this.groupedActualPosition = this.getGroupedActualPosition(), 
this.groupedActualRow = this.getGroupedActualRow()), n = this.lastActiveRowIndex !== this.getActiveRowIndex() || this.realizing, 
e.activeRow = !0, e.calcLayout = e.calcLayout || n, e.toolbar = e.toolbar || n, 
e.bufferVideo = !0, e.scrollbar = "actualPosition" in t, e.skipScroll = !1, 0 < this.lastFocusedFieldValueInList?.index) && (this.lastFocusedFieldValueInList = this.lastFocusedFieldValueInList?.parentField.getValueByIndex(this.getActiveRowIndex())), 
t.skipScroll && (e.skipScroll = !0), void 0 !== t.showRowSelector && (this.showRowSelector = t.showRowSelector, 
e.rowSelectors = !0, e.calcLayout = !0);
var n = Client.eleMap[this.multiSelButtonConf?.id];
if (void 0 !== t.showMultipleSelection && (this.showMultipleSelection = t.showMultipleSelection, 
e.multiSel = !0, e.statusbar = !0, e.className = !0, Client.Widget.updateObject(n, {
tooltip: this.getTooltip(this.multiSelButtonConf?.id)
})), void 0 !== t.enableMultipleSelection && (this.enableMultipleSelection = t.enableMultipleSelection, 
Client.Widget.updateObject(n, {
visible: this.enableMultipleSelection
})), void 0 !== t.selectOnlyVisibleRows && (this.selectOnlyVisibleRows = t.selectOnlyVisibleRows), 
void 0 !== t.gridHeight && (this.gridHeight = isNaN(t.gridHeight) ? void 0 : t.gridHeight, 
e.structure = !0, e.calcLayout = !0), void 0 !== t.gridLeft && (this.gridLeft = isNaN(t.gridLeft) ? void 0 : t.gridLeft, 
this.orgGridLeft = this.gridLeft, e.structure = !0, e.calcLayout = !0), void 0 !== t.gridTop && (this.gridTop = isNaN(t.gridTop) ? void 0 : t.gridTop, 
this.orgGridTop = this.gridTop, e.structure = !0, e.calcLayout = !0), void 0 !== t.resizeWidth && (this.resizeWidth = t.resizeWidth, 
e.structure = !0, e.calcLayout = !0), void 0 !== t.resizeHeight && (this.resizeHeight = t.resizeHeight, 
e.structure = !0, e.calcLayout = !0), void 0 !== t.fixedColumns && (this.fixedColumns = t.fixedColumns, 
e.fixedColumns = !0), void 0 !== t.hasList && (this.hasList = t.hasList, e.toolbar = !0, 
e.qbeRow = !0, !this.hasList) && Client.mainFrame.isEditing() && (t.layout = Client.IdfPanel.layouts.form), 
void 0 !== t.hasForm && (this.hasForm = t.hasForm, e.toolbar = !0, !this.hasForm) && Client.mainFrame.isEditing() && (t.layout = Client.IdfPanel.layouts.list), 
void 0 === t.layout || t.layout === this.layout && !this.realizing || (this.layout = t.layout, 
e.layout = !0, e.toolbar = !0, e.className = !0, e.visualStyle = !0, e.activeRow = !0), 
void 0 === t.numRows || 1 === t.numRows && this.layout !== Client.IdfPanel.layouts.list || (this.numRows = t.numRows), 
void 0 !== t.status) {
this.status = t.status, e.toolbar = !0, e.visualStyle = !0, this.adjustScrollbar();
for (let e = 0; e < this.fields.length; e++) this.fields[e].onPanelStatusChange();
}
void 0 !== t.canUpdate && (this.canUpdate = t.canUpdate, e.toolbar = !0), void 0 !== t.canDelete && (this.canDelete = t.canDelete, 
e.toolbar = !0), void 0 !== t.canInsert && (this.canInsert = t.canInsert, e.toolbar = !0), 
void 0 !== t.canSearch && (this.canSearch = t.canSearch, e.toolbar = !0), void 0 !== t.canSort && (this.canSort = t.canSort, 
e.toolbar = !0, e.qbeRow = !0), void 0 !== t.canGroup && (this.canGroup = t.canGroup, 
e.toolbar = !0), void 0 !== t.showGroups && (this.showGroups = t.showGroups, e.toolbar = !0, 
this.showGroups) && (this.groupedActualPosition = this.getGroupedActualPosition(), 
this.groupedActualRow = this.getGroupedActualRow()), void 0 !== t.enableInsertWhenLocked && (this.enableInsertWhenLocked = t.enableInsertWhenLocked, 
e.toolbar = !0), void 0 !== t.qbeTip && (this.qbeTip = t.qbeTip, this.qbeTip = this.qbeTip.replace(/QBEF1/g, "qbe-field"), 
this.qbeTip = this.qbeTip.replace(/QBEF2/g, "qbe-value"), e.toolbar = !0), void 0 !== t.automaticLayout && (this.automaticLayout = t.automaticLayout, 
e.toolbar = !0), void 0 !== t.searchMode && (this.searchMode = t.searchMode, e.toolbar = !0, 
e.qbeRow = !0), void 0 !== t.isDO && (this.isDO = t.isDO, e.toolbar = !0), void 0 !== t.hasDocTemplate && (this.hasDocTemplate = t.hasDocTemplate, 
e.toolbar = !0), void 0 !== t.DOModified && (this.DOModified = t.DOModified, e.toolbar = !0), 
void 0 !== t.DOMaster && (this.DOMaster = t.DOMaster, e.toolbar = !0), void 0 !== t.DOCanSave && (this.DOCanSave = t.DOCanSave, 
e.toolbar = !0), void 0 !== t.DOSingleDoc && (this.DOSingleDoc = t.DOSingleDoc, 
e.toolbar = !0), void 0 !== t.pullToRefresh && (this.pullToRefresh = t.pullToRefresh, 
this.hasListLayout()) && (n = Client.eleMap[this.extGridListConf.id], this.pullToRefresh) && (Client.mainFrame.device.isMobile || Client.mainFrame.idfMobile || Client.mainFrame.device.isMobilePreview) && (n.swipingElement = Client.eleMap[this.gridConf.id].domObj, 
n.updateElement({
refresher: !0
})), void 0 !== t.searchInContent && (this.searchInContent = t.searchInContent, 
e.toolbar = !0, e.qbeRow = !0), void 0 !== t.advancedTabOrder && (this.advancedTabOrder = t.advancedTabOrder), 
void 0 !== t.hasPages && (e.pagesContainer = !0), void 0 !== t.visualFlags && (this.visualFlags = t.visualFlags, 
t.hidePages = 0 != (16384 & this.visualFlags)), void 0 !== t.hidePages && (this.hidePages = t.hidePages, 
e.pagesContainer = !0), void 0 !== t.tooltipOnEachRow && (this.tooltipOnEachRow = t.tooltipOnEachRow), 
void 0 !== t.formStructure && (this.formStruct = JSON.parse(t.formStructure), delete t.formStructure, 
delete this.formStructure, delete this.clientGeneratedFormStructure, delete this.fieldsFormOrder, 
e.structure = !0, e.calcLayout = !0), void 0 !== t.rowError && this.fields.forEach(e => e.setRowError(t.rowError)), 
void 0 !== t.headerStyle && this.applyStyleProp([ Client.eleMap[this.toolbarConf.id] ], "headerStyle", t.headerStyle), 
void 0 !== t.contentStyle && this.applyStyleProp([ Client.eleMap[this.panelContainerConf.id] ], "contentStyle", t.contentStyle), 
void 0 !== t.toolbarEventDef && (this.toolbarEventDef = t.toolbarEventDef), void 0 !== t.scrollEventDef && (this.scrollEventDef = t.scrollEventDef), 
void 0 !== t.rowSelectEventDef && (this.rowSelectEventDef = t.rowSelectEventDef), 
void 0 !== t.pageClickEventDef && (this.pageClickEventDef = t.pageClickEventDef), 
void 0 !== t.multiSelEventDef && (this.multiSelEventDef = t.multiSelEventDef), void 0 !== t.focusEventDef && (this.focusEventDef = t.focusEventDef), 
void 0 !== t.selectionChangeEventDef && (this.selectionChangeEventDef = t.selectionChangeEventDef), 
t.enabledCommands && (this.enabledCommands = t.enabledCommands, e.toolbar = !0), 
t.extEnabledCommands && (this.extEnabledCommands = t.extEnabledCommands, e.toolbar = !0), 
Object.keys(e).length && this.updateObjects(e);
}, Client.IdfPanel.prototype.onEvent = function(t) {
var i = Client.IdfFrame.prototype.onEvent.call(this, t);
switch (t.id) {
case "onClick":
switch (t.obj) {
case this.multiSelButtonConf?.id:
i.push(...this.handleMultiSelClick(t));
break;

case this.lockButtonConf.id:
case this.formListButtonConf.id:
case this.formListAutoButtonConf.id:
case this.topButtonConf.id:
case this.prevButtonConf.id:
case this.nextButtonConf.id:
case this.bottomButtonConf.id:
case this.saveButtonConf.id:
case this.cancelButtonConf.id:
case this.refreshButtonConf.id:
case this.insertButtonConf.id:
case this.deleteButtonConf.id:
case this.searchButtonConf.id:
case this.findButtonConf.id:
case this.duplicateButtonConf.id:
case this.csvButtonConf.id:
case this.printButtonConf.id:
case this.attachButtonConf.id:
case this.groupButtonConf.id:
case this.multipleMobileButtonConf.id:
i.push(...this.handleToolbarClick(t));
break;

default:
for (let e = 0; e < this.customButtonsConf.length; e++) {
var n = this.customButtonsConf[e].id;
if (t.obj === n) {
i.push(...this.handleToolbarClick(t));
break;
}
}
}
break;

case "onRefresh":
Client.eleMap[this.extGridListConf.id].refreshCompleted(), t.obj = this.refreshButtonConf.id, 
i.push(...this.handleToolbarClick(t));
break;

case "onKey":
i.push(...this.handleFunctionKeys(t)), Client.mainFrame.isIDF || ((s = Object.assign({}, t)).obj = this.id, 
i.push(s));
break;

case "onFocusin":
var e, s = Client.Widget.getElementByObj(t.content?.srcEvent?.target);
s?.className?.includes("row-selector") ? (e = s.parentWidget?.getIndex(!0), this.focusRow(e)) : Client.Widget.getWidgetByElement(s)?.getParentWidgetByClass(Client.IdfField) || this.focus({
skipScroll: !0
});
break;

case "onChange":
this.toolbarSearchConf && t.obj === this.toolbarSearchConf.id && (s = (e = Client.eleMap[this.toolbarSearchConf.id]).inputObj.value, 
i.push({
id: "srcbox",
def: Client.IdfMessagesPump.eventTypes.ACTIVE,
content: {
oid: this.id,
obn: s
}
}), e.inputObj.blur());
break;

case "onSwipeSelected":
"DELETE" === t.content && (s = Client.eleMap[t.obj].parent.elements[1]?.parentWidget?.getIndex(!0)) && (i.push(...this.handleRowChange(s, !1)), 
t.obj = this.deleteButtonConf.id, i.push(...this.handleToolbarClick(t)));
}
return i;
}, Client.IdfPanel.prototype.updateObjects = function(e) {
var t = this.getActiveRowIndex();
if (e.activePage && this.updateActivePage(), e.structure && !this.realizing && this.updateStructure(), 
e.qbeRow && (this.canUseRowQbe() ? this.attachRow(0) : this.resetCache({
from: 0,
to: 0,
skipBufferVideo: !0
})), e.groupedRows && this.updateGroupedRows(), e.rowSelectors && this.updateRowSelectorsVisibility(), 
e.layout && this.updateLayout(), e.bufferVideo && this.fillBufferVideo(), e.activeRow && this.setActiveRow(e.skipScroll), 
e.scrollbar && !e.skipScroll && this.scrollToDataRow(this.actualPosition, !0), (e.calcLayout || e.fixedColumns) && (this.calcLayout(!e.activeRow || e.data || e.fixedColumns ? void 0 : t), 
this.canUseRowQbe()) && this.calcLayout(0), e.toolbar && this.updateToolbar(), e.className && this.updateClassName(), 
e.visualStyle && this.applyVisualStyle(), e.multiSel) {
var i = this.getFirstInListField();
if (i && (i.updateMultiSelVisibility(this.showMultipleSelection), this.showMultipleSelection)) {
var n = this.getTotalRows();
for (let e = 1; e <= n; e++) i.selectRow(this.multiSelStatus[e], e);
}
}
e.statusbar && this.updateStatusbar(), e.data && (delete this.data, delete this.dataBlockStart, 
delete this.dataBlockEnd), e.pagesContainer && (t = !!this.pages.length && !this.hidePages, 
Client.Widget.updateObject(Client.eleMap[this.pagesContainerConf.id], {
visible: t,
className: "panel-pages-container" + (t ? " pages-visible" : "")
}));
}, Client.IdfPanel.prototype.setActiveRow = function(e) {
var t = this.getActiveRowIndex();
for (let e = 0; e < this.fields.length; e++) {
var i = this.fields[e];
i.assignControls(t), i.writeValue(t, !0), i.applyVisualStyle(this.lastActiveRowIndex), 
i.applyVisualStyle(t);
}
!e && (this.layout === Client.IdfPanel.layouts.list || this.isNewRow(t) && this.automaticLayout) ? this.scrollToDataRow(t) : this.focus({
ifJustFocused: !0
}), this.realizing || Client.Element.lastFocusedElement?.parentWidget && Client.Utils.isMyParentEl(Client.Element.lastFocusedElement, this.view) || this.focus();
}, Client.IdfPanel.prototype.handleDataRowClick = function(e, t) {
let i = [];
var n;
return this.status !== Client.IdfPanel.statuses.qbe && t.parentField.isInList() && this.layout !== Client.IdfPanel.layouts.form && (n = e && e.obj === t.rowSelectorId, 
t.isRowQbe ? (this.lastFocusedFieldValueInList = t, n && (Client.mainFrame.isIDF ? i.push({
id: "qbeclall",
def: Client.IdfMessagesPump.eventTypes.URGENT,
content: {
oid: this.id
}
}) : this.fields.forEach(e => i.push(...e.handleQbeFilter({
content: {
name: "value",
value: ""
}
}))))) : (e = "onDblclick" === e?.id, i.push(...this.handleRowChange(t.index, n || e)), 
t = Client.mainFrame.device.isMobile || Client.mainFrame.idfMobile || Client.mainFrame.device.isMobilePreview, 
!this.showMultipleSelection && this.automaticLayout && this.hasForm && (t || !Client.mainFrame.isIDF && e && this.locked) && i.push(...this.onEvent({
id: "onClick",
obj: this.formListButtonConf.id,
content: {
offsetX: 0,
offsetY: 0
}
})))), i;
}, Client.IdfPanel.prototype.handleMultiSelClick = function(e) {
var t = [];
let i;
if (this.showMultipleSelection) {
if (i = e.content.res, "popupCallback" === e.id && ![ "selnone", "selreverse", "selall", "seltog" ].includes(i)) return t;
} else i = "seltog";
if (i) {
Client.mainFrame.isIDF ? t.push({
id: "pantb",
def: this.toolbarEventDef,
content: {
oid: this.id,
obn: i
}
}) : "seltog" === i ? t.push({
id: "chgProp",
obj: this.id,
content: {
name: "showMultipleSelection",
value: !this.showMultipleSelection,
clid: Client.id
}
}) : t.push({
id: "fireOnSelectionChanging",
obj: this.id,
content: {
action: [ "selnone", "selreverse", "selall" ].indexOf(i)
}
});
let e;
if (e = Client.mainFrame.isIDF ? Client.IdfMessagesPump.isClientSideEvent(this.toolbarEventDef) : !this.events.includes("seltog" === i ? "onMultipleSelectionShowing" : "onSelectionChanging")) switch (i) {
case "selnone":
this.updateMultiSel();
break;

case "selall":
this.updateMultiSel({
value: !0
});
break;

case "seltog":
this.updateElement({
showMultipleSelection: !this.showMultipleSelection
});
}
} else {
var n, s, e = [], o = (this.status !== Client.IdfPanel.statuses.qbe && (s = this.getSelectedDataRows(), 
o = this.getTotalRows(!0), l = Client.mainFrame.isIDF || s !== o, n = Client.mainFrame.isIDF || 0 !== s, 
s = !Client.mainFrame.isIDF && 0 < s && s < o, l && e.push({
id: "selall",
title: Client.IdfResources.t("TIP_TITLE_SelectAll"),
icon: "checkbox"
}), n && e.push({
id: "selnone",
title: Client.IdfResources.t("TIP_TITLE_UnselectAll"),
icon: "square-outline"
}), s) && e.push({
id: "selreverse",
title: Client.IdfResources.t("TIP_TITLE_ReverseSelection"),
icon: "repeat"
}), e.push({
id: "seltog",
title: Client.IdfResources.t("TIP_TITLE_HideMultiSel"),
icon: "arrow-round-forward"
}), Client.eleMap[this.multiSelButtonConf.id].getRootObject().getBoundingClientRect()), l = {
left: o.left + "px",
top: o.bottom + "px"
};
Client.mainFrame.popup({
options: {
type: "menu",
style: "menu-popup multisel-popup",
rect: l,
items: e,
callback: e => {
Client.mainFrame.sendEvents(this.handleMultiSelClick({
id: "popupCallback",
content: {
res: e
}
})), this.focus();
}
}
});
}
return t;
}, Client.IdfPanel.prototype.handleToolbarClick = function(t) {
var e = {};
let i;
var n, s, o = this.getTotalRows(!0), l = this.showMultipleSelection ? this.getSelectedDataRows() : 0;
let a = Client.Widget.msgTypes.CONFIRM, r, d, h, c, p, u = this.getNumRows(), f = !this.events.includes("onCommand");
switch (t.obj) {
case this.lockButtonConf.id:
h = this.locked ? "unlock" : "lock", e.locked = !this.locked, f = f && !this.events.includes("onLockingChanging");
break;

case this.formListButtonConf.id:
case this.formListAutoButtonConf.id:
if (t.obj === this.formListAutoButtonConf.id && !this.locked && this.automaticLayout && this.layout === Client.IdfPanel.layouts.list) return [];
h = "list", c = Client.IdfPanel.commands.CMD_FORMLIST, e.layout = this.layout === Client.IdfPanel.layouts.list ? Client.IdfPanel.layouts.form : Client.IdfPanel.layouts.list, 
e.layout === Client.IdfPanel.layouts.list && (e.actualPosition = this.actualPosition), 
f = f && !this.events.includes("onLayoutChanging");
break;

case this.saveButtonConf.id:
h = "save", c = Client.IdfPanel.commands.CMD_SAVE;
break;

case this.cancelButtonConf.id:
h = "cancel", c = Client.IdfPanel.commands.CMD_CANCEL;
break;

case this.refreshButtonConf.id:
h = "refresh", c = Client.IdfPanel.commands.CMD_REFRESH;
break;

case this.insertButtonConf.id:
h = "insert", c = Client.IdfPanel.commands.CMD_INSERT, f = f && !this.events.includes("onLockingChanging"), 
this.locked && (e.locked = !1), this.scrollUp = !1;
break;

case this.deleteButtonConf.id:
h = "delete", c = Client.IdfPanel.commands.CMD_DELETE, i = this.showMultipleSelection, 
this.confirmDelete && (this.hiliteDelete(!0), d = [ {
text: Client.IdfResources.t("MSG_POPUP_DeleteButton"),
destructive: !0
}, {
text: Client.IdfResources.t("MSG_POPUP_NoButton")
} ], this.showMultipleSelection ? 0 === l ? (a = Client.Widget.msgTypes.ALERT, r = Client.IdfResources.t("PAN_MSG_ConfirmDeleteNR", [ this.caption ]), 
d = void 0) : r = 1 === l ? Client.IdfResources.t("PAN_MSG_ConfirmDeleteRS", [ this.caption ]) : l < o ? Client.IdfResources.t("PAN_MSG_ConfirmDeleteRR", [ this.caption, l ]) : Client.IdfResources.t("PAN_MSG_ConfirmDeleteAR", [ this.caption ]) : r = Client.IdfResources.t("PAN_MSG_ConfirmDeleteRS", [ this.caption ]));
break;

case this.searchButtonConf.id:
h = "search", c = Client.IdfPanel.commands.CMD_SEARCH, f = f && !this.events.includes("onLayoutChanging"), 
this.automaticLayout && (e.layout = Client.IdfPanel.layouts.form);
break;

case this.findButtonConf.id:
h = "find", c = Client.IdfPanel.commands.CMD_FIND;
break;

case this.duplicateButtonConf.id:
h = "dupl", c = Client.IdfPanel.commands.CMD_DUPLICATE, this.showMultipleSelection && !l && (r = Client.IdfResources.t("PAN_MSG_ConfirmDuplicateNR", [ this.caption ])), 
this.scrollUp = !1;
break;

case this.csvButtonConf.id:
h = "csv", c = Client.IdfPanel.commands.CMD_CSV, this.showMultipleSelection && !l && (r = Client.IdfResources.t("PAN_MSG_ConfirmExportNR", [ this.caption ]));
break;

case this.printButtonConf.id:
h = "print", c = Client.IdfPanel.commands.CMD_PRINT;
break;

case this.attachButtonConf.id:
h = "attach", c = Client.IdfPanel.commands.CMD_ATTACH;
break;

case this.groupButtonConf.id:
h = "group", c = Client.IdfPanel.commands.CMD_GROUP;
break;

case this.multipleMobileButtonConf.id:
e.showRowSelector = !this.showMultipleSelection, e.showMultipleSelection = !this.showMultipleSelection;
break;

case this.topButtonConf.id:
h = "top", c = Client.IdfPanel.commands.CMD_NAVIGATION, e.actualRow = 0, e.actualPosition = 1, 
this.scrollUp = !0;
break;

case this.prevButtonConf.id:
h = "prev", c = Client.IdfPanel.commands.CMD_NAVIGATION, p = this.layout === Client.IdfPanel.layouts.form ? 1 : u - 1, 
e.actualPosition = Math.max(this.actualPosition - p, 1), this.scrollUp = !(e.actualRow = 0);
break;

case this.nextButtonConf.id:
h = "next", c = Client.IdfPanel.commands.CMD_NAVIGATION, p = this.layout === Client.IdfPanel.layouts.form ? 1 : u - 1, 
e.actualPosition = Math.min(this.actualPosition + p, o - p), e.actualRow = 0, this.scrollUp = !1;
break;

case this.bottomButtonConf.id:
h = "bottom", c = Client.IdfPanel.commands.CMD_NAVIGATION, p = this.layout === Client.IdfPanel.layouts.form ? 0 : u - 1, 
e.actualPosition = o - p, e.actualRow = p, this.scrollUp = !1;
break;

default:
for (let e = 0; e < this.customButtonsConf.length; e++) if (t.obj === this.customButtonsConf[e].id) {
h = "cb" + e, c = Client.IdfPanel.commands["CMD_CUSTOM" + (e + 1)];
break;
}
}
let m = [];
return Client.mainFrame.isIDF ? (n = this.blockingCommands & c, s = this.toolbarEventDef | (n ? Client.IdfMessagesPump.eventTypes.BLOCKING : 0), 
f = Client.IdfMessagesPump.isClientSideEvent(s) && !n, m.push({
id: "pantb",
def: s,
content: {
oid: this.id,
obn: h
}
})) : m.push({
id: "fireOnCommand",
obj: this.id,
content: {
command: h
}
}), [ "top", "prev", "next", "bottom" ].includes(h) && (Client.mainFrame.isIDF || (f = !1), 
this.dataBlockStart = e.actualPosition, this.dataBlockEnd = Math.min(e.actualPosition + u - 1, o)), 
0 < Object.keys(e).length && f && this.updateElement(e), r ? (Client.Widget.showMessageBox({
type: a,
text: r,
buttons: d
}, e => {
this.hiliteDelete(!1), 1 === e && (i && this.updateMultiSel(), Client.mainFrame.sendEvents(m));
}), []) : (i && this.updateMultiSel(), m);
}, Client.IdfPanel.prototype.handleFunctionKeys = function(i) {
var n = [];
if ("keydown" === i.content.type && !(i.content.keyCode < 112 || 123 < i.content.keyCode)) {
for (let e = 0; e < this.elements.length && 0 === n.length; e++) {
var t = this.elements[e];
t instanceof Client.IdfField && n.push(...t.handleFunctionKeys(i));
}
if (!(0 < n.length || (n.push(...Client.IdfFrame.prototype.handleFunctionKeys.call(this, i)), 
0 < n.length))) {
var s = i.content.keyCode - 111 + (i.content.shiftKey ? 12 : 0) + (i.content.ctrlKey ? 24 : 0);
let t;
switch (s) {
case Client.IdfPanel.FKEnterQBE:
case Client.IdfPanel.FKFindData:
this.showSearchButton() ? t = this.searchButtonConf : this.showFindButton() && (t = this.findButtonConf);
break;

case Client.IdfPanel.FKFormList:
this.showFormListButton(this.automaticLayout, !0) && (t = this.formListButtonConf);
break;

case Client.IdfPanel.FKCancel:
case Client.IdfPanel.FKRefresh:
this.showCancelButton() ? t = this.cancelButtonConf : this.showRefreshButton() && (t = this.refreshButtonConf);
break;

case Client.IdfPanel.FKInsert:
this.showInsertButton() && (t = this.insertButtonConf);
break;

case Client.IdfPanel.FKDelete:
this.showDeleteButton() && (t = this.deleteButtonConf);
break;

case Client.IdfPanel.FKUpdate:
this.showSaveButton() && (t = this.saveButtonConf);
break;

case Client.IdfPanel.FKDuplicate:
this.showDuplicateButton() && (t = this.duplicateButtonConf);
break;

case Client.IdfPanel.FKPrint:
this.showPrintButton() && (t = this.printButtonConf);
break;

case Client.IdfPanel.FKLocked:
this.showLockButton() && (t = this.lockButtonConf);
break;

default:
for (let e = 0; e < this.customCommands.length; e++) if (Client.eleMap[this.customButtonsConf[e].id].fknum === s) {
this.showCustomButton(e) && (t = this.customButtonsConf[e]);
break;
}
}
if (t && (document.activeElement.blur(), this.focus(), n.push(...this.handleToolbarClick({
obj: t.id
}))), this.enableMultipleSelection) {
let e;
this.showMultipleSelection ? s === Client.IdfPanel.FKSelAll ? e = "selall" : s === Client.IdfPanel.FKSelNone && (e = "selnone") : s === Client.IdfPanel.FKSelTog && (e = "seltog"), 
e && n.push(...this.handleMultiSelClick({
content: {
res: e
}
}));
}
s === Client.IdfPanel.FKActRow && n.push(...this.handleDataRowClick({
id: "onDblclick"
}, this.fields[0].getValueByIndex(this.getActiveRowIndex()))), 0 < n.length && i.content.srcEvent.preventDefault();
}
}
return n;
}, Client.IdfPanel.prototype.handlePageClick = function(t) {
var i = [], n = t.page.index;
if (n !== this.activePage) {
Client.mainFrame.isIDF ? i.push({
id: "panpg",
def: this.pageClickEventDef,
content: {
oid: t.page.id,
obn: this.id,
xck: t.content.offsetX,
yck: t.content.offsetY
}
}) : i.push({
id: "fireOnActivePageChanging",
obj: this.id,
content: {
newPage: n
}
});
let e;
(e = Client.mainFrame.isIDF ? Client.IdfMessagesPump.isClientSideEvent(this.pageClickEventDef) : !this.events.includes("onActivePageChanging")) && this.updateElement({
activePage: n
});
}
return i;
}, Client.IdfPanel.prototype.applyVisualStyle = function() {
this.addVisualStyleClasses(Client.eleMap[this.contentContainerConf.id], {
objType: "panel"
}), this.hasList && (this.addVisualStyleClasses(Client.eleMap[this.gridHeaderConf.id], {
objType: "panel"
}), this.addVisualStyleClasses(Client.eleMap[this.aggregateRowConf.id], {
objType: "panel"
}), this.addVisualStyleClasses(Client.eleMap[this.rowSelectorColumnConf.id], {
objType: "fieldHeader",
list: !0
}));
for (let e = 0; e < this.fields.length; e++) this.fields[e].applyVisualStyle();
for (let e = 0; e < this.groups.length; e++) this.groups[e].applyVisualStyle();
}, Client.IdfPanel.prototype.getRow = function(e) {
return Client.eleMap[this.rows[e]?.id];
}, Client.IdfPanel.prototype.getNextRowId = function(t) {
let i;
var n = this.getMaxRows();
for (let e = t + 1; e <= n; e++) {
var s = this.rows[e]?.id;
if (s && !this.isRowDetached(e)) {
i = s;
break;
}
}
return i;
}, Client.IdfPanel.prototype.getMostSimilarRowIndex = function(e) {
return;
}, Client.IdfPanel.prototype.isRowDetached = function(e) {
return this.detachedRows[this.rows[e]?.id];
}, Client.IdfPanel.prototype.attachRow = function(e, t) {
if (0 === e) {
if (!this.canUseRowQbe()) return;
t = !!this.qbeRowConf;
}
var i, n, s, o = this.isRowDetached(e);
let l, a = t, r = (l = o || this.createPlaceholderRowConf(e), Client.eleMap[this.windowConf.id]), d = Client.eleMap[this.getNextRowId(e)];
if (!t && l && (o ? (d ? r.getRootObject().insertBefore(l, d.getRootObject()) : r.getRootObject().appendChild(l), 
delete this.detachedRows[o.id]) : (0 === e && (r = Client.eleMap[this.gridConf.id], 
d = this.windowScrollerConf, this.qbeRowConf = l), l = r.insertBefore({
child: l,
sib: d?.id
}), this.rows[e] = {
id: l.id
}, this.updateFirstRowIndex(), this.updateLastRowIndex(), a = !0, l.cloned || this.resetCachedStyles(e))), 
this.getRow(e) && a) for (var h of this.fields) h.isInList() && (i = h.getValueByIndex(e)) && (i.applyVisualStyle(), 
n = this.canUseRowQbe() && 0 === e ? h.listQbeValueStyle : h.listValueStyle, (s = {}).style = {
...n
}, s.xs = Client.eleMap[h.listContainerId]?.xs, i.setListLayout(s), i.updateVisibility(), 
Client.mainFrame.isIDF && 0 === i.index && !t && i.updateQbeFilter(), i.updateControls({
all: !0
}));
}, Client.IdfPanel.prototype.detachRow = function(e, t) {
var i, n = this.getRow(e);
n && (this.isRowDetached(e) || ((i = n.getRootObject()).remove(), this.detachedRows[n.id] = i), 
t) && (n.close(!0), delete this.rows[e], delete this.detachedRows[n.id], this.resetCachedStyles(e), 
0 === e && delete this.qbeRowConf, this.updateFirstRowIndex(), this.updateLastRowIndex(), 
this.firstRow < 0 && delete this.firstRow, this.lastRow < 0) && delete this.lastRow;
}, Client.IdfPanel.prototype.reuseRow = function(e) {
var {
row: n,
oldIndex: i,
newIndex: s
} = e;
if (n) {
n.clearPendingFocus();
let t = n.elements;
if (1 < this.numSubRows) {
t = [];
for (let e = 0; e < this.numSubRows; e++) {
var o = n.elements[0].elements[e];
t.push(...o.elements.slice(0 === e ? 0 : 1));
}
}
e = this.hasGroupedRows() ? this.getRowsGroupByIndex(s) : void 0;
if (e) {
let i = Math.min(e.level, 2);
Client.Widget.updateElementClassName(n, [ "level0", "level1", "level2" ].filter((e, t) => t !== i).join(" "), !0), 
Client.Widget.updateElementClassName(n, "panel-rows-group-header level" + i);
} else Client.Widget.updateElementClassName(n, "panel-rows-group-header level0 level1 level2", !0);
for (let e = 0; e < t.length; e++) {
var l = t[e];
if (l.parentWidget instanceof Client.IdfGroup) {
var a = l.elements;
for (let e = 0; e < a.length; e++) this.reuseRow({
row: a[e],
oldIndex: i,
newIndex: s
});
l.parentWidget.listColumnStyles[s] = l.parentWidget.listColumnStyles[i], l.parentWidget.listContainersConf[s] = l.parentWidget.listContainersConf[i], 
delete l.parentWidget.listColumnStyles[i], delete l.parentWidget.listContainersConf[i];
} else if (!(Client.SwipeMenu && l instanceof Client.SwipeMenu)) {
var r, d = l.parentWidget, h = d.parentField;
let t = h.getValueByIndex(s);
if (t = t || h.createFieldValue(s, !0), !d.listContainerId) continue;
if (this.reparentFieldValueElements(l, t), !(0 !== e && 1 !== e || n.parentWidget instanceof Client.IdfGroup)) continue;
for (r in t.listContainerId = d.listContainerId, t.listControlId = d.listControlId, 
t.rowSelectorId = d.rowSelectorId, t.multiSelCheckbox = d.multiSelCheckbox, t.rowsGroupHeaderId = d.rowsGroupHeaderId, 
t.rowsGroupHeaderTextId = d.rowsGroupHeaderTextId, t.expandRowsGroupButtonId = d.expandRowsGroupButtonId, 
delete d.listContainerId, delete d.listControlId, delete d.rowSelectorId, delete d.multiSelCheckbox, 
delete d.rowsGroupHeaderId, delete d.rowsGroupHeaderTextId, delete d.expandRowsGroupButtonId, 
t.listStyle = {
...d.listStyle,
...t.listStyle
}, d.listCustomStyle = d.listCustomStyle || {}, t.listCustomStyle = t.listCustomStyle || {}, 
d.listCustomStyle) t.listCustomStyle[r] || h.listValueStyle[r] && d.listStyle[r] || (t.listCustomStyle[r] = "");
if (t.rowSelectorId && (t.rowSelectorStyle = {
...d.rowSelectorStyle,
...t.rowSelectorStyle
}), t.rowsGroupHeaderId && (t.rowsGroupHeaderStyle = {
...d.rowsGroupHeaderStyle
}), t.setListLayout({
style: {
...d.listStyle
}
}), t.applyVisualStyle(), t.updateRowSelectorIcon(), t.updateMultiSelVisibility(this.showMultipleSelection), 
this.showMultipleSelection && t.selectRow(!!this.multiSelStatus[s]), d.errorText === t.errorText && d.rowErrorText === t.rowErrorText || t.updateErrorStatus(), 
d.customChildrenConf && this.reuseCustomChildren(d, t), d.subFrameConf && d.customElement?.subFrameId && (l = Client.eleMap[d.subFrameConf.id]) && (l.moving = !0, 
l.getRootObject().remove(), delete l.moving), t.updateRowsGroupHeader({
label: !0
}), t.clientSide && !t.rowsGroup) {
for (var c of Client.IdfFieldValue.cloneProps) {
let e = d[c];
e && "object" == typeof e && (e = JSON.parse(JSON.stringify(e))), t[c] = e;
}
t.updateElement({
text: ""
});
} else t.updateControls({
all: !0
});
}
n.order === s || n.parentWidget instanceof Client.IdfGroup || (n.updateElement({
style: {
order: s
}
}), n.order = s);
}
}
}, Client.IdfPanel.prototype.reuseCustomChildren = function(i, n) {
for (let e = 0; e < i.customChildrenConf.length; e++) {
var s = i.customChildrenConf[e], o = s.id.split(":"), l = (o[1] = i.index, o.join(":")), a = (s.id = l, 
Client.eleMap[l]);
delete Client.eleMap[l], o[1] = n.index;
let t = o.join(":");
a && (a.id = t, Client.eleMap[t] = a), n.customChildrenConf || (n.customChildrenConf = []);
var r, l = {
...s
}, o = (l.id = t, l.boundProperty), o = (o && (s = null === a[o] ? "" : null, l[o] = s, 
n.clientSide) && ((r = {})[o] = s, Client.Widget.updateObject(a, r)), n.customChildrenConf.findIndex(e => e.id === t));
-1 === o && n.customChildrenConf.push(l);
}
}, Client.IdfPanel.prototype.updateGroupedRows = function() {
if (this.groupedRowsRoot) {
var t = [];
for (let e = 0; e < this.rows.length; e++) {
var i, n = this.rows[e];
n && ((i = this.getRow(e)) && (i.getRootObject().style.order = ""), t[this.groupedRowsRoot.realIndexToGroupedIndex(e)] = n);
}
this.rows = t.slice();
}
}, Client.IdfPanel.prototype.adjustScrollbar = function() {
if (this.hasListLayout()) {
let e = this.getMaxRows(!0);
var o = this.getListRowHeight() + this.getListRowOffset();
let t = this.firstRow || 0, i = 0;
this.hasGroupedRows() && (l = this.getTotalRows(!0) - this.groupedRowsRoot.groupedIndexToRealIndex(this.groupedRowsRoot.groupedEndingRow), 
e = Math.max(this.groupedRowsRoot.getVisibleRowsCount() + l + this.getNewRows(), 0), 
t = this.getVisibleGroupedRows({
end: t
}), i = Object.keys(this.rows).filter(e => void 0 === this.rows[e]).length, t < i) && (i = 0);
var l = Math.max((t - 1 + i) * o, 0), a = Client.eleMap[this.windowConf.id], a = (l !== a.offsetY && (a.offsetY = l, 
a.updateElement({
style: {
transform: "translateY(" + l + "px)"
}
})), Client.eleMap[this.windowScrollerConf.id]), l = (a.totalRows !== e && (a.totalRows = e, 
a.updateElement({
style: {
minHeight: e * o + "px"
}
})), void 0 === this.gridStyle.overflowY && (this.gridStyle.overflowY = ""), this.canNavigate()), a = this.getNumRows() < this.getTotalRows();
let n = "", s = 0;
l && (!Client.mainFrame.isIDF || a) || (n = "hidden", Client.mainFrame.device.isMobile) || Client.mainFrame.idfMobile || (s = Client.IdfPanel.scrollbarWidth), 
Client.Widget.updateStyle(Client.eleMap[this.gridConf.id], this.gridStyle, {
overflowY: n
}), Client.Widget.updateStyle(Client.eleMap[this.gridColConf?.id], this.gridColStyle, {
paddingRight: s + "px"
});
}
}, Client.IdfPanel.prototype.scrollToDataRow = function(s, o) {
let l = Client.eleMap[this.gridConf?.id]?.getRootObject();
if (l) {
var a = this.getHeaderHeight(), r = this.getQbeRowHeight(), d = this.getListRowHeight(), h = this.getListRowOffset();
let t = 0;
for (let e = 1; e < s; e++) t = t + (this.getRow(e)?.getRootObject().clientHeight || d) + h;
t < 0 && (t = 0);
let e = l.scrollTop, i = e + l.clientHeight - a - r, n = this.getRow(s)?.getRootObject().clientHeight || d;
t >= e && t + n <= i && !o ? this.focus({
ifJustFocused: !0
}) : this.firstScrollTimer = setTimeout(() => {
delete this.firstScrollTimer, l.scrollTop !== t ? (l.scrollTop = t, this.focus({
ifJustFocused: !0
})) : this.setActiveRow(!0);
}, 0);
}
}, Client.IdfPanel.prototype.updateFirstRowIndex = function(e) {
this.firstRow = e ?? this.rows.findIndex((e, t) => 0 !== t && !!e && !this.isRowDetached(t));
}, Client.IdfPanel.prototype.updateLastRowIndex = function(e) {
this.lastRow = e ?? this.rows.findLastIndex((e, t) => !!e && !this.isRowDetached(t));
}, Client.IdfPanel.prototype.handleDataRowSelection = function(e, t) {
var i = [];
Client.mainFrame.isIDF ? i.push({
id: "panms",
def: this.multiSelEventDef,
content: {
oid: this.id,
obn: t - this.actualPosition,
par1: e ? "-1" : "0"
}
}) : i.push({
id: "fireOnSelectionChanging",
obj: this.id,
content: {
row: t - 1,
selected: e
}
});
let n;
return (n = Client.mainFrame.isIDF ? Client.IdfMessagesPump.isClientSideEvent(this.multiSelEventDef) : !this.events.includes("onSelectionChanging")) && this.updateMultiSel({
value: e,
index: t
}), i;
}, Client.IdfPanel.prototype.getSelectedDataRows = function() {
let t = 0;
return this.multiSelStatus.forEach(e => t += e ? 1 : 0), t;
}, Client.IdfPanel.prototype.getListFieldColumn = function(t, e) {
var i = Client.eleMap[t];
if (i.id !== this.id && i.isInList()) {
var n = Client.eleMap[i.groupId];
if (e) return {
conf: (n || this).aggregateRowConf
};
{
let e = this.gridHeaderConf;
return 1 < this.numSubRows && (e = this.gridHeaderConf.children[0].children[this.wrapRows[t] - 1]), 
{
conf: n ? n.listContentConf : e
};
}
}
if (i instanceof Client.IdfField && -1 !== i.aggregateOfField) return {
conf: i.getAggregatedFieldParent().aggregateContainerConf
};
for (let e = 0; e < this.listGridRows.length; e++) {
var s = this.listGridRows[e];
for (let e = 0; e < s.cols.length; e++) {
var o = this.recursivelyFindFieldColumn(i.id, s.cols[e]);
if (o) return o;
}
}
}, Client.IdfPanel.prototype.getFormFieldColumn = function(t) {
for (let e = 0; e < this.formGridRows.length; e++) {
var i = this.formGridRows[e];
for (let e = 0; e < i.cols.length; e++) {
var n = this.recursivelyFindFieldColumn(t, i.cols[e]);
if (n) return n;
}
}
}, Client.IdfPanel.prototype.recursivelyFindFieldColumn = function(t, i) {
if (1 === i.fields.length && i.fields[0].id === t && (!i.rows.length || i.fields[0].isGroup)) return i;
for (let e = 0; e < i.rows.length; e++) {
var n = i.rows[e];
for (let e = 0; e < n.cols.length; e++) {
var s = this.recursivelyFindFieldColumn(t, n.cols[e]);
if (s) return s;
}
}
}, Client.IdfPanel.prototype.recursivelyResetEdgeColumn = function(t) {
if (t) {
t.isMostLeft = !1, t.isMostRight = !1, t.isMostTop = !1, t.isMostBottom = !1;
for (let e = 0; e < t.rows.length; e++) {
var i = t.rows[e];
for (let e = 0; e < i.cols.length; e++) this.recursivelyResetEdgeColumn(i.cols[e]);
}
}
}, Client.IdfPanel.prototype.recursivelySetMostRightColumn = function(i) {
if (i) if (!i.rows.length || i.fields[0] && i.fields[0].isGroup) i.isMostRight = !0; else for (let e = 0; e < i.rows.length; e++) {
var n = i.rows[e];
let t = n.cols[n.cols.length - 1];
for (let e = n.cols.length - 1; 0 <= e; e--) if (n.cols[e].visible) {
t = n.cols[e];
break;
}
this.recursivelySetMostRightColumn(t);
}
}, Client.IdfPanel.prototype.recursivelySetMostLeftColumn = function(t) {
if (t) if (!t.rows.length || t.fields[0] && t.fields[0].isGroup) t.isMostLeft = !0; else for (let e = 0; e < t.rows.length; e++) {
var i = t.rows[e];
this.recursivelySetMostLeftColumn(i.cols[0]);
}
}, Client.IdfPanel.prototype.recursivelySetMostBottomColumn = function(n) {
if (n) if (!n.rows.length || n.fields[0] && n.fields[0].isGroup) n.isMostBottom = !0; else {
let t = n.rows[n.rows.length - 1], i;
for (let e = n.rows.length - 1; 0 <= e; e--) {
var s = n.rows[e];
for (let e = 0; e < s.cols.length; e++) if (s.cols[e].visible) {
t = s, i = !0;
break;
}
if (i) break;
}
for (let e = 0; e < t.cols.length; e++) this.recursivelySetMostBottomColumn(t.cols[e]);
}
}, Client.IdfPanel.prototype.recursivelySetMostTopColumn = function(e) {
if (e) if (!e.rows.length || e.fields[0] && e.fields[0].isGroup) e.isMostTop = !0; else {
var t = e.rows[0];
for (let e = 0; e < t.cols.length; e++) this.recursivelySetMostTopColumn(t.cols[e]);
}
}, Client.IdfPanel.prototype.recursivelySetColumnsGrow = function(t) {
if (!t.rows.length) return t.canAdaptWidth && t.visible;
let i = !1;
for (let e = 0; e < t.rows.length; e++) {
var n = t.rows[e];
for (let e = 0; e < n.cols.length && !(i = this.recursivelySetColumnsGrow(n.cols[e])); e++);
if (i) break;
}
var e = Client.eleMap[t.conf.id], s = i ? "1" : "0";
return e.flexGrow !== s && (e.flexGrow = s, e.updateElement({
style: {
flexGrow: s
}
})), i;
}, Client.IdfPanel.prototype.recursivelySetRowsGrow = function(t) {
let i = !1;
for (let e = 0; e < t.cols.length; e++) {
var n = t.cols[e];
if (!n.rows.length && n.canAdaptHeight && n.visible) i = !0; else for (let e = 0; e < n.rows.length; e++) this.recursivelySetRowsGrow(n.rows[e]) && (i = !0);
}
var e = Client.eleMap[t.conf.id], s = i ? "1" : "0";
return e.flexGrow !== s && (e.flexGrow = s, e.updateElement({
style: {
flexGrow: s
}
})), i;
}, Client.IdfPanel.prototype.recursivelySetColumnsVisible = function(t) {
if (!t.rows.length) return t.visible;
let i = !1;
for (let e = 0; e < t.rows.length; e++) {
var n = t.rows[e];
for (let e = 0; e < n.cols.length && !(i = this.recursivelySetColumnsVisible(n.cols[e])); e++);
if (i) break;
}
return t.visible = i;
}, Client.IdfPanel.prototype.calcLayout = function(t) {
Client.IdfFrame.prototype.calcLayout.call(this);
for (let e = 0; e < this.groups.length; e++) this.groups[e].updateVisibility(t);
for (let e = 0; e < this.fields.length; e++) this.fields[e].updateVisibility(t);
this.setColumnsVisible(), this.setEdgeColumns(), this.setEdgeColumns(!0);
var i = this.getListFieldColumn(this.id);
if (this.hasListLayout() && this.gridColConf && i) {
this.gridWidth = this.getGridWidth();
var n = {}, s = {}, o = {
height: this.getHeaderHeight() + "px"
}, l = this.canAdaptWidth(), a = this.gridWidth + this.rowSelectorWidth, a = (s.flexBasis = Client.mainFrame.isIDF ? a + "px" : "100%", 
s.flexGrow = l ? "1" : "0", Client.mainFrame.isIDF && (s.width = l ? "" : a + "px"), 
this.gridHeight), r = this.canAdaptHeight(), a = (s.height = r ? "auto" : a + "px", 
n.height = r ? "100%" : a + "px", i.canAdaptWidth = l, i.canAdaptHeight = r, i.rect.left || 0), l = this.gridLeft - a, a = (s.marginLeft = i.isMostLeft ? this.gridLeft + "px" : l + "px", 
i.isMostRight ? this.getContainerWidth() - this.orgGridWidth - this.rowSelectorWidth - this.gridLeft : i.rect.deltaRight), l = (s.marginRight = a + "px", 
i.rect.top || 0), a = this.gridTop - l;
s.marginTop = i.isMostTop ? this.gridTop + "px" : a + "px";
let e = i.isMostBottom ? this.getContainerHeight() - this.gridHeight - this.gridTop : i.rect.deltaBottom;
e = 0 <= e ? e : 0, r && (e -= this.gridHeightGap, this.lastGridHeightGap = this.gridHeightGap), 
s.marginBottom = e + "px";
l = Client.eleMap[this.gridColConf.id], a = (Client.Widget.updateStyle(l, this.gridColStyle, s), 
Client.Widget.updateObject(l, {
xs: "auto"
}), Client.Widget.updateStyle(Client.eleMap[this.gridConf.id], this.gridStyle, n), 
o.left = 0 < this.fixedColumns ? 0 : void 0, Client.eleMap[this.rowSelectorColumnConf.id]), 
i = (Client.Widget.updateStyle(a, this.rowSelectorStyle, o), Client.Widget.updateElementClassName(a, "fixed-col", !this.fixedColumns), 
a = Client.eleMap[this.aggregateRowSelectorConf.id], Object.assign({}, o));
i.height = "", Client.Widget.updateStyle(a, this.aggregateRowSelectorStyle, i), 
Client.Widget.updateElementClassName(a, "fixed-col", !this.fixedColumns);
}
for (let e = 0; e < this.groups.length; e++) this.groups[e].calcLayout();
for (let e = 0; e < this.fields.length; e++) this.fields[e].calcLayout(t);
this.hasListLayout() && this.fixedColumns && this.setRowsMinWidth(), this.setFlexGrow();
}, Client.IdfPanel.prototype.calcDimensions = function() {
if (Client.mainFrame.isIDF || !this.collapsed) {
Client.IdfFrame.prototype.calcDimensions.call(this);
let e;
var t = Client.eleMap[this.pagesContainerConf.id], i = t.getRootObject(), n = this.pagesContainerHeight;
if (this.pagesContainerHeight = i.offsetHeight, 0 !== this.pagesContainerHeight ? (e = getComputedStyle(i), 
this.pagesContainerHeight += (parseInt(e.marginTop) || 0) + (parseInt(e.marginBottom) || 0)) : t.visible && n && (this.pagesContainerHeight = n), 
this.formContainerConf && (i = Client.eleMap[this.formContainerConf.id].getRootObject(), 
e = getComputedStyle(i), this.formContainerVerticalMargins = 0, this.formContainerVerticalMargins += (parseInt(e.marginTop) || 0) + (parseInt(e.marginBottom) || 0), 
this.formContainerVerticalMargins += (parseInt(e.paddingTop) || 0) + (parseInt(e.paddingBottom) || 0), 
this.formContainerHorizontalMargins = 0, this.formContainerHorizontalMargins += (parseInt(e.marginLeft) || 0) + (parseInt(e.marginRight) || 0), 
this.formContainerHorizontalMargins += (parseInt(e.paddingLeft) || 0) + (parseInt(e.paddingRight) || 0)), 
this.listContainerConf && (t = Client.eleMap[this.listContainerConf.id].getRootObject(), 
e = getComputedStyle(t), this.listContainerVerticalMargins = 0, this.listContainerVerticalMargins += (parseInt(e.marginTop) || 0) + (parseInt(e.marginBottom) || 0), 
this.listContainerVerticalMargins += (parseInt(e.paddingTop) || 0) + (parseInt(e.paddingBottom) || 0), 
this.listContainerHorizontalMargins = 0, this.listContainerHorizontalMargins += (parseInt(e.marginLeft) || 0) + (parseInt(e.marginRight) || 0), 
this.listContainerHorizontalMargins += (parseInt(e.paddingLeft) || 0) + (parseInt(e.paddingRight) || 0)), 
this.gridConf) {
var n = Client.eleMap[this.gridConf.id].getRootObject(), i = Client.eleMap[this.gridHeaderConf.id].getRootObject(), t = Client.eleMap[this.qbeRowConf?.id]?.getRootObject(), s = Client.eleMap[this.aggregateRowConf.id].getRootObject();
this.calculatedGridWidth = n.clientWidth;
let e = n.clientHeight;
var n = n.scrollHeight, o = this.getHeaderHeight() + this.getHeaderOffset(), l = this.getQbeRowHeight(), a = this.getListRowHeight() + this.getListRowOffset(), a = this.visibleAggregateFields.length ? a : 0, o = (e = e - i.clientHeight + o, 
e = (e = this.canUseRowQbe() ? e - t.clientHeight + l : e) - s.clientHeight + a, 
Client.mainFrame.wep?.realizing && (i = Client.mainFrame.wep.statusbar?.getRootObject()?.clientHeight || 0, 
e -= i), this.lastGridHeightGap || 0);
this.calculatedGridHeight = e - o, this.gridHeightGap = this.getGridHeightGap(n - e), 
this.realizing || this.gridHeightGap === this.lastGridHeightGap || this.calcLayout(-1);
}
}
}, Client.IdfPanel.prototype.setFlexGrow = function() {
if (this.hasListLayout()) for (let e = 0; e < this.listGridRows.length; e++) {
var t = this.listGridRows[e];
this.recursivelySetRowsGrow(t);
for (let e = 0; e < t.cols.length; e++) this.recursivelySetColumnsGrow(t.cols[e]);
}
if (this.hasFormLayout()) for (let e = 0; e < this.formGridRows.length; e++) {
var i = this.formGridRows[e];
this.recursivelySetRowsGrow(i);
for (let e = 0; e < i.cols.length; e++) this.recursivelySetColumnsGrow(i.cols[e]);
}
}, Client.IdfPanel.prototype.setColumnsVisible = function() {
if (this.hasListLayout()) for (let e = 0; e < this.listGridRows.length; e++) {
var t = this.listGridRows[e];
for (let e = 0; e < t.cols.length; e++) this.recursivelySetColumnsVisible(t.cols[e]);
}
if (this.hasFormLayout()) for (let e = 0; e < this.formGridRows.length; e++) {
var i = this.formGridRows[e];
for (let e = 0; e < i.cols.length; e++) this.recursivelySetColumnsVisible(i.cols[e]);
}
}, Client.IdfPanel.prototype.setEdgeColumns = function(t, s) {
if ((!t || this.hasFormLayout()) && (t || this.hasListLayout())) {
let e, i = (e = t ? s ? this.getFormFieldColumn(s.id)?.rows || [] : this.formGridRows : s ? this.getListFieldColumn(s.id)?.rows || [] : this.listGridRows).findIndex(e => e.cols.find(e => e.visible)), n = e.findLastIndex(e => e.cols.find(e => e.visible));
for (let t = 0; t < e.length; t++) {
var o = e[t], l = (o.cols.forEach(e => this.recursivelyResetEdgeColumn(e)), o.cols.find(e => e.visible)), l = (this.recursivelySetMostLeftColumn(l), 
o.cols.findLast(e => e.visible));
this.recursivelySetMostRightColumn(l), o.cols.forEach(e => {
t === i && this.recursivelySetMostTopColumn(e), t === n && this.recursivelySetMostBottomColumn(e);
});
}
}
}, Client.IdfPanel.prototype.canAdaptWidth = function() {
let t;
for (let e = 0; e < this.fields.length; e++) {
var i = this.fields[e];
if (i.isInList() && (i.canAdaptWidth() && i.isVisible())) {
t = !0;
break;
}
}
return this.parentIdfView?.resizeWidth !== Client.IdfView.resizeModes.NONE && this.resizeWidth === Client.IdfPanel.resizeModes.stretch && t;
}, Client.IdfPanel.prototype.canAdaptHeight = function() {
return this.parentIdfView?.resizeHeight !== Client.IdfView.resizeModes.NONE && this.resizeHeight === Client.IdfPanel.resizeModes.stretch;
}, Client.IdfPanel.prototype.canMoveLeft = function() {
return this.parentIdfView?.resizeWidth !== Client.IdfView.resizeModes.NONE && this.resizeWidth === Client.IdfPanel.resizeModes.move;
}, Client.IdfPanel.prototype.canMoveTop = function() {
return this.parentIdfView?.resizeHeight !== Client.IdfView.resizeModes.NONE && this.resizeHeight === Client.IdfPanel.resizeModes.move;
}, Client.IdfPanel.prototype.updateRowSelectorsVisibility = function() {
if (this.hasListLayout()) {
if (!Client.mainFrame.idfMobile && (Client.Widget.updateObject(Client.eleMap[this.rowSelectorColumnConf.id], {
visible: this.showRowSelector && !!this.fields.length
}), 1 < this.numSubRows)) for (let e = 1; e < this.numSubRows; e++) Client.Widget.updateObject(Client.eleMap[this.gridHeaderConf.children[0].children[e].children[0].id], {
visible: this.showRowSelector && !!this.fields.length
});
this.rowSelectorWidth = this.showRowSelector ? Client.eleMap[this.rowSelectorColumnConf.id].getRootObject().offsetWidth : 0, 
Client.Widget.updateObject(Client.eleMap[this.aggregateRowSelectorConf.id], {
visible: this.showRowSelector
});
for (let t = 0; t <= this.rows.length; t++) {
var e = this.rows[t];
if (e && (!this.hasGroupedRows() || !this.getRowsGroupByIndex(t))) if (1 === this.numSubRows) Client.Widget.updateObject(this.getRow(t).elements[0], {
visible: this.showRowSelector
}); else for (let e = 0; e < this.numSubRows; e++) Client.Widget.updateObject(this.getRow(t).elements[0].elements[e].elements[0], {
visible: this.showRowSelector
});
}
}
}, Client.IdfPanel.prototype.getDataBlockStart = function() {
let e = this.dataBlockStart || (this.canUseRowQbe() ? 0 : 1);
return e = e && this.hasGroupedRows() ? this.groupedRowsRoot.realIndexToGroupedIndex(e) : e;
}, Client.IdfPanel.prototype.getDataBlockEnd = function() {
let e = this.dataBlockEnd || this.getTotalRows(!0);
return e = e && this.hasGroupedRows() ? this.groupedRowsRoot.realIndexToGroupedIndex(e) : e;
}, Client.IdfPanel.prototype.getGridWidth = function() {
let t = 0;
for (let e = 0; e < this.fields.length; e++) {
var i = this.fields[e];
i.isInList() && (t += i.getRects({
checkVisibility: !0
}).width);
}
return t += Client.IdfPanel.scrollbarWidth;
}, Client.IdfPanel.prototype.getGridHeightGap = function(e) {
if (!Client.mainFrame.isIDF) return 0;
if (!this.calculatedGridHeight) return 0;
if (this.hasDynamicHeightRows()) return this.getNumRows() > this.getTotalRows() ? e : 0;
var e = this.getListRowHeight() + this.getListRowOffset(), t = this.getHeaderHeight() + this.getHeaderOffset() + this.getQbeRowHeight(), t = this.calculatedGridHeight - t;
let i = Math.floor(t / e) * e - t;
return Client.mainFrame.isIDF && (i += this.visibleAggregateFields.length ? e : 0), 
i;
}, Client.IdfPanel.prototype.getFirstInListField = function() {
return this.fields.find(e => e.isShown() && e.isInList());
}, Client.IdfPanel.prototype.getFirstInListFieldIndex = function() {
return this.fields.findIndex(e => e.isShown() && e.isInList());
}, Client.IdfPanel.prototype.getFirstVisibleField = function(t) {
if (!((t = t || {}).inList && t.checkRowSelector && this.showRowSelector)) return this.fields.find(e => e.isShown(t.form) && (!t.inList || e.isInList()) && e.isVisible(t.form));
}, Client.IdfPanel.prototype.getLastVisibleField = function(t) {
return t = t || {}, this.fields.findLast(e => e.isShown(t.form) && (!t.inList || e.isInList()) && e.isVisible(t.form));
}, Client.IdfPanel.prototype.getFieldsRect = function(s, e) {
function t(e) {
e.sort(function(e, t) {
return e.rect.top === t.rect.top ? e.rect.left - t.rect.left : e.rect.top - t.rect.top;
});
}
var o, l = [];
let a, i = [];
if (e) i = e.fields; else {
this.gridHeight = this.orgGridHeight, this.gridTop = this.orgGridTop, this.gridLeft = this.orgGridLeft;
for (let e = 0; e < this.elements.length; e++) {
var n = this.elements[e], r = n instanceof Client.IdfField, d = n instanceof Client.IdfGroup;
(r && !n.groupId && (-1 === n.aggregateOfField || s) || d) && i.push(n);
}
}
let h = 0;
h += this.showRowSelector ? Client.IdfPanel.defaultRowSelectorWidth : 0;
for (let e = 0; e < i.length; e++) if ((o = i[e]).isShown(s)) {
var c = o instanceof Client.IdfGroup;
s ? (o.formWidth = o.orgFormWidth, o.formHeight = o.orgFormHeight, o.formLeft = o.orgFormLeft, 
o.formTop = o.orgFormTop, c || (o.formWidthPerc = o.orgFormWidthPerc, o.formHeightPerc = o.orgFormHeightPerc, 
o.formLeftPerc = o.orgFormLeftPerc, o.formTopPerc = o.orgFormTopPerc)) : (o.listWidth = o.orgListWidth, 
o.listHeight = o.orgListHeight, o.listLeft = o.orgListLeft, o.listTop = o.orgListTop, 
c && Client.mainFrame.isIDF || (o.listWidthPerc = o.orgListWidthPerc), c || (o.listHeightPerc = o.orgListHeightPerc, 
o.listLeftPerc = o.orgListLeftPerc, o.listTopPerc = o.orgListTopPerc));
let e, t, i, n;
var p = o.isInList() ? this.gridWidth : this.originalWidth, u = o.isInList() ? this.gridHeight : this.originalHeight, f = s ? o.formWidthPerc : o.listWidthPerc, p = (e = void 0 !== f ? p * f / 100 : s ? o.formWidth : o.listWidth, 
s ? o.formHeightPerc : o.listHeightPerc), f = (t = void 0 !== p ? u * p / 100 : s ? o.formHeight : o.listHeight, 
Client.mainFrame.isIDF && !s && !o.isInList() && this.showRowSelector && (c || (o.listLeft += Client.IdfPanel.rowSelectorOffset), 
void 0 !== o.listLeftPerc) && (o.listLeftPerc += 100 * Client.IdfPanel.rowSelectorOffset / this.originalWidth, 
c || (o.listLeftPerc += 100 * Client.IdfPanel.rowSelectorOffset / this.originalWidth)), 
s ? o.formLeftPerc : o.listLeftPerc), u = (i = void 0 !== f ? this.originalWidth * f / 100 : s ? o.formLeft : o.listLeft, 
s ? o.formTopPerc : o.listTopPerc);
n = void 0 !== u ? this.originalHeight * u / 100 : s ? o.formTop : o.listTop, !s && o.isInList() ? h += e : ((a = {}).id = o.id, 
a.isGroup = c, a.gridClass = o.gridClass || this.defaultGridClass, a.rect = {}, 
a.rect.top = n || 0, a.rect.bottom = a.rect.top + (t || (c ? 0 : Client.IdfField.defaultHeight)), 
a.rect.left = i || 0, a.rect.right = a.rect.left + e, a.rect.width = e, a.rect.height = t, 
l.push(a));
}
s || e || ((a = {}).id = this.id, a.rect = {}, a.rect.top = this.gridTop, a.rect.bottom = a.rect.top + this.gridHeight, 
a.rect.left = this.gridLeft, a.rect.right = a.rect.left + h, a.rect.width = h, a.rect.height = this.gridHeight, 
l.push(a));
let m = !0, C = !0;
for (;m || C; ) t(l), m = this.checkCompleteIntersections(l, s), C = this.checkStrongConnections(l, s);
return t(l), l;
}, Client.IdfPanel.prototype.updateChildRect = function(e) {
var t = e.child, i = e.left, n = e.top, e = e.form;
t.id === this.id ? e || (this.gridTop = n, this.gridLeft = i) : (t = Client.eleMap[t.id], 
e ? (void 0 !== t.fromTopPerc ? t.formTopPerc = 100 * n / this.parent.height : this.updateChildCoordinate({
prop: "formTop",
value: n,
child: t
}), void 0 !== t.formLeftPerc ? t.formLeftPerc = 100 * i / this.parent.width : this.updateChildCoordinate({
prop: "formLeft",
value: i,
child: t
})) : (void 0 !== t.listTopPerc ? t.listTopPerc = 100 * n / this.parent.height : this.updateChildCoordinate({
prop: "listTop",
value: n,
child: t
}), void 0 !== t.listLeftPerc ? t.listLeftPerc = 100 * i / this.parent.width : this.updateChildCoordinate({
prop: "listLeft",
value: i,
child: t
})));
}, Client.IdfPanel.prototype.updateChildCoordinate = function(e) {
let i = e.prop;
var n = e.value, e = e.child, s = e[i];
if (e[i] = n, e instanceof Client.IdfGroup && 0 <= [ "formTop", "formLeft", "listTop", "listLeft" ].indexOf(i)) {
let t = n - s;
e.fields.forEach(e => {
e[i] += t, e["org" + i.substring(0, 1).toUpperCase() + i.substring(1)] += t;
});
}
}, Client.IdfPanel.prototype.checkCompleteIntersections = function(n, s) {
let o = !1;
for (let i = 0; i < n.length; i++) {
var l = n[i];
for (let t = i + 1; t < n.length; t++) {
let e = !1;
var a = n[t];
if (this.checkPossibleIntersection(l, a, s)) if (this.rectIntersection(l.rect, a.rect) && this.rectIntersection(l.rect, a.rect, !0)) {
o = !0;
var r = (l.rect.left > a.rect.left ? l : a).rect.left, d = (l.rect.right > a.rect.right ? a : l).rect.right, h = (l.rect.top > a.rect.top ? l : a).rect.top, d = (d - r < (l.rect.bottom > a.rect.bottom ? a : l).rect.bottom - h ? (a.rect.leftGap = !0, 
a.rect.left = l.rect.right + 2, a.rect.right = a.rect.left + a.rect.width, e = !0) : (a.rect.topGap = !0, 
a.rect.top = l.rect.bottom + 2, a.rect.bottom = a.rect.top + a.rect.height), a.rect.left - (a.rect.leftGap ? 2 : 0)), r = a.rect.top - (a.rect.topGap ? 2 : 0);
if (delete a.rect.leftGap, delete a.rect.topGap, this.updateChildRect({
child: a,
left: d,
top: r,
form: s
}), e) {
i = -1, n.sort(function(e, t) {
return e.rect.top === t.rect.top ? e.rect.left - t.rect.left : e.rect.top - t.rect.top;
});
break;
}
}
}
}
return o;
}, Client.IdfPanel.prototype.checkStrongConnections = function(i, n) {
var s = this.getIntersectionsMap(i, n);
for (let t = 0; t < i.length; t++) {
var o = i[t];
for (let e = t + 1; e < i.length; e++) {
var l = i[e];
if (this.checkPossibleIntersection(o, l, n)) {
var a = this.checkStrongConnection(o, l, s);
if (a) return l.rect.left = o.rect.right, l.rect.right = l.rect.left + l.rect.width, 
a.rect.left = o.rect.left, a.rect.right = a.rect.left + a.rect.width, this.updateChildRect({
child: l,
left: l.rect.left,
top: l.rect.top,
form: n
}), this.updateChildRect({
child: a,
left: a.rect.left,
top: a.rect.top,
form: n
}), !0;
}
}
}
}, Client.IdfPanel.prototype.checkSamePage = function(e, t) {
let i = Client.eleMap[e.id]?.pageIndex, n = Client.eleMap[t.id]?.pageIndex;
return e.id === this.id ? this.fields.find(e => e.isInList() && (e.pageIndex === n || -1 === n)) : t.id === this.id ? this.fields.find(e => e.isInList() && (e.pageIndex === i || -1 === i)) : i === n || -1 === i || -1 === n;
}, Client.IdfPanel.prototype.rectIntersection = function(e, t, i) {
if (i) {
if (e.top <= t.bottom && t.top <= e.top) return !0;
if (t.top <= e.bottom && e.top <= t.top) return !0;
if (e.top <= t.top && t.bottom <= e.bottom) return !0;
if (t.top <= e.top && e.bottom <= t.bottom) return !0;
} else {
if (e.left < t.right && t.left <= e.left) return !0;
if (t.left < e.right && e.left <= t.left) return !0;
if (e.left <= t.left && t.right <= e.right) return !0;
if (t.left <= e.left && e.right <= t.right) return !0;
}
return !1;
}, Client.IdfPanel.prototype.rectIntersectionDegree = function(e, t, i) {
if (i) {
if (e.top <= t.bottom && t.top <= e.top) return e.top - t.bottom;
if (t.top <= e.bottom && e.top <= t.top) return t.top - e.bottom;
if (e.top <= t.top && t.bottom <= e.bottom) return 1e4;
if (t.top <= e.top && e.bottom <= t.bottom) return 1e4;
} else {
if (e.left < t.right && t.left <= e.left) return 1e4;
if (t.left < e.left && e.right <= t.right) return t.right - e.left;
if (e.left <= t.left && t.right <= e.right) return 1e4;
if (t.left <= e.left && e.right <= t.right) return t.right - e.right;
}
return 0;
}, Client.IdfPanel.prototype.getIntersectionsMap = function(i, n) {
var s = {};
for (let t = 0; t < i.length; t++) {
var o, l = i[t];
s[l.id] = s[l.id] || {
hor: [],
ver: []
};
for (let e = 0; e < i.length; e++) e !== t && (o = i[e], this.checkPossibleIntersection(l, o, n) && (this.rectIntersection(l.rect, o.rect) && s[l.id].hor.push(o), 
this.rectIntersection(l.rect, o.rect, !0))) && s[l.id].ver.push(o);
}
return s;
}, Client.IdfPanel.prototype.checkStrongConnection = function(n, s, o) {
if (o[n.id].hor.find(e => e.id === s.id)) {
let t, i;
var l = o[s.id].hor;
for (let e = 0; e < l.length; e++) {
var a = l[e];
if (a.id !== n.id && o[a.id].ver.find(e => e.id === n.id) && (s.rect.left < a.rect.right && n.rect.left < s.rect.right)) {
t = a;
break;
}
}
if (t) {
var r = o[s.id].ver;
for (let e = 0; e < r.length; e++) {
var d = r[e];
if (d.id !== n.id) {
if (o[d.id].ver.find(e => e.id === n.id) && o[d.id].hor.find(e => e.id === t.id) && t.rect.left < d.rect.left) {
i = d;
break;
}
if (o[d.id].hor.find(e => e.id === n.id) && o[d.id].ver.find(e => e.id === t.id) && t.rect.top < d.rect.top) {
i = d;
break;
}
}
}
return i;
}
}
}, Client.IdfPanel.prototype.createStructure = function(t, i) {
if (t && !Client.mainFrame.isIDF) return this.getCloudFormStructure(i);
var e = i ? Client.eleMap[i.id] : void 0, n = this.getFieldsRect(t, e), s = [];
for (let e = 0; e < n.length; e++) {
var o, l, a = n[e];
if (Client.eleMap[a.id].isVisible(t) || !Client.mainFrame.isIDF) {
let t = !1;
for (let e = 0; e < s.length; e++) if (this.rectIntersection(s[e].rect, a.rect, !0)) {
s[e].rect.top > a.rect.top && (s[e].rect.top = a.rect.top), s[e].rect.bottom < a.rect.bottom && (s[e].rect.bottom = a.rect.bottom), 
s[e].rect.left > a.rect.left && (s[e].rect.left = a.rect.left), s[e].rect.right < a.rect.right && (s[e].rect.right = a.rect.right), 
s[e].fields.push(a), t = !0;
break;
}
t || ((o = {}).rect = {
...a.rect
}, o.fields = [ a ], o.cols = [], l = s[s.length - 1], o.rect.top = l ? l.rect.bottom : i ? i.rect.top : 0, 
o.rect.left = i ? i.rect.left : 0, o.conf = this.createElementConfig({
c: "IonRow",
className: "panel-structure-row",
noWrap: !0
}), s.push(o));
}
}
for (let e = 0; e < s.length; e++) this.assignFieldsToColumns(t, s[e]);
return s;
}, Client.IdfPanel.prototype.assignFieldsToRows = function(t, i) {
var n = [];
i.fields.sort(function(e, t) {
return e.rect.top - t.rect.top;
});
for (let e = 0; e < i.fields.length; e++) {
var s, o, l = i.fields[e];
let t = !1;
for (let e = 0; e < n.length; e++) if (this.rectIntersection(n[e].rect, l.rect, !0)) {
n[e].rect.top > l.rect.top && (n[e].rect.top = l.rect.top), n[e].rect.bottom < l.rect.bottom && (n[e].rect.bottom = l.rect.bottom), 
n[e].rect.left > l.rect.left && (n[e].rect.left = l.rect.left), n[e].rect.right < l.rect.right && (n[e].rect.right = l.rect.right), 
n[e].fields.push(l), t = !0;
break;
}
t || ((s = {}).rect = {
...l.rect
}, s.fields = [ l ], s.cols = [], o = n[n.length - 1], s.rect.top = o ? o.rect.bottom : i.rect.top, 
s.rect.bottom = l.rect.bottom, s.rect.left = i.rect.left, s.rect.right = i.rect.right, 
s.conf = this.createElementConfig({
c: "IonRow",
className: "panel-structure-row",
noWrap: !0
}), i.conf.children.push(s.conf), n.push(s));
}
n.sort(function(e, t) {
return e.rect && t.rect ? e.rect.top - t.rect.top : 0;
}), i.rows = n;
for (let e = 0; e < n.length; e++) this.assignFieldsToColumns(t, n[e]);
}, Client.IdfPanel.prototype.checkPossibleIntersection = function(e, t, i) {
return this.checkSamePage(e, t) && Client.eleMap[e.id]?.isVisible(i) && Client.eleMap[t.id]?.isVisible(i);
}, Client.IdfPanel.prototype.assignFieldsToColumns = function(n, s) {
var o = [];
s.fields.sort(function(e, t) {
return e.rect.left - t.rect.left;
});
for (let e = 0; e < s.fields.length; e++) {
let t = s.fields[e], i = !1;
for (let e = 0; e < o.length; e++) {
var l = o[e], a = !!l.fields.find(e => !this.checkPossibleIntersection(e, t, n));
if (this.rectIntersection(l.rect, t.rect, !1) && !a) {
l.rect.top > t.rect.top && (l.rect.top = t.rect.top), l.rect.bottom < t.rect.bottom && (l.rect.bottom = t.rect.bottom), 
l.rect.left > t.rect.left && (l.rect.left = t.rect.left), l.rect.right < t.rect.right && (l.rect.right = t.rect.right), 
l.fields.push(t), i = !0;
break;
}
}
if (!i) {
var r = {}, d = (r.rect = {
...t.rect
}, r.fields = [ t ], r.rows = [], r.visible = !0, o.findLast(e => e.fields.findLast(e => this.checkSamePage(e, t))));
r.rect.left = d ? d.rect.right : s.rect.left, r.rect.right = t.rect.right, r.rect.top = s.rect.top, 
r.rect.bottom = t.rect.bottom, r.conf = this.createElementConfig({
c: "IonCol",
className: "panel-structure-col"
}), r.conf.parentRowId = s.conf.id, s.conf.children.push(r.conf), o.push(r);
for (let e = 0; e < o.length; e++) o[e].rect.deltaRight = 1 === o.length ? s.rect.right - o[e].rect.right : 0, 
o[e].rect.deltaBottom = o[e].rows.length ? 0 : s.rect.bottom - o[e].rect.bottom;
}
}
o.sort(function(e, t) {
return e.rect.left === t.rect.left ? 0 : t.rect.left > e.rect.left ? -1 : 1;
}), s.cols = o;
for (let t = 0; t < o.length; t++) if (1 < o[t].fields.length) this.assignFieldsToRows(n, o[t]); else {
var e = o[t].fields[0];
if (e.gridClass && (o[t].conf.className = o[t].conf.className + " " + e.gridClass), 
e.isGroup) {
o[t].rows = this.createStructure(n, e);
for (let e = 0; e < o[t].rows.length; e++) o[t].conf.children.push(o[t].rows[e].conf);
}
}
}, Client.IdfPanel.prototype.hasListLayout = function() {
return this.hasList || Client.mainFrame.isEditing();
}, Client.IdfPanel.prototype.hasFormLayout = function() {
return this.hasForm || Client.mainFrame.isEditing();
}, Client.IdfPanel.prototype.hasDynamicHeightRows = function() {
return !!this.rowHeightResize;
}, Client.IdfPanel.prototype.hasFilters = function() {
return !!this.fields.find(e => e.isInList() && e.qbeFilter);
}, Client.IdfPanel.prototype.getActiveRowIndex = function(e) {
let t = this.actualPosition + this.actualRow;
return t = !e && this.hasGroupedRows() ? this.groupedRowsRoot.realIndexToGroupedIndex(t) : t;
}, Client.IdfPanel.prototype.getTotalRows = function(e) {
let t = this.totalRows;
return t = !e && this.hasGroupedRows() ? this.groupedRowsRoot.realIndexToGroupedIndex(t) : t;
}, Client.IdfPanel.prototype.handleScroll = function() {
clearTimeout(this.horizontalTimeout);
var e = Client.eleMap[this.gridConf.id].getRootObject(), s = e.clientHeight, o = e.scrollTop, l = e.scrollLeft;
if (void 0 !== this.lastScrollLeft && l !== this.lastScrollLeft) this.lastScrollLeft = l, 
this.horizontalTimeout = setTimeout(() => {
for (let e = 0; e < this.viewportListFields.length; e++) Client.eleMap[this.viewportListFields[e]].updateControls({
all: !0
}, {
from: this.firstRow,
to: this.lastRow
});
this.updateOutViewportListFields(!0);
}, 50); else {
this.scrollUp = this.lastScrollTop > o, this.lastScrollTop = o, this.lastScrollLeft = l;
let t = 0;
var a, r = this.getListRowHeight();
let i = 0, n = -1;
var d = s - this.getHeaderHeight() - this.getQbeRowHeight(), h = this.getMaxRows(), c = this.hasGroupedRows();
for (let e = 1; e <= h && (c && !this.groupedRowsRoot.isRowVisible(e) || (a = this.getRow(e)?.getRootObject().clientHeight || r, 
t += a, -1 === n && t > o && (n = e, Client.mainFrame.isIDF) && t - o <= Math.floor(a / 2) && (n += this.scrollUp ? -1 : 1), 
-1 === n) || !((i += a) >= d)); e++);
Client.mainFrame.isIDF && (this.hasDynamicHeightRows() || 1 < this.numSubRows) && (l = this.getTotalRows() + this.getNewRows()) < (s = n + this.getNumRows()) && (n -= s - l - 1);
s = this.hasGroupedRows() ? this.groupedActualPosition : this.actualPosition;
n !== s && (Client.mainFrame.sendEvents(this.handlePanelScroll(n, this.scrollUp)), 
e.scrollTop !== this.lastScrollTop && (e.scrollTop = this.lastScrollTop), this.updateOutViewportListFields(!0));
}
}, Client.IdfPanel.prototype.showQbeButton = function() {
return !!this.qbeTip && this.status === Client.IdfPanel.statuses.data && !!this.showStatusbar && !this.collapsed;
}, Client.IdfPanel.prototype.showNavButtons = function() {
var e;
return !!this.isCommandEnabled(Client.IdfPanel.commands.CMD_NAVIGATION) && !(!this.canNavigate() || (e = this.layout === Client.IdfPanel.layouts.list ? this.getNumRows() : 1, 
this.getTotalRows() <= e && 1 === this.actualPosition));
}, Client.IdfPanel.prototype.showSearchButton = function() {
return !!this.canSearch && this.searchMode === Client.IdfPanel.searchModes.toolbar && !!this.isCommandEnabled(Client.IdfPanel.commands.CMD_SEARCH) && !!this.canNavigate();
}, Client.IdfPanel.prototype.showFindButton = function() {
return !!this.canSearch && this.status === Client.IdfPanel.statuses.qbe && !!this.isCommandEnabled(Client.IdfPanel.commands.CMD_FIND);
}, Client.IdfPanel.prototype.showFormListButton = function(e, t) {
return !(!this.hasList || !this.hasForm || this.automaticLayout && this.status !== Client.IdfPanel.statuses.data || !this.isCommandEnabled(Client.IdfPanel.commands.CMD_FORMLIST) || !this.canNavigate() && this.status !== Client.IdfPanel.statuses.qbe) && (!!t || (Client.mainFrame.isIDF ? !e : e ? this.automaticLayout && this.layout === Client.IdfPanel.layouts.form : !this.automaticLayout));
}, Client.IdfPanel.prototype.showCancelButton = function() {
return !!((this.status === Client.IdfPanel.statuses.updated || Client.mainFrame.idfMobile && !this.locked && this.lockable) && (this.canUpdate || this.canInsert) || this.status === Client.IdfPanel.statuses.qbe || this.DOModified) && !!this.isCommandEnabled(Client.IdfPanel.commands.CMD_CANCEL);
}, Client.IdfPanel.prototype.showRefreshButton = function() {
return this.status !== Client.IdfPanel.statuses.qbe && !(this.isDO && !this.hasDocTemplate || (this.status === Client.IdfPanel.statuses.updated || Client.mainFrame.idfMobile && !this.locked && this.lockable) && (this.canUpdate || this.canInsert) || this.status === Client.IdfPanel.statuses.qbe || this.DOModified || !this.isCommandEnabled(Client.IdfPanel.commands.CMD_REFRESH));
}, Client.IdfPanel.prototype.showDeleteButton = function() {
return !!this.canDelete && !(this.locked && !Client.mainFrame.idfMobile || this.status !== Client.IdfPanel.statuses.data || !this.isCommandEnabled(Client.IdfPanel.commands.CMD_DELETE));
}, Client.IdfPanel.prototype.showInsertButton = function() {
return !!this.canInsert && !!(!this.locked || this.enableInsertWhenLocked || this.isDO && this.DOSingleDoc && this.isNewRow() && Client.mainFrame.isIDF) && !(!this.isCommandEnabled(Client.IdfPanel.commands.CMD_INSERT) || this.status !== Client.IdfPanel.statuses.qbe && !this.canNavigate());
}, Client.IdfPanel.prototype.showDuplicateButton = function() {
return !!this.canInsert && !(this.locked || !this.isCommandEnabled(Client.IdfPanel.commands.CMD_DUPLICATE) || !this.canNavigate() || this.isNewRow());
}, Client.IdfPanel.prototype.showSaveButton = function() {
return !!(this.canInsert || this.canUpdate || this.DOModified && this.DOCanSave) && !this.locked && this.status !== Client.IdfPanel.statuses.qbe && !!this.isCommandEnabled(Client.IdfPanel.commands.CMD_SAVE);
}, Client.IdfPanel.prototype.showPrintButton = function() {
return !!(Client.mainFrame.isIDF && this.hasBook && this.isCommandEnabled(Client.IdfPanel.commands.CMD_PRINT) && this.canNavigate());
}, Client.IdfPanel.prototype.showGroupButton = function() {
return this.status === Client.IdfPanel.statuses.data && this.layout === Client.IdfPanel.layouts.list && !!this.canGroup && !!this.isCommandEnabled(Client.IdfPanel.commands.CMD_GROUP);
}, Client.IdfPanel.prototype.showCsvButton = function() {
return this.layout === Client.IdfPanel.layouts.list && !!this.isCommandEnabled(Client.IdfPanel.commands.CMD_CSV) && !!this.canNavigate();
}, Client.IdfPanel.prototype.showAttachButton = function() {
return !!Client.mainFrame.isIDF && !!this.isCommandEnabled(Client.IdfPanel.commands.CMD_ATTACH);
}, Client.IdfPanel.prototype.showCustomButton = function(e) {
e = (e < 8 ? 262144 : -1) * Math.pow(2, e < 8 ? e : e - 8);
return this.isCommandEnabled(e);
}, Client.IdfPanel.prototype.showClearFiltersButton = function() {
if (this.canUseRowQbe()) {
let t = this.hasFilters();
this.fields.forEach(e => e.isInList() ? e.showClearFiltersButton(t) : void 0);
}
}, Client.IdfPanel.prototype.showLockButton = function() {
return Client.IdfFrame.prototype.showLockButton.call(this) && this.status !== Client.IdfPanel.statuses.updated;
}, Client.IdfPanel.prototype.updateToolbar = function() {
Client.IdfFrame.prototype.updateToolbar.call(this), this.updateStatusbar();
var e = Client.eleMap[this.qbeButtonConf.id], e = (Client.Widget.updateObject(e, {
visible: this.showQbeButton(),
tooltip: this.getTooltip(this.qbeButtonConf.id)
}), this.showNavButtons()), t = Client.eleMap[this.topButtonConf.id], i = Client.eleMap[this.prevButtonConf.id], n = Client.eleMap[this.nextButtonConf.id], s = Client.eleMap[this.bottomButtonConf.id], t = (Client.Widget.updateObject(t, {
visible: e
}), Client.Widget.updateObject(i, {
visible: e
}), Client.Widget.updateObject(n, {
visible: e
}), Client.Widget.updateObject(s, {
visible: e
}), Client.eleMap[this.searchButtonConf.id]), i = (Client.Widget.updateObject(t, {
visible: this.showSearchButton()
}), Client.eleMap[this.findButtonConf.id]), n = (Client.Widget.updateObject(i, {
visible: this.showFindButton()
}), Client.eleMap[this.formListButtonConf.id]), s = (Client.Widget.updateObject(n, {
visible: this.showFormListButton(!1)
}), Client.eleMap[this.formListAutoButtonConf.id]), e = (Client.Widget.updateObject(s, {
visible: this.showFormListButton(!0)
}), Client.eleMap[this.cancelButtonConf.id]), t = (Client.Widget.updateObject(e, {
visible: this.showCancelButton(),
tooltip: this.getTooltip(e.id)
}), Client.eleMap[this.refreshButtonConf.id]), i = (Client.Widget.updateObject(t, {
visible: this.showRefreshButton()
}), Client.eleMap[this.deleteButtonConf.id]), n = (Client.Widget.updateObject(i, {
visible: this.showDeleteButton()
}), Client.eleMap[this.insertButtonConf.id]), s = (Client.Widget.updateObject(n, {
visible: this.showInsertButton()
}), Client.eleMap[this.duplicateButtonConf.id]), e = (Client.Widget.updateObject(s, {
visible: this.showDuplicateButton()
}), Client.eleMap[this.saveButtonConf.id]), t = (Client.Widget.updateObject(e, {
visible: this.showSaveButton()
}), Client.eleMap[this.printButtonConf.id]), i = (Client.Widget.updateObject(t, {
visible: this.showPrintButton()
}), Client.eleMap[this.groupButtonConf.id]), n = (Client.Widget.updateObject(i, {
visible: this.showGroupButton(),
icon: this.showGroups ? "contract" : "grid"
}), Client.eleMap[this.csvButtonConf.id]), s = (Client.Widget.updateObject(n, {
visible: this.showCsvButton()
}), Client.eleMap[this.attachButtonConf.id]), o = (Client.Widget.updateObject(s, {
visible: this.showAttachButton()
}), this.smallIcons ? " small" : "");
for (let e = 0; e < this.customCommands.length; e++) {
var l = Client.eleMap[this.customButtonsConf[e].id], {
caption: a,
image: r
} = this.customCommands[e];
r && Client.Widget.setIconImage({
image: r,
el: l
}), r = "generic-btn panel-toolbar-btn " + (Client.Widget.isIconImage(r) ? "" : " image") + " custom-btn" + (e + 1) + o, 
Client.Widget.updateObject(l, {
label: a,
tooltip: this.getTooltip(this.customButtonsConf[e].id),
className: r,
visible: this.showCustomButton(e)
});
}
this.toolbarFirstZoneConf && (e = Client.eleMap[this.toolbarConf.children[1].id], 
Client.Widget.updateObject(e, {
visible: this.layout === Client.IdfPanel.layouts.list
}), e = Client.eleMap[this.toolbarConf.id], Client.Widget.updateElementClassName(e, "mobile-toolbar-vertical-container", this.layout !== Client.IdfPanel.layouts.list));
for (let e = 0; e < this.fields.length; e++) this.fields[e].updateBlob();
this.parentIdfView?.checkMobileButtons();
}, Client.IdfPanel.prototype.getCommandZone = function(e) {
return Client.mainFrame.isIDF ? Client.mainFrame.wep.getCommandZone(e) : this.commandsZones[e];
}, Client.IdfPanel.prototype.canNavigate = function() {
return Client.mainFrame.isIDF ? this.status === Client.IdfPanel.statuses.data && (this.allowNavigationWhenModified || !this.DOModified) : this.status !== Client.IdfPanel.statuses.qbe;
}, Client.IdfPanel.prototype.isCommandEnabled = function(e) {
var t;
return 0 < e ? (t = [ Client.IdfPanel.commands.CMD_BLOBEDIT, Client.IdfPanel.commands.CMD_BLOBDELETE, Client.IdfPanel.commands.CMD_BLOBNEW, Client.IdfPanel.commands.CMD_BLOBSAVEAS ], 
!!(this.enabledCommands & e) && (this.showToolbar || t.includes(e)) && !this.collapsed) : !!(this.extEnabledCommands & Math.abs(e)) && this.showToolbar && !this.collapsed;
}, Client.IdfPanel.prototype.handleSmallIcons = function() {
Client.IdfFrame.prototype.handleSmallIcons.call(this);
for (let e = 0; e < this.toolbarZonesConfig.length; e++) {
var t = Client.eleMap[this.toolbarZonesConfig[e].id];
if (t) for (let e = 0; e < t.elements.length; e++) {
var i = t.elements[e];
Client.Widget.updateElementClassName(i, "small", !this.smallIcons);
}
}
var e = Client.eleMap[this.statusbarConf.id];
Client.Widget.updateElementClassName(e, "small", !this.smallIcons);
}, Client.IdfPanel.prototype.getTooltip = function(s) {
var e = Client.IdfFrame.prototype.getTooltip.call(this, s);
if (!e) {
var o = Client.mainFrame.wep;
let t, i, n;
switch (s) {
case this.qbeButtonConf.id:
this.qbeTip && (t = Client.IdfResources.t("TIP_TITLE_QbeTip"), i = this.qbeTip);
break;

case this.topButtonConf.id:
t = Client.IdfResources.t("TIP_TITLE_PanelStart"), i = o?.SRV_MSG_PanelStart || Client.IdfResources.t("SRV_MSG_PanelStart");
break;

case this.prevButtonConf.id:
t = Client.IdfResources.t("TIP_TITLE_PanelPrevPage"), i = o?.SRV_MSG_PanelPrevPage || Client.IdfResources.t("SRV_MSG_PanelPrevPage");
break;

case this.nextButtonConf.id:
t = Client.IdfResources.t("TIP_TITLE_PanelNextPage"), i = o?.SRV_MSG_PanelNextPage || Client.IdfResources.t("SRV_MSG_PanelNextPage");
break;

case this.bottomButtonConf.id:
t = Client.IdfResources.t("TIP_TITLE_PanelEnd"), i = o?.SRV_MSG_PanelEnd || Client.IdfResources.t("SRV_MSG_PanelEnd");
break;

case this.searchButtonConf.id:
t = Client.IdfResources.t("TIP_TITLE_Search"), i = o?.SRV_MSG_Search || Client.IdfResources.t("SRV_MSG_Search"), 
n = Client.IdfPanel.FKEnterQBE;
break;

case this.findButtonConf.id:
t = Client.IdfResources.t("TIP_TITLE_Find"), i = o?.SRV_MSG_Find || Client.IdfResources.t("SRV_MSG_Find"), 
n = Client.IdfPanel.FKFindData;
break;

case this.formListButtonConf.id:
case this.formListAutoButtonConf.id:
t = Client.IdfResources.t("TIP_TITLE_FormList"), i = o?.SRV_MSG_FormList || Client.IdfResources.t("SRV_MSG_FormList"), 
s === this.formListAutoButtonConf?.id && (i = Client.IdfResources.t("SRV_MSG_FormListAuto")), 
n = Client.IdfPanel.FKFormList;
break;

case this.cancelButtonConf.id:
t = Client.IdfResources.t("TIP_TITLE_Cancel"), i = o?.SRV_MSG_Cancel || Client.IdfResources.t("SRV_MSG_Cancel"), 
this.status !== Client.IdfPanel.statuses.qbe || Client.mainFrame.isIDF || (i = Client.IdfResources.t("SRV_MSG_ClearFilters")), 
n = Client.IdfPanel.FKCancel;
break;

case this.refreshButtonConf.id:
t = Client.IdfResources.t("TIP_TITLE_Reload"), i = o?.SRV_MSG_Reload || Client.IdfResources.t("SRV_MSG_Reload"), 
n = Client.IdfPanel.FKRefresh;
break;

case this.deleteButtonConf.id:
t = Client.IdfResources.t("TIP_TITLE_Delete"), i = o?.SRV_MSG_Delete || Client.IdfResources.t("SRV_MSG_Delete"), 
n = Client.IdfPanel.FKDelete;
break;

case this.insertButtonConf.id:
t = Client.IdfResources.t("TIP_TITLE_Insert"), i = o?.SRV_MSG_Insert || Client.IdfResources.t("SRV_MSG_Insert"), 
n = Client.IdfPanel.FKInsert;
break;

case this.duplicateButtonConf.id:
t = Client.IdfResources.t("TIP_TITLE_Duplicate"), i = o?.SRV_MSG_Duplicate || Client.IdfResources.t("SRV_MSG_Duplicate"), 
n = Client.IdfPanel.FKDuplicate;
break;

case this.saveButtonConf.id:
t = Client.IdfResources.t("TIP_TITLE_Update"), i = o?.SRV_MSG_Update || Client.IdfResources.t("SRV_MSG_Update"), 
n = Client.IdfPanel.FKUpdate;
break;

case this.printButtonConf.id:
t = Client.IdfResources.t("TIP_TITLE_Print"), i = o?.SRV_MSG_Print || Client.IdfResources.t("SRV_MSG_Print"), 
n = Client.IdfPanel.FKPrint;
break;

case this.csvButtonConf.id:
t = Client.IdfResources.t("TIP_TITLE_Export"), i = o?.SRV_MSG_Export || Client.IdfResources.t("SRV_MSG_Export");
break;

case this.attachButtonConf.id:
t = Client.IdfResources.t("TIP_TITLE_Attach"), i = o?.SRV_MSG_Attach || Client.IdfResources.t("SRV_MSG_Attach");
break;

case this.groupButtonConf.id:
t = Client.IdfResources.t("TIP_TITLE_Group"), i = o?.SRV_MSG_Group || Client.IdfResources.t("SRV_MSG_Group");
break;

default:
if (s === this.multiSelButtonConf?.id) {
t = Client.IdfResources.t("TIP_TITLE_ShowMultiSel");
var l = this.showMultipleSelection ? "SRV_MSG_ShowSelCommands" : "SRV_MSG_ShowMultiSel";
i = o?.[l] || Client.IdfResources.t(l);
} else for (let e = 0; e < this.customButtonsConf.length; e++) if (this.customButtonsConf[e].id === s) {
t = this.customCommands[e].caption, i = this.customCommands[e].tooltip, n = this.customCommands[e].fknum;
break;
}
}
e = Client.Widget.getHTMLTooltip(t, i, n);
}
return e;
}, Client.IdfPanel.prototype.updateStatusbar = function() {
var e = this.showStatusbar && !this.collapsed;
let t = "", i = "", n = "";
switch (this.DOModified && this.DOMaster ? Client.IdfPanel.statuses.updated : this.status) {
case Client.IdfPanel.statuses.qbe:
t = Client.IdfResources.t("SRV_MSG_StatusQBE"), i = "qbe";
break;

case Client.IdfPanel.statuses.data:
var s, o = this.getTotalRows(!0), l = this.getActiveRowIndex(!0);
if (!this.hasList || this.lastRow || Client.mainFrame.isIDF) t = this.isNewRow() ? this.canInsert ? Client.IdfResources.t("SRV_MSG_StatusInsert") : Client.IdfResources.t("SRV_MSG_StatusData1", [ l ]) : this.showMultipleSelection && this.layout !== Client.IdfPanel.layouts.form ? 1 === (s = this.showMultipleSelection ? this.getSelectedDataRows() : 0) ? Client.IdfResources.t("PAN_STBAR_SelRow", [ o ]) : Client.IdfResources.t("PAN_STBAR_SelRows", [ o, s ]) : Client.IdfResources.t("SRV_MSG_RowNumOf", [ l, o + (this.moreRows ? "+" : "") ]); else if (this.noDataLoaded) {
t = Client.IdfResources.t("MSG_StatusNoRows"), n = Client.IdfResources.t("MSG_NoRows");
let i = "";
if (this.canUseRowQbe() && this.hasFilters() && this.canInsert ? i = Client.IdfResources.t("MSG_NoRowsClearInsert") : this.canUseRowQbe() && this.hasFilters() ? i = Client.IdfResources.t("MSG_NoRowsClear") : !this.hasFilters() && this.canInsert && (i = Client.IdfResources.t("MSG_NoRowsInsert")), 
i) {
let e, t = Client.Widget.extractCaptionData(i);
t.icon && (e = "{{icon-" + t.icon.replace("fa ", "") + "}}", i = i.replace(e, this.getHTMLIcon(i, !0))), 
(t = Client.Widget.extractCaptionData(i)).icon && (e = "{{icon-" + t.icon.replace("fa ", "") + "}}", 
i = i.replace(e, this.getHTMLIcon(i, !0))), n = "<div>" + n + ".</div><div>" + i + "</div>";
}
}
break;

case Client.IdfPanel.statuses.updated:
t = Client.IdfResources.t("SRV_MSG_StatusUpdated"), i = "updated";
}
!this.DOSingleDoc || this.DOMaster && this.DOModified || (t = "", i = "");
var a = Client.eleMap[this.statusbarConf.id];
Client.Widget.updateObject(a, {
innerText: t,
visible: e
}), Client.Widget.updateElementClassName(a, "updated", "updated" !== i), Client.Widget.updateElementClassName(a, "qbe", "qbe" !== i), 
!Client.mainFrame.isIDF && this.hasList && (e = Client.eleMap[this.noResultsTextConf.id], 
Client.Widget.updateObject(e, {
innerHTML: n
}), a = Client.eleMap[this.noResultsRowConf.id], Client.Widget.updateObject(a, {
visible: !this.lastRow
}));
}, Client.IdfPanel.prototype.updateLayout = function() {
this.layout === Client.IdfPanel.layouts.list && (this.setActiveRow(!0), this.numRows) || this.scrollToDataRow(this.getActiveRowIndex());
let e = this.hasFocus(!0), t = () => {
e && this.focus();
}, i = Client.eleMap[this.panelContainerConf.id];
if (i.selectedPage === this.layout) t(); else {
i.updateElement({
selectedPage: this.layout
});
let e = Client.eleMap[this.contentContainerConf.id];
e.updateElement({
style: {
overflow: "hidden"
}
}), i.onEndAnimation = () => {
delete i.onEndAnimation, e.updateElement({
style: {
overflow: ""
}
}), t();
};
}
let n;
n = Client.mainFrame.isIDF ? Client.IdfMessagesPump.isClientSideEvent(this.toolbarEventDef) && Client.mainFrame.idfMobile : !this.events.includes("onCommand") && !this.events.includes("onLockingChanging"), 
this.automaticLayout && this.layout === Client.IdfPanel.layouts.list && n && this.updateElement({
locked: !0
});
}, Client.IdfPanel.prototype.updateMultiSel = function(e) {
e = e || {};
var t = this.getTotalRows(!0), i = e.index, n = !!e.value;
let s = i ?? 1, o = i ?? t;
void 0 === i && this.selectOnlyVisibleRows && !e.force && (s = this.actualPosition, 
(o = this.actualPosition + this.getNumRows() - 1) > t) && (o = t);
var l = this.hasGroupedRows();
l && (s = this.groupedRowsRoot.realIndexToGroupedIndex(s), o = this.groupedRowsRoot.realIndexToGroupedIndex(o));
for (let i = s; i <= o; i++) {
let t = i;
if (l) {
if (this.getRowsGroupByIndex(i)) continue;
t = this.groupedRowsRoot.realIndexToGroupedIndex(i);
}
this.multiSelStatus[i] = e.reverse ? !this.multiSelStatus[i] : n, this.fields.forEach(e => e.selectRow(this.multiSelStatus[i], t));
}
void 0 === i && (this.multiSelStatus.length = this.status !== Client.IdfPanel.statuses.qbe ? this.getTotalRows() + 1 : 1), 
this.updateStatusbar();
}, Client.IdfPanel.prototype.getContainerWidth = function(e) {
let t = this.originalWidth;
return t -= this.parentIdfView?.getFramesContainerHorizontalMargins() || 0, e && this.formContainerConf ? t -= this.formContainerHorizontalMargins : !e && this.listContainerConf && (t -= this.listContainerHorizontalMargins), 
t;
}, Client.IdfPanel.prototype.getContainerHeight = function(e) {
let t = this.originalHeight;
return t = (t = (t -= this.getToolbarHeight()) - this.getPagesContainerHeight()) - (this.parentIdfView?.getFramesContainerVerticalMargins() || 0), 
this.parent instanceof Client.IdfTab && (t -= this.parent.parent.getTabbarHeight()), 
e && this.formContainerConf ? t -= this.formContainerVerticalMargins : !e && this.listContainerConf && (t -= this.listContainerVerticalMargins), 
t;
}, Client.IdfPanel.prototype.getHeaderHeight = function() {
return this.headerHeight;
}, Client.IdfPanel.prototype.getQbeRowHeight = function() {
return this.canUseRowQbe() ? this.getListRowHeight() : 0;
}, Client.IdfPanel.prototype.getHeaderOffset = function() {
var e = Client.IdfVisualStyle.getByIndex(this.visualStyle);
return e && e.getHeaderOffset() || 0;
}, Client.IdfPanel.prototype.getListRowHeight = function(s) {
let e = Client.IdfPanel.defaultListRowHeight;
if (!this.hasDynamicHeightRows()) {
let t = 0, i = -1, n = this.fields;
if (s && 1 < this.numSubRows) {
let t = this.wrapRows[s.id];
n = n.filter(e => this.wrapRows[e.id] === t);
}
for (let e = 0; e < n.length; e++) {
var o = n[e];
o.isInList() && (o.rowBreakBefore && !s && (t += i, i = -1), (o = o.getRects().height) > i) && (i = o);
}
1 < this.numSubRows && !s && (t += i), (0 <= i || 0 < t) && (e = i, 1 < this.numSubRows) && !s && 0 < t && (e = t);
}
return e;
}, Client.IdfPanel.prototype.getListRowOffset = function() {
var e = Client.IdfVisualStyle.getByIndex(this.visualStyle);
return e && e.getRowOffset() || 0;
}, Client.IdfPanel.prototype.getNumRows = function() {
if (void 0 !== this.numRows) return this.numRows;
let t = 0;
var e = Client.eleMap[this.gridConf.id].getRootObject(), i = e.scrollTop + this.getHeaderHeight() + this.getQbeRowHeight(), n = e.scrollTop + e.clientHeight, s = this.getListRowOffset(), o = this.hasGroupedRows(), l = this.getTotalRows();
for (let e = 1; e <= l; e++) {
var a = this.getRow(e);
if (a && (!o || this.groupedRowsRoot.isRowVisible(e))) {
var a = a.getRootObject(), r = 1 === e ? 0 : s, r = a.offsetTop + r;
if (i <= r && a.offsetTop + a.clientHeight <= n && t++, n < r) break;
}
}
return t;
}, Client.IdfPanel.prototype.getMaxRows = function(e) {
var t = this.fields.find(e => e.isInList() && e.isVisible())?.values.findLastIndex(e => !!e) ?? -1, i = this.getTotalRows();
return Math.max(i, t) + (e ? 0 : this.getNumRows());
}, Client.IdfPanel.prototype.getFrameList = function(e) {}, Client.IdfPanel.prototype.realizeCommandSet = function(e) {
var t = this.getCommandZone(Client.IdfPanel.commands.CZ_CMDSET), t = this.toolbarZonesConfig[t], t = Client.eleMap[t.id];
t.updateElement({
visible: !0
}), t.insertBefore({
child: e
});
}, Client.IdfPanel.prototype.resetCache = function(t) {
this.hasGroupedRows() && (t.from && (t.from = this.groupedRowsRoot.realIndexToGroupedIndex(t.from)), 
t.to && (t.to = this.groupedRowsRoot.realIndexToGroupedIndex(t.to)), t.dataBlockStart && (t.dataBlockStart = this.groupedRowsRoot.realIndexToGroupedIndex(t.dataBlockStart)), 
t.dataBlockEnd) && (t.dataBlockEnd = this.groupedRowsRoot.realIndexToGroupedIndex(t.dataBlockEnd));
for (let e = 0; e < this.groups.length; e++) this.groups[e].resetCache(t);
for (let e = 0; e < this.fields.length; e++) this.fields[e].resetCache(t);
let i = t.from ?? 1, n = t.to ?? this.getMaxRows(!0);
var s = t.dataBlockStart, o = t.dataBlockEnd;
void 0 === t.from && this.firstRow && (i = this.firstRow), void 0 === t.to && this.lastRow && (n = this.lastRow);
let e;
Client.Element.lastFocusedElement?.focusTimeout && this.getRootObject().contains(Client.Element.lastFocusedElement.getRootObject()) && (e = Client.Widget.getWidgetByElement(Client.Element.lastFocusedElement)?.getParentWidgetByClass(Client.IdfFieldValue));
for (let e = i; e <= n; e++) e >= s && e <= o ? this.resetCachedStyles(e) : this.rows[e] && this.detachRow(e, !0);
for (let e = s; e <= o; e++) this.rows[e] || this.resetCachedStyles(e);
t.skipBufferVideo || this.fillBufferVideo({
start: s,
end: o,
maxReusableRows: o
}), e && e.parentField.focus({
absoluteRow: e.index
});
}, Client.IdfPanel.prototype.isNewRow = function(e) {
return (e ?? this.getActiveRowIndex()) > this.getTotalRows();
}, Client.IdfPanel.prototype.updateActivePage = function() {
for (let e = 0; e < this.pages.length; e++) {
var t = this.pages[e];
t.updateElement({
isActive: t.index === this.activePage
});
}
this.lastFocusedFieldInForm?.isVisible(!0) || delete this.lastFocusedFieldInForm, 
this.lastFocusedFieldValueInList?.parentField.isVisible() && delete this.lastFocusedFieldValueInList, 
this.focus({
ifJustFocused: !0
});
}, Client.IdfPanel.prototype.canUseRowQbe = function() {
return this.searchMode === Client.IdfPanel.searchModes.row && this.canSearch && this.hasList;
}, Client.IdfPanel.prototype.handleResize = function() {
var t = [];
if (this.isVisible()) {
if (t.push(...Client.IdfFrame.prototype.handleResize.call(this)), this.hasListLayout() && this.layout === Client.IdfPanel.layouts.list) {
this.updateSubRowsWidth(), this.calcDimensions();
var e = this.calculatedGridWidth, i = this.calculatedGridHeight;
if (!e || !i) return [];
e !== this.lastGridWidth && Client.mainFrame.isIDF && this.canAdaptWidth() && t.push({
id: "resize",
def: Client.IdfMessagesPump.eventTypes.ACTIVE,
content: {
oid: this.id,
obn: "listwidth",
par1: e,
par2: 0
}
});
var n = this.getListRowHeight(), s = n + this.getListRowOffset(), n = this.visibleAggregateFields.length ? n : 0, o = this.getHeaderHeight() + this.getHeaderOffset() + this.getQbeRowHeight(), o = (Client.mainFrame.isIDF ? Math.floor : Math.ceil)((i - o - n) / s);
this.adjustScrollbar(), i !== this.lastGridHeight && (Client.mainFrame.isIDF ? this.canAdaptHeight() && t.push({
id: "resize",
def: Client.IdfMessagesPump.eventTypes.ACTIVE,
content: {
oid: this.id,
obn: "height",
par1: i,
par2: o
}
}) : (this.updateElement({
numRows: o
}), t.push({
id: "chgProp",
obj: this.id,
content: {
name: "numRows",
value: o,
clid: Client.id
}
}))), this.lastGridWidth = e, this.lastGridHeight = i;
}
if (this.getListFieldColumn(this.id)?.isMostRight) for (let e = 0; e < this.fields.length; e++) t.push(...this.fields[e].handleResize());
}
return t;
}, Client.IdfPanel.prototype.focus = function(t) {
if (!this.collapsed && !Client.mainFrame.idfMobile && (!(t = t || {}).ifJustFocused || this.hasFocus(!0))) {
if (Client.Element.lastFocusedElement?.focusTimeout) {
var n = Client.eleMap[(this.layout === Client.IdfPanel.layouts.list ? this.listContainerConf : this.formContainerConf).id];
if (Client.Utils.isMyParentEl(Client.Element.lastFocusedElement, n)) return;
}
this.layout !== Client.IdfPanel.layouts.list || this.lastFocusedFieldValueInList || (!t.absoluteRow && this.canUseRowQbe() && (t.absoluteRow = 0), 
t.absoluteRow = t.absoluteRow ?? this.getActiveRowIndex());
let e, i = this.getFocusableFields();
if (this.layout === Client.IdfPanel.layouts.form ? this.lastFocusedFieldInForm?.canHaveFocus() ? e = this.lastFocusedFieldInForm : Client.mainFrame.isIDF || (i = [], 
this.formStruct?.forEach(e => {
i.push(...e.fields.flatMap(e => Client.eleMap[e.id] instanceof Client.IdfGroup ? Client.eleMap[e.id].fields.map(e => Client.eleMap[e.id]) : Client.eleMap[e.id]));
})) : this.lastFocusedFieldValueInList?.parentField.canHaveFocus() && (e = this.lastFocusedFieldValueInList.parentField, 
t.absoluteRow = t.absoluteRow ?? this.lastFocusedFieldValueInList.index), !e) {
let t = this.layout === Client.IdfPanel.layouts.form;
e = (e = i.find(e => e?.isVisible(t) && e?.isEnabled() && !e?.isStatic())) || i.find(e => e?.isVisible(t) && !e?.isStatic());
}
e?.focus(t) || this.mainObjects[0].focus();
}
}, Client.IdfPanel.prototype.focusNearControl = function(i) {
var n = [], s = {
selectionStart: i.selectionStart,
selectionEnd: i.selectionEnd,
skipAnimationCheck: !0
};
i.row && this.layout === Client.IdfPanel.layouts.form && (i.column = i.row, delete i.row);
let o = i.fieldValue.parentField, l = i.fieldValue.index;
if (i.column) {
var a = this.getFocusableFields(l);
let e = a.findIndex(e => e === o) + i.column, t = (this.layout === Client.IdfPanel.layouts.form && (e %= a.length), 
a[e]);
return t ? (t.focus(Object.assign({
absoluteRow: l
}, s)), n) : (t = a[0 < i.column ? 0 : a.length - 1], this.focusNearControl(Object.assign({
fieldValue: t.values[l],
row: i.column
}, s)));
}
if (this.layout !== Client.IdfPanel.layouts.form) {
for (a = i.row < 0; ;) {
l += i.row;
var e = o.getValueByIndex(l);
if (!e || e.isVisible()) break;
}
if (this.hasGroupedRows() && this.showGroups && (l = this.getNextGroupedVisibleRow({
start: l,
scrollUp: a
})), this.isRowBetweenLimits(l)) {
let e = l + 5 * (a ? -1 : 1);
this.hasGroupedRows() && this.showGroups && (e = this.getNextGroupedVisibleRow({
start: e,
scrollUp: a
})), !this.isRowBetweenLimits(e) || o.values[e] || (n.push(...this.handlePanelScroll(e, a)), 
Client.mainFrame.messagesPump?.sendEvents(!0)), o.getValueByIndex(l) && (o.focus(Object.assign({
absoluteRow: l
}, s)), a) && this.scrollToDataRow(l);
}
}
return n;
}, Client.IdfPanel.prototype.getFocusableFields = function(t) {
t = t ?? this.getActiveRowIndex();
let e = this.fields.filter(e => e.canHaveFocus(t));
if (this.advancedTabOrder) {
let i = this.layout === Client.IdfPanel.layouts.form ? "form" : "list";
e.sort((e, t) => e[i + "TabOrderIndex"] - t[i + "TabOrderIndex"]);
}
if (!Client.mainFrame.isIDF && this.layout === Client.IdfPanel.layouts.form && this.formStruct) {
if (!this.fieldsFormOrder) {
this.fieldsFormOrder = [];
let i = (e, t) => {
e.cols.forEach(e => n(e, t));
}, n = (e, t) => {
e.rows?.forEach(e => i(e, t)), 0 < e.fields?.length && !e.isGroup && t.push(Client.eleMap[e.fields[0].id]);
};
this.formStruct.forEach(e => i(e, this.fieldsFormOrder));
}
e = this.fieldsFormOrder.filter(e => e?.canHaveFocus(t));
}
return e;
}, Client.IdfPanel.prototype.isRowBetweenLimits = function(e) {
return e >= (this.canUseRowQbe() ? 0 : 1) && e <= this.getMaxRows(!0);
}, Client.IdfPanel.prototype.focusRow = function(e) {
this.hasGroupedRows() && (e = this.groupedRowsRoot.realIndexToGroupedIndex(e)), 
this.focus({
absoluteRow: e
});
}, Client.IdfPanel.prototype.updateClassName = function() {
var e = Client.eleMap[this.mainContainerConf.id], t = this.layout === Client.IdfPanel.layouts.list;
Client.Widget.updateElementClassName(e, "mode-list", !t), Client.Widget.updateElementClassName(e, "mode-form", t), 
Client.Widget.updateElementClassName(e, "has-list", !this.hasList), Client.Widget.updateElementClassName(e, "has-form", !this.hasForm), 
Client.Widget.updateElementClassName(e, "show-mulsel", !this.showMultipleSelection);
}, Client.IdfPanel.prototype.getClickDetail = function(e, t) {
var i = Client.IdfFrame.prototype.getClickDetail.call(this, e);
let n, s = -1;
return (t = t instanceof Client.IdfControl ? t.parentWidget : t) instanceof Client.IdfFieldValue ? (n = t.parentField.index, 
s = t.getIndex(!0)) : t instanceof Client.IdfField && (n = t.index), t && Client.Utils.isMyParent(e?.content?.srcEvent?.target, t.rowSelectorId) && (n = void 0), 
Client.mainFrame.isIDF ? (i.par4 = n ?? -1, i.par5 = s) : (i.field = n, i.row = s - 1), 
i;
}, Client.IdfPanel.prototype.fillBufferVideo = function(e) {
let {
start: t,
end: i
} = e = e || {};
delete e.start, delete e.end;
var n = this.hasGroupedRows() ? this.groupedActualPosition : this.actualPosition, s = this.getNumRows(), n = (t = t || n, 
i = i || (this.hasGroupedRows() ? this.getNextGroupedVisibleRow({
start: n,
iterations: s
}) : n + s), this.getMaxRows(!0));
if (e.placeholderStart = this.hasGroupedRows() ? this.getNextGroupedVisibleRow({
start: t,
iterations: s,
scrollUp: !0
}) : t - s, e.placeholderEnd = this.hasGroupedRows() ? this.getNextGroupedVisibleRow({
start: i,
iterations: s
}) : i + s, e.placeholderStart < 1 && (e.placeholderStart = 1), e.placeholderEnd > n && (e.placeholderEnd = n), 
this.handleRowsReuse(e), this.newFields.length) {
this.getRow(0) && this.attachRow(0, !0);
for (let e = this.firstRow; e <= this.lastRow; e++) this.getRow(e) && this.attachRow(e, !0);
}
this.newFields = [], this.adjustScrollbar();
}, Client.IdfPanel.prototype.setReusableRows = function(e) {
var t = e.rowsGroup;
let i, n, s = 0, o = 0;
var e = e.maxReusableRows ?? this.getMaxRows(!0), l = this.hasGroupedRows(), a = Client.mainFrame.isEditing() ? Client.IdfPanel.maxReusableRows : Math.max(Client.IdfPanel.maxReusableRows, 2 * this.getNumRows() + 1);
this.reusableRows = Math.min(a, e);
let r = this.getExistingRows();
if (this.updateFirstRowIndex(this.firstRow || 0), this.updateLastRowIndex(this.lastRow || 0), 
r === this.reusableRows && t && !t.expanded) {
for (let e = t.groupedStartingRow; e <= t.groupedEndingRow; e++) o += this.rows[e] ? 1 : 0;
this.groupedRowsRoot.getVisibleRowsCount() >= this.reusableRows && (o = 0), i = t.groupedEndingRow, 
n = t.groupedStartingRow;
} else if (r < this.reusableRows) if (t && !t.expanded) {
for (let e = t.groupedStartingRow; e <= t.groupedEndingRow; e++) o += this.rows[e] ? 1 : 0;
i = t.groupedEndingRow, n = t.groupedStartingRow;
} else s = this.reusableRows - r, i = t?.groupedStartingRow ?? this.lastRow + 1, 
n = t?.groupedEndingRow ?? e; else r > this.reusableRows && (o = r - this.reusableRows, 
i = t?.groupedEndingRow ?? this.lastRow, n = t?.groupedStartingRow ?? 1);
if (o) for (let e = i; e >= n && o; e--) l && !this.getRow(e) || (this.detachRow(e, !l), 
o--, r--); else if (s) {
for (let e = i; e <= n && s; e++) l && !this.groupedRowsRoot.isRowVisible(e) || (this.attachRow(e), 
s--, r++);
if (s) for (let e = this.firstRow - 1; 1 <= e && s; e--) l && !this.groupedRowsRoot.isRowVisible(e) || (this.attachRow(e), 
s--, r++);
}
this.updateFirstRowIndex(), this.updateLastRowIndex(), l && Client.mainFrame.isIDF;
this.firstRow < 0 && delete this.firstRow, this.lastRow < 0 && delete this.lastRow;
}, Client.IdfPanel.prototype.handleRowsReuse = function(e) {
let {
placeholderStart: t,
placeholderEnd: i,
rowsGroup: n
} = e = e || {}, s = (delete e.placeholderStart, delete e.placeholderEnd, n?.groupedStartingRow);
var o = n?.groupedEndingRow, l = this.getExistingRows(), a = (this.setReusableRows(e), 
this.hasGroupedRows()), r = e.maxReusableRows ?? this.getMaxRows(!0);
let d, h, c, p = this.scrollUp, u = 0, f;
if (n) {
var e = this.getExistingRows();
if (e < this.reusableRows) return;
if (u = this.getVisibleGroupedRows({
start: s,
end: o,
checkPhysicalRow: !0
}), f = this.getVisibleGroupedRows({
start: s,
end: o
}), n.expanded) {
e = e - l;
if (e && u === e) return;
u = Math.max(f - u - e - 1, 0), s = this.getNextGroupedVisibleRow({
start: s,
scrollUp: p,
iterations: e
});
}
p = this.getVisibleGroupedRows({
end: s,
checkPhysicalRow: !0
}) < parseInt(this.getVisibleGroupedRows({
checkPhysicalRow: !0
}) / 2), t = s, i = o, p && this.lastRow < i && (this.lastRow = i), !p && this.firstRow > t && (this.firstRow = t);
}
if (!p && t >= this.firstRow) {
h = n ? (d = this.getNextGroupedVisibleRow({
start: this.firstRow,
iterations: u
}), this.getNextGroupedVisibleRow({
start: s - 1,
scrollUp: !0
})) : (t - 1 + this.reusableRows > r && (t -= t - 1 + this.reusableRows - r), l = a ? this.getNextGroupedVisibleRow({
start: t - 1,
scrollUp: !0
}) : t - 1, d = Math.min(this.lastRow, l), Math.max(this.lastRow, l));
for (let e = this.firstRow; e <= d; e++) {
if (a) {
if ((h = n && !n.expanded ? (c = this.getNextGroupedVisibleRow({
start: (c || e) - 1,
scrollUp: !0
}), this.getNextGroupedVisibleRow({
start: h + 1,
checkPhysicalRow: !0
})) : (c = this.getNextGroupedVisibleRow({
start: e,
checkPhysicalRow: !0
}), this.getNextGroupedVisibleRow({
start: h + 1
}))) > o || h > r) break;
if (c > d || c > r) break;
} else c = e, h++;
var m = n && !n.expanded ? h : c, C = n && !n.expanded ? c : h, g = this.rows[m];
this.reuseRow({
row: Client.eleMap[g?.id],
oldIndex: m,
newIndex: C
}), delete this.rows[m], this.rows[C] = g;
}
this.updateFirstRowIndex(a ? void 0 : t), this.updateLastRowIndex(a ? void 0 : h);
} else if (p && i <= this.lastRow) {
h = n ? (d = this.getNextGroupedVisibleRow({
start: this.lastRow,
scrollUp: !0,
iterations: u
}), this.getNextGroupedVisibleRow({
start: o + 1
})) : ((e = a ? this.getVisibleGroupedRows({
start: t,
end: i
}) : i - t) < this.reusableRows && (i = a ? Math.min(this.getNextGroupedVisibleRow({
start: i,
iterations: this.reusableRows - e
}), r + 1) : Math.min(i + (this.reusableRows - e), r + 1)), i = a ? this.getNextGroupedVisibleRow({
start: i
}) : i, d = Math.max(this.firstRow, i), Math.min(this.firstRow, i));
for (let e = this.lastRow; e >= d; e--) {
if (a) {
if ((h = n && !n.expanded ? (c = this.getNextGroupedVisibleRow({
start: (c || e) + 1
}), this.getNextGroupedVisibleRow({
start: h - 1,
scrollUp: !0,
checkPhysicalRow: !0
})) : (c = this.getNextGroupedVisibleRow({
start: e,
scrollUp: !0,
checkPhysicalRow: !0
}), this.getNextGroupedVisibleRow({
start: h - 1,
scrollUp: !0
}))) < s || h > r) break;
if (c < d || c > r) break;
} else c = e, h--;
if (h < 1) {
h = 1;
break;
}
var b = n && !n.expanded ? h : c, I = n && !n.expanded ? c : h, y = this.rows[b];
this.reuseRow({
row: Client.eleMap[y?.id],
oldIndex: b,
newIndex: I
}), delete this.rows[b], this.rows[I] = y;
}
this.updateFirstRowIndex(a ? void 0 : h), this.updateLastRowIndex(a ? void 0 : i - 1);
}
}, Client.IdfPanel.prototype.createPlaceholderRowConf = function(e) {
let t;
var i;
this.getRow(e) || (t = this.getMostSimilarRowIndex(e));
for (i of this.fields.filter(e => e.isShown() && e.isInList())) i.createFieldValue(e, t);
return this.createDataRowConfig(e, t);
}, Client.IdfPanel.prototype.reorderList = function(e, s, t) {
if (e !== s) {
s.group && e.group !== s.group && (s = s.group.fields[0]);
let i, n = [];
e.group && e.group !== s.group ? (e.group.fields.forEach(e => n.push(e)), i = e.group) : n.push(e);
var o = this.isFixedField(s), l = [];
for (let t = 0; t < n.length; t++) {
var a = this.isFixedField(n[t]);
if (!a && o ? this.fixedColumns++ : a && !o && this.fixedColumns--, this.fields.splice(this.fields.indexOf(n[t]), 1), 
this.fields.splice(this.fields.indexOf(s), 0, n[t]), this.elements.splice(this.elements.indexOf(n[t]), 1), 
this.elements.splice(this.elements.indexOf(s), 0, n[t]), s.group && n[t].group === s.group && (s.group.fields.splice(s.group.fields.indexOf(n[t]), 1), 
s.group.fields.splice(s.group.fields.indexOf(s), 0, n[t]), s.group.elements.splice(s.group.elements.indexOf(n[t]), 1), 
s.group.elements.splice(s.group.elements.indexOf(s), 0, n[t])), !i) for (let e = 0; e < n[t].values.length; e++) {
var r = n[t].values[e], d = s.values[e];
r && d && (r = Client.eleMap[r.listContainerId]?.getRootObject(), d = Client.eleMap[d.listContainerId]?.getRootObject(), 
r) && d && r.parentNode.insertBefore(r, d);
}
Client.mainFrame.isIDF ? l.push({
id: "rdcol",
def: Client.IdfMessagesPump.eventTypes.ACTIVE,
content: {
oid: this.id,
obn: "",
par1: n[t].id,
par2: s.id
}
}) : l.push({
id: "fireOnFieldReordered",
obj: this.id,
content: {
sourceField: n[t].id,
targetField: s.id
}
});
}
if (i) {
s.group && e.group && s.group !== e.group && (this.groups.splice(this.groups.indexOf(e.group), 1), 
this.groups.splice(this.groups.indexOf(s.group), 0, e.group));
for (let e = 0; e < s.values.length; e++) {
var h = i.listContainersConf[e], c = s.values[e];
if (h && c) {
h = Client.eleMap[h.id]?.getRootObject();
let e = Client.eleMap[c.listContainerId]?.getRootObject();
e && s.group && (e = e.parentNode.parentNode), h && e && h.parentNode.insertBefore(h, e);
}
}
}
this.advancedTabOrder = !0, this.fields.forEach((e, t) => e.listTabOrderIndex = t), 
Client.mainFrame.sendEvents(l), t || (this.updateStructure(), this.calcLayout());
}
}, Client.IdfPanel.prototype.handleRowChange = function(e, t) {
var i, n = [];
return t && this.showMultipleSelection || ((i = this.hasGroupedRows()) && (this.groupedActualRow = e - this.groupedActualPosition, 
e = this.groupedRowsRoot.groupedIndexToRealIndex(e)), (t || 0 !== e && e !== this.getActiveRowIndex(!0)) && (this.updateElement({
actualRow: e - this.actualPosition,
skipScroll: !0,
fromClient: !0
}), t ? Client.mainFrame.isIDF ? n.push({
id: "panrs",
def: this.rowSelectEventDef,
content: {
oid: this.id,
obn: this.actualRow,
par1: i ? e : 0
}
}) : n.push({
id: "fireOnRowActivated",
obj: this.id,
content: {
row: this.getActiveRowIndex(!0) - 1
}
}) : Client.mainFrame.isIDF ? n.push({
id: "chgrow",
def: this.scrollEventDef,
content: {
oid: this.id,
par1: this.actualRow,
par2: i ? e : 0
}
}) : n.push({
id: "chgProp",
obj: this.id,
content: {
name: "position",
value: this.getActiveRowIndex(!0) - 1,
clid: Client.id
}
}))), n;
}, Client.IdfPanel.prototype.handlePanelScroll = function(t, e) {
clearTimeout(this.hardScrollTimeout);
let n = t, s = this.getActiveRowIndex() - n, o = 0;
if (this.hasGroupedRows()) {
let t = this.groupedActualPosition, i = n;
this.groupedActualPosition > n && (t = n, i = this.groupedActualPosition);
for (let e = t; e < i; e++) o += this.groupedRowsRoot.isRowVisible(e) ? 1 : 0;
this.groupedActualPosition = n, this.groupedActualRow = s, n = this.groupedRowsRoot.groupedIndexToRealIndex(n), 
s = this.getActiveRowIndex(!0) - n;
} else o = Math.abs(this.actualPosition - n);
delete this.scrollingTo, this.updateElement({
actualPosition: n,
actualRow: s,
skipScroll: !0,
fromClient: !0
}), this.setActiveRow(!0);
t = [];
if (Client.mainFrame.isIDF) this.layout === Client.IdfPanel.layouts.list && t.push({
id: "panscr",
def: this.scrollEventDef,
content: {
oid: this.id,
par1: this.actualPosition,
par2: (e ? -1 : 1) * this.getNumRows()
}
}); else {
this.scrollingTo = this.actualPosition;
let e = {
id: "chgProp",
obj: this.id,
content: {
name: "scrollPosition",
value: this.actualPosition - 1,
clid: Client.id
}
};
o < Client.IdfPanel.hardScrollLimit ? t.push(e) : this.hardScrollTimeout = setTimeout(() => Client.mainFrame.sendEvents([ e ]), 50);
}
return t;
}, Client.IdfPanel.prototype.isFixedField = function(t) {
if (this.fixedColumns) {
var i = this.fields.filter(e => e.isInList() && e.isVisible()), n = Math.min(i.length, this.fixedColumns);
for (let e = 0; e < n; e++) {
var s = i[e];
if (s.canAdaptWidth()) return;
if (s === t) return !0;
}
}
}, Client.IdfPanel.prototype.getFixedFieldLeft = function(t) {
let i = this.rowSelectorWidth;
for (let e = 0; e < this.fields.length; e++) {
var n = this.fields[e];
if (n === t) break;
this.isFixedField(n) && (i += n.getRects({
checkVisibility: !0
}).width);
}
return i;
}, Client.IdfPanel.prototype.setRowsMinWidth = function() {
var i = Client.eleMap[this.gridConf.id];
if (i) {
let t = 0;
for (let e = 0; e < this.fields.length; e++) {
var n = this.fields[e];
if (!this.fixedColumns && n.rowBreakBefore) break;
n.isInList() && (t += n.canAdaptWidth() ? Client.IdfField.minWidth : n.getRects({
checkVisibility: !0
}).width);
}
if (this.rowMinWidth !== t) {
this.rowMinWidth = t;
for (let e = 0; e < i.elements.length; e++) {
var s = i.elements[e];
s.minWidth = this.rowMinWidth, s.getRootObject().style.minWidth = this.rowMinWidth + "px";
}
}
}
}, Client.IdfPanel.getDataRange = function(t) {
let i, n;
var s = t.getAttribute("id");
for (let e = 0; e < t.parentNode.childNodes.length; e++) {
var o = t.parentNode.childNodes[e];
if ("chg" === o.nodeName) {
var l = o.getAttribute("id");
if (l?.startsWith("pan") && l === s) {
l = Client.IdfPanel.createConfigFromXml(o);
if (l) {
i = l.dataBlockStart, n = l.dataBlockEnd;
break;
}
}
}
}
return {
start: i,
end: n
};
}, Client.IdfPanel.prototype.initializeListFilters = function() {
if (this.showListVisisiblityControls = !1, !Client.mainFrame.idfMobile) for (let e = 0; e < this.fields.length; e++) this.showListVisisiblityControls ||= this.fields[e].canHideInList;
var e = Client.eleMap[this.mainContainerConf.id].getRootObject();
this.showListVisisiblityControls ? e.setAttribute("has-list-hide", "true") : this.searchMode === Client.IdfPanel.searchModes.header && e.setAttribute("has-list-filter", "true");
}, Client.IdfPanel.prototype.setGroupedRowsRoot = function(e) {
this.groupedRowsRoot = e;
}, Client.IdfPanel.prototype.hasGroupedRows = function() {
return !!this.groupedRowsRoot;
}, Client.IdfPanel.prototype.resetGroupedRows = function() {
for (let e = 0; e < this.groups.length; e++) this.groups[e].resetCache({
from: 1,
to: this.rows.length
});
for (let e = 0; e < this.fields.length; e++) this.fields[e].resetCache({
from: 1,
to: this.rows.length
});
for (let e = 1; e < this.rows.length; e++) this.detachRow(e, !0);
this.rows = [], this.groupedRowsRoot?.close(), this.groupedRows = !1, delete this.groupedRowsRoot, 
delete this.firstRow, delete this.lastRow;
}, Client.IdfPanel.prototype.getRowsGroupByIndex = function(e) {
return Client.eleMap[this.groupedRowsRoot.groupsIds[e]];
}, Client.IdfPanel.prototype.getVisibleGroupedRows = function(e) {
var t = e?.checkPhysicalRow, i = e?.start || 1, n = e?.end || this.groupedRowsRoot.groupedEndingRow;
let s = 0;
for (let e = i; e <= n; e++) (!t && this.groupedRowsRoot.isRowVisible(e) || t && this.rows[e]) && s++;
return s;
}, Client.IdfPanel.prototype.getNextGroupedVisibleRow = function(e) {
var {
start: e,
scrollUp: t,
iterations: i,
checkPhysicalRow: n
} = e;
if (e < 1) return e;
var s = this.getMaxRows(!0);
if (s < e) return e;
let o = e;
for (;!n && !this.groupedRowsRoot.isRowVisible(o) || n && !this.rows[o]; ) if ((o = t ? o - 1 : o + 1) < 0 || o > s) return o;
return 0 < i ? (i--, this.getNextGroupedVisibleRow({
start: o + (t ? -1 : 1),
scrollUp: t,
iterations: i
})) : o;
}, Client.IdfPanel.prototype.openControlListPopup = function(l) {
var e = Client.eleMap[l.listContainerId].getRootObject().getBoundingClientRect(), t = e.top + e.height;
let i = e.left;
var e = e.width, n = [], s = [], t = {
style: "popup-list-controls",
inputs: s,
buttons: n,
rect: {
top: t,
left: i = (i = i + e >= document.body.offsetWidth ? document.body.offsetWidth - e - 5 : i) < 0 ? this.showRowSelector ? Client.IdfPanel.defaultRowSelectorWidth : 2 : i,
width: e
}
};
this.status === Client.IdfPanel.statuses.data && !this.DOModified && this.searchMode === Client.IdfPanel.searchModes.header && this.canSearch && l.enabledInQbe && !l.isStatic() && l.dataType !== Client.IdfField.dataTypes.BLOB && n.push({
id: 1,
text: Client.IdfResources.t("LFIL_FILTER_CAPT"),
icon: "funnel"
}), l.canSort && (n.push({
id: 2,
text: Client.IdfResources.t("LFIL_SORT_DESC"),
icon: "arrow-dropdown",
tooltip: Client.IdfResources.t("TIP_TITLE_PopupSort", [ l.listHeader ])
}), n.push({
id: 3,
text: Client.IdfResources.t("LFIL_SORT_ASC"),
icon: "arrow-dropup",
tooltip: Client.IdfResources.t("TIP_TITLE_PopupSort", [ l.listHeader ])
}), l.sortMode !== Client.IdfField.sortModes.NONE && n.push({
id: 4,
text: Client.IdfResources.t("LFIL_SORT_CLEAR"),
icon: "close-circle-outline",
tooltip: Client.IdfResources.t("TIP_TITLE_PopupSortNone")
}), this.canGroup && this.showGroups && (n.push({
id: 5,
text: Client.IdfResources.t("LFIL_GROUP_LBL"),
icon: "arrow-dropdown"
}), n.push({
id: 6,
text: Client.IdfResources.t("LFIL_GROUP_LBL_D"),
icon: "arrow-dropup"
}), n.push({
id: 7,
text: Client.IdfResources.t("LFIL_DEGROUP_LBL"),
icon: "close-circle-outline"
})), t.keydowncallback = function(e, t) {
if ("Shift" === e.key) {
let e = document.getElementById("b2");
e._tippy.setContent(Client.IdfResources.t("TIP_TITLE_PopupSortShift", [ l.listHeader ])), 
(e = document.getElementById("b3"))._tippy.setContent(Client.IdfResources.t("TIP_TITLE_PopupSortShift", [ l.listHeader ]));
}
}, t.keyupcallback = function(e, t) {
if ("Shift" === e.key) {
let e = document.getElementById("b2");
e._tippy.setContent(Client.IdfResources.t("TIP_TITLE_PopupSort", [ l.listHeader ])), 
(e = document.getElementById("b3"))._tippy.setContent(Client.IdfResources.t("TIP_TITLE_PopupSort", [ l.listHeader ]));
}
}), 0 < this.fields.length && n.push({
id: 89,
text: Client.IdfResources.t("LFIL_VIS_LBL"),
cssClass: "list-label-button"
});
for (let e = 0; e < this.fields.length; e++) {
var o = this.fields[e];
o.isInList() && o.visible && o.canHideInList && s.push({
id: o.id,
type: "checkbox",
label: o.listHeader,
checked: !o.hiddenInList,
value: o.id
});
}
Client.IonHelper.createAlert(t, (e, t, i) => {
var n = [];
if (1 === e) l.openFilterPopup(); else if (2 === e) n.push(...l.handleSort({
sortMode: Client.IdfField.sortModes.DESC,
resetAll: !i.shiftKey,
add: !0
})); else if (3 === e) n.push(...l.handleSort({
sortMode: Client.IdfField.sortModes.ASC,
resetAll: !i.shiftKey,
add: !0
})); else if (4 === e) n.push(...l.handleSort({
sortMode: Client.IdfField.sortModes.NONE,
resetAll: !i.shiftKey,
add: !i.shiftKey
})); else if (5 === e) n.push(...l.handleGrouping(Client.IdfField.groupingModes.DESC)); else if (6 === e) n.push(...l.handleGrouping(Client.IdfField.groupingModes.ASC)); else if (7 === e) n.push(...l.handleGrouping(Client.IdfField.groupingModes.NONE)); else if (!e) {
for (var s in t) {
var o = Client.eleMap[s];
o.hiddenInList = !t[s], Client.mainFrame.isIDF ? n.push({
id: "fldlistvis",
def: Client.IdfMessagesPump.eventTypes.DEFERRED,
content: {
oid: o.id,
par1: o.hiddenInList ? "-1" : "0"
}
}) : n.push({
id: "chgProp",
obj: o.id,
content: {
name: "hiddenInList",
value: o.hiddenInList,
clid: Client.id
}
});
}
this.updateStructure(), this.calcLayout();
}
0 < n.length && Client.mainFrame.sendEvents(n);
});
}, Client.IdfPanel.prototype.showPreview = function(e) {
Client.Widget.showPreview("", e);
}, Client.IdfPanel.prototype.resetCachedStyles = function(t) {
void 0 === t && (this.gridStyle = {}, this.gridColStyle = {}, this.rowSelectorStyle = {}, 
this.aggregateRowSelectorStyle = {}), this.fields.forEach(e => e.resetCachedStyles(t)), 
this.groups.forEach(e => e.resetCachedStyles(t));
}, Client.IdfPanel.prototype.onRemoveChildObject = function(t) {
var e, i, n;
Client.mainFrame.isEditing() && (-1 !== (e = this.children.findIndex(e => e.id === t.id)) && this.children.splice(e, 1), 
-1 !== (e = this.fields.findIndex(e => e.id === t.id)) ? (this.fields[e].group && (-1 !== (i = (n = this.fields[e].group).fields.findIndex(e => e.id === t.id)) && n.fields.splice(i, 1), 
0 === n.fields.length) && n.resetGroup(), this.fields[e].page && -1 !== (n = (i = this.fields[e].page).fields.findIndex(e => e.id === t.id)) && i.fields.splice(n, 1), 
this.fields.splice(e, 1)) : -1 !== (e = this.groups.findIndex(e => e.id === t.id)) ? this.groups.splice(e, 1) : -1 !== (e = this.pages.findIndex(e => e.id === t.id)) && this.pages.splice(e, 1));
}, Client.IdfPanel.prototype.acceptsDrop = function(e, t) {
return !(!Client.mainFrame?.isEditing() || !(e instanceof Client.IdfControl || e instanceof Client.IdfField || e instanceof Client.IdfGroup));
}, Client.IdfPanel.prototype.handleDrop = function(e, t, i, n, s, o) {
if (Client.mainFrame?.isEditing() && (e instanceof Client.IdfControl || e instanceof Client.IdfField || e instanceof Client.IdfGroup)) {
e = e instanceof Client.IdfControl ? e.parentWidget?.parent : e;
e.parent === this && this.handleEditOperation(Client.IdfPanel.editOperations.drag, [ e ], this, {
x: i,
y: n,
deltaX: o.deltaX,
deltaY: o.deltaY
}, s);
} else if (Client.mainFrame.isIDF && this.canDrop) return !0;
}, Client.IdfPanel.prototype.handleEditOperation = function(e, r, o, d) {
if (r && 0 !== r.length || e !== Client.IdfPanel.editOperations.drag && e !== Client.IdfPanel.editOperations.resize) {
var n = Client.eleMap[this.formContainerConf.id]?.getRootObject()?.scrollTop || 0;
let t;
var s = [];
let i = [];
var h = Client.eleMap[this.panelContainerConf.id]?.getRootObject()?.getBoundingClientRect() || {
top: 0,
left: 0,
width: 100,
height: 100
};
if (this.layout === Client.IdfPanel.layouts.form && (h.width = Client.eleMap[this.formContainerConf.id]?.getRootObject()?.clientWidth, 
h.height = Client.eleMap[this.formContainerConf.id]?.getRootObject()?.clientHeight), 
e !== Client.IdfPanel.editOperations.drag && e !== Client.IdfPanel.editOperations.resize || (t = r[0], 
r = Client.ViewEdit.getEditorSelectedElements(t)), e === Client.IdfPanel.editOperations.drag) {
var l = d.x, a = d.y + this.getHeaderHeight(), c = {
listReorder: 0,
movedField: 3
};
let e = c.movedField;
if ((e = this.layout === Client.IdfPanel.layouts.list && o instanceof Client.IdfField && t instanceof Client.IdfField && o.isInList() && t.isInList() ? c.listReorder : e) !== c.listReorder && (l < 0 || a < 0)) return;
if (e === c.listReorder) {
let e = o.id;
for (let t = this.fields.length - 1; 0 <= t; t--) r.find(e => e.id === this.fields[t].id) && (s.push({
src: this.fields[t].id,
tgt: e
}), e = this.fields[t].id);
} else {
c = {
createRowBefore: -1,
createColInRow: 0,
createRowAfter: 1
};
let i, n, s = c.createRowAfter;
l = document.elementFromPoint(l, a);
if (o instanceof Client.IdfField) {
s = c.createColInRow;
let e = Client.eleMap[o.formControlId].getRootObject();
for (;e && "ION-COL" !== e.tagName; ) e = e.parentNode;
let t = e;
for (;t && "ION-ROW" !== t.tagName; ) t = t.parentNode;
i = t.id, n = e.id;
} else {
let e = l;
for (;e && "ION-ROW" !== e.tagName; ) e = e.parentNode;
e && (o = e.getBoundingClientRect(), i = e.id, s = "ION-ROW" === l.tagName ? (p = this.getMarginTopInRow(e), 
a < o.top + p ? c.createRowBefore : c.createColInRow) : a < o.top + o.height / 4 ? c.createRowBefore : c.createRowAfter);
}
(i = "ION-GRID" === l.tagName && l.classList.contains("panel-form-container") ? "NEW" : i) && this.updateStructureForEdit(r, i, n, s);
}
this.updateStructure(), this.setActiveRow();
var p = {};
p.totalRows = Client.IdfPanel.maxReusableRows, p.data = {}, p.dataBlockStart = 1, 
p.dataBlockEnd = p.totalRows, this.updateElement(p);
} else if (e === Client.IdfPanel.editOperations.resize) {
let t = d.x - d.ox, i = d.y - d.oy, n = d.w - d.ow, s = d.h - d.oh;
h.width;
let o = d.y / h.height * 100, l = d.w / h.width * 100, a = d.h / h.height * 100;
this.layout === Client.IdfPanel.layouts.list ? r.forEach(e => {
e.isInList() || (e.listHeaderAbove ? 0 != i && (s = 0, a = -1, l = -1) : 0 != t && (n = 0, 
l = -1, a = -1), e.listHeaderSize && (e.listHeaderSize = e.listHeaderSize + (e.listHeaderAbove ? i : t)), 
e.listTop && !e.listHeaderAbove && (e.listTop = e.listTop + i, e.orgListTop = e.listTop), 
e.listHeaderAbove && 0 != t && (e.listLeft = e.listLeft + t, e.orgListLeft = e.listLeft), 
e.listHeight && (e.listHeight = e.listHeight + s, e.orgListHeight = e.listHeight), 
e.listWidth && (e.listWidth = e.listWidth + n, e.orgListWidth = e.listWidth), e.listTopPerc && (e.listTopPerc = o, 
e.orgListTopPerc = e.listTopPerc), e.listHeightPerc && 0 < a && (e.listHeightPerc = a, 
e.orgListHeightPerc = e.listHeightPerc), e.listWidthPerc && 0 < l && (e.listWidthPerc = l, 
e.orgListWidthPerc = e.listWidthPerc));
}) : r.forEach(e => {
e.formHeaderAbove ? 0 != i && (s = 0, a = -1, l = -1) : 0 != t && (n = 0, a = -1, 
l = -1), e.formHeaderSize && (e.formHeaderSize = e.formHeaderSize + (e.formHeaderAbove ? i : t)), 
e.formTop && !e.formHeaderAbove && (e.formTop = e.formTop + i, e.orgFormTop = e.formTop), 
e.formHeaderAbove && 0 != t && (e.formLeft = e.formLeft + t, e.orgFormLeft = e.formLeft), 
e.formHeight && (e.formHeight = e.formHeight + s, e.orgFormHeight = e.formHeight), 
e.formWidth && (e.formWidth = e.formWidth + n, e.orgFormWidth = e.formWidth), e.formTopPerc && (e.formTopPerc = o, 
e.orgFormTopPerc = e.formTopPerc), e.formHeightPerc && 0 < a && (e.formHeightPerc = a, 
e.orgFormHeightPerc = e.formHeightPerc), e.formWidthPerc && 0 < l && (e.formWidthPerc = l, 
e.orgFormWidthPerc = e.formWidthPerc);
}), this.updateStructure(), this.calcLayout();
}
this.fields.forEach(e => {
var t = {
id: e.id,
groupId: e.groupId || ""
};
e.showInList && e.isShown() && (e.listTop && (t.listTop = Math.round(e.listTop)), 
e.listLeft && (t.listLeft = Math.round(e.listLeft)), e.listHeight && (t.listHeight = Math.round(e.listHeight)), 
e.listWidth && (t.listWidth = Math.round(e.listWidth)), e.listTopPerc && (t.listTopPerc = Math.round(e.listTopPerc)), 
e.listLeftPerc && (t.listLeftPerc = Math.round(e.listLeftPerc)), e.listHeightPerc && (t.listHeightPerc = Math.round(e.listHeightPerc)), 
e.listWidthPerc && (t.listWidthPerc = Math.round(e.listWidthPerc)), e.listHeaderSize) && (t.listHeaderSize = Math.round(e.listHeaderSize)), 
e.showInForm && e.isShown(!0) && (!e.formTop && 0 !== e.formTop || (t.formTop = Math.round(e.formTop)), 
!e.formLeft && 0 !== e.formLeft || (t.formLeft = Math.round(e.formLeft)), e.formHeight && (t.formHeight = Math.round(e.formHeight)), 
e.formWidth && (t.formWidth = Math.round(e.formWidth)), e.formTopPerc && (t.formTopPerc = Math.round(e.formTopPerc)), 
e.formLeftPerc && (t.formLeftPerc = Math.round(e.formLeftPerc)), e.formHeightPerc && (t.formHeightPerc = Math.round(e.formHeightPerc)), 
e.formWidthPerc && (t.formWidthPerc = Math.round(e.formWidthPerc)), e.formHeaderSize && (t.formHeaderSize = Math.round(e.formHeaderSize)), 
void 0 !== e.formRight && (t.formRight = e.formRight), void 0 !== e.formBottom) && (t.formBottom = e.formBottom), 
i.push(t);
}), delete this.fieldsFormOrder, Client.eleMap.editm.editProxy?.appCmd([ {
id: this.id,
c: "editDone",
newStruct: i,
reorder: s,
formstructure: this.formStruct
} ]);
a = Client.eleMap[this.formContainerConf.id]?.getRootObject();
a && (a.scrollTop = n);
}
}, Client.IdfPanel.prototype.getPanelGridStructure = function() {
return {
listGridRows: this.listGridRows,
formGridRows: this.formGridRows,
panrect: Client.eleMap[this.mainContainerConf?.id]?.getRootObject()?.getBoundingClientRect()
};
}, Client.IdfPanel.prototype.editorStartRealizing = function() {
this.realizing = !0, this.fields.forEach(e => e.realizing = !0), this.groups.forEach(e => e.realizing = !0), 
this.pages.forEach(e => e.realizing = !0);
}, Client.IdfPanel.prototype.editorCompleteRealize = function() {
this.realizing = !1, this.fields.forEach(e => e.realizing = !1), this.groups.forEach(e => e.realizing = !1), 
this.pages.forEach(e => e.realizing = !1), this.updateObjects({
structure: !0,
calcLayout: !0
});
}, Client.IdfPanel.prototype.insertBefore = function(e) {
if (Client.mainFrame.isEditing()) this.tempWChildren = this.tempWChildren || {
children: []
}, this.tempWChildren.children.push(e.child), e.sib && (e.child.sib = e.sib), delete e.child, 
this.editInsertTimeout && clearTimeout(this.editInsertTimeout), this.editInsertTimeout = setTimeout(() => {
this.createChildren(this.tempWChildren), this.restoreRowSelectors(), this.clientGeneratedFormStructure && (delete this.formStruct, 
this.groups.forEach(e => delete e.formStruct)), delete this.tempWChildren, delete this.editInsertTimeout, 
this.updateStructure(), this.updateElement({
totalRows: Client.IdfPanel.maxReusableRows,
data: {},
dataBlockStart: 1,
dataBlockEnd: Client.IdfPanel.maxReusableRows,
activePage: this.activePage
});
}, 30); else {
if ([ "IdfPage", "IdfGroup" ].includes(e.child.c) && e.child.children) {
for (var t of e.child.children) this.insertBefore({
child: t
});
delete e.child.children;
}
e = Client.Element.prototype.insertBefore.call(this, e);
e instanceof Client.IdfField && e.isShown() && e.isInList() && this.intersectionObserver?.observe(Client.eleMap[e.listContainerId].getRootObject()), 
this.fields = this.elements.filter(e => e instanceof Client.IdfField), this.groups = this.elements.filter(e => e instanceof Client.IdfGroup), 
this.pages = this.elements.filter(e => e instanceof Client.IdfPage), this.restoreRowSelectors();
}
}, Client.IdfPanel.prototype.updateStructureForEdit = function(e, t, i, n) {
let l = Client.eleMap[t?.substring(4)]?.domObj.fid, a = function(i, n) {
if (i) for (let t = 0; t < i.length; t++) {
let s = i[t];
s.cols.forEach(e => a(e.rows, n));
var o = s.fields.findIndex(e => e.id === n.id);
if (0 <= o) {
s.fields.splice(o, 1);
let e;
o = s.cols.findIndex(e => void 0 !== e.fields.find(e => e.id === n.id));
if (0 <= o && (e = s.cols.splice(o, 1)), n instanceof Client.IdfGroup && e && e[0] && (n.formStruct = e[0].rows), 
0 === s.fields.length && s.config.fid !== l && i.splice(t, 1), 0 < s.fields.length) {
let i = Math.floor(100 / s.fields.length), n = 100 % s.fields.length, t = [];
s.cols.forEach(e => t.push(...e.fields)), t.forEach((e, t) => {
e = Client.eleMap[e.id];
e instanceof Client.IdfField && (e.formWidth = "", e.formWidthPerc = i + (t === s.fields.length - 1 ? n : 0), 
e.formResizeWidth = Client.IdfPanel.resizeModes.none, e.formLeft = 20, e.formRight = t === s.fields.length - 1 ? "20" : "");
});
}
break;
}
}
};
if (l || "NEW" === t) {
for (var s = [], o = [ ...e ]; 0 < o.length; ) {
var r = o[0], d = (o.splice(0, 1), []), h = (d.push(r), r.getWidgetFormRow());
for (let e = 0; e < o.length; e++) {
var c = o[e];
c.getWidgetFormRow() === h && (d.push(c), o.splice(e, 1), e--);
}
s.push(d);
}
for (let e = s.length - 1; 0 <= e; e--) {
var p = s[e];
p.forEach(e => a(this.formStruct, e)), this.addFieldsIntoStructRow(this.formStruct, p, t, i, n), 
p.forEach(e => {
e.formTop = 20;
});
}
this.formStruct.forEach((e, i) => {
let n = [];
e.cols.forEach(e => n.push(...e.fields)), n.forEach((e, t) => {
e = Client.eleMap[e.id];
e && (e.formBottom = i === this.formStruct.length - 1 ? "20" : "", e.formRight = t === n.length - 1 ? "20" : "");
}), e.cols.forEach(s => {
s.rows.forEach((i, n) => {
i.fields.forEach((e, t) => {
e = Client.eleMap[e.id];
e && (e.formBottom = n === s.rows.length - 1 ? "20" : "", e.formRight = t === i.fields.length - 1 ? "20" : "", 
e.formTop = 0 === n ? 10 : 20);
});
});
});
});
}
}, Client.IdfPanel.prototype.addFieldsIntoStructRow = function(r, d, s, o, h) {
if (r) {
let t = -1, i = 0, e = 1, n = Client.eleMap[s?.substring(4)]?.domObj.fid, l = Client.eleMap[o?.substring(4)]?.domObj.fid;
"NEW" === s && (n = r[r.length - 1]?.config.fid, h = e);
for (let e = 0; e < r.length; e++) {
let a = r[e];
if (a.config.fid === n) {
if (h === i) {
d.forEach(e => {
var t = e instanceof Client.IdfGroup, i = {
fields: [ {
id: e.id
} ],
rows: [],
visible: !0,
config: {
c: "IonCol",
className: "panel-structure-col",
fid: Client.Utils.generateRandomId()
}
}, t = (t && (i.rows = e.formStruct, i.isGroup = !0, i.fields[0].isGroup = !0, i.rect = {}), 
a.cols.findIndex(e => e.config.fid === l));
l && 0 <= t ? a.cols.splice(t + 1, 0, i) : a.cols.push(i), a.fields.push({
id: e.id
});
});
let i = Math.floor(100 / a.fields.length), n = 100 % a.fields.length, t = [];
a.cols.forEach(e => t.push(...e.fields));
let s, o;
t.forEach((e, t) => {
e = Client.eleMap[e.id];
e instanceof Client.IdfField && (e.formWidth = "", e.formWidthPerc = i + (t === a.fields.length - 1 ? n : 0), 
e.formResizeWidth = Client.IdfPanel.resizeModes.none, e.formLeft = 20, e.formRight = t === a.fields.length - 1 ? "20" : "", 
e.groupId && (s = e.groupId), e.group) && (o = e.group);
}), d.forEach(e => {
var t;
s && !e.groupId ? (e.groupId = s, (e.group = o).fields.push(e)) : s && e.groupId && e.groupId !== s ? (0 <= (t = e.group.fields.indexOf(e)) && e.group.splice(t, 1), 
e.groupId = s, (e.group = o).fields.push(e)) : e.groupId && !s && (0 <= (t = e.group.fields.indexOf(e)) && e.group.fields.splice(t, 1), 
delete e.groupId, delete e.group);
});
} else {
let s = {
fields: [],
cols: [],
config: {
c: "IonRow",
className: "panel-structure-row",
noWrap: !0,
fid: Client.Utils.generateRandomId()
}
}, o = Math.floor(100 / d.length), l = 100 % d.length;
d.forEach((e, t) => {
var i = e instanceof Client.IdfGroup, n = (s.fields.push({
id: e.id
}), {
fields: [ {
id: e.id
} ],
rows: [],
visible: !0,
config: {
c: "IonCol",
className: "panel-structure-col",
fid: Client.Utils.generateRandomId()
}
});
s.cols.push(n), i ? (n.rows = e.formStruct, n.isGroup = !0, n.fields[0].isGroup = !0, 
n.rect = {}) : (e.formWidth = "", e.formWidthPerc = o + (t === d.length - 1 ? l : 0), 
(i = Client.eleMap[a.fields[0]?.id]?.group) && !e.groupId ? (e.groupId = i.id, (e.group = i).fields.push(e)) : i && e.groupId && e.group !== i ? (0 <= (n = e.group.fields.indexOf(e)) && e.group.fields.splice(n, 1), 
e.groupId = i.id, (e.group = i).fields.push(e)) : e.groupId && !i && (0 <= (t = e.group.fields.indexOf(e)) && e.group.fields.splice(t, 1), 
delete e.groupId, delete e.group));
}), r.splice(h === t ? e : e + 1, 0, s);
}
break;
}
a.cols.forEach(e => this.addFieldsIntoStructRow(e.rows, d, s, o, h));
}
}
}, Client.IdfPanel.prototype.getMarginTopInRow = function(t) {
var i = t.getBoundingClientRect();
let n = 1e4;
for (let e = 0; e < t.childNodes.length; e++) {
var s = t.childNodes[e].getBoundingClientRect().top - i.top;
s < n && (n = s);
}
return n;
}, Client.IdfPanel.prototype.getCloudFormStructure = function(e) {
var t = e ? Client.eleMap[e.id] : void 0;
if (t?.formStruct) return t.formStruct;
if (this.formStruct) return this.completeFormStructure(this.formStruct);
let i = [];
t ? i = t.fields : (this.fields.forEach(e => {
e.group || i.push(e);
}), (this.groups || []).forEach(e => {
i.push(e);
}));
var n = [];
for (let e = 0; e < i.length; e++) {
var s, o, l = i[e], a = l instanceof Client.IdfGroup;
(a || l.isShown(!0)) && ((s = {}).fields = [ {
id: l.id
} ], s.cols = [], s.config = {
c: "IonRow",
className: "panel-structure-row",
noWrap: !0,
fid: Client.Utils.generateRandomId()
}, n.push(s), (o = {}).fields = [ {
id: l.id
} ], o.rows = [], o.rect = {}, o.visible = !0, o.config = {
c: "IonCol",
className: "panel-structure-col",
fid: Client.Utils.generateRandomId()
}, s.cols.push(o), a) && (o.isGroup = !0, o.fields[0].isGroup = !0, o.rows = this.getCloudFormStructure({
id: l.id
}));
}
return t ? t.formStruct = n : this.formStruct = n, this.clientGeneratedFormStructure = !0, 
e ? n : this.completeFormStructure(n);
}, Client.IdfPanel.prototype.completeFormStructure = function(e) {
if (e) {
e = JSON.parse(JSON.stringify(e));
let s = n => {
n.conf = this.createElementConfig(n.config), n.cols.forEach((t, e) => {
var i;
t.conf = this.createElementConfig(t.config), t.conf.parentRowId = n.conf.id, n.conf.children.push(t.conf), 
1 === t.fields?.length && (i = Client.eleMap[t.fields[0].id]) && !i.isShown(!0) && n.cols.splice(e, 1), 
t.rows?.forEach(e => s(e));
for (let e = 0; e < t.rows.length; e++) t.conf.children.push(t.rows[e].conf);
});
};
return e.forEach(e => s(e)), e;
}
}, Client.IdfPanel.prototype.removeFieldFromCloudRow = function(e, t) {
if (this.formStruct && t.showInForm) {
var i = e || this.formStruct;
for (let e = 0; e < i.length; e++) {
var n = i[e].fields.findIndex(e => e.id === t.id);
if (-1 !== n) {
this.removeFieldFromCloudCol(i[e], t), i[e].fields.splice(n, 1), 0 === i[e].fields.length && i.splice(e, 1);
break;
}
if (t.groupId && -1 !== i[e].fields.findIndex(e => e.id === t.groupId)) {
this.removeFieldFromCloudCol(i[e], t);
break;
}
}
}
}, Client.IdfPanel.prototype.removeFieldFromCloudCol = function(e, t) {
var i = e.cols;
for (let e = 0; e < i.length; e++) if (-1 !== i[e].fields.findIndex(e => e.id === t.id || e.id === t.groupId)) {
0 < i[e].rows.length ? this.removeFieldFromCloudRow(i[e].rows, t) : i.splice(e, 1);
break;
}
}, Client.IdfPanel.prototype.restoreRowSelectors = function() {
if (this.showRowSelector) {
let i = this.getFirstInListField();
var e = this.fields.find(e => e.isShown() && e.values.find(e => void 0 !== e?.rowSelectorId));
e && i !== e ? e.values.forEach((e, t) => {
i.values[t] ? (i.values[t].rowSelectorId = e.rowSelectorId, i.values[t].rowsGroupHeaderId = e.rowsGroupHeaderId) : 0 === t && (Client.eleMap[e.rowSelectorId]?.close(!0), 
Client.eleMap[e.rowsGroupHeaderId]?.close(!0)), delete e.rowSelectorId, delete e.rowsGroupHeaderId;
}) : !e && i && i.values.forEach((e, t) => {
var i;
e && (t = Client.eleMap[this.rows[t]?.id]) && (i = e.createRowSelectorConfig(), 
t.insertBefore({
child: i,
sib: e.listContainerId
}), e = e.createRowsGroupHeaderConfig(), t.insertBefore({
child: e,
sib: i.id
}));
});
}
}, Client.IdfPanel.prototype.addCustomCommand = function(e) {
var t = this.customCommands.length;
let i = 18 + t;
8 <= t && (i = 37 + t - 8);
t = this.createElementConfig({
c: "IonButton",
className: "generic-btn panel-toolbar-btn custom-btn" + (t + 1),
events: [ "onClick" ],
customid: this.id.replace(/:/g, "_") + "_custom" + t
});
this.customButtonsConf.push(t), this.customCommands.push(e), this.realizing ? this.toolbarZonesConfig[this.getCommandZone(i)].children.push(t) : ((e = Client.eleMap[this.toolbarZonesConfig[this.getCommandZone(i)].id]).updateElement({
visible: !0
}), e.insertBefore({
child: t
}), this.updateToolbar());
}, Client.IdfPanel.prototype.updatePagesFields = function() {
let s = this;
this.pages.forEach((t, e) => {
t.index = e, t.fields = [];
for (let e = 0; e < s.fields.length; e++) {
var i = s.fields[e];
i.pageIndex === t.index && (i.page = t).fields.push(i);
}
t.groups = [];
for (let e = 0; e < s.groups.length; e++) {
var n = s.groups[e];
n.pageIndex === t.index && (n.page = t).groups.push(n);
}
});
}, Client.IdfPanel.prototype.getChildFlexGrow = function(e) {
let t = !!e.listWidthPerc, i = [], n = [];
e.group ? i = e.group.fields.filter(e => e.canAdaptWidth() && e.isVisible() && (t ? !!e.listWidthPerc : !e.listWidthPerc)) : (i = this.fields.filter(e => e.canAdaptWidth() && !e.group && e.isVisible() && (t ? !!e.listWidthPerc : !e.listWidthPerc)), 
n = this.groups.filter(e => e.canAdaptWidth() && e.isVisible() && (t ? !!e.listWidthPerc : !e.listWidthPerc)));
var s = i.concat(n);
let o = [], l = (s.forEach(e => o.push(e.listWidthPerc || e.listWidth)), 0);
return l = e.canAdaptWidth() ? (t ? e.listWidthPerc : e.listWidth) / Math.min(...o) : l;
}, Client.IdfPanel.prototype.getToolbarHeight = function() {
return this.onlyContent ? 0 : this.toolbarHeight || (this.smallIcons ? 40 : 54);
}, Client.IdfPanel.prototype.getPagesContainerHeight = function() {
return this.pagesContainerHeight || 0;
}, Client.IdfPanel.prototype.close = function(e, t) {
clearTimeout(this.firstScrollTimer), clearTimeout(this.editInsertTimeout), delete this.firstScrollTimer, 
delete this.editInsertTimeout, this.resizeObserver?.disconnect(), delete this.resizeObserver, 
this.intersectionObserver?.disconnect(), delete this.intersectionObserver, Client.IdfFrame.prototype.close.call(this, e, t);
}, Client.IdfPanel.prototype.hiliteDelete = function(e) {
if (e) {
e = (e, t) => {
e && (e = this.getRow(t)) && e.getRootObject().classList.add("deleting-row");
};
this.showMultipleSelection ? this.multiSelStatus.forEach(e) : e(!0, this.getActiveRowIndex());
} else for (var t = Client.eleMap[this.gridConf?.id]?.getRootObject().getElementsByClassName("deleting-row"); 0 < t?.length; ) t[0].classList.remove("deleting-row");
}, Client.IdfPanel.prototype.updateVisibleAggregateFields = function(e, t) {
var i = this.visibleAggregateFields.indexOf(e);
t || -1 !== i ? t && -1 !== i && this.visibleAggregateFields.splice(i, 1) : this.visibleAggregateFields.push(e.id);
}, Client.IdfPanel.prototype.reparentFieldValueElements = function(e, t) {
if (e) {
e.parentWidget instanceof Client.IdfFieldValue && (e.parentWidget = t);
var i = e.elements || [];
for (let e = 0; e < i.length; e++) this.reparentFieldValueElements(i[e], t);
}
}, Client.IdfPanel.prototype.checkWrapRow = function() {
let t = 1;
var i = {};
for (let e = 0; e < this.fields.length; e++) this.fields[e].rowBreakBefore && t++, 
i[this.fields[e].id] = t;
1 < t ? (this.numSubRows = t, this.wrapRows = i) : (this.numSubRows = 1, this.wrapRows = []);
}, Client.IdfPanel.prototype.updateSubRowsWidth = function() {
if (this.hasListLayout()) {
var e = Client.eleMap[this.gridConf.id].getRootObject();
if (!(1 === this.numSubRows || e.scrollWidth <= e.clientWidth)) {
var i = Client.eleMap[this.gridHeaderConf.id];
for (let e = 0; e < this.numSubRows; e++) i.elements[0].elements[e].getRootObject().style.width = "";
if (this.qbeRowConf) {
var n = Client.eleMap[this.qbeRowConf.id];
for (let e = 0; e < this.numSubRows; e++) n.elements[0].elements[e].getRootObject().style.width = "";
}
for (let e = this.firstRow; e <= this.lastRow; e++) {
var s = this.getRow(e);
for (let e = 0; e < this.numSubRows; e++) s.elements[0].elements[e].getRootObject().style.width = "";
}
let t = 0;
for (let e = 0; e < this.numSubRows; e++) t = Math.max(t, i.elements[0].elements[e].getRootObject().scrollWidth);
for (let e = 0; e < this.numSubRows; e++) i.elements[0].elements[e].getRootObject().scrollWidth < t && (i.elements[0].elements[e].getRootObject().style.width = t + "px");
if (this.qbeRowConf) {
var o = Client.eleMap[this.qbeRowConf.id];
for (let e = 0; e < this.numSubRows; e++) o.elements[0].elements[e].getRootObject().scrollWidth < t && (o.elements[0].elements[e].getRootObject().style.width = t + "px");
}
for (let e = this.firstRow; e <= this.lastRow; e++) {
var l = this.getRow(e);
for (let e = 0; e < this.numSubRows; e++) l.elements[0].elements[e].getRootObject().scrollWidth < t && (l.elements[0].elements[e].getRootObject().style.width = t + "px");
}
}
}
}, Client.IdfPanel.prototype.getClientState = function(e) {
var t, i = {
id: this.id
};
i.activePage = this.activePage, i.layout = this.layout, this.formContainerConf && (t = Client.eleMap[this.formContainerConf.id]?.getRootObject(!0), 
i.formScrollTop = t?.scrollTop || 0, i.formScrollLeft = t?.scrollLeft || 0), this.listContainerConf && (t = Client.eleMap[this.listContainerConf.id]?.getRootObject(!0), 
i.listScrollTop = t?.scrollTop || 0, i.listScrollLeft = t?.scrollLeft || 0), e.push(i);
}, Client.IdfPanel.prototype.restoreClientState = function(e) {
var t;
e.id === this.id && (this.updateElement(e), (t = Client.eleMap[this.formContainerConf?.id]?.getRootObject(!0)) && (t.scrollLeft = e.formScrollLeft || 0, 
t.scrollTop = e.formScrollTop || 0), t = Client.eleMap[this.listContainerConf?.id]?.getRootObject(!0)) && (t.scrollLeft = e.listScrollTop || 0, 
t.scrollTop = e.listScrollLeft || 0);
}, Client.IdfPanel.prototype.updateViewportListFields = function(e, t) {
var i;
e && (i = this.viewportListFields.includes(e.id), t && !i ? (this.viewportListFields.push(e.id), 
e.firstUpdate || (e.firstUpdate = !0, this.canUseRowQbe() && e.updateControls({
all: !0
}, {
index: 0
}), e.updateControls({
all: !0
}, {
from: this.firstRow,
to: this.lastRow
}), this.updateOutViewportListFields(!0))) : !t && i && this.viewportListFields.splice(this.viewportListFields.indexOf(e.id), 1));
}, Client.IdfPanel.prototype.updateOutViewportListFields = function(e) {
cancelAnimationFrame(this.outViewportRAF), e && (delete this.lowerFieldsBound, delete this.upperFieldsBound), 
0 === this.lowerFieldsBound && this.upperFieldsBound === this.fields.length || (this.outViewportRAF = requestAnimationFrame(() => {
this.lowerFieldsBound || this.upperFieldsBound || (n = (i = this.fields.indexOf(Client.eleMap[this.viewportListFields[0]])) + (this.viewportListFields.length - 1), 
this.lowerFieldsBound = Math.max(0, i - 1), this.upperFieldsBound = Math.min(this.fields.length - 1, n + 1));
var e = this.fields.length;
let t;
var i = Math.min(this.lowerFieldsBound, 10), n = Math.min(e - this.upperFieldsBound, 10);
let s = upperUpdatable = 5;
for (i < 5 ? (s = i, upperUpdatable = Math.min(10 - s, n)) : n < 5 && (upperUpdatable = n, 
s = Math.min(10 - upperUpdatable, i)); 0 < this.lowerFieldsBound && 0 < s; ) (t = this.fields[this.lowerFieldsBound]).updateControls({
all: !0
}, {
from: this.firstRow,
to: this.lastRow,
force: !0
}), s--, this.lowerFieldsBound--;
for (;this.upperFieldsBound < e && 0 < upperUpdatable; ) (t = this.fields[this.upperFieldsBound]).updateControls({
all: !0
}, {
from: this.firstRow,
to: this.lastRow,
force: !0
}), upperUpdatable--, this.upperFieldsBound++;
this.updateOutViewportListFields();
}));
}, Client.IdfPanel.prototype.getNewRows = function() {
let t = 0;
for (let e = this.getMaxRows(!0); 0 < e && this.isNewRow(e); e--) t++;
return t;
}, Client.IdfPanel.prototype.getExistingRows = function() {
let e = 0;
if (this.hasGroupedRows()) for (var t in e = 0, this.rows) e += "0" !== t && this.rows[t] && !this.isRowDetached(t) ? 1 : 0; else this.firstRow && this.lastRow && (e = this.lastRow - this.firstRow + 1);
return e;
}, Client.IdfPanel.prototype.getGroupedActualRow = function() {
return this.groupedRowsRoot.realIndexToGroupedIndex(this.getActiveRowIndex(!0)) - this.groupedActualPosition;
}, Client.IdfPanel.prototype.getGroupedActualPosition = function() {
let t = this.groupedRowsRoot.realIndexToGroupedIndex(this.actualPosition);
if (!this.groupedRowsRoot.isRowVisible(t)) for (let e = t; 1 <= e; e--) if (this.groupedRowsRoot.isRowVisible(e) && this.getRowsGroupByIndex(e)) {
t = e;
break;
}
return t;
}, Client.IdfPanel.handleListTabOrder = function(e) {
let t = e.children.filter(e => "IdfField" === e.c), i = (t.sort((e, t) => e.listTabOrderIndex - t.listTabOrderIndex), 
0);
e.children = e.children.map(e => "IdfField" === e.c ? t[i++] : e);
}, Client || {}), Client = (Client.IdfPage = function(t, i, e) {
i.addPage(this), this.fields = [];
for (let e = 0; e < i.fields.length; e++) {
var n = i.fields[e];
n.pageIndex === t.index && (n.page = this).fields.push(n);
}
this.groups = [];
for (let e = 0; e < i.groups.length; e++) {
var s = i.groups[e];
s.pageIndex === t.index && (s.page = this).groups.push(s);
}
t = Object.assign({
enabled: !0,
visible: !0
}, t), Client.Widget.call(this, t, i, e);
}, Client.IdfPage.prototype = new Client.Widget(), Client.IdfPage.transPropMap = {
flg: "flags",
img: "image",
pst: "pageStyle",
ind: "index"
}, Client.IdfPage.convertPropValues = function(e) {
for (var t in e = e || {}) switch (t) {
case Client.IdfPage.transPropMap.flg:
case Client.IdfPage.transPropMap.pst:
case Client.IdfPage.transPropMap.ind:
e[t] = parseInt(e[t]);
}
}, Client.IdfPage.prototype.realize = function(e, t, i) {
var n = this.createElementConfig({
c: "Container",
className: "panel-page",
events: [ "onClick" ],
children: [ {
c: "IonText",
type: "span",
className: "panel-page-text"
} ]
}), s = Client.eleMap[this.parent.pagesContainerConf.id];
this.mainObjects.push(i.createElement(n, s, i)), this.container = this.getRootObject(!0), 
this.textObj = this.container.elements[0];
}, Client.IdfPage.prototype.updateElement = function(e) {
var t, i;
Client.Widget.prototype.updateElement.call(this, e = e || {}), void 0 !== e.flags && (this.flags = e.flags, 
(t = !!(1 & e.flags)) !== this.enabled && (e.enabled = t), (t = !!(2 & e.flags)) !== this.visible) && (e.visible = t);
let n = !1;
for (i in e) {
var s = e[i];
switch (i) {
case "enabled":
this.enabled = s;
break;

case "visible":
this.setVisible(s);
break;

case "tooltip":
case "caption":
n = !0;
break;

case "image":
this.setImage(s);
break;

case "pageStyle":
case "style":
this.setPageStyle(s);
break;

case "badge":
this.setBadge(s);
break;

case "isActive":
this.setActive(s);
break;

case "className":
this.oldClassName = this.className, this.className = s, this.updateClassName({
oldClassName: this.oldClassName,
newClassName: this.className
});
}
}
if (n && this.updateCaption(), void 0 === e.visible || this.realizing || this.parent.calcLayout(), 
void 0 !== e.enabled) for (let e = 0; e < this.fields.length; e++) this.fields[e].updateControls(), 
this.fields[e].applyVisualStyle();
}, Client.IdfPage.prototype.setVisible = function(e) {
this.visible = e, Client.Widget.updateObject(this.getRootObject(!0), {
visible: this.visible
});
}, Client.IdfPage.prototype.setImage = function(e) {
this.image = e;
var t, e = this.getRootObject(!0);
this.image ? (this.imageObj || (t = this.createElementConfig({
c: "IonButton",
className: "generic-btn small panel-page-image"
}), this.imageObj = e.insertBefore({
child: t,
sib: this.textObj.id
})), Client.Widget.setIconImage({
image: this.image,
el: this.imageObj
})) : this.imageObj && (e.removeChild(this.imageObj), delete this.imageObj);
}, Client.IdfPage.prototype.setPageStyle = function(e) {
Client.mainFrame.isIDF ? (Client.Widget.updateElementClassName(this.container, "panel-page-" + this.pageStyle, !0), 
this.pageStyle = e, Client.Widget.updateElementClassName(this.container, "panel-page-" + this.pageStyle)) : (this.style = this.style || {}, 
Client.Widget.updateCustomStyle({
styleToUpdate: this.style,
newStyle: e
}), Client.Widget.updateStyle(this.container, {}, this.style));
}, Client.IdfPage.prototype.setBadge = function(e) {
var t, i = this.getRootObject(!0);
this.badge ? this.badgeObj ? Client.Widget.updateObject(this.badgeObj, {
innerText: this.badge
}) : (t = this.createElementConfig({
c: "IonBadge",
className: "generic-badge internal",
innerText: this.badge
}), this.badgeObj = i.insertBefore({
child: t
})) : this.badgeObj && (i.removeChild(this.badgeObj), delete this.badgeObj);
}, Client.IdfPage.prototype.setActive = function(e) {
this.isActive = e, Client.Widget.updateElementClassName(this.getRootObject(!0), "active", !this.isActive);
}, Client.IdfPage.prototype.onEvent = function(e) {
var t = Client.Widget.prototype.onEvent.call(this, e);
return "onClick" === e.id && (e.page = {
id: this.id,
index: this.index
}, t.push(...this.parent.handlePageClick(e))), t;
}, Client.IdfPage.prototype.updateCaption = function() {
var e = this.tooltip ? Client.Widget.getHTMLTooltip(this.caption, this.tooltip) : null;
e && (e.placement = "bottom"), Client.Widget.updateObject(this.getRootObject(!0), {
tooltip: e
}), Client.Widget.updateObject(this.textObj, {
innerHTML: Client.Widget.getHTMLForCaption(this.caption) || ""
});
}, Client.IdfPage.prototype.isVisible = function() {
return this.visible && this.isActive;
}, Client.IdfPage.prototype.isEnabled = function() {
return this.enabled;
}, Client.IdfPage.prototype.insertBefore = function(e) {
if (Client.mainFrame.isEditing()) {
e.sib && (e.child.sib = e.sib);
var t = this.parent;
t.createChildren({
children: [ e.child ]
}), t.restoreRowSelectors(), this.fields = [];
for (let e = 0; e < t.fields.length; e++) {
var i = t.fields[e];
i.pageIndex === this.index && (i.page = this).fields.push(i);
}
this.groups = [];
for (let e = 0; e < t.groups.length; e++) {
var n = t.groups[e];
n.pageIndex === this.index && (n.page = this).groups.push(n);
}
t.updateStructure(), t.updateElement({
totalRows: Client.IdfPanel.maxReusableRows,
data: {},
dataBlockStart: 1,
dataBlockEnd: Client.IdfPanel.maxReusableRows
});
} else Client.Element.prototype.insertBefore.call(this, e);
}, Client.IdfPage.prototype.removeChild = function(e) {
try {
this.getRootObject(!0).removeChild(Client.eleMap[e.id].getRootObject(!0));
for (var t = e.id, i = 0; i < this.fields.length; i++) if (this.fields[i].id === t) {
this.fields[i].close(!0, e.triggerAnimation), this.fields.splice(i, 1);
break;
}
} catch (e) {}
Client.Element.prototype.removeChild.call(this, e);
}, Client || {}), Client = (Client.IdfGroup = function(s, o, e) {
o.addGroup(this), this.listContainersConf = [];
let t = !0;
this.fields = [];
for (let e = 0; e < o.fields.length; e++) {
var i = o.fields[e];
i.groupId === s.id && ((i.group = this).fields.push(i), t = t && i.isInList());
}
if (void 0 === s.formTop && void 0 === s.formLeft && Client.mainFrame.isIDF) {
let e = 0, t = 0, i = 0, n = 0;
var l = (this.parent = o).getFieldsRect(!0, this);
0 !== l.length && (e = l[0].rect.top - (s.formHeaderPosition !== Client.IdfGroup.headerPositions.NONE ? 15 : 0), 
t = l[l.length - 1].rect.bottom, l.sort((e, t) => e.rect.left - t.rect.left), i = l[0].rect.left, 
l.sort((e, t) => t.rect.right - e.rect.right), n = l[0].rect.right), s.formLeft = i, 
s.formTop = e, s.formWidth = n - i, s.formHeight = t - e;
}
s = Object.assign({
listHeaderPosition: Client.IdfGroup.headerPositions.INNER,
formHeaderPosition: Client.mainFrame.isIDF ? Client.IdfGroup.headerPositions.INNER : Client.IdfGroup.headerPositions.OUTER,
inList: t,
enabled: !0,
visible: !0,
collapsible: !Client.mainFrame.isIDF,
collapsed: !1,
pageIndex: 0,
collapseAnimationDef: Client.IdfWebEntryPoint.getAnimationDefault("group")
}, s), Client.mainFrame.isIDF || "string" != typeof s.listWidth || (0 < s.listWidth.indexOf("%") ? (s.listWidthPerc = parseInt(s.listWidth.replace("%", "")), 
delete s.listWidth) : s.listWidth = parseInt(s.listWidth)), this.orgListWidth = s.listWidth, 
this.orgListHeight = s.listHeight, this.orgListLeft = s.listLeft, this.orgListTop = s.listTop, 
this.orgFormWidth = s.formWidth, this.orgFormHeight = s.formHeight, this.orgFormLeft = s.formLeft, 
this.orgFormTop = s.formTop, this.listHeaderColumnStyle = {}, this.listColumnStyles = [], 
this.listAggregateColumnStyle = {}, this.outListColumnStyle = {}, this.formColumnStyle = {}, 
this.listHeaderStyle = {}, this.outListHeaderStyle = {}, this.formHeaderStyle = {}, 
this.listHeaderCustomStyle = {}, this.formHeaderCustomStyle = {}, this.formCustomStyle = {}, 
Client.Widget.call(this, s, o, e);
}, Client.IdfGroup.prototype = new Client.Widget(), Client.IdfGroup.transPropMap = {
flg: "flags",
img: "image",
lle: "listLeft",
lto: "listTop",
lwi: "listWidth",
lhe: "listHeight",
fle: "formLeft",
fto: "formTop",
fwi: "formWidth",
fhe: "formHeight",
pag: "pageIndex",
lhp: "listHeaderPosition",
fhp: "formHeaderPosition",
hhe: "headerHeight",
hwi: "headerWidth",
inl: "inList",
clp: "collapsible",
col: "collapsed",
mfl: "listMovedFields",
mff: "formMovedFields",
cla: "collapseAnimationDef"
}, Client.IdfGroup.headerPositions = {
NONE: 1,
BORDER: 2,
OUTER: 3,
INNER: 4
}, Client.IdfGroup.headerSize = 36, Client.IdfGroup.convertPropValues = function(e) {
for (var t in e = e || {}) switch (t) {
case Client.IdfGroup.transPropMap.flg:
case Client.IdfGroup.transPropMap.lwi:
case Client.IdfGroup.transPropMap.lhe:
case Client.IdfGroup.transPropMap.lle:
case Client.IdfGroup.transPropMap.lto:
case Client.IdfGroup.transPropMap.fwi:
case Client.IdfGroup.transPropMap.fhe:
case Client.IdfGroup.transPropMap.fle:
case Client.IdfGroup.transPropMap.fto:
case Client.IdfGroup.transPropMap.pag:
case Client.IdfGroup.transPropMap.lhp:
case Client.IdfGroup.transPropMap.fhp:
case Client.IdfGroup.transPropMap.hhe:
case Client.IdfGroup.transPropMap.hwi:
e[t] = parseInt(e[t]);
break;

case Client.IdfGroup.transPropMap.inl:
case Client.IdfGroup.transPropMap.clp:
case Client.IdfGroup.transPropMap.col:
case Client.IdfGroup.transPropMap.mfl:
case Client.IdfGroup.transPropMap.mff:
e[t] = "1" === e[t];
}
}, Client.IdfGroup.prototype.createElementsConfig = function() {
var e = {};
return this.isShown() && (e.list = this.createContainerConfig(), e.aggregate = this.createAggregateContainerConfig()), 
this.isShown(!0) && (e.form = this.createContainerConfig(!0)), e;
}, Client.IdfGroup.prototype.createContainerConfig = function(e) {
let t, i, n;
var s, o;
return !e && this.isInList() ? (o = this.parent.getHeaderOffset() ? " offset-col" : "", 
this.listContainerConf = this.createElementConfig({
c: "IonCol",
className: "panel-list-col panel-list-group" + o
}), o = this.createElementConfig({
c: "IonRow",
className: "panel-list-group-header"
}), this.listContainerConf.children.push(o), s = this.createElementConfig({
c: "IonCol",
className: "panel-list-col"
}), o.children.push(s), n = this.createElementConfig({
c: "IonText",
type: "span"
}), s.children.push(n), this.listContentConf = this.createElementConfig({
c: "IonRow",
className: "panel-list-group-content"
}), this.listContainerConf.children.push(this.listContentConf), this.listHeaderId = o.id, 
this.listHeaderColId = s.id, this.listHeaderTextId = n.id, this.listContentId = this.listContentConf.id, 
t = this.listContainerConf) : (i = this.createElementConfig({
c: "Container",
className: "panel-group-header",
events: [ "onClick" ]
}), o = this.createElementConfig({
c: "IonButton",
className: "group-exp-icon"
}), n = this.createElementConfig({
c: "IonText",
type: "span"
}), i.children.push(o), i.children.push(n), (t = this.createElementConfig({
c: "Container",
className: "panel-group-content collapsible-container"
})).animations = [ {
trigger: "animation",
prop: "collapseElement",
duration: 0 === this.collapseAnimationDef.indexOf("none") ? 0 : 250
}, {
trigger: "animation",
prop: "expandElement",
duration: 0 === this.collapseAnimationDef.indexOf("none") ? 0 : 250
} ], e ? (this.formHeaderId = i.id, this.formCollapseId = o.id, this.formHeaderTextId = n.id, 
this.formContainerId = t.id) : (this.outListHeaderId = i.id, this.outListCollapseId = o.id, 
this.outListHeaderTextId = n.id, this.outListContainerId = t.id)), {
headerConf: i,
containerConf: t
};
}, Client.IdfGroup.prototype.createAggregateContainerConfig = function() {
if (this.isInList()) return this.aggregateContainerConf = this.createElementConfig({
c: "IonCol",
className: "panel-list-col panel-list-group"
}), this.aggregateRowConf = this.createElementConfig({
c: "IonRow",
className: "panel-list-group-content"
}), this.aggregateContainerConf.children.push(this.aggregateRowConf), this.aggregateRowId = this.aggregateRowConf.id, 
this.aggregateContainerConf;
}, Client.IdfGroup.prototype.createListConfig = function(e) {
this.listColumnStyles[e] || (this.listColumnStyles[e] = Object.assign({}, this.listHeaderColumnStyle), 
this.listColumnStyles[e].height = "");
var t = this.parent.getListRowOffset() ? " offset-col" : "", t = this.createElementConfig({
c: "IonCol",
className: "panel-list-col panel-list-group" + t,
style: this.listColumnStyles[e]
}), i = this.createElementConfig({
c: "IonRow",
className: "panel-list-group-content"
});
return t.children.push(i), this.listContainersConf[e] = t, this.listContainersConf[e];
}, Client.IdfGroup.prototype.realize = function(e, t, i) {
var n, s = this.createElementsConfig();
let o, l;
s.list && ((n = s.list.headerConf) && (o = i.createElement(n, t, i), this.mainObjects.push(o)), 
l = i.createElement(s.list.containerConf, t, i), this.mainObjects.push(l), s.aggregate) && this.mainObjects.push(i.createElement(s.aggregate, t, i)), 
s.form && (o = i.createElement(s.form.headerConf, t, i), this.mainObjects.push(o), 
l = i.createElement(s.form.containerConf, t, i), this.mainObjects.push(l));
}, Client.IdfGroup.prototype.updateElement = function(e) {
let t, i, n, s, o, l, a;
var r;
if (Client.Widget.prototype.updateElement.call(this, e = e || {}), Client.mainFrame.isIDF || "string" != typeof e.listWidth || (0 < e.listWidth.indexOf("%") ? (e.listWidthPerc = parseInt(e.listWidth.replace("%", "")), 
delete e.listWidth) : e.listWidth = parseInt(e.listWidth)), void 0 !== e.flags && (this.flags = e.flags, 
(r = !!(1 & this.flags)) !== this.enabled && (e.enabled = r), (r = !!(2 & this.flags)) !== this.visible) && (e.visible = r), 
void 0 !== e.enabled && (this.enabled = e.enabled, l = !0), void 0 !== e.visible && (this.visible = e.visible, 
i = !0, Client.mainFrame.isIDF) && this.visible && (a = !0), void 0 !== e.tooltip && (n = !0), 
void 0 !== e.collapsible && (this.collapsible = e.collapsible, this.updateCollapsible()), 
void 0 !== e.collapsed && (this.collapsed = e.collapsed, this.handleCollapse(), 
this.handleCollapse(!0)), void 0 !== e.inList && (this.inList = e.inList), void 0 !== e.caption && (n = !0), 
void 0 !== e.listHeaderPosition && (this.listHeaderPosition = e.listHeaderPosition, 
n = !0), void 0 !== e.formHeaderPosition && (this.formHeaderPosition = e.formHeaderPosition, 
n = !0), void 0 !== e.headerWidth && (this.headerWidth = isNaN(e.headerWidth) ? void 0 : e.headerWidth), 
void 0 !== e.formHeaderHeight && (e.headerHeight = e.formHeaderHeight, delete e.formHeaderHeight, 
delete this.formHeaderHeight), void 0 !== e.headerHeight && (this.headerHeight = isNaN(e.headerHeight) ? void 0 : e.headerHeight, 
n = !0), void 0 !== e.listWidth && (this.listWidth = isNaN(e.listWidth) ? void 0 : e.listWidth, 
this.orgListWidth = this.listWidth, i = !0, Client.mainFrame.isIDF || (delete this.listWidthPerc, 
delete this.orgListWidthPerc)), void 0 !== e.listWidthPerc && (this.listWidthPerc = isNaN(e.listWidthPerc) ? void 0 : e.listWidthPerc, 
this.orgListWidthPerc = this.listWidthPerc, i = !0), void 0 !== e.listHeight && (this.listHeight = isNaN(e.listHeight) ? void 0 : e.listHeight, 
this.orgListHeight = this.listHeight, i = !0), void 0 !== e.listLeft && (this.listLeft = isNaN(e.listLeft) ? void 0 : e.listLeft, 
this.orgListLeft = this.listLeft, i = !0), void 0 !== e.listTop && (this.listTop = isNaN(e.listTop) ? void 0 : e.listTop, 
this.orgListTop = this.listTop, i = !0), void 0 !== e.formWidth && (this.formWidth = isNaN(e.formWidth) ? void 0 : e.formWidth, 
this.orgFormWidth = this.formWidth, i = !0), void 0 !== e.formHeight && (this.formHeight = isNaN(e.formHeight) ? void 0 : e.formHeight, 
this.orgFormHeight = this.formHeight, i = !0), void 0 !== e.formLeft && (this.formLeft = isNaN(e.formLeft) ? void 0 : e.formLeft, 
this.orgFormLeft = this.formLeft, i = !0), void 0 !== e.formRight && (this.formRight = isNaN(e.formRight) ? void 0 : e.formRight, 
i = !0), void 0 !== e.formBottom && (this.formBottom = isNaN(e.formBottom) ? void 0 : e.formBottom, 
i = !0), void 0 !== e.formTop && (this.formTop = isNaN(e.formTop) ? void 0 : e.formTop, 
this.orgFormTop = this.formTop, i = !0), void 0 !== e.className && (this.oldClassName = this.className, 
this.className = e.className, r = Client.Widget.extractGridClasses(this.className), 
this.className = r.className, this.gridClass = r.gridClass, s = !0), void 0 !== e.image && (this.image = e.image, 
o = !0), void 0 !== e.formStyle && (this.formStyle = e.formStyle, Client.Widget.updateCustomStyle({
styleToUpdate: this.formCustomStyle,
newStyle: e.formStyle
}), t = !0), void 0 !== e.listHeaderStyle && (Client.Widget.updateCustomStyle({
styleToUpdate: this.listHeaderCustomStyle,
newStyle: e.listHeaderStyle
}), t = !0, n = !0), void 0 !== e.formHeaderStyle && (Client.Widget.updateCustomStyle({
styleToUpdate: this.formHeaderCustomStyle,
newStyle: e.formHeaderStyle
}), t = !0, n = !0), this.realizing || this.parent.updateObjects({
structure: i,
calcLayout: t || i
}), l) for (let e = 0; e < this.fields.length; e++) this.fields[e].updateControls(), 
this.fields[e].applyVisualStyle();
a && this.applyVisualStyle(), n && (this.updateHeader(), this.updateHeader(!0)), 
s && (this.updateClassName(), this.updateClassName(!0)), o && (this.updateImage(), 
this.updateImage(!0));
}, Client.IdfGroup.prototype.onEvent = function(e) {
var t = Client.Widget.prototype.onEvent.call(this, e);
return "onClick" === e.id && [ this.outListHeaderId, this.formHeaderId ].includes(e.obj) && this.collapsible && (this.updateElement({
collapsed: !this.collapsed
}), (this.collapsed ? this.parent : this).focus(), Client.mainFrame.isIDF ? t.push({
id: "grpcol",
def: Client.IdfMessagesPump.eventTypes.ACTIVE,
content: {
oid: this.id,
obn: this.collapsed ? "col" : "exp",
xck: e.content.offsetX,
yck: e.content.offsetY
}
}) : t.push({
id: "chgProp",
obj: this.id,
content: {
name: "collapsed",
value: this.collapsed,
clid: Client.id
}
})), t;
}, Client.IdfGroup.prototype.isInList = function() {
return this.inList;
}, Client.IdfGroup.prototype.calcLayout = function() {
this.isShown() && this.parent.getListFieldColumn(this.id) && (this.isInList() || this.parent.setEdgeColumns(null, this), 
this.calcListFormLayout()), this.isShown(!0) && this.parent.getFormFieldColumn(this.id) && (this.parent.setEdgeColumns(!0, this), 
this.calcListFormLayout(!0));
}, Client.IdfGroup.prototype.calcListFormLayout = function(e) {
let t;
var i = {}, n = this.canAdaptWidth(e) ? "" : "auto", s = e ? this.formWidth : this.listWidth;
let o = e ? this.formHeight : this.listHeight;
var l = e ? this.formLeft : this.listLeft, a = e ? this.formTop : this.listTop;
if (e && (o = o + (this.formBorders?.top || 0) + (this.formBorders?.bottom || 0)), 
!e && this.isInList() ? (r = this.fields.filter(e => e.canAdaptWidth()).length, 
Client.mainFrame.isIDF ? (h = this.getWidth(), i.flexBasis = h.total + "px", i.minWidth = h.fixed + "px", 
i.flexGrow = r, i.flexShrink = r) : (i.flexBasis = this.listWidthPerc ? this.listWidthPerc + "%" : void 0 !== this.listWidth ? this.listWidth + "px" : "auto", 
i.flexGrow = this.parent.getChildFlexGrow(this), i.flexShrink = this.fields.filter(e => e.listResizeWidth === Client.IdfField.resizeModes.STRETCH).length), 
i.height = this.parent.getHeaderHeight() + "px") : (i.padding = "0px", t = e ? this.parent.getFormFieldColumn(this.id) : this.parent.getListFieldColumn(this.id), 
e && !Client.mainFrame.isIDF ? (i.marginLeft = (this.formLeft || "0") + "px", i.marginRight = (this.formRight || "0") + "px", 
i.marginTop = (this.formTop || "0") + "px", i.marginBottom = (this.formBottom || "0") + "px") : (h = t.rect.left || 0, 
i.marginLeft = t.isMostLeft ? l + "px" : l - h + "px", r = t.isMostRight ? this.parent.getContainerWidth(e) - s - l : t.rect.deltaRight, 
i.marginRight = (r = r < 0 ? 0 : r) + "px", h = t.rect.top || 0, i.marginTop = t.isMostTop ? a + "px" : a - h + "px", 
s = t.isMostBottom ? this.parent.getContainerHeight(e) - o - a : t.rect.deltaBottom, 
i.marginBottom = (s = s < 0 ? 0 : s) + "px")), !e && this.isInList()) {
var l = Client.eleMap[this.listContainerConf.id], r = (Client.Widget.updateStyle(l, this.listHeaderColumnStyle, i), 
Client.Widget.updateObject(l, {
xs: n
}), i.height = "", Client.eleMap[this.aggregateContainerConf.id]);
Client.Widget.updateStyle(r, this.listAggregateColumnStyle, i), Client.Widget.updateObject(r, {
xs: n
});
for (let e = 0; e < this.listContainersConf.length; e++) {
var d = Client.eleMap[this.listContainersConf[e]?.id];
d && (this.listColumnStyles[e] = this.listColumnStyles[e] || {}, Client.Widget.updateStyle(d, this.listColumnStyles[e], i), 
Client.Widget.updateObject(d, {
xs: n
}));
}
} else {
var h = Client.eleMap[t.conf.id], a = e ? this.formColumnStyle : this.outListColumnStyle;
Client.Widget.updateStyle(h, a, i), Client.Widget.updateStyle(h, a, this.formCustomStyle), 
Client.Widget.updateElementClassName(h, "panel-group"), this.updateImage(e);
}
}, Client.IdfGroup.prototype.place = function() {
this.isShown() && this.parent.getListFieldColumn(this.id) && (this.placeListForm(), 
this.isInList()) && this.placeListForm({
aggregate: !0
}), this.isShown(!0) && this.parent.getFormFieldColumn(this.id) && this.placeListForm({
form: !0
});
}, Client.IdfGroup.prototype.placeListForm = function(e) {
var t = (e = e || {}).form, n = e.aggregate;
let i;
if (!t && this.isInList()) {
var s = this.getFirstInListField();
let t, i;
for (let e = 0; e < this.parent.fields.length; e++) {
var o = this.parent.fields[e];
if (t && o.isInList() && !o.group) {
var l = Client.eleMap[n ? o.aggregateContainerId : o.listContainerId];
i = l.getRootObject();
break;
}
o.id === s?.id && (t = !0);
}
e = Client.eleMap[this.parent.getListFieldColumn(this.id, n)?.conf?.id];
if (e) {
var a = e.getRootObject();
let t = Client.eleMap[(n ? this.aggregateContainerConf : this.listContainerConf).id];
t && (r = t.getRootObject(), a.insertBefore(r, i), r = -1 === (r = Array.prototype.findIndex.call(a.childNodes, e => e.id === t.id)) ? e.elements.length : r, 
e.elements.splice(r, 0, t), t.parent = e);
}
} else {
t ? (i = this.parent.getFormFieldColumn(this.id), this.formParentColConf = i?.conf) : (i = this.parent.getListFieldColumn(this.id), 
this.listParentColConf = i?.conf);
var a = t ? this.formHeaderId : this.outListHeaderId, r = t ? this.formContainerId : this.outListContainerId, d = Client.eleMap[i.conf.id], e = Client.eleMap[a], h = Client.eleMap[r];
if (d) {
if (h) for (let e = 0; e < d.elements.length; e++) {
var c = d.elements.splice(e--, 1)[0];
h.getRootObject().appendChild(c.getRootObject()), h.elements.push(c), c.parent = h;
}
t = d.getRootObject();
e && (t.appendChild(e.getRootObject()), d.elements.push(e), e.parent = d), h && (t.appendChild(h.getRootObject()), 
d.elements.push(h), h.parent = d), this.applyVisualStyle();
}
}
}, Client.IdfGroup.prototype.unplace = function() {
this.isShown() && (this.unplaceListForm(), this.isInList()) && this.unplaceListForm({
aggregate: !0
}), this.isShown(!0) && this.unplaceListForm({
form: !0
});
}, Client.IdfGroup.prototype.unplaceListForm = function(e) {
var t = (e = e || {}).form, e = e.aggregate;
let i, n, s = (n = !t && this.isInList() ? (e ? this.aggregateContainerConf : this.listContainerConf).id : (i = t ? this.formHeaderId : this.outListHeaderId, 
t ? this.formContainerId : this.outListContainerId), Client.eleMap[i]), o = (s && (s.getRootObject()?.remove(), 
0 <= (e = s.parent.elements.findIndex(e => e.id === s.id))) && s.parent.elements.splice(e, 1), 
Client.eleMap[n]);
o && ((e = o.getRootObject()) && (e.remove(), t) && (e.innerHTML = ""), 0 <= (index = o.parent.elements.findIndex(e => e.id === o.id))) && o.parent.elements.splice(index, 1);
}, Client.IdfGroup.prototype.canAdaptWidth = function(t) {
let i = !1;
for (let e = 0; e < this.fields.length; e++) i = i || this.fields[e].canAdaptWidth(t);
return i;
}, Client.IdfGroup.prototype.getWidth = function(t) {
let i = 0, n = 0;
for (let e = 0; e < this.fields.length; e++) {
var s = this.fields[e], o = s.getRects({
form: t,
checkVisibility: !0
}).width;
o && (i += o, n += s.canAdaptWidth() ? Client.IdfField.minWidth : o);
}
return {
total: i,
fixed: n
};
}, Client.IdfGroup.prototype.applyVisualStyle = function() {
var e, t, i, n;
this.realizing || (e = Client.IdfVisualStyle.getByIndex(this.getVisualStyle()), 
t = Client.IdfVisualStyle.getByIndex(this.parent.getVisualStyle()), e = e?.getPropertyValue(Client.IdfVisualStyle.transPropMap.col12), 
t = t?.getPropertyValue(Client.IdfVisualStyle.transPropMap.col6), n = this.parent.getListFieldColumn(this.id), 
this.isShown() && (this.isInList() || n) && (i = this.isInList() ? Client.eleMap[this.listContainerConf.id] : Client.eleMap[n.conf.id], 
this.addVisualStyleClasses(i, {
objType: "group",
list: this.isInList()
}), this.listHeaderPosition !== Client.IdfGroup.headerPositions.BORDER || "transparent" !== e || this.isInList() || Client.Widget.updateStyle(Client.eleMap[this.outListHeaderId], this.outListHeaderStyle, {
backgroundColor: t
})), n = this.parent.getFormFieldColumn(this.id), this.isShown(!0) && n && (i = Client.eleMap[n.conf.id], 
this.addVisualStyleClasses(i, {
objType: "group",
list: !1
}), (n = getComputedStyle(i.getRootObject())) && (this.formBorders = {
top: parseInt(n.borderTopWidth),
bottom: parseInt(n.borderBottomWidth),
left: parseInt(n.borderLeftWidth),
right: parseInt(n.borderRightWidth)
}), this.formHeaderPosition === Client.IdfGroup.headerPositions.BORDER) && "transparent" === e && Client.Widget.updateStyle(Client.eleMap[this.formHeaderId], this.formHeaderStyle, {
backgroundColor: t
}));
}, Client.IdfGroup.prototype.getVisualStyle = function() {
return (-1 !== this.visualStyle ? this : this.parent).visualStyle;
}, Client.IdfGroup.prototype.updateHeader = function(o) {
if (this.isShown(o)) {
var l = Client.Widget.getHTMLTooltip(this.caption, this.tooltip);
let e;
e = o ? Client.eleMap[this.formHeaderTextId] : this.isInList() ? Client.eleMap[this.listHeaderTextId] : Client.eleMap[this.outListHeaderTextId], 
Client.Widget.updateObject(e, {
innerHTML: Client.Widget.getHTMLForCaption(this.caption ?? ""),
tooltip: l
});
l = o ? this.formHeaderPosition : this.listHeaderPosition;
let t, i, n;
o ? (t = Client.eleMap[this.formHeaderId], i = this.formHeaderStyle, n = this.formHeaderCustomStyle) : (t = this.isInList() ? Client.eleMap[this.listHeaderId] : Client.eleMap[this.outListHeaderId], 
i = this.isInList() ? this.listHeaderStyle : this.outListHeaderStyle, this.isInList() && Client.Widget.updateStyle(Client.eleMap[this.listHeaderColId], {}, this.listHeaderCustomStyle));
var a = Math.max(t?.getRootObject()?.offsetHeight - 2, this.headerHeight || 0);
let s = "";
var r = {
display: "",
marginTop: "",
height: "",
minHeight: ""
};
switch (l) {
case Client.IdfGroup.headerPositions.NONE:
r.display = "none";
break;

case Client.IdfGroup.headerPositions.BORDER:
r.marginTop = "-" + (a / 2 + 1) + "px", s = "header-border";
break;

case Client.IdfGroup.headerPositions.OUTER:
r.marginTop = "-" + a + "px", s = "header-outer";
break;

case Client.IdfGroup.headerPositions.INNER:
s = "header-inner", r.height = a + "px", r.minHeight = a + "px";
}
!o && this.isInList() ? (r.marginTop = "", r.height = "", r.minHeight = "", l = this.fields.filter(e => !e.showListHeader), 
Client.Widget.updateElementClassName(t, "no-field-header", l.length !== this.fields.length)) : (r.marginTop = Client.mainFrame.isIDF ? r.marginTop : "", 
Client.Widget.updateElementClassName(t, "header-inner header-border header-outer", !0), 
Client.Widget.updateElementClassName(t, s)), Client.Widget.updateStyle(t, i, r), 
o && Client.Widget.updateStyle(t, i, n);
}
}, Client.IdfGroup.prototype.updateCollapsible = function() {
this.isShown() && !this.isInList() && (Client.Widget.updateObject(Client.eleMap[this.outListCollapseId], {
visible: this.collapsible
}), Client.Widget.updateElementClassName(Client.eleMap[this.outListContainerId], "panel-group-collapsible", !this.collapsible)), 
this.isShown(!0) && (Client.Widget.updateObject(Client.eleMap[this.formCollapseId], {
visible: this.collapsible
}), Client.Widget.updateElementClassName(Client.eleMap[this.formContainerId], "panel-group-collapsible", !this.collapsible));
}, Client.IdfGroup.prototype.handleCollapse = function(e) {
var t;
!this.isShown(e) || !e && this.isInList() || (t = e ? this.formCollapseId : this.outListCollapseId, 
Client.Widget.updateObject(Client.eleMap[t], {
icon: this.collapsed ? "add" : "remove"
}), t = e ? this.formContainerId : this.outListContainerId, e = Client.eleMap[t], 
Client.Widget.updateElementClassName(e, "collapsed", !this.collapsed), Client.Widget.updateElementClassName(e, "expanded", this.collapsed), 
this.realizing) || this.parent.updateObjects({
calcLayout: !0
});
}, Client.IdfGroup.prototype.updateVisibility = function(t) {
var i = [ "list", "form" ];
for (let e = 0; e < i.length; e++) {
var n = "form" === i[e], s = n ? this.parent.getFormFieldColumn(this.id) : this.parent.getListFieldColumn(this.id);
if (this.isShown(n) && s) {
var o = this.isVisible(n), l = {
display: o ? "flex" : "none"
}, a = this.listHeaderColumnStyle;
let e;
if (!n && this.isInList()) {
e = this.listContainerConf.id, Client.Widget.updateStyle(Client.eleMap[e], a, l);
for (let e = 0; e < this.listContainersConf.length; e++) {
var r = Client.eleMap[this.listContainersConf[e]?.id];
this.listColumnStyles[e] = this.listColumnStyles[e] || {}, Client.Widget.updateStyle(r, this.listColumnStyles[e], l);
}
} else s.visible = o, e = s.conf.id, a = n ? this.formColumnStyle : this.outListColumnStyle, 
Client.Widget.updateStyle(Client.eleMap[e], a, l);
}
}
for (let e = 0; e < this.fields.length; e++) this.fields[e].updateVisibility(t);
}, Client.IdfGroup.prototype.updateImage = function(i) {
if (this.isShown(i)) {
let e, t;
if (!i && this.isInList()) e = Client.eleMap[this.listContainerConf.id], t = this.listHeaderColumnStyle; else {
var n = i ? this.parent.getFormFieldColumn(this.id) : this.parent.getListFieldColumn(this.id);
if (!n) return;
e = Client.eleMap[n.conf.id], t = i ? this.formColumnStyle : this.outListColumnStyle;
}
n = {};
this.image ? n.backgroundImage = "url('" + (Client.mainFrame.isIDF ? "images/" : "") + this.image + "')" : n.backgroundImage = "", 
Client.Widget.updateStyle(e, t, n);
}
}, Client.IdfGroup.prototype.updateClassName = function(t) {
if (this.isShown(t)) {
let e;
e = t ? Client.eleMap[this.formContainerId] : this.isInList() ? Client.eleMap[this.listHeaderId] : Client.eleMap[this.outListContainerId], 
this.oldClassName && Client.Widget.updateElementClassName(e, this.oldClassName, !0), 
this.className && Client.Widget.updateElementClassName(e, this.className, !1);
}
}, Client.IdfGroup.prototype.isEnabled = function() {
return !(!this.enabled || this.page && !this.page.isEnabled());
}, Client.IdfGroup.prototype.isVisible = function(t) {
if (Client.mainFrame.isEditing()) {
if (t && !this.parent.hasForm) return !1;
if (!t && !this.parent.hasList) return !1;
}
return !(!this.isShown(t) || !this.visible || this.page && !this.page.isVisible() || !this.fields.find(e => e.isVisible(t, !0)));
}, Client.IdfGroup.prototype.isShown = function(t) {
return !!Client.mainFrame.isEditing() || !(t && !this.parent.hasForm || !t && !this.parent.hasList || !this.fields.find(e => e.isShown(t)));
}, Client.IdfGroup.prototype.resetCache = function(t) {
var i = t.from ?? 1, n = t.to ?? this.getFirstInListField()?.values.length ?? 0;
for (let e = i; e <= n; e++) e >= t.dataBlockStart && e <= t.dataBlockEnd || this.listContainersConf[e] && delete this.listContainersConf[e];
}, Client.IdfGroup.prototype.resetCachedStyles = function(t) {
void 0 === t && (this.listHeaderColumnStyle = {}, this.listHeaderStyle = {}, this.listColumnStyles = [], 
this.outListHeaderStyle = {}, this.outListColumnStyle = {}, this.formHeaderStyle = {}, 
this.formColumnStyle = {});
var i = t ?? this.listColumnStyles.length;
for (let e = t ?? 0; e <= i; e++) delete this.listColumnStyles[e];
}, Client.IdfGroup.prototype.getParentPanel = function() {
let e = this.parent;
for (;e && !(e instanceof Client.IdfPanel); ) e = e.parent;
return e;
}, Client.IdfGroup.prototype.insertBefore = function(e) {
if (Client.mainFrame.isEditing()) {
e.sib ? e.child.sib = e.sib : this.fsib && (e.child.sib = this.fsib, delete this.fsib);
var t = this.getParentPanel();
t.createChildren({
children: [ e.child ]
}), t.restoreRowSelectors(), this.fields = [];
for (let e = 0; e < t.fields.length; e++) {
var i = t.fields[e];
i.groupId === this.id && ((i.group = this).fields.push(i), this.inList = this.inList && i.isInList());
}
this.listHeaderTextId || (this.realize({
fake: !0
}, this.parent, this.view), this.updateHeader(), this.updateHeader(!0), this.updateCollapsible()), 
t.clientGeneratedFormStructure && (delete t.formStruct, t.groups.forEach(e => delete e.formStruct)), 
t.updateStructure(), t.updateElement({
totalRows: Client.IdfPanel.maxReusableRows,
data: {},
dataBlockStart: 1,
dataBlockEnd: Client.IdfPanel.maxReusableRows
});
} else Client.Element.prototype.insertBefore.call(this, e);
this.updateHeader(), this.updateHeader(!0);
}, Client.IdfGroup.prototype.removeChild = function(e) {
Client.Element.prototype.removeChild.call(this, e);
for (var t = e.id, i = 0; i < this.fields.length; i++) if (this.fields[i].id === t) {
this.fields[i].close(!0, !1), this.fields.splice(i, 1);
break;
}
}, Client.IdfGroup.prototype.isDraggable = function(e) {
return !(!Client.mainFrame?.isEditing() || !Client.Utils.isMyParent(e.getRootObject(), this.formHeaderId));
}, Client.IdfGroup.prototype.getSupportedTransformOperation = function(e, t, i, n) {
return Client.mainFrame?.isEditing() && Client.Utils.isMyParent(i.getRootObject(), this.formHeaderId) ? Client.Widget.transformOperation.DRAG : Client.Widget.transformOperation.NONE;
}, Client.IdfGroup.prototype.getTransformOperationTargetObj = function(e, t) {
return Client.mainFrame?.isEditing() ? Client.eleMap[this.formContainerId].getRootObject().parentNode : this.getRootObject();
}, Client.IdfGroup.prototype.applyDragDropCursor = function(e) {
var t = Client.eleMap[this.formHeaderId]?.getRootObject();
t && Client.mainFrame?.isEditing() && (e ? (t.setAttribute("opnt", "dd"), t.style.cursor = e, 
t.classList.add("system-cursor"), t.onmouseleave || (t.onmouseleave = Client.Widget.ddClearPointer)) : t.getAttribute("opnt") && (t.style.cursor = "", 
t.setAttribute("opnt", ""), t.classList.remove("system-cursor")));
}, Client.IdfGroup.prototype.close = function(t, e) {
this.fields.slice().forEach(e => e.close(t, !1)), this.listContainersConf.forEach(e => {
e = Client.eleMap[e?.id];
e && e.close(t, !1);
}), this.listContainersConf = [], Client.Widget.prototype.close.call(this, t, e);
}, Client.IdfGroup.prototype.resetGroup = function() {
for (this.listContainersConf.forEach(e => {
e = Client.eleMap[e?.id];
e && e.close(!0);
}), this.listContainersConf = []; this.mainObjects.length; ) this.mainObjects[0].close(!0), 
this.mainObjects.splice(0, 1);
delete this.listHeaderId, delete this.listHeaderTextId, delete this.listContentId, 
delete this.formHeaderId, delete this.formCollapseId, delete this.formHeaderTextId, 
delete this.formContainerId, delete this.outListHeaderId, delete this.outListCollapseId, 
delete this.outListHeaderTextId, delete this.outListContainerId;
}, Client.IdfGroup.prototype.canHaveFocus = function() {
return !this.collapsed || this.parent.layout === Client.IdfPanel.layouts.list && this.isInList();
}, Client.IdfGroup.prototype.focus = function(e) {
return !!this.canHaveFocus() && this.parent.getFocusableFields().find(e => e.group === this)?.focus(e);
}, Client.IdfGroup.prototype.getFirstInListField = function() {
return this.fields.find(e => e.isShown() && e.isInList());
}, Client || {}), Client = (Client.IdfRowsGroup = function(e, t, i) {
-1 === e.level ? (t.setGroupedRowsRoot(this), this.parentPanel = t, this.groupsIds = []) : this.parentPanel = t.parentPanel, 
e = Object.assign({
startingRow: 0,
endingRow: 0,
level: -1,
expanded: !1,
expandEventDef: Client.mainFrame.isIDF ? Client.IdfMessagesPump.eventTypes.ACTIVE : void 0
}, e), Client.Widget.call(this, e, t, i);
}, Client.IdfRowsGroup.prototype = new Client.Widget(), Client.IdfRowsGroup.transPropMap = {
lbl: "label",
str: "startingRow",
end: "endingRow",
lvl: "level",
exp: "expanded",
evt: "expandEventDef"
}, Client.IdfRowsGroup.createConfigFromXml = function(t) {
var n = {};
for (let e = 0; e < t.childNodes.length; e++) {
var s = t.childNodes[e];
if ("agr" === s.nodeName) {
let t, i = "";
var o = s.attributes;
for (let e = 0; e < o.length; e++) {
var l = o[e];
"fid" === l.nodeName ? t = parseInt(l.nodeValue) : "shw" === l.nodeName && (i = l.nodeValue);
}
void 0 !== t && (n.aggregations = n.aggregations || {}, n.aggregations[t] = i);
}
}
return n;
}, Client.IdfRowsGroup.convertPropValues = function(e) {
for (var t in e = e || {}) switch (t) {
case Client.IdfRowsGroup.transPropMap.str:
case Client.IdfRowsGroup.transPropMap.end:
case Client.IdfRowsGroup.transPropMap.lvl:
case Client.IdfRowsGroup.transPropMap.evt:
e[t] = parseInt(e[t]);
break;

case Client.IdfRowsGroup.transPropMap.exp:
e[t] = "1" === e[t];
}
}, Client.IdfRowsGroup.prototype.createElementsConfig = function() {}, Client.IdfRowsGroup.prototype.realize = function(e, t, i) {
this.createChildren(e);
}, Client.IdfRowsGroup.prototype.updateElement = function(e) {
Client.Widget.prototype.updateElement.call(this, e = e || {});
var t = {};
void 0 !== e.level && (this.level = e.level, -1 === this.level) && (Client.IdfRowsGroup.setIndex(this, 0), 
e.expanded = !0), void 0 !== e.expanded && (this.expanded = e.expanded, t.expanded = !0, 
this.realizing || this.handleExpansion()), void 0 !== e.label && (this.label = e.label, 
t.label = !0), void 0 !== e.aggregations && (this.aggregations = e.aggregations, 
t.label = !0), this.parentFieldValue && this.parentFieldValue.updateRowsGroupHeader(t);
}, Client.IdfRowsGroup.prototype.onEvent = function(e) {
var i = Client.Widget.prototype.onEvent.call(this, e);
if ("onClick" === e.id) if (this.updateElement({
expanded: !this.expanded
}), Client.mainFrame.isIDF) {
e = this.parentPanel.getNumRows();
let t = -1;
if (this.parentPanel.groupedRowsRoot.isRowVisible(this.parentPanel.groupedRowsRoot.realIndexToGroupedIndex(this.startingRow))) {
var n = this.parentPanel.groupedRowsRoot.realIndexToGroupedIndex(this.startingRow);
for (let e = this.parentPanel.groupedActualPosition; e <= n; e++) t += this.parentPanel.groupedRowsRoot.isRowVisible(e) ? 1 : 0;
(t = t < 0 ? 0 : t) >= e && (t = e - 1);
}
i.push({
id: "grlexp",
def: this.expandEventDef,
content: {
oid: this.id,
obn: this.expanded ? 1 : 0,
par1: t,
par2: Client.mainFrame.device.isMobile || Client.mainFrame.idfMobile ? -1 : this.parentPanel.groupedRowsRoot.getVisibleRowsCount()
}
});
} else i.push({
id: "chgProp",
obj: this.id,
content: {
name: "expanded",
value: this.expanded,
clid: Client.id
}
});
return i;
}, Client.IdfRowsGroup.prototype.applyVisualStyle = function() {}, Client.IdfRowsGroup.prototype.isRowVisible = function(t) {
if (-1 === this.level && t > this.groupedEndingRow) return !0;
if (-1 !== this.level && t >= this.groupedStartingRow - 1 && t <= this.groupedEndingRow) {
if (t === this.index) return !0;
if (!this.expanded) return !1;
if (!this.elements.length) return !0;
}
for (let e = 0; e < this.elements.length; e++) {
var i = this.elements[e].isRowVisible(t);
if (i) return i;
}
return !1;
}, Client.IdfRowsGroup.prototype.realIndexToGroupedIndex = function(i) {
if (0 === i) return i;
if (-1 === this.level && this.endingRow < i) return this.groupedEndingRow + (i - this.endingRow);
if (!(this.startingRow > i)) {
if (!this.elements.length && i >= this.startingRow && i <= this.endingRow) return this.index + (i - this.startingRow) + 1;
let t;
for (let e = 0; e < this.elements.length; e++) t = t ?? this.elements[e].realIndexToGroupedIndex(i);
return t;
}
}, Client.IdfRowsGroup.prototype.groupedIndexToRealIndex = function(i) {
if (0 === i) return i;
if (-1 === this.level && i > this.groupedEndingRow) return this.parentPanel.getTotalRows(!0) + (i - this.parentPanel.getTotalRows());
if (i === this.index) return this.startingRow;
if (!(this.groupedStartingRow > i)) {
if (!this.elements.length && i >= this.groupedStartingRow && i <= this.groupedEndingRow) return this.startingRow + (i - this.index) - 1;
let t;
for (let e = 0; e < this.elements.length; e++) t = t ?? this.elements[e].groupedIndexToRealIndex(i);
return t;
}
}, Client.IdfRowsGroup.setIndex = function(e, t) {
var i;
return e.index = t, e.parentPanel.groupedRowsRoot.groupsIds[e.index] = e.id, e.groupedStartingRow = e.index + 1, 
t++, e.elements.length ? (e.elements.forEach(e => {
t = Client.IdfRowsGroup.setIndex(e, t);
}), i = e.elements[e.elements.length - 1], e.groupedEndingRow = i.groupedEndingRow) : (t += e.endingRow - e.startingRow + 1, 
e.groupedEndingRow = t - 1), t;
}, Client.IdfRowsGroup.prototype.getVisibleRowsCount = function(i) {
if (i && this.startingRow > i) return 0;
if (!this.expanded) return 1;
if (0 < this.elements.length) {
let t = -1 === this.level ? 0 : 1;
for (let e = 0; e < this.elements.length; e++) t += this.elements[e].getVisibleRowsCount(i);
return t;
}
return 1 === this.startingRow && 0 === this.endingRow ? 0 : this.startingRow === i ? 2 : this.endingRow - this.startingRow + 1 + 1;
}, Client.IdfRowsGroup.prototype.handleExpansion = function() {
this.parentPanel.fillBufferVideo({
rowsGroup: this
}), this.parentPanel.groupedRowsRoot.isRowVisible(this.parentPanel.groupedRowsRoot.realIndexToGroupedIndex(this.startingRow)) && (this.parentPanel.groupedActualRow = this.groupedStartingRow - this.parentPanel.groupedActualPosition, 
this.parentPanel.updateElement({
actualRow: this.startingRow - this.parentPanel.actualPosition,
skipScroll: !0,
fromClient: !0,
calcLayout: !0
}));
}, Client || {}), Client = (Client.IdfField = function(e, t, i) {
if (t.addField(this), t.updateRowSelectorsVisibility(), this.values = [], (e = Object.assign({
dataType: Client.IdfField.dataTypes.TEXT,
listTop: 0,
listLeft: 0,
formTop: 0,
formLeft: 0,
maxLength: Client.mainFrame.isIDF ? 255 : void 0,
sortMode: Client.IdfField.sortModes.NONE,
groupingMode: Client.IdfField.groupingModes.NONE,
searchMode: Client.IdfField.searchModes.STARTSWITH,
type: Client.IdfField.types.MASTER,
visible: !0,
showInList: !0,
showInForm: !0,
inList: !0,
showListHeader: !0,
listHeaderAbove: !1,
showFormHeader: !0,
listNumRows: 1,
formNumRows: 1,
formHeaderAbove: !Client.mainFrame.isIDF,
causeValidation: !0,
canActivate: !1,
hasValueSource: !1,
alignment: Client.IdfVisualStyle.alignments.AUTO,
enabled: !0,
activableDisabled: !1,
superActive: !1,
unbound: !1,
canSort: !0,
editorType: Client.IdfField.editorTypes.NORMAL,
scale: 0,
showHtmlEditorToolbar: !0,
multiUpload: !1,
maxUploadSize: 10485760,
maxUploadFiles: 0,
uploadExtensions: "*.*",
image: "",
mask: "",
qbeFilter: "",
imageResizeMode: Client.mainFrame.isIDF ? Client.IdfField.stretches.REPEAT : Client.IdfField.stretches.CENTER,
autoLookup: !1,
smartLookup: !1,
optional: !0,
pageIndex: 0,
enabledInQbe: !0,
comboMultiSel: !0,
comboSeparator: ";",
notifySelectionChange: !1,
aggregateOfField: -1,
listTabOrderIndex: -1,
formTabOrderIndex: -1,
controlType: Client.mainFrame.isIDF ? void 0 : Client.IdfField.controlTypes.AUTO,
clickEventDef: Client.IdfMessagesPump?.eventTypes.ACTIVE,
changeEventDef: Client.IdfMessagesPump?.eventTypes.DEFERRED,
QBELike: !0
}, e)).events?.includes("onActivated") && (e.canActivate = !0), !Client.mainFrame.isIDF) {
var n, s = [ "listLeft", "listTop", "formLeft", "formTop", "listWidth", "listHeight", "formWidth", "formHeight" ];
for (n in e) 0 <= s.indexOf(n) && (e[n]?.indexOf && 0 < e[n]?.indexOf("%") ? (e[n + "Perc"] = parseInt(e[n].replace("%", "")), 
delete e[n]) : e[n]?.indexOf && (e[n] = parseInt(e[n])));
e.children?.length && (e.customChildrenConf = e.children.slice(), delete e.children);
}
this.orgListWidth = e.listWidth, this.orgListWidthPerc = e.listWidthPerc, this.orgListHeight = e.listHeight, 
this.orgListHeightPerc = e.listHeightPerc, this.orgListLeft = e.listLeft, this.orgListLeftPerc = e.listLeftPerc, 
this.orgListTop = e.listTop, this.orgListTopPerc = e.listTopPerc, this.orgFormWidth = e.formWidth, 
this.orgFormWidthPerc = e.formWidthPerc, this.orgFormHeight = e.formHeight, this.orgFormHeightPerc = e.formHeightPerc, 
this.orgFormLeft = e.formLeft, this.orgFormLeftPerc = e.formLeftPerc, this.orgFormTop = e.formTop, 
this.orgFormTopPerc = e.formTopPerc, this.listHeaderStyle = {}, this.listValueStyle = {}, 
this.listQbeValueStyle = {}, this.outListHeaderStyle = {}, this.outListValueStyle = {}, 
this.outListParentColStyle = {}, this.formHeaderStyle = {}, this.formValueStyle = {}, 
this.formParentColStyle = {}, this.aggregateContainerStyle = {}, this.listHeaderCustomStyle = {}, 
this.listCustomStyle = {}, this.formHeaderCustomStyle = {}, this.formCustomStyle = {}, 
e.children = e.children || [], e.type === Client.IdfField.types.STATIC && this.prepareStaticField(e, t), 
Client.Widget.call(this, e, t, i), this.subFrame && this.elements.push(this.subFrame);
}, Client.IdfField.prototype = new Client.Widget(), Client.IdfField.transPropMap = {
idx: "index",
vis: "visible",
inl: "showInList",
inf: "showInForm",
pag: "pageIndex",
lli: "inList",
hdr: "header",
lih: "listHeader",
lwi: "listWidth",
lhe: "listHeight",
lle: "listLeft",
lto: "listTop",
lhr: "listResizeWidth",
lvr: "listResizeHeight",
foh: "formHeader",
fwi: "formWidth",
fhe: "formHeight",
fle: "formLeft",
fto: "formTop",
fhr: "formResizeWidth",
fvr: "formResizeHeight",
hdl: "showListHeader",
hla: "listHeaderAbove",
lhs: "listHeaderSize",
hdf: "showFormHeader",
hfa: "formHeaderAbove",
fhs: "formHeaderSize",
lnr: "listNumRows",
fnr: "formNumRows",
dat: "dataType",
max: "maxLength",
smo: "sortMode",
gro: "groupingMode",
idp: "type",
cva: "causeValidation",
act: "canActivate",
aci: "activatorImage",
acw: "activatorWidth",
qvs: "hasValueSource",
aln: "alignment",
bkc: "backColor",
frc: "color",
msk: "mask",
ftm: "fontModifiers",
ena: "enabled",
acd: "activableDisabled",
sac: "superActive",
unb: "unbound",
srt: "canSort",
edi: "editorType",
fsc: "scale",
uet: "showHtmlEditorToolbar",
mup: "multiUpload",
mus: "maxUploadSize",
muf: "maxUploadFiles",
uex: "uploadExtensions",
img: "image",
irm: "imageResizeMode",
alo: "autoLookup",
lke: "smartLookup",
opt: "optional",
sub: "subFrameId",
gru: "groupId",
qen: "enabledInQbe",
cms: "comboMultiSel",
aof: "aggregateOfField",
qbf: "qbeFilter",
vfl: "visualFlags",
cvs: "comboSeparator",
chg: "changeEventDef",
wtm: "placeholder",
uts: "notifySelectionChange",
lta: "listTabOrderIndex",
fta: "formTabOrderIndex",
oqbf: "needFilterPopup",
ocb: "needToOpenCombo",
cmd: "command",
fbr: "rowBreakBefore",
qbl: "QBELike"
}, Client.IdfField.resizeModes = {
NONE: 1,
MOVE: 2,
STRETCH: 3,
GROW: 4
}, Client.IdfField.types = {
STATIC: -1,
MASTER: 0,
LOOKUP: 1
}, Client.IdfField.editorTypes = {
NORMAL: 0,
HTMLEDITOR: 1
}, Client.IdfField.dataTypes = {
UNSPECIFIED: 0,
INTEGER: 1,
FLOAT: 2,
DECIMAL: 3,
CURRENCY: 4,
CHARACTER: 5,
DATE: 6,
TIME: 7,
DATETIME: 8,
TEXT: 9,
BLOB: 10,
BOOLEAN: 11,
FIXED_CHARACTER: 12,
OBJECT: 13
}, Client.IdfField.stretches = {
REPEAT: 1,
CENTER: 2,
FIT: 3
}, Client.IdfField.sortModes = {
ASC: -1,
NONE: 0,
DESC: 1
}, Client.IdfField.groupingModes = {
ASC: -1,
NONE: 0,
DESC: 1
}, Client.IdfField.searchModes = {
NOLIKE: 0,
EQUALS: 1,
STARTSWITH: 2,
CONTAINS: 3
}, Client.IdfField.comboTypes = {
NOAUTOLOOKUP: 1,
AUTOLOOKUP: 2,
SMARTLOOKUP: 3
}, Client.IdfField.activationReasons = {
ACTIVATOR_CLICK: 0,
ACTIVATOR_RIGHTCLICK: 1,
DOUBLECLICK: 2,
RIGHTCLICK: 3,
FUNCTIONKEY: 4
}, Client.IdfField.defaultHeight = 32, Client.IdfField.minWidth = 20, Client.IdfField.controlTypes = {
AUTO: 1,
EDIT: 2,
COMBO: 3,
CHECK: 4,
OPTION: 5,
BUTTON: 6,
HTMLEDITOR: 7,
CUSTOM: 8,
BLOB: 10,
CHECKLIST: 11,
LISTGROUPHEADER: 111
}, Client.IdfField.createConfigFromXml = function(t) {
var i = {};
let n = t.attributes;
for (let e = 0; e < n.length; e++) if ("pdp" === n[e].nodeName) {
var s = [ "listLeftPerc", "listTopPerc", "formLeftPerc", "formTopPerc", "listWidthPerc", "listHeightPerc", "listHeaderSizePerc", "formWidthPerc", "formHeightPerc", "formHeaderSizePerc" ], o = n[e].nodeValue.split(",");
for (let e = 0; e < o.length; e++) {
var l = parseInt(o[e]);
-1 !== l && (i[s[e]] = l / 10);
}
break;
}
i.valuesConfig = [];
for (let e = 0; e < t.childNodes.length; e++) {
var a = t.childNodes[e];
if ("val" === a.nodeName) {
var r = {};
n = a.attributes;
for (let e = 0; e < n.length; e++) {
var d = n[e];
r[d.nodeName] = d.nodeValue;
}
i.valuesConfig.push(r);
}
}
return i;
}, Client.IdfField.convertPropValues = function(e) {
for (var t in e = e || {}) switch (t) {
case Client.IdfField.transPropMap.idx:
case Client.IdfField.transPropMap.pag:
case Client.IdfField.transPropMap.max:
case Client.IdfField.transPropMap.smo:
case Client.IdfField.transPropMap.gro:
case Client.IdfField.transPropMap.idp:
case Client.IdfField.transPropMap.lwi:
case Client.IdfField.transPropMap.lhe:
case Client.IdfField.transPropMap.lle:
case Client.IdfField.transPropMap.lto:
case Client.IdfField.transPropMap.lhr:
case Client.IdfField.transPropMap.lvr:
case Client.IdfField.transPropMap.lhs:
case Client.IdfField.transPropMap.fwi:
case Client.IdfField.transPropMap.fhe:
case Client.IdfField.transPropMap.fle:
case Client.IdfField.transPropMap.fto:
case Client.IdfField.transPropMap.fhr:
case Client.IdfField.transPropMap.fvr:
case Client.IdfField.transPropMap.fhs:
case Client.IdfField.transPropMap.lnr:
case Client.IdfField.transPropMap.fnr:
case Client.IdfField.transPropMap.dat:
case Client.IdfField.transPropMap.acw:
case Client.IdfField.transPropMap.aln:
case Client.IdfField.transPropMap.edi:
case Client.IdfField.transPropMap.mus:
case Client.IdfField.transPropMap.muf:
case Client.IdfField.transPropMap.irm:
case Client.IdfField.transPropMap.vfl:
case Client.IdfField.transPropMap.chg:
case Client.IdfField.transPropMap.fsc:
case Client.IdfField.transPropMap.lta:
case Client.IdfField.transPropMap.fta:
case Client.IdfField.transPropMap.aof:
e[t] = parseInt(e[t]);
break;

case Client.IdfField.transPropMap.vis:
case Client.IdfField.transPropMap.inl:
case Client.IdfField.transPropMap.inf:
case Client.IdfField.transPropMap.lli:
case Client.IdfField.transPropMap.hdl:
case Client.IdfField.transPropMap.hla:
case Client.IdfField.transPropMap.hdf:
case Client.IdfField.transPropMap.hfa:
case Client.IdfField.transPropMap.cva:
case Client.IdfField.transPropMap.act:
case Client.IdfField.transPropMap.qvs:
case Client.IdfField.transPropMap.ena:
case Client.IdfField.transPropMap.acd:
case Client.IdfField.transPropMap.sac:
case Client.IdfField.transPropMap.unb:
case Client.IdfField.transPropMap.srt:
case Client.IdfField.transPropMap.uet:
case Client.IdfField.transPropMap.mup:
case Client.IdfField.transPropMap.alo:
case Client.IdfField.transPropMap.lke:
case Client.IdfField.transPropMap.opt:
case Client.IdfField.transPropMap.qen:
case Client.IdfField.transPropMap.cms:
case Client.IdfField.transPropMap.uts:
case Client.IdfField.transPropMap.oqbf:
case Client.IdfField.transPropMap.ocb:
case Client.IdfField.transPropMap.fbr:
case Client.IdfField.transPropMap.qbl:
e[t] = "1" === e[t];
}
}, Client.IdfField.prototype.createElementsConfig = function(e) {
var t = {};
return this.isShown() && (t.list = this.createContainerConfig(), t.aggregate = this.createAggregateContainerConfig()), 
this.isShown(!0) && (t.form = this.createContainerConfig(!0)), t;
}, Client.IdfField.prototype.createContainerConfig = function(e) {
let t, i, n, s;
var o, l = this.id.replace(/:/g, "_");
return !e && this.isInList() ? (o = this.parent.getHeaderOffset() ? " offset-col" : "", 
t = this.createElementConfig({
c: "IonCol",
className: "panel-list-col" + o,
tabIndex: 0,
customid: l + "_lc",
events: [ "onClick" ]
}), n = this.createElementConfig({
c: "IonButton",
className: "generic-btn field-header-btn",
visible: !1
}), t.children.push(n), s = this.createElementConfig({
c: "IonText",
type: "span"
}), t.children.push(s), this.listContainerId = t.id, this.listHeaderButtonId = n.id, 
this.listHeaderTextId = s.id) : e || -1 === this.aggregateOfField ? (t = this.createElementConfig({
c: "Container",
className: "panel-form-row"
}), this.isStatic(!0) || (i = this.createElementConfig({
c: "Container",
className: "panel-form-col-header",
customid: l + "_fc"
}), t.children.push(i), n = this.createElementConfig({
c: "IonButton",
className: "generic-btn field-header-btn",
visible: !1
}), i.children.push(n), s = this.createElementConfig({
c: "IonText",
type: "span"
}), i.children.push(s)), o = this.createControlConfig(e), l = this.createElementConfig(o.container), 
t.children.push(l), o = this.createElementConfig(o.control), l.children.push(o), 
e ? (this.formContainerId = t.id, this.formHeaderId = i?.id, this.formHeaderButtonId = n?.id, 
this.formHeaderTextId = s?.id, this.formValueId = l.id, this.formControlId = o.id) : (this.outListContainerId = t.id, 
this.outListHeaderId = i?.id, this.outListHeaderButtonId = n?.id, this.outListHeaderTextId = s?.id, 
this.outListValueId = l.id, this.outListControlId = o.id)) : (e = this.getAggregatedFieldParent(), 
l = this.createControlConfig(), t = this.createElementConfig(l.control), this.outListContainerId = e.aggregateContainerId, 
this.outListValueId = e.aggregateContainerId, this.outListControlId = t.id), t;
}, Client.IdfField.prototype.createAggregateContainerConfig = function() {
if (this.isInList()) return this.aggregateContainerConf = this.createElementConfig({
c: "IonCol",
className: "panel-list-col"
}), this.aggregateContainerId = this.aggregateContainerConf.id, this.aggregateContainerConf;
}, Client.IdfField.prototype.createControlConfig = function(e, t) {
var i, n = {};
return n.control = {
c: "IdfControl",
dataType: this.dataType
}, !e && this.isInList() ? (i = this.parent.getListRowOffset() ? " offset-col" : "", 
t = this.id.replace(/:/g, "_") + "_lv" + t, n.container = {
c: "IonCol",
className: "panel-list-col" + i,
customid: t,
tabIndex: 0
}, n.control.badgeInside = !0) : (i = this.isStatic(), t = this.id.replace(/:/g, "_") + (e ? "_fv" : i ? "_lc" : "_lv0"), 
n.container = {
c: "Container",
className: "panel-form-col-value" + (i ? " static-field" : ""),
customid: t,
tabIndex: 0
}, n.control.badgeInside = !Client.mainFrame.isIDF), n.container.events = [ "onClick", "onDblclick", "onContextmenu", "onFocusin", "onFocusout", "onDragover" ], 
n;
}, Client.IdfField.isText = function(e) {
return [ Client.IdfField.dataTypes.UNSPECIFIED, Client.IdfField.dataTypes.TEXT, Client.IdfField.dataTypes.CHARACTER, Client.IdfField.dataTypes.FIXED_CHARACTER ].includes(e);
}, Client.IdfField.isNumeric = function(e) {
return [ Client.IdfField.dataTypes.INTEGER, Client.IdfField.dataTypes.FLOAT, Client.IdfField.dataTypes.DECIMAL, Client.IdfField.dataTypes.CURRENCY ].includes(e);
}, Client.IdfField.isDate = function(e) {
return [ Client.IdfField.dataTypes.DATE, Client.IdfField.dataTypes.DATETIME ].includes(e);
}, Client.IdfField.isTime = function(e) {
return [ Client.IdfField.dataTypes.TIME, Client.IdfField.dataTypes.DATETIME ].includes(e);
}, Client.IdfField.isDateOrTime = function(e) {
return [ Client.IdfField.dataTypes.DATE, Client.IdfField.dataTypes.TIME, Client.IdfField.dataTypes.DATETIME ].includes(e);
}, Client.IdfField.getRequirements = function(e) {
var t = Client.mainFrame.isIDF ? "fluid/" : "", i = {};
return e.editorType !== Client.IdfField.editorTypes.HTMLEDITOR && e.controlType !== Client.IdfField.controlTypes.HTMLEDITOR || (i[t + "jquery.min.js"] = {
type: "jc",
name: "JQuery"
}, i[t + "objects/htmleditor/htmlEditor.js"] = {
type: "jc",
name: "htmlEditorJS"
}, i[t + "objects/htmleditor/plugins/emoji/emojify/emojify.css"] = {
type: "cs",
name: "emojifyCSS"
}, i[t + "objects/htmleditor/plugins/emoji/emojify/emojify.js"] = {
type: "jc",
name: "emojifyJS"
}, i[t + "objects/htmleditor/trumbowyg.min.js"] = {
type: "jc",
name: "trumbowygJS"
}, i[t + "objects/htmleditor/ui/icons.svg"] = {
type: "sv",
name: "trumbowygSVG"
}, i[t + "objects/htmleditor/ui/trumbowyg.min.css"] = {
type: "cs",
name: "trumbowygCSS"
}), i;
}, Client.IdfField.prototype.realize = function(e, t, i) {
var n, s = this.createElementsConfig(e);
let o;
s.list && (o = i.createElement(s.list, t, i), this.mainObjects.push(o), s.aggregate) && (n = i.createElement(s.aggregate, t, i), 
this.mainObjects.push(n)), s.form && (o = i.createElement(s.form, t, i), this.mainObjects.push(o)), 
Client.mainFrame.isEditing() && e.children.push(...this.createFakeFieldsValues()), 
this.createChildren(e), Client.mainFrame.isEditing() && this.isInList() && this.parent.intersectionObserver?.observe(Client.eleMap[this.listContainerId].getRootObject());
}, Client.IdfField.prototype.place = function() {
this.isShown() && this.parent.getListFieldColumn(this.id) && (this.placeListForm(), 
this.isInList()) && this.placeListForm({
aggregate: !0
}), this.isShown(!0) && this.parent.getFormFieldColumn(this.id) && this.placeListForm({
form: !0
});
}, Client.IdfField.prototype.placeListForm = function(i) {
var n = (i = i || {}).form, i = i.aggregate;
if (n || -1 === this.aggregateOfField) {
let e, t;
t = n ? (this.formParentColConf = this.parent.getFormFieldColumn(this.id).conf, 
e = this.formParentColConf.id, this.formContainerId) : (n = this.parent.getListFieldColumn(this.id, i).conf, 
e = n.id, i || (this.listParentColConf = n), this.isInList() ? i ? this.aggregateContainerId : this.listContainerId : this.outListContainerId);
n = Client.eleMap[e], i = Client.eleMap[t];
n.getRootObject().appendChild(i.getRootObject()), n.elements.push(i), i.parent = n;
}
}, Client.IdfField.prototype.unplace = function() {
this.isShown() && (this.unplaceListForm(), this.isInList()) && this.unplaceListForm({
aggregate: !0
}), this.isShown(!0) && this.unplaceListForm({
form: !0
});
}, Client.IdfField.prototype.unplaceListForm = function(i) {
var n = (i = i || {}).form, i = i.aggregate;
if (n || -1 === this.aggregateOfField) {
let e, t = (e = n ? this.formContainerId : this.isInList() ? i ? this.aggregateContainerId : this.listContainerId : this.outListContainerId, 
Client.eleMap[e]);
(t?.getRootObject())?.remove();
n = t?.parent?.elements?.findIndex(e => e.id === t.id);
0 <= n && t.parent.elements.splice(n, 1);
}
}, Client.IdfField.prototype.prepareStaticField = function(e, t) {
if (e.dataType = Client.IdfField.dataTypes.UNSPECIFIED, e.activatorWidth = 0, !Client.mainFrame.isEditing()) {
var i = e.customChildrenConf || [], n = [];
for (let e = 0; e < i.length; e++) {
var s = Object.assign({}, i[e]);
s._skipUpdate = !0, n.push(s);
}
var o = this.createElementConfig({
c: "IdfFieldValue",
id: e.id + ":1",
index: 1,
customChildrenConf: n.length ? n : void 0
});
e.children.push(o);
}
}, Client.IdfField.prototype.writeValue = function(e, t) {
this.updateControls({
text: !0,
skipInList: t
}, {
index: e
});
}, Client.IdfField.prototype.assignControls = function(e) {
this.isStatic() && (e = 1);
var t = this.values[this.parent.lastActiveRowIndex];
t && (this.isInList() && this.parent.layout === Client.IdfPanel.layouts.form && t.updateControls({
customChildrenConf: !0,
subFrameConf: !0
}), t.clearControls()), this.values[e] && (t = {}, this.isShown() && !this.isInList() && (t.outListContainer = Client.eleMap[this.outListValueId], 
t.outListControl = Client.eleMap[this.outListControlId]), this.isShown(!0) && (t.formContainer = Client.eleMap[this.formValueId], 
t.formControl = Client.eleMap[this.formControlId]), this.values[e].assignControls(t));
}, Client.IdfField.prototype.updateElement = function(a) {
var r = Client.IdfField.getRequirements(a = a || {});
if (!(0 < Object.keys(r).length) || Client.mainFrame.loadClientRequirements({
req: r
})) {
r = a.qbeFilter;
let e, t, i, n, s, o, l;
var d = {};
if (a.skipWidgetApplyVisualStyle = !0, Client.Widget.prototype.updateElement.call(this, a), 
delete a.skipWidgetApplyVisualStyle, i = a.applyVisualStyle, delete a.applyVisualStyle, 
this.parent.status !== Client.IdfPanel.statuses.qbe || Client.mainFrame.isIDF || (a.qbeFilter = r), 
!Client.mainFrame.isIDF) {
var h, c = [ "listLeft", "listTop", "formLeft", "formTop", "listWidth", "listHeight", "formWidth", "formHeight" ];
for (h in a) 0 <= c.indexOf(h) && (a[h]?.indexOf && 0 < a[h]?.indexOf("%") ? (a[h + "Perc"] = parseInt(a[h].replace("%", "")), 
delete a[h]) : a[h]?.indexOf && (a[h] = parseInt(a[h])));
}
void 0 !== a.visible && (this.visible = a.visible, t = !0), void 0 !== a.showInList && (this.showInList = a.showInList, 
t = !0, l = !0), void 0 !== a.showInForm && (this.showInForm = a.showInForm, t = !0), 
void 0 !== a.dataType && (this.dataType = a.dataType, d.dataType = !0), void 0 !== a.maxLength && (this.maxLength = a.maxLength, 
d.maxLength = !0), void 0 !== a.sortMode && (this.sortMode = a.sortMode, this.updateSortMode()), 
void 0 !== a.groupingMode && (this.groupingMode = a.groupingMode, this.updateSortMode()), 
void 0 !== a.searchMode && (this.searchMode = a.searchMode), void 0 !== a.pageIndex && (this.pageIndex = a.pageIndex), 
void 0 !== a.scale && (this.scale = a.scale, d.scale = !0), void 0 !== a.type && (this.type = a.type, 
d.type = !0, d.text = Client.mainFrame.isEditing(), d.mask = !0, e = !0, n = !0, 
s = !0, i = !0), void 0 !== a.isPassword && (this.isPassword = a.isPassword, d.isPassword = !0), 
void 0 !== a.inList && (this.inList = a.inList), void 0 !== a.tooltip && (o = !0), 
void 0 !== a.listHeader && (this.listHeader = a.listHeader, n = !0, o = !0), void 0 !== a.formHeader && (this.formHeader = a.formHeader, 
s = !0, o = !0), void 0 !== a.innerHtml && (a.header = a.innerHtml, delete a.innerHtml, 
delete this.innerHtml), void 0 !== a.header && (this.header = a.header, n = !0, 
s = !0, o = !0), void 0 !== a.showListHeader && (this.showListHeader = a.showListHeader, 
this.showHeader(), this.group) && this.group.updateHeader(), void 0 !== a.showFormHeader && (this.showFormHeader = a.showFormHeader, 
this.showHeader(!0)), void 0 !== a.listHeaderAbove && (this.listHeaderAbove = a.listHeaderAbove, 
this.setHeaderAbove(), e = !0), void 0 !== a.formHeaderAbove && (this.formHeaderAbove = a.formHeaderAbove, 
this.setHeaderAbove(!0), e = !0), void 0 !== a.listHeaderSize && (this.listHeaderSize = isNaN(a.listHeaderSize) ? void 0 : a.listHeaderSize, 
e = !0), void 0 !== a.listHeaderSizePerc && (this.listHeaderSizePerc = isNaN(a.listHeaderSizePerc) ? void 0 : a.listHeaderSizePerc, 
e = !0), void 0 !== a.formHeaderSize && (this.formHeaderSize = isNaN(a.formHeaderSize) ? void 0 : a.formHeaderSize, 
e = !0), void 0 !== a.formHeaderSizePerc && (this.formHeaderSizePerc = isNaN(a.formHeaderSizePerc) ? void 0 : a.formHeaderSizePerc, 
e = !0), void 0 !== a.listWidth && (this.listWidth = isNaN(a.listWidth) ? void 0 : a.listWidth, 
this.orgListWidth = this.listWidth, t = !0, l = !0, !Client.mainFrame.isIDF) && this.listWidthPerc && (delete this.listWidthPerc, 
delete this.orgListWidthPerc), void 0 !== a.listWidthPerc && (this.listWidthPerc = isNaN(a.listWidthPerc) ? void 0 : a.listWidthPerc, 
this.orgListWidthPerc = this.listWidthPerc, t = !0, l = !0), void 0 !== a.listResizeWidth && (this.listResizeWidth = a.listResizeWidth, 
t = !0, e = !0, l = !0), void 0 !== a.listHeight && (this.listHeight = isNaN(a.listHeight) ? void 0 : a.listHeight, 
this.orgListHeight = this.listHeight, t = !0, !Client.mainFrame.isIDF) && this.listHeightPerc && (delete this.listHeightPerc, 
delete this.orgListHeightPerc), void 0 !== a.listHeightPerc && (this.listHeightPerc = isNaN(a.listHeightPerc) ? void 0 : a.listHeightPerc, 
this.orgListHeightPerc = this.listHeightPerc, t = !0), void 0 !== a.listResizeHeight && (this.listResizeHeight = a.listResizeHeight, 
t = !0, e = !0), void 0 !== a.listLeft && (this.listLeft = isNaN(a.listLeft) ? void 0 : a.listLeft, 
this.orgListLeft = this.listLeft, t = !0, !Client.mainFrame.isIDF) && this.listLeftPerc && (delete this.listLeftPerc, 
delete this.orgListLeftPerc), void 0 !== a.listLeftPerc && (this.listLeftPerc = isNaN(a.listLeftPerc) ? void 0 : a.listLeftPerc, 
this.orgListLeftPerc = this.listLeftPerc, t = !0), void 0 !== a.listTop && (this.listTop = isNaN(a.listTop) ? void 0 : a.listTop, 
this.orgListTop = this.listTop, t = !0, !Client.mainFrame.isIDF) && this.listTopPerc && (delete this.listTopPerc, 
delete this.orgListTopPerc), void 0 !== a.listTopPerc && (this.listTopPerc = isNaN(a.listTopPerc) ? void 0 : a.listTopPerc, 
this.orgListTopPerc = this.listTopPerc, t = !0), void 0 !== a.formWidth && (this.formWidth = isNaN(a.formWidth) ? void 0 : a.formWidth, 
this.orgFormWidth = this.formWidth, t = !0, !Client.mainFrame.isIDF) && this.formWidthPerc && (delete this.formWidthPerc, 
delete this.orgFormWidthPerc), void 0 !== a.formWidthPerc && (this.formWidthPerc = isNaN(a.formWidthPerc) ? void 0 : a.formWidthPerc, 
this.orgFormWidthPerc = this.formWidthPerc, t = !0), void 0 !== a.formResizeWidth && (this.formResizeWidth = a.formResizeWidth, 
t = !0, e = !0), void 0 !== a.formHeight && (this.formHeight = isNaN(a.formHeight) ? void 0 : a.formHeight, 
this.orgFormHeight = this.formHeight, t = !0, !Client.mainFrame.isIDF) && this.formHeightPerc && (delete this.formHeightPerc, 
delete this.orgFormHeightPerc), void 0 !== a.formHeightPerc && (this.formHeightPerc = isNaN(a.formHeightPerc) ? void 0 : a.formHeightPerc, 
this.orgFormHeightPerc = this.formHeightPerc, t = !0), void 0 !== a.formResizeHeight && (this.formResizeHeight = a.formResizeHeight, 
t = !0, e = !0), void 0 !== a.formLeft && (this.formLeft = isNaN(a.formLeft) ? void 0 : a.formLeft, 
this.orgFormLeft = this.formLeft, t = !0, !Client.mainFrame.isIDF) && this.formLeftPerc && (delete this.formLeftPerc, 
delete this.orgFormLeftPerc), void 0 !== a.formLeftPerc && (this.formLeftPerc = isNaN(a.formLeftPerc) ? void 0 : a.formLeftPerc, 
this.orgFormLeftPerc = this.formLeftPerc, t = !0), void 0 !== a.formTop && (this.formTop = isNaN(a.formTop) ? void 0 : a.formTop, 
this.orgFormTop = this.formTop, t = !0, !Client.mainFrame.isIDF) && this.formTopPerc && (delete this.formTopPerc, 
delete this.orgFormTopPerc), void 0 !== a.formTopPerc && (this.formTopPerc = isNaN(a.formTopPerc) ? void 0 : a.formTopPerc, 
this.orgFormTopPerc = this.formTopPerc, t = !0), void 0 !== a.formRight && (this.formRight = isNaN(parseInt(a.formRight)) ? void 0 : a.formRight, 
t = !0), void 0 !== a.formBottom && (this.formBottom = isNaN(parseInt(a.formBottom)) ? void 0 : a.formBottom, 
t = !0), void 0 !== a.aggregateOfField && (this.aggregateOfField = a.aggregateOfField, 
t = !0), void 0 !== a.listMultiRows && (a.listNumRows = a.listMultiRows ? 2 : 1, 
delete a.listMultiRows, delete this.listMultiRows), void 0 !== a.listNumRows && (this.listNumRows = a.listNumRows, 
d.listNumRows = !0, e = !0), void 0 !== a.formMultiRows && (a.formNumRows = a.formMultiRows ? 2 : 1, 
delete a.formMultiRows, delete this.formMultiRows), void 0 !== a.formNumRows && (this.formNumRows = a.formNumRows, 
d.formNumRows = !0, e = !0), void 0 !== a.rowBreakBefore && (r = this.rowBreakBefore, 
this.rowBreakBefore = a.rowBreakBefore, !Client.mainFrame.isIDF) && r !== this.rowBreakBefore && this.listContainerId && this.parent.hasList && this.showInList && (this.parent.updateStructure(), 
this.parent.resetCache({
from: this.parent.canUseRowQbe() ? 0 : 1,
to: this.parent.rows.length
}), this.parent.canUseRowQbe() && this.parent.attachRow(0, !0), this.parent.calcLayout()), 
void 0 !== a.dataType && (this.dataType = a.dataType), void 0 !== a.valueList && (a.valueList.qbe ? (r = Client.eleMap[a.valueList.popup], 
a.valueList.popup && r ? r.updateValueList(a.valueList) : this.parent.canUseRowQbe() && this.isInList() && this.values[0].updateElement({
valueList: a.valueList
})) : (this.valueList = a.valueList, d.valueList = !0)), void 0 !== a.smartLookup && (this.smartLookup = a.smartLookup, 
d.smartLookup = !0), void 0 !== a.hasValueSource && (this.hasValueSource = a.hasValueSource, 
d.hasValueSource = !0), void 0 !== a.autoLookup && (this.autoLookup = a.autoLookup, 
d.autoLookup = !0), void 0 !== a.optional && (this.optional = a.optional, d.optional = !0), 
void 0 !== a.enabled && (this.enabled = a.enabled, d.enabled = !0, i = !0), void 0 !== a.enabledInQbe && (this.enabledInQbe = a.enabledInQbe, 
d.enabled = !0, i = !0), void 0 !== a.QBELike && (this.QBELike = a.QBELike), void 0 !== a.activableDisabled && (this.activableDisabled = a.activableDisabled, 
d.activableDisabled = !0), void 0 !== a.canActivate && (this.canActivate = a.canActivate, 
d.canActivate = !0), void 0 !== a.superActive && (this.superActive = a.superActive, 
d.superActive = !0), void 0 !== a.canSort && (this.canSort = a.canSort, n = !0, 
d.canSort = !0), void 0 !== a.alignment && (this.alignment = a.alignment, this.isStatic() && this.values[1].updateElement({
alignment: this.alignment
}), n = !0, s = !0, d.alignment = !0), void 0 !== a.backColor && (this.backColor = a.backColor, 
d.backColor = !0), void 0 !== a.color && (this.color = a.color, d.color = !0), void 0 !== a.mask && (this.mask = a.mask, 
d.mask = !0), void 0 !== a.fontModifiers && (this.fontModifiers = a.fontModifiers, 
d.fontModifiers = !0), void 0 !== a.className && (this.className = a.className, 
r = Client.Widget.extractGridClasses(this.className), this.className = r.className, 
this.gridClass = r.gridClass, this.isInList() && (0 <= this.className.indexOf("lg-visible") || 0 <= this.className.indexOf("md-visible")) && (r = Client.eleMap[this.listHeaderTextId], 
Client.Widget.updateElementClassName(r, 0 <= this.className.indexOf("md-visible") ? "md-visible" : "lg-visible")), 
d.className = !0, Client.mainFrame.isIDF) && (a.formHeaderClassName = a.className, 
a.listHeaderClassName = a.className, a.listClassName = a.className), void 0 !== a.formHeaderClassName && (s = !0, 
this.oldFormHeaderClassName = this.formHeaderClassName || "", this.formHeaderClassName = a.formHeaderClassName), 
void 0 !== a.listHeaderClassName && (n = !0, this.oldListHeaderClassName = this.listHeaderClassName || "", 
this.listHeaderClassName = a.listHeaderClassName), void 0 !== a.listClassName && (this.listClassName = a.listClassName, 
d.listClassName = !0), void 0 !== a.badge && (d.badge = !0), void 0 !== a.activatorWidth && (this.activatorWidth = a.activatorWidth, 
d.activatorWidth = !0), void 0 !== a.activatorImage && (this.activatorImage = a.activatorImage, 
d.activatorImage = !0), void 0 !== a.editorType && (this.editorType = a.editorType, 
d.editorType = !0), void 0 !== a.showHtmlEditorToolbar && (this.showHtmlEditorToolbar = a.showHtmlEditorToolbar, 
d.showHtmlEditorToolbar = !0), void 0 !== a.multiUpload && (this.multiUpload = a.multiUpload, 
d.multiUpload = !0), void 0 !== a.uploadExtensions && (this.uploadExtensions = a.uploadExtensions, 
d.uploadExtensions = !0), void 0 !== a.comboMultiSel && (this.comboMultiSel = a.comboMultiSel, 
d.comboMultiSel = !0), void 0 !== a.comboSeparator && (this.comboSeparator = a.comboSeparator, 
d.comboSeparator = !0), void 0 !== a.customChildrenConf && (this.customChildrenConf = a.customChildrenConf, 
this.customChildrenConf?.length ? (a.controlType = Client.IdfField.controlTypes.CUSTOM, 
this.oldControlType = this.controlType) : (a.controlType = this.oldControlType, 
delete this.customChildrenConf)), void 0 !== a.controlType && (this.controlType = this.customChildrenConf ? Client.IdfField.controlTypes.CUSTOM : a.controlType || Client.IdfField.controlTypes.AUTO, 
d.controlType = !0, !Client.mainFrame.isIDF) && Client.mainFrame.isEditing() && (this.valueList = this.getEditorValueList(), 
d.valueList = !0), void 0 !== a.qbeFilter && (this.qbeFilter = a.qbeFilter, this.getValueByIndex(this.parent.status === Client.IdfPanel.statuses.qbe ? 1 : 0)?.updateQbeFilter(), 
this.parent.showClearFiltersButton(), this.parent.searchMode === Client.IdfPanel.searchModes.header) && (n = !0), 
void 0 !== a.visualFlags && (this.visualFlags = a.visualFlags, a.canSortFlag = 0 != (1 & this.visualFlags), 
a.showOnlyIcon = 0 != (8 & this.visualFlags), a.showActivator = 0 != (16 & this.visualFlags), 
a.isHyperLink = 0 != (128 & this.visualFlags), a.slidePad = 0 != (64 & this.visualFlags), 
a.autoTab = 0 != (512 & this.visualFlags), a.usePlaceholderasNull = 0 != (1024 & this.visualFlags), 
a.handleTabOrder = 0 != (2048 & this.visualFlags), a.canHideInList = 0 != (4096 & this.visualFlags), 
a.hiddenInList = 0 != (8192 & this.visualFlags)), void 0 !== a.canSortFlag && (this.canSortFlag = a.canSortFlag, 
n = !0, d.canSort = !0), void 0 !== a.showOnlyIcon && (this.showOnlyIcon = a.showOnlyIcon, 
d.showOnlyIcon = !0), void 0 !== a.showActivator && (this.showActivator = a.showActivator), 
void 0 !== a.isHyperLink && (this.isHyperLink = a.isHyperLink, d.isHyperLink = !0), 
void 0 !== a.slidePad && (this.slidePad = a.slidePad), void 0 !== a.autoTab && (this.autoTab = a.autoTab), 
void 0 !== a.usePlaceholderasNull && (this.usePlaceholderasNull = a.usePlaceholderasNull), 
void 0 !== a.handleTabOrder && (this.handleTabOrder = a.handleTabOrder), void 0 !== a.canHideInList && (this.canHideInList = a.canHideInList), 
void 0 !== a.hiddenInList && (this.hiddenInList = a.hiddenInList, e = !0, l = !0), 
void 0 !== a.image && (this.image = a.image, this.parent.showFieldImageInValue ? d.image = !0 : (this.isShown() && this.updateImage(), 
this.isShown(!0) && this.updateImage(!0))), void 0 !== a.imageResizeMode && (this.imageResizeMode = a.imageResizeMode, 
d.imageResizeMode = !0, this.parent.showFieldImageInValue || (this.isShown() && this.updateImageResizeMode(), 
this.isShown(!0) && this.updateImageResizeMode(!0))), void 0 !== a.placeholder && (this.placeholder = a.placeholder, 
d.placeholder = !0), void 0 !== a.aggregationLabel && (this.aggregationLabel = a.aggregationLabel, 
d.aggregationLabel = !0), void 0 !== a.notifySelectionChange && (this.notifySelectionChange = a.notifySelectionChange), 
void 0 !== a.listTabOrderIndex && (this.listTabOrderIndex = a.listTabOrderIndex), 
void 0 !== a.formTabOrderIndex && (this.formTabOrderIndex = a.formTabOrderIndex), 
void 0 !== a.needFilterPopup && this.openFilterPopup(), void 0 !== a.needToOpenCombo && this.openCombo(), 
void 0 !== a.changeEventDef && (this.changeEventDef = a.changeEventDef), void 0 !== a.listStyle && (Client.Widget.updateCustomStyle({
styleToUpdate: this.listCustomStyle,
newStyle: a.listStyle
}), e = !0), void 0 !== a.formStyle && (Client.Widget.updateCustomStyle({
styleToUpdate: this.formCustomStyle,
newStyle: a.formStyle
}), e = !0), void 0 !== a.listHeaderStyle && (Client.Widget.updateCustomStyle({
styleToUpdate: this.listHeaderCustomStyle,
newStyle: a.listHeaderStyle
}), e = !0), void 0 !== a.formHeaderStyle && (Client.Widget.updateCustomStyle({
styleToUpdate: this.formHeaderCustomStyle,
newStyle: a.formHeaderStyle
}), e = !0), void 0 !== a.subFrameId && (this.subFrameId = a.subFrameId, r = this.parent.parentIdfView?.getSubFrame(this.subFrameId)) && (this.subFrameConf = r, 
this.subFrameConf.isSubFrame = !0, d.subFrameConf = !0), this.realizing || (this.parent.updateObjects({
structure: t,
calcLayout: e || t
}), l && this.isInList() && this.parent.updateSubRowsWidth()), i && this.applyVisualStyle(), 
n && this.updateHeader(), s && this.updateHeader(!0), o && (this.parent.tooltipOnEachRow ? d.tooltip = !0 : this.updateTooltip()), 
this.updateControls(d);
}
}, Client.IdfField.prototype.onEvent = function(e) {
var t = Client.Widget.prototype.onEvent.call(this, e);
return "onClick" !== e.id || e.obj !== this.listContainerId || Client.mainFrame?.isEditing() || (this.parent.showListVisisiblityControls ? this.parent.openControlListPopup(this) : this.parent.searchMode === Client.IdfPanel.searchModes.header ? this.openFilterPopup() : this.parent.canGroup && this.parent.showGroups ? t.push(...this.handleGrouping()) : this.isSortable() && t.push(...this.handleSort({
add: !e.content.ctrlKey,
resetAll: e.content.ctrlKey || !e.content.shiftKey
}))), t;
}, Client.IdfField.prototype.applyVisualStyle = function(e) {
if (!this.realizing) {
e || (this.applyHeaderVisualStyle(), this.applyHeaderVisualStyle(!0));
var t = this.isStatic(!0), i = t ? 1 : e ?? this.parent.getDataBlockStart(), n = t ? 1 : e ?? this.getDataBlockEnd();
for (let e = i; e <= n; e++) this.values[e] && this.values[e].applyVisualStyle();
}
}, Client.IdfField.prototype.applyHeaderVisualStyle = function(e) {
var t, i, n;
this.realizing || this.isShown(e) && !this.isStatic(!0) && (n = !this.optional && this.parent.status !== Client.IdfPanel.statuses.qbe && !this.parent.locked && !this.isStatic(), 
t = this.getHeaderAlignment(e), (n = {
objType: "fieldHeader",
notNull: n,
alignment: t = Client.IdfVisualStyle.getTextAlign(t)
}).list = !e && this.isInList(), i = e ? this.formHeaderId : this.isInList() ? this.listContainerId : this.outListHeaderId, 
i = Client.eleMap[i], this.addVisualStyleClasses(i, n), i = e ? this.formHeaderTextId : this.isInList() ? this.listHeaderTextId : this.outListHeaderTextId, 
this.addVisualStyleClasses(Client.eleMap[i], {
alignment: t
}), !e) && this.isInList() && -1 === this.aggregateOfField && (n = Client.eleMap[this.aggregateContainerId], 
this.addVisualStyleClasses(n, {
objType: "panel"
}));
}, Client.IdfField.prototype.updateControls = function(t, i) {
var {
index: e,
from: n,
to: s
} = i = i || {}, n = e ?? n ?? this.parent.getDataBlockStart(), o = e ?? s ?? this.getDataBlockEnd();
for (let e = n; e <= o; e++) {
var l = this.values[e];
l && l.updateControls(t, i);
}
}, Client.IdfField.prototype.isRightAligned = function() {
var e = Client.IdfVisualStyle.getByIndex(this.getVisualStyle());
let t = this.alignment;
return (t = -1 === t ? e ? e.getAlignment() : -1 : t) === Client.IdfVisualStyle.alignments.RIGHT || !!Client.IdfField.isNumeric(this.dataType) && !(!Client.mainFrame.isIDF && ![ Client.IdfField.controlTypes.EDIT, Client.IdfField.controlTypes.AUTO ].includes(this.controlType) || this.valueList && e?.getControlType() !== Client.IdfField.controlTypes.EDIT || this.autoLookup || t !== Client.IdfVisualStyle.alignments.AUTO);
}, Client.IdfField.prototype.isInList = function() {
return this.inList;
}, Client.IdfField.prototype.calcLayout = function(e) {
this.isShown() && this.parent.getListFieldColumn(this.id) && this.calcListFormLayout(!1, e), 
this.isShown(!0) && this.parent.getFormFieldColumn(this.id) && this.calcListFormLayout(!0, e);
}, Client.IdfField.prototype.calcListFormLayout = function(l, t) {
if (l || -1 === this.aggregateOfField) {
let e = {};
var a = {}, r = {}, i = this.canAdaptWidth(l) ? "" : "auto", d = this.getRects({
form: l
}), h = d.width, c = d.height, p = d.left, d = d.top;
let s = !l && this.isInList() ? this.parent.gridWidth : this.parent.getContainerWidth(l), o = !l && this.isInList() ? this.parent.gridHeight : this.parent.getContainerHeight(l);
var n = this.parent.getListRowHeight(this);
if (!l && this.isInList()) Client.mainFrame.isIDF ? (a.flexGrow = this.canAdaptWidth() ? "1" : "0", 
a.flexShrink = this.canAdaptWidth() ? "1" : "0", a.flexBasis = void 0 !== h ? h + "px" : "auto") : (a.flexBasis = this.listWidthPerc ? this.listWidthPerc + "%" : void 0 !== h ? h + "px" : "auto", 
a.flexGrow = this.parent.getChildFlexGrow(this), a.flexShrink = this.listResizeWidth === Client.IdfField.resizeModes.GROW ? "0" : ""), 
a.minWidth = "", void 0 !== h && this.group && !this.canAdaptWidth() && (a.minWidth = h + "px"), 
this.parent.hasDynamicHeightRows() ? (a.height = "", a.minHeight = n + "px", a.overflow = "") : (a.height = n + "px", 
a.minHeight = "", a.overflow = 1 < this.listNumRows ? "auto" : ""), (e = Object.assign({}, a)).height = this.group ? "" : this.parent.getHeaderHeight() + "px", 
e.minHeight = this.group ? "" : this.parent.getHeaderHeight() + "px", e.overflow = "hidden"; else {
var u = l && this.formHeaderAbove || !l && this.listHeaderAbove;
let t;
var f = l ? this.formHeaderSizePerc : this.listHeaderSizePerc;
if (t = void 0 !== f ? this.parent.originalWidth * f / 100 : l ? this.formHeaderSize : this.listHeaderSize, 
u ? (f = Client.mainFrame.isIDF ? 4 : 0, e.minHeight = t ? t + f + "px" : "", e.width = "") : (e.width = t ? t + "px" : "", 
e.minHeight = ""), r.padding = "0px", l && !Client.mainFrame.isIDF ? (r.flexBasis = this.formWidthPerc ? this.formWidthPerc + "%" : void 0 !== h ? h + "px" : "auto", 
r.flexGrow = this.canAdaptWidth(l) && !this.formWidthPerc || this.formResizeWidth === Client.IdfField.resizeModes.GROW ? "1" : "0", 
r.flexShrink = this.formWidthPerc || this.formResizeWidth === Client.IdfField.resizeModes.GROW ? "0" : "") : (r.flexBasis = void 0 !== h ? h + "px" : "auto", 
r.flexGrow = this.canAdaptWidth(l) ? "1" : "0"), r.minWidth = this.canAdaptWidth(l) ? "0" : h + "px", 
r.height = "auto", a.height = "", a.minHeight = "", a.overflow = "", void 0 !== c) {
let e = c;
u && t && (e = e - t - (Client.mainFrame.isIDF ? 4 : 0)), this.canAdaptHeight(l) ? l && this.formResizeHeight === Client.IdfField.resizeModes.GROW && (r.minHeight = c + "px") : (r.height = c + "px", 
a.height = e + "px");
}
1 < (l ? this.formNumRows : this.listNumRows) && (a.height = u ? "auto" : "", a.overflow = "auto");
let i = 0, n = 0;
this.group && (i = l ? this.group.formLeft : this.group.listLeft, n = l ? this.group.formTop : this.group.listTop, 
s = l ? this.group.formWidth : this.group.listWidth, o = l ? this.group.formHeight : this.group.listHeight);
f = l ? this.parent.getFormFieldColumn(this.id) : this.parent.getListFieldColumn(this.id);
if (f.canAdaptWidth = this.canAdaptWidth(l), f.canAdaptHeight = this.canAdaptHeight(l), 
l && !Client.mainFrame.isIDF) r.paddingLeft = this.formLeftPerc ? this.formLeftPerc + "%" : this.formLeft + "px", 
r.marginTop = this.formTopPerc ? this.formTopPerc + "%" : this.formTop + "px", r.paddingRight = "", 
r.marginBottom = "", this.formRight && (r.paddingRight = 0 <= this.formRight.indexOf("%") ? parseInt(this.formRight) + "%" : parseInt(this.formRight) + "px"), 
this.formBottom && (r.marginBottom = 0 <= this.formBottom.indexOf("%") ? parseInt(this.formBottom) + "%" : parseInt(this.formBottom) + "px"); else {
u = f.rect.left || 0, u = f.isMostLeft ? p - i : p - u;
r.marginLeft = u + "px";
let e = f.rect.deltaRight;
f.isMostRight && (e = (e = this.group ? s - h - (p - i) : s - h - p) < 0 ? 0 : e), 
r.marginRight = e + "px";
u = f.rect.top || 0, h = f.isMostTop ? d - n : d - u;
r.marginTop = h + "px";
let t = f.rect.deltaBottom;
f.isMostBottom && (t = (t = this.group ? o - c - (d - n) : o - c - d) < 0 ? 0 : t), 
r.marginBottom = t + "px";
}
}
if (!l && this.isInList()) {
var m, p = Client.eleMap[this.listContainerId], d = (p && (u = this.parent.isFixedField(this) ? this.parent.getFixedFieldLeft(this) + "px" : "", 
e.left = u, a.left = u, Client.Widget.updateStyle(p, this.listHeaderStyle, e), Client.Widget.updateStyle(p, this.listHeaderStyle, this.listHeaderCustomStyle), 
Client.Widget.updateObject(p, {
xs: i
}), Client.Widget.updateElementClassName(p, "fixed-col", !u), h = Object.assign({}, e), 
f = !!this.parent.visibleAggregateFields.length, h.height = f ? n + "px" : "0", 
h.minHeight = f ? n + "px" : "0", h.padding = f ? "2px 0 0 0" : "0", p = Client.eleMap[this.aggregateContainerId], 
Client.Widget.updateStyle(p, this.aggregateContainerStyle, h), Client.Widget.updateObject(p, {
xs: i
}), Client.Widget.updateElementClassName(p, "fixed-col", !u)), this.parent.canUseRowQbe() && ((c = Object.assign({}, a)).height = n + "px", 
c.minHeight = "", c.overflow = "", Client.Widget.updateStyle(void 0, this.listQbeValueStyle, c)), 
Client.Widget.updateStyle(void 0, this.listValueStyle, a), Client.Widget.updateStyle(void 0, this.listValueStyle, this.listCustomStyle), 
t ?? this.parent.getDataBlockStart()), C = t ?? this.getDataBlockEnd();
for (let e = d; e <= C; e++) this.values[e] && (m = this.parent.canUseRowQbe() && 0 === e ? this.listQbeValueStyle : this.listValueStyle, 
this.values[e].setListLayout({
style: m,
xs: i
}));
} else {
f = l ? this.formNumRows : this.listNumRows, c = (this.isStatic(!0) || (h = l ? this.formHeaderAbove : this.listHeaderAbove, 
p = l ? this.formHeaderId : this.outListHeaderId, u = l ? this.formHeaderStyle : this.outListHeaderStyle, 
n = l ? this.formHeaderCustomStyle : this.outListHeaderCustomStyle, Client.Widget.updateStyle(Client.eleMap[p], u, e), 
Client.Widget.updateStyle(Client.eleMap[p], u, n), Client.Widget.updateElementClassName(Client.eleMap[p], "fixed-height-col", 1 < f && !h)), 
l ? this.formValueId : this.outListValueId), t = (l ? this.formParentColConf : this.listParentColConf).id, 
d = l ? this.formValueStyle : this.outListValueStyle, u = l ? this.formCustomStyle : this.outListCustomStyle, 
n = l ? this.formParentColStyle : this.outListParentColStyle, p = Client.eleMap[c];
Client.Widget.updateStyle(p, d, a), Client.Widget.updateStyle(p, d, u), Client.Widget.updateElementClassName(p, "fixed-height-col", 1 < f), 
p = Client.eleMap[t], Client.Widget.updateStyle(p, n, r);
}
}
}, Client.IdfField.prototype.canAdaptWidth = function(e) {
var t = e ? this.formResizeWidth : this.listResizeWidth;
let i = this.parentIdfView?.resizeWidth !== Client.IdfView.resizeModes.NONE && (t === Client.IdfField.resizeModes.STRETCH || t === Client.IdfField.resizeModes.GROW);
return i = !e && this.isInList() ? i && this.parent.resizeWidth === Client.IdfPanel.resizeModes.stretch : i;
}, Client.IdfField.prototype.canAdaptHeight = function(e) {
var t = e ? this.formResizeHeight : this.listResizeHeight;
let i = this.parentIdfView?.resizeHeight !== Client.IdfView.resizeModes.NONE && (t === Client.IdfField.resizeModes.STRETCH || t === Client.IdfField.resizeModes.GROW);
return !e && this.isInList() && (i = !1), i = this.group?.collapsed ? !1 : i;
}, Client.IdfField.prototype.canMoveLeft = function() {
let e = this.parentIdfView?.resizeWidth !== Client.IdfView.resizeModes.NONE && this.listResizeWidth === Client.IdfField.resizeModes.MOVE;
return e = this.isInList() ? !1 : e;
}, Client.IdfField.prototype.canMoveTop = function() {
let e = this.parentIdfView?.resizeHeight !== Client.IdfView.resizeModes.NONE && this.listResizeHeight === Client.IdfField.resizeModes.MOVE;
return e = this.isInList() ? !1 : e;
}, Client.IdfField.prototype.getRects = function(e) {
var t = (e = e || {}).form;
if (e.checkVisibility && !this.isVisible(t)) return {
width: 0,
height: 0,
left: 0,
top: 0
};
let i, n, s, o;
var l = !t && this.isInList() ? this.parent.gridWidth : this.parent.originalWidth, a = !t && this.isInList() ? this.parent.gridHeight : this.parent.originalHeight, r = t ? this.formWidthPerc : this.listWidthPerc, l = (i = void 0 !== r ? l * r / 100 : t ? this.formWidth : this.listWidth, 
t ? this.formHeightPerc : this.listHeightPerc), r = (n = void 0 !== l ? a * l / 100 : t ? this.formHeight : this.listHeight, 
t ? this.formLeftPerc : this.listLeftPerc), a = (s = void 0 !== r ? this.parent.originalWidth * r / 100 : t ? this.formLeft : this.listLeft, 
t ? this.formTopPerc : this.listTopPerc);
return o = void 0 !== a ? this.parent.originalHeight * a / 100 : t ? this.formTop : this.listTop, 
e.real && (!t && this.isInList() ? i = Client.eleMap[this.listContainerId].getRootObject().clientWidth : (l = t ? this.formContainerId : this.outListContainerId, 
a = (r = Client.eleMap[l].getRootObject()).getBoundingClientRect(), e = this.parent.getRootObject().getBoundingClientRect(), 
i = r.clientWidth, n = r.clientHeight, s = a.left - e.left, o = a.top - e.top)), 
{
width: i,
height: n,
left: s,
top: o
};
}, Client.IdfField.prototype.getValueByIndex = function(e) {
return this.values[e];
}, Client.IdfField.prototype.getDataBlockEnd = function() {
var e = this.parent.getTotalRows();
let t = this.parent.getDataBlockEnd();
return t = t === e ? Math.max(e, this.values.length) : t;
}, Client.IdfField.prototype.getHeaderAlignment = function(e) {
let t = Client.IdfVisualStyle.alignments.LEFT;
var i;
return t = e || this.isInList() ? (-1 !== (t = this.alignment) && t !== Client.IdfVisualStyle.alignments.AUTO || (i = Client.IdfVisualStyle.getByIndex(this.getVisualStyle()), 
t = i ? i.getAlignment(e ? "formHeader" : "listHeader") : -1), -1 !== t && t !== Client.IdfVisualStyle.alignments.AUTO ? t : Client.mainFrame.isIDF || this.controlType !== Client.IdfField.controlTypes.CHECK || e ? this.isRightAligned() && !e && this.isInList() ? Client.IdfVisualStyle.alignments.RIGHT : Client.IdfVisualStyle.alignments.LEFT : Client.IdfVisualStyle.alignments.CENTER) : this.isRightAligned() && this.listHeaderAbove ? Client.IdfVisualStyle.alignments.RIGHT : Client.IdfVisualStyle.alignments.LEFT;
}, Client.IdfField.prototype.updateTooltip = function() {
let e = null;
var t;
this.isShown() && (t = this.isInList() ? Client.eleMap[this.listContainerId] : Client.eleMap[this.outListHeaderId], 
e = this.tooltip ? Client.Widget.getHTMLTooltip(this.listHeader, this.tooltip) : null, 
Client.Widget.updateObject(t, {
tooltip: e
})), this.isShown(!0) && (e = this.tooltip ? Client.Widget.getHTMLTooltip(this.formHeader, this.tooltip) : null, 
Client.Widget.updateObject(Client.eleMap[this.formHeaderId], {
tooltip: e
}));
}, Client.IdfField.prototype.updateHeader = function(n) {
if (this.isShown(n)) if (this.applyHeaderVisualStyle(n), this.isStatic()) this.values[1].updateElement({
text: this.header
}); else {
let e, t, i;
!n && this.isInList() ? (e = Client.eleMap[this.listContainerId], t = Client.eleMap[this.listHeaderTextId], 
i = Client.eleMap[this.listHeaderButtonId], Client.Widget.updateElementClassName(e, "field-header-clickable", !this.isSortable())) : (e = n ? Client.eleMap[this.formHeaderId] : Client.eleMap[this.outListHeaderId], 
t = n ? Client.eleMap[this.formHeaderTextId] : Client.eleMap[this.outListHeaderTextId], 
i = n ? Client.eleMap[this.formHeaderButtonId] : Client.eleMap[this.outListHeaderButtonId]);
var {
caption: s,
icon: o,
color: l
} = Client.Widget.extractCaptionData(n ? this.formHeader : this.listHeader), l = (o && Client.Widget.setIconImage({
image: o,
el: i,
color: l
}), Client.Widget.updateObject(i, {
visible: !!o
}), Client.Widget.updateObject(t, {
innerHTML: s,
visible: !!s
}), (n ? this.oldFormHeaderClassName : this.oldListHeaderClassName) || ""), o = (n ? this.formHeaderClassName : this.listHeaderClassName) || "";
l !== o && (Client.Widget.updateElementClassName(e, l, !0), Client.Widget.updateElementClassName(e, o)), 
n || Client.Widget.updateElementClassName(e, "field-has-filter", !this.qbeFilter), 
n ? delete this.oldFormHeaderClassName : delete this.oldListHeaderClassName;
}
}, Client.IdfField.prototype.showHeader = function(s) {
if (this.isShown(s) && !this.isStatic(!0)) {
let e = (s ? this.showFormHeader : this.showListHeader && 0 < this.parent.getHeaderHeight()) && this.isVisible(s);
this.isStatic() && (e = !1);
let t;
t = s ? Client.eleMap[this.formHeaderId] : this.isInList() ? Client.eleMap[this.listContainerId] : Client.eleMap[this.outListHeaderId];
let i, n;
n = !s && this.isInList() ? (i = this.listHeaderStyle, this.isVisible() ? {
display: "flex",
visibility: e ? "visible" : "hidden"
} : {
visibility: "visible",
display: e ? "flex" : "none"
}) : (i = s ? this.formHeaderStyle : this.outListHeaderStyle, {
display: e ? "flex" : "none"
}), Client.Widget.updateStyle(t, i, n);
}
}, Client.IdfField.prototype.setHeaderAbove = function(e) {
var t;
!this.isShown(e) || !e && this.isInList() || this.isStatic(!0) || (t = e ? Client.eleMap[this.formContainerId] : Client.eleMap[this.outListContainerId], 
e = e ? this.formHeaderAbove : this.listHeaderAbove, Client.Widget.updateElementClassName(t, "header-above", !e));
}, Client.IdfField.prototype.showClearFiltersButton = function(e) {
this.values[0]?.showClearFiltersButton(e);
}, Client.IdfField.prototype.updateImage = function(i) {
if (this.isShown(i) && !this.isStatic(!0)) {
let e, t;
e = i ? (t = this.formHeaderStyle, Client.eleMap[this.formHeaderId]) : (t = this.isInList() ? this.listHeaderStyle : this.outListHeaderStyle, 
this.isInList() ? Client.eleMap[this.listContainerId] : Client.eleMap[this.outListHeaderId]);
i = (Client.mainFrame.isIDF ? "images/" : "") + this.image;
Client.Widget.updateStyle(e, t, {
backgroundImage: "url('" + i + "')"
});
}
}, Client.IdfField.prototype.updateImageResizeMode = function(i) {
if (!this.isStatic(!0)) {
let e;
i = ((e = i ? Client.eleMap[this.formHeaderId] : this.isInList() ? Client.eleMap[this.listContainerId] : Client.eleMap[this.outListHeaderId]).className || e.getRootObject().className).split(" ").find(e => e.startsWith("control-blob-img"));
let t;
switch (this.imageResizeMode) {
case Client.IdfField.stretches.FIT:
t = "control-blob-img-fill";
break;

case Client.IdfField.stretches.CENTER:
t = "control-blob-img-enlarge";
}
i !== t && (Client.Widget.updateElementClassName(e, i, !0), Client.Widget.updateElementClassName(e, t));
}
}, Client.IdfField.prototype.updateSortMode = function() {
var t = Client.eleMap[this.listHeaderTextId];
if (t) {
let e = this.sortMode || this.groupingMode;
this.parent.status === Client.IdfPanel.statuses.qbe && (e = Client.IdfField.sortModes.NONE), 
Client.Widget.updateElementClassName(t, "sort-field-indicator-up", e !== Client.IdfField.sortModes.ASC), 
Client.Widget.updateElementClassName(t, "sort-field-indicator-down", e !== Client.IdfField.sortModes.DESC);
}
}, Client.IdfField.prototype.handleSort = function(n) {
let s = [];
if (this.parent.status !== Client.IdfPanel.statuses.qbe) {
if (void 0 === n.sortMode) switch (this.sortMode) {
case Client.IdfField.sortModes.NONE:
n.sortMode = Client.IdfField.sortModes.ASC;
break;

case Client.IdfField.sortModes.ASC:
n.sortMode = Client.IdfField.sortModes.DESC;
break;

case Client.IdfField.sortModes.DESC:
n.sortMode = Client.IdfField.sortModes.ASC;
}
if (Client.mainFrame.isIDF) {
let e, t, i;
switch (n.sortMode) {
case Client.IdfField.sortModes.NONE:
t = "-1", i = "-1";
break;

case Client.IdfField.sortModes.ASC:
e = 20;
break;

case Client.IdfField.sortModes.DESC:
e = 10;
}
s.push({
id: "clk",
def: this.clickEventDef,
content: {
oid: this.id,
par1: "cap",
yck: e,
shp: t,
ctp: i
}
});
} else this.parent.fields.forEach(t => {
if (n.resetAll || t === this) {
let e = n.resetAll ? Client.IdfField.sortModes.NONE : n.sortMode;
(e = n.add && t === this ? n.sortMode : e) !== t.sortMode && (t.updateElement({
sortMode: e
}), s.push({
id: "chgProp",
obj: t.id,
content: {
name: "sortMode",
value: e,
clid: Client.id
}
}));
}
}), s.push({
id: "fireOnSort",
obj: this.parent.id
});
}
return s;
}, Client.IdfField.prototype.handleGrouping = function(e) {
var t = [];
if (void 0 === e) switch (this.groupingMode) {
case Client.IdfField.groupingModes.NONE:
case Client.IdfField.groupingModes.ASC:
e = Client.IdfField.groupingModes.DESC;
break;

case Client.IdfField.groupingModes.DESC:
e = Client.IdfField.groupingModes.ASC;
}
let i;
switch (e) {
case Client.IdfField.groupingModes.NONE:
i = 2;
break;

case Client.IdfField.groupingModes.ASC:
i = 1;
break;

case Client.IdfField.groupingModes.DESC:
i = 30;
}
return Client.mainFrame.isIDF ? t.push({
id: "clk",
def: this.clickEventDef,
content: {
oid: this.id,
par1: "cap",
yck: i
}
}) : (this.updateElement({
groupingMode: e
}), t.push({
id: "chgProp",
obj: this.id,
content: {
name: "groupingMode",
value: e,
clid: Client.id
}
}), t.push({
id: "fireOnSort",
obj: this.parent.id,
content: {
grouping: !0
}
})), t;
}, Client.IdfField.prototype.hasAggregatedField = function() {
return !!this.parent.fields.find(e => e.aggregateOfField === this.index);
}, Client.IdfField.prototype.getAggregatedFieldParent = function() {
return this.parent.fields.find(e => e.index === this.aggregateOfField);
}, Client.IdfField.prototype.isEnabled = function(t) {
if (this.isStatic()) return !0;
var i = this.parent.status === Client.IdfPanel.statuses.qbe, n = this.parent.searchMode === Client.IdfPanel.searchModes.row;
if (i && void 0 !== t || n && 0 === t) return !(i && 1 < t || this.isLookup() && !this.autoLookup && !this.smartLookup || !this.enabledInQbe);
if (this.parent.locked && this.causeValidation) return !1;
if (this.page && !this.page.isEnabled()) return !1;
if (this.group && !this.group.isEnabled()) return !1;
let s = this.enabled;
if (s && t) {
n = this.getValueByIndex(t);
if (n && !n.isEnabled()) return !1;
let e = this.parent.isNewRow(t);
e || !this.parent.canInsert || this.parent.canUpdate || (i = this.parent.fields[0].getValueByIndex(t)) && (i.rowSelectorType === Client.IdfFieldValue.rowSelectorTypes.INSERTED_DOC_ERROR || i.rowSelectorType === Client.IdfFieldValue.rowSelectorTypes.INSERTED_DOC_UPDATED) && (e = !0), 
e || this.parent.canUpdate || this.parent.DOModified || (s = !1), e && !this.parent.canInsert && (s = !1), 
e && this.unbound && (s = !1);
}
return s;
}, Client.IdfField.prototype.isVisible = function(e, t) {
if (Client.mainFrame.isEditing()) {
if (e && (!this.parent.hasForm || !this.showInForm)) return !1;
if (!(e || this.parent.hasList && this.showInList)) return !1;
}
return !!this.isShown(e) && !!this.visible && !(!e && this.hiddenInList || this.page && !this.page.isVisible() || !t && this.group && !this.group.isVisible(e));
}, Client.IdfField.prototype.isStatic = function(e) {
return !(e && Client.mainFrame.isEditing() || this.type !== Client.IdfField.types.STATIC);
}, Client.IdfField.prototype.isLookup = function() {
return this.type >= Client.IdfField.types.LOOKUP;
}, Client.IdfField.prototype.isCombo = function() {
var e = this.getControlType();
if (e === Client.IdfField.controlTypes.AUTO) {
if (this.valueList || this.hasValueSource || this.smartLookup) return !0;
if (this.parent.canUseRowQbe() && this.values[0].valueList) return !0;
}
return e === Client.IdfField.controlTypes.COMBO;
}, Client.IdfField.prototype.isButton = function(e) {
return this.getControlType(e) === Client.IdfField.controlTypes.BUTTON;
}, Client.IdfField.prototype.getControlType = function(e) {
return this.controlType || (e = e?.getVisualStyle() ?? this.visualStyle, Client.IdfVisualStyle.getByIndex(e).getControlType());
}, Client.IdfField.prototype.addValue = function(e) {
this.values[e.index] = e;
}, Client.IdfField.prototype.updateMultiSelVisibility = function(t) {
for (let e = 1; e <= this.values.length; e++) this.values[e] && this.values[e].updateMultiSelVisibility(t);
}, Client.IdfField.prototype.selectRow = function(e, t) {
t = this.values[t];
t && t.selectRow(e);
}, Client.IdfField.prototype.isSortable = function() {
return this.parent.canSort && this.canSort && (!Client.mainFrame.isIDF || this.canSortFlag);
}, Client.IdfField.prototype.canUseHeaderQbe = function() {
var e = this.parent.searchMode === Client.IdfPanel.searchModes.header, t = this.enabledInQbe && (!this.isLookup() || this.autoLookup || this.smartLookup);
return e && this.parent.canSearch && (this.isSortable() || t) && this.dataType !== Client.IdfField.dataTypes.BLOB;
}, Client.IdfField.prototype.canUseRowQbe = function() {
return this.parent.searchMode === Client.IdfPanel.searchModes.row && this.parent.canSearch && this.dataType !== Client.IdfField.dataTypes.BLOB;
}, Client.IdfField.prototype.activateCombo = function(e) {
var t, i, n = [];
let s = Client.eleMap[e.obj];
return s && (t = s.parentWidget, !(s instanceof Client.IdfControl) && t instanceof Client.IdfFieldValue && (s = t.getSourceControl(e)), 
(i = t instanceof Client.IdfFilterPopup) || t.isRowQbe ? n.push(...this.handleQbeCombo({
popupId: i ? t.id : void 0
})) : this.smartLookup ? (s.waitingForList = !0, e.immediate = !0, e.content.value = "*", 
e.obj = s.id, n.push(...t.handleChange(e))) : this.hasValueSource ? n.push(...t.activateField(e, {
waitingForList: !0
})) : Client.mainFrame.isIDF || (s.waitingForList = !0, s.activateCombo())), n;
}, Client.IdfField.prototype.handleComboFilter = function(e) {
var t = [];
let i = Client.eleMap[e.obj];
if (i) {
var n = i.parentWidget, s = (!(i instanceof Client.IdfControl) && n instanceof Client.IdfFieldValue && (i = n.getSourceControl(e)), 
n instanceof Client.IdfFilterPopup), o = e.content.value;
if ("" === o && i.isCombo()) {
if (i.isComboOpen()) return t.push(...this.activateCombo(e)), t;
i.cancelComboOpening();
}
if (Client.mainFrame.isIDF || "" === o) if (s || n.isRowQbe) "" === o || !this.smartLookup && Client.mainFrame.isIDF ? t.push(...this.handleQbeFilter({
obj: i.id,
content: {
name: "value",
value: o
}
})) : t.push(...this.handleQbeCombo({
text: o,
popupId: s ? n.id : void 0
})); else {
let e;
this.smartLookup ? e = i.isComboOpen() || "" === o : this.hasValueSource && (e = !i.isComboOpen() && "" === o), 
t.push(...n.handleChange({
obj: i.id,
content: {
name: "value",
value: o
},
isComboFilter: !0,
immediate: e
}));
} else i.waitingForList = !0, t.push({
id: "fireEvent",
obj: this.id,
content: {
srcId: "onFilter",
row: n instanceof Client.IdfFieldValue ? n.getIndex(!0) : n.index,
srcObjId: n.id,
filter: o
}
});
}
return t;
}, Client.IdfField.prototype.handleQbeFilter = function(e) {
var t, i, n = [];
let s = (e.content.value ?? "") + "";
return (s = s.trim()) !== this.qbeFilter && ((i = Client.eleMap[e.obj])?.isCombo() && i.cancelComboOpening(), 
Client.mainFrame.isIDF ? (t = {
oid: this.id,
par1: s
}, "value" === e.content.name && (t.obn = e.content.clear ? "clear" : "qbefilter", 
this.smartLookup) && !e.content.filterPopup && i && (i = i.getComboRValueFromValue(s), 
this.updateElement({
qbeFilter: t.par1 = i
})), n.push({
id: "qbeset",
def: !this.hasValueSource || e.content.filterPopup ? Client.IdfMessagesPump.eventTypes.URGENT : Client.IdfMessagesPump.eventTypes.DEFERRED,
content: t
})) : (n.push({
id: "chgProp",
obj: this.id,
content: {
name: "qbeFilter",
value: s,
clid: Client.id
}
}), this.isCombo() && !this.valueList && n.push(...this.handleQbeCombo({
load: !0
})))), n;
}, Client.IdfField.prototype.handleQbeCombo = function(e) {
var t = [];
return Client.mainFrame.isIDF ? t.push({
id: "qbecombo",
def: Client.IdfMessagesPump.eventTypes.URGENT,
content: {
oid: this.id,
obn: e?.popupId,
par1: e?.text || (this.smartLookup ? "*" : "")
}
}) : t.push({
id: "fireEvent",
obj: this.id,
content: {
srcId: "onQBECombo",
srcObjId: this.id + ":" + (this.parent.searchMode === Client.IdfPanel.searchModes.toolbar ? "1" : "0"),
row: 0,
load: e?.load,
popup: e?.popupId,
text: e?.text || ""
}
}), t;
}, Client.IdfField.prototype.requestQBECombo = function() {
(!Client.mainFrame.isIDF && this.isCombo() && !this.valueList || Client.mainFrame.isIDF && this.autoLookup) && Client.mainFrame.sendEvents(this.handleQbeCombo({
load: !Client.mainFrame.isIDF
}));
}, Client.IdfField.prototype.resetCache = function(t) {
if (!this.isStatic()) {
var i = t.from ?? 1, n = t.to ?? this.values.length;
for (let e = i; e <= n; e++) {
var s = this.values[e];
!s || e >= t.dataBlockStart && e <= t.dataBlockEnd || (s.clearControls(), s.close(!0), 
this.values[e] = void 0);
}
}
}, Client.IdfField.prototype.resetCachedStyles = function(t) {
void 0 === t && (this.listHeaderStyle = {}, this.listValueStyle = {}, this.outListHeaderStyle = {}, 
this.outListValueStyle = {}, this.outListParentColStyle = {}, this.formHeaderStyle = {}, 
this.formValueStyle = {}, this.formParentColStyle = {}, this.aggregateContainerStyle = {});
var i = t ?? this.values.length;
for (let e = t ?? 0; e <= i; e++) this.values[e] && this.values[e].resetCachedStyles();
}, Client.IdfField.prototype.setRowError = function(e) {
this.values[e.row]?.updateElement({
rowErrorText: e.text
});
}, Client.IdfField.prototype.updateBlob = function() {
this.dataType === Client.IdfField.dataTypes.BLOB && this.updateControls({
updateBlobCommands: !0
});
}, Client.IdfField.prototype.updateVisibility = function(t) {
var i = [ "list", "form" ];
for (let e = 0; e < i.length; e++) {
var n = "form" === i[e], s = n ? this.parent.getFormFieldColumn(this.id) : this.parent.getListFieldColumn(this.id);
if (this.isShown(n) && s) {
if (this.showHeader(n), !n) {
let e, t;
var o, s = {};
-1 !== this.aggregateOfField ? (l = this.getAggregatedFieldParent(), e = l.aggregateContainerId, 
t = l.aggregateContainerStyle, o = l.isVisible(), s.display = o ? "flex" : "none", 
s.visibility = this.isVisible() ? "visible" : "hidden", this.parent.updateVisibleAggregateFields(l.id, !o)) : this.hasAggregatedField() || (e = this.aggregateContainerId, 
t = this.aggregateContainerStyle, s.display = this.isVisible() ? "flex" : "none", 
s.visibility = "visible"), Client.Widget.updateStyle(Client.eleMap[e], t, s);
}
var l = t ?? this.parent.getDataBlockStart(), a = t ?? this.getDataBlockEnd();
for (let e = l; e <= a; e++) this.values[e] && this.values[e].updateVisibility(n);
}
}
}, Client.IdfField.prototype.onPanelStatusChange = function() {
this.isInList() && this.updateSortMode(), this.updateControls({
isInQbe: !0
});
}, Client.IdfField.prototype.isShown = function(e) {
return !!Client.mainFrame.isEditing() || (e ? this.parent.hasForm && this.showInForm : this.parent.hasList && this.showInList);
}, Client.IdfField.prototype.handleResize = function() {
var e, t, i, n, s = [];
return Client.mainFrame.isIDF && (this.subFrameId && Client.eleMap[this.subFrameId] && s.push(...Client.eleMap[this.subFrameId].handleResize()), 
this.parent.layout !== Client.IdfPanel.layouts.form) && this.isInList() && this.isVisible() && (n = this.getRects({
real: !0
}), e = isNaN(n.width) ? void 0 : Math.floor(n.width), t = isNaN(n.height) ? void 0 : Math.floor(n.height), 
i = isNaN(n.left) ? void 0 : Math.floor(n.left), n = isNaN(n.top) ? void 0 : Math.floor(n.top), 
e) && t && (this.lastListWidth === e && this.lastListHeight === t && this.lastListLeft === i && this.lastListTop === n || s.push({
id: "resize",
def: Client.IdfMessagesPump.eventTypes.ACTIVE,
content: {
oid: this.id,
obn: "list",
par1: e,
par2: t,
par3: i,
par4: n
}
}), this.lastListWidth = e, this.lastListHeight = t, this.lastListLeft = i, this.lastListTop = n), 
s;
}, Client.IdfField.prototype.handleSelectionChange = function(e) {
var t, i = [];
return !this.notifySelectionChange && Client.mainFrame.isIDF || this.parent.status === Client.IdfPanel.statuses.qbe || (t = document.getSelection().getRangeAt(0), 
Client.mainFrame.isIDF ? i.push({
id: "txtsel",
def: this.parent.selectionChangeEventDef,
delay: 250,
content: {
oid: this.id,
par1: t.startOffset,
par2: t.endOffset
}
}) : i.push({
id: "onTextSelectionChanged",
obj: this.id,
content: {
start: t.startOffset,
end: t.endOffset
}
})), i;
}, Client.IdfField.prototype.focus = function(e) {
e = e || {};
let t;
if (t = void 0 !== e.absoluteRow ? e.absoluteRow : void 0 !== e.row && this.parent.layout !== Client.IdfPanel.layouts.form && this.isInList() ? this.parent.actualPosition + e.row : this.parent.layout === Client.IdfPanel.layouts.list && this.parent.canUseRowQbe() && !this.parent.getTotalRows(!0) ? 0 : this.parent.getActiveRowIndex(), 
delete e.row, delete e.absoluteRow, this.values[t]) return this.values[t].focus(e), 
!0;
}, Client.IdfField.prototype.isDraggable = function(e) {
return !(!this.parent.canReorderColumn && !Client.mainFrame?.isEditing() || !this.isInList() || !Client.Utils.isMyParent(e.getRootObject(), this.listContainerId));
}, Client.IdfField.prototype.canResizeW = function(e) {
return !(!this.parent.canResizeColumn && !Client.mainFrame?.isEditing() || !this.isInList() || !Client.Utils.isMyParent(e.getRootObject(), this.listContainerId)) || !!(this.isStatic() && this.formHeaderId && this.parent.layout === Client.IdfPanel.layouts.form && Client.Utils.isMyParent(e.getRootObject(), this.formHeaderId));
}, Client.IdfField.prototype.canResizeH = function(e) {
return !!(Client.mainFrame?.isEditing() && this.isStatic() && this.formHeaderId && this.parent.layout === Client.IdfPanel.layouts.form && Client.Utils.isMyParent(e.getRootObject(), this.formHeaderId));
}, Client.IdfField.prototype.applyDragDropCursor = function(e) {
let t = Client.eleMap[this.listContainerId]?.getRootObject();
(t = Client.mainFrame?.isEditing() ? (this.parent.layout === Client.IdfPanel.layouts.form ? Client.eleMap[this.formHeaderId] : this.inList ? Client.eleMap[this.listContainerId] : Client.eleMap[this.outListHeaderId])?.getRootObject() : t) && ([ "e-resize", "w-resize", "s-resize", "n-resize" ].includes(e) ? (t.setAttribute("opnt", "dd"), 
t.style.cursor = e, t.classList.add("system-cursor"), t.onmouseleave || (t.onmouseleave = Client.Widget.ddClearPointer)) : t.getAttribute("opnt") && (t.style.cursor = "", 
t.setAttribute("opnt", ""), t.classList.remove("system-cursor")));
}, Client.IdfField.prototype.canBeDroppedOn = function(e, t, i) {
return !this.isInList() || !this.parent.canReorderColumn && !Client.mainFrame?.isEditing() || !Client.Utils.isMyParentEl(i, Client.eleMap[this.listContainerId]) || !!(e instanceof Client.IdfField && e.isInList() && this.parent === e.parent && Client.Utils.isMyParentEl(t, Client.eleMap[e.listContainerId]));
}, Client.IdfField.prototype.acceptsDrop = function(e, t) {
return !!((this.parent.canReorderColumn || Client.mainFrame?.isEditing()) && e instanceof Client.IdfField && this.isInList() && e.isInList() && e.parent === this.parent && Client.Utils.isMyParentEl(t, Client.eleMap[this.listContainerId]) || Client.mainFrame?.isEditing() && e instanceof Client.IdfControl && this.isInList() && !e.parentWidget?.parent.isInList() && e.parentWidget?.parent.parent === this.parent && Client.Utils.isMyParentEl(t, Client.eleMap[this.listContainerId]) || Client.mainFrame?.isEditing() && e instanceof Client.IdfControl && e.parentWidget?.parent.parent === this.parent && (Client.Utils.isMyParentEl(t, Client.eleMap[this.formHeaderId]) || Client.Utils.isMyParentEl(t, Client.eleMap[this.outListHeaderId])) || Client.mainFrame?.isEditing() && e instanceof Client.IdfGroup && e.parent === this.parent && Client.Utils.isMyParentEl(t, Client.eleMap[this.formContainerId]));
}, Client.IdfField.prototype.handleDrop = function(e, t, i, n, s, o) {
var l;
Client.mainFrame?.isEditing() ? (l = e instanceof Client.IdfControl ? e.parentWidget?.parent : e, 
this.parent.handleEditOperation(Client.IdfPanel.editOperations.drag, [ l ], this, {
x: i,
y: n,
deltaX: o.deltaX,
deltaY: o.deltaY
}, s)) : this.parent.reorderList(e, this);
}, Client.IdfField.prototype.getSupportedTransformOperation = function(e, t, i, n) {
n = n || (this.parent.layout === Client.IdfPanel.layouts.list ? this.isInList() ? Client.eleMap[this.listContainerId] : Client.eleMap[this.outListHeaderId] : Client.eleMap[this.formHeaderId])?.getRootObject();
let s = Client.Widget.prototype.getSupportedTransformOperation.call(this, e, t, i, n);
return s = Client.mainFrame?.isEditing() && this.parent.layout === Client.IdfPanel.layouts.list && this.inList && s === Client.Widget.transformOperation.RESIZELEFT ? Client.Widget.transformOperation.NONE : s;
}, Client.IdfField.prototype.getTransformOperationTargetObj = function(e, t) {
return (this.parent.layout === Client.IdfPanel.layouts.list ? this.isInList() ? Client.eleMap[this.listContainerId] : Client.eleMap[this.outListContainerId] : Client.eleMap[this.formContainerId])?.getRootObject();
}, Client.IdfField.prototype.onTransform = function(s) {
if (Client.mainFrame?.isEditing()) {
var e = this.parent.layout === Client.IdfPanel.layouts.list;
let n = [];
if (e) {
e = Client.eleMap[(e && this.group ? this.group.listContainerConf : this.parent.panelContainerConf).id]?.getRootObject()?.getBoundingClientRect() || {
top: 0,
left: 0,
width: 100,
height: 100
};
let i = s.w / e.width * 100;
Client.ViewEdit.getEditorSelectedElements(this).forEach(e => {
var t = {
id: e.id
};
e.listWidthPerc ? t.listWidthPerc = Math.round(i) : t.listWidth = s.w, t.listResizeWidth = "1", 
n.push(t);
}), Client.eleMap.editm.editProxy?.appCmd([ {
id: this.parent.id,
c: "editDone",
newStruct: n,
reorder: [],
grid: {}
} ]);
}
} else {
var e = s.w < 50 ? 50 : Math.ceil(s.w), t = [];
Client.mainFrame.isIDF ? t.push({
id: "rescol",
def: Client.IdfMessagesPump.eventTypes.ACTIVE,
content: {
oid: this.id,
obn: "",
par1: e
}
}) : t.push({
id: "fireOnFieldResized",
obj: this.parent.id,
content: {
field: this.index,
oldWidth: this.listWidth,
newWidth: e
}
}), Client.mainFrame.sendEvents(t), this.updateElement({
listWidth: e
});
}
}, Client.IdfField.prototype.getDomObjFromId = function(e) {
return e.includes(":fv") || e.includes(":fc") && this.isStatic() ? Client.eleMap[this.formValueId].getRootObject() : e.includes(":fc") ? Client.eleMap[this.formHeaderId].getRootObject() : e.includes(":lc") ? Client.eleMap[this.listContainerId].getRootObject() : e.includes(":lv") ? (e = parseInt(e.substring(e.indexOf(":lv") + 3)), 
Client.eleMap[this.values[e].listContainerId].getRootObject()) : void 0;
}, Client.IdfField.prototype.getPopupTarget = function(e) {
return e && e !== this.id ? this.getDomObjFromId(e) : this.isStatic() ? this.values[1].getPopupTarget() : void 0;
}, Client.IdfField.prototype.canHaveFocus = function(e) {
return e = e ?? this.parent.getActiveRowIndex(), !(this.group && !this.group.canHaveFocus() || 0 === e && this.parent.layout === Client.IdfPanel.layouts.list && !this.isInList() || this.dataType === Client.IdfField.dataTypes.BLOB || (e = this.isStatic() ? 1 : e, 
!this.getValueByIndex(e)?.isVisible(this.parent.layout)));
}, Client.IdfField.prototype.openFilterPopup = function() {
Client.mainFrame.isEditing() || !this.canUseHeaderQbe() && !this.canUseRowQbe() || this.parent.layout === Client.IdfPanel.layouts.list && !this.isShown() || this.parent.layout === Client.IdfPanel.layouts.form && !this.isShown(!0) || new Client.IdfFilterPopup({
id: "filter-popup",
field: this
}, this.view, this.view);
}, Client.IdfField.prototype.openCombo = function() {
this.parent.layout === Client.IdfPanel.layouts.list && !this.isShown() || this.parent.layout === Client.IdfPanel.layouts.form && !this.isShown(!0) || this.values[this.parent.getActiveRowIndex()].openCombo();
}, Client.IdfField.prototype.handleFunctionKeys = function(e) {
var t = [], i = this.parent.layout === Client.IdfPanel.layouts.form;
return this.command && this.isEnabled(i) && this.isVisible(i) && !this.isStatic() && t.push(...Client.eleMap[this.command].handleFunctionKeys(e, -1, -1)), 
t;
}, Client.IdfField.prototype.createFakeFieldsValues = function() {
var e = [], i = this.isStatic(!0) ? 1 : Client.IdfPanel.maxReusableRows, n = this.customChildrenConf || [];
for (let t = 1; t <= i; t++) {
var s = [];
for (let e = 0; e < n.length; e++) {
var o = Object.assign({}, n[e]);
o.id = this.id + ":" + t + ":el" + (e + 1), o._skipUpdate = !0, s.push(o);
}
var l = {
id: this.id + ":" + t,
c: "IdfFieldValue",
index: t,
text: this.getEditorText(t),
customChildrenConf: s.length ? s : void 0
}, l = this.createElementConfig(l);
e.push(l);
}
return e;
}, Client.IdfField.prototype.createFieldValue = function(t, i) {
let n;
this.parent.hasGroupedRows() && 0 !== t && !(n = this.parent.getRowsGroupByIndex(t)) && (t = this.parent.groupedRowsRoot.groupedIndexToRealIndex(t));
var s = (n ? "rowsgroup:" : "") + (Client.mainFrame.isIDF ? "val:" + t + this.id.replace("fld", "") : this.id + ":" + t);
if (!Client.eleMap[s]) {
i = this.getValueByIndex(i);
let e;
return e = i ? i.clone({
id: s,
index: t,
clientSide: !0
}) : new Client.IdfFieldValue({
id: s,
index: t,
class: "IdfFieldValue",
clientSide: !0,
rowsGroup: n
}, this, this.view), this.elements.push(e), e;
}
}, Client.IdfField.prototype.getEditorValueList = function() {
if (this.valueList) return this.valueList;
let t = null;
switch (this.controlType) {
case Client.IdfField.controlTypes.COMBO:
t = {
items: []
};
var i = this.isStatic(!0) ? 1 : 9;
for (let e = 1; e <= i; e++) t.items.push({
name: this.listHeader + e,
value: this.listHeader + e
});
break;

case Client.IdfField.controlTypes.CHECK:
(t = {
items: []
}).items.push({
name: "true",
value: -1
}), t.items.push({
name: "false",
value: 0
});
break;

case Client.IdfField.controlTypes.OPTION:
t = {
items: []
};
for (let e = 1; e <= 2; e++) t.items.push({
name: "option" + e,
value: "option" + e
});
}
return t;
}, Client.IdfField.prototype.getEditorText = function(e) {
let t = "";
return this.valueList?.items ? t = this.valueList.items[Math.floor(Math.random() * this.valueList.items.length)].value : Client.IdfField.isNumeric(this.dataType) && this.controlType !== Client.IdfField.controlTypes.COMBO && !this.valueList ? t = this.dataType === Client.IdfField.dataTypes.INTEGER ? e : 1234 : Client.IdfField.isDateOrTime(this.dataType) ? t = new Date().toISOString() : this.dataType !== Client.IdfField.dataTypes.BLOB && (t = this.isStatic() ? this.header : this.listHeader + e), 
t;
}, Client.IdfField.prototype.getEditorHilightObject = function() {
return (this.parent.layout === Client.IdfPanel.layouts.list ? this.isInList() ? Client.eleMap[this.listContainerId] : Client.eleMap[this.outListContainerId] : Client.eleMap[this.formContainerId]).getRootObject();
}, Client.IdfField.prototype.reInit = function() {
this.values = [];
var e = {
children: []
};
for (p in Client.IdfField.transPropMap) void 0 !== this[Client.IdfField.transPropMap[p]] && (e[Client.IdfField.transPropMap[p]] = this[Client.IdfField.transPropMap[p]]);
for (p in Client.Widget.transPropMap) void 0 !== this[Client.Widget.transPropMap[p]] && (e[Client.Widget.transPropMap[p]] = this[Client.Widget.transPropMap[p]]);
this.close(!0), (Client.eleMap[this.id] = this).realizing = !0, this.elements = [], 
this.children = [], this.realize(e, this.parent, this.view), this.updateElement(e), 
delete this.realizing;
}, Client.IdfField.prototype.insertBefore = function(t) {
if (Client.mainFrame.isIDF) return Client.Element.prototype.insertBefore.call(this, t);
var e = this.customChildrenConf?.slice() || [];
e.find(e => e.id === t.child.id) || (e.push(t.child), this.updateElement({
customChildrenConf: e
}));
for (let e = 1; e <= this.values.length; e++) this.values[e] && this.values[e].insertBefore(t);
}, Client.IdfField.prototype.removeChild = function(t) {
if (Client.mainFrame.isIDF) return Client.Element.prototype.insertBefore.call(this, t);
var e = this.customChildrenConf?.slice() || [], i = e.findIndex(e => e.id === t.id);
if (-1 !== i) {
for (let e = 1; e <= this.values.length; e++) this.values[e] && this.values[e].removeChild(t);
e.splice(i, 1), this.updateElement({
customChildrenConf: e
});
}
}, Client.IdfField.prototype.updateTemplate = function(t) {
var e = (this.customChildrenConf?.slice() || []).findIndex(e => e.id === t.obj);
if (-1 !== e) for (let e = 1; e <= this.values.length; e++) this.values[e] && this.values[e].updateTemplate(t);
}, Client.IdfField.prototype.close = function(e, t) {
this.resetCache({}), Client.Widget.prototype.close.call(this, e, t), this.isInList() && (this.parent.restoreRowSelectors(), 
this.parent.updateViewportListFields(this), Client.eleMap[this.listContainerId]) && this.parent.intersectionObserver?.unobserve(Client.eleMap[this.listContainerId].getRootObject());
}, Client.IdfField.prototype.getResizeTooltip = function(e, t) {
var i = this.parent, n = i?.layout === Client.IdfPanel.layouts.form;
this.panRectTtp || (i = Client.eleMap[(n ? i.formContainerConf : (this.group || i).listContainerConf).id]?.getRootObject(), 
this.panRectTtp = {
width: i?.clientWidth || 0,
height: i?.clientHeight || 0
});
let s = "";
return e && (s += "width: " + (this[n ? "formWidthPerc" : "listWidthPerc"] ? Math.round(e / this.panRectTtp.width * 100) + "%" : e)), 
t && (s += "height: " + (this[n ? "formHeightPerc" : "listHeightPerc"] ? Math.round(t / this.panRectTtp.height * 100) + "%" : t)), 
s;
}, Client.IdfField.prototype.clearResizeTooltip = function() {
delete this.panRectTtp;
}, Client.IdfField.prototype.getComboType = function() {
return this.smartLookup ? Client.IdfField.comboTypes.SMARTLOOKUP : this.autoLookup ? Client.IdfField.comboTypes.AUTOLOOKUP : this.hasValueSource ? Client.IdfField.comboTypes.NOAUTOLOOKUP : void 0;
}, Client || {}), Client = (Client.IdfFieldValue = function(e, t, i) {
this.parentField = t, this.parentPanel = t.parent, this.index = e.index, this.rowsGroup = e.rowsGroup, 
this.rowsGroup && void 0 !== (this.rowsGroup.parentFieldValue = this).rowsGroup?.aggregations[this.parentField.index] && (e.text = "", 
Client.IdfField.isNumeric(this.parentField.dataType) || Client.IdfField.isDateOrTime(this.parentField.dataType) || (e.text += this.parentField.aggregationLabel || ""), 
e.text += this.rowsGroup.aggregations[this.parentField.index]);
var n = this.getIndex();
e.index = n, this.index = n, e = Object.assign({
text: "",
errorText: "",
rowErrorText: "",
backColor: "",
color: "",
fontModifiers: "",
className: "",
badge: "",
mask: "",
visible: -1,
enabled: -1,
visualStyle: -1,
alignment: -1,
isRowQbe: 0 === this.index
}, e), this.listStyle = {}, this.rowSelectorStyle = {}, this.rowsGroupHeaderStyle = {}, 
this.listCustomStyle = {}, this.parentField.addValue(this), Client.Widget.call(this, e, t, i);
}, Client.IdfFieldValue.prototype = new Client.Widget(), Client.IdfFieldValue.transPropMap = {
idx: "index",
txt: "text",
vis: "visible",
ena: "enabled",
err: "errorText",
ety: "errorType",
rse: "rowSelectorType",
mim: "blobMime",
mty: "htmlBlobMime",
url: "blobUrl",
aln: "alignment",
bkc: "backColor",
frc: "color",
msk: "mask",
ftm: "fontModifiers"
}, Client.IdfFieldValue.cloneProps = [ "enabled", "text", "visualStyle", "alignment", "className", "controlType", "valueList", "backColor", "color", "mask", "fontModifiers", "badge", "blobMime", "htmlBlobMime", "blobUrl", "tooltip" ], 
Client.IdfFieldValue.controlProps = [ "enabled", "text", "type", "visualStyle", "alignment", "image", "canSort", "isHyperLink", "controlType", "customElement", "container", "dataType", "isPassword", "showOnlyIcon", "maxLength", "scale", "optional", "valueList", "hasValueSource", "smartLookup", "autoLookup", "editorType", "activatorImage", "activatorWidth", "canActivate", "activableDisabled", "superActive", "useHtml", "aggregationLabel", "isRowQbe", "backColor", "color", "mask", "fontModifiers", "badge", "blobMime", "htmlBlobMime", "blobUrl", "imageResizeMode", "multiUpload", "uploadExtensions", "showHtmlEditorToolbar", "className", "placeholder", "listNumRows", "formNumRows", "rowHeightResize", "comboMultiSel", "comboSeparator", "customChildrenConf", "subFrameConf" ], 
Client.IdfFieldValue.dynamicProps = [ "text", "className", "visible", "enabled", "alignment", "backColor", "color", "mask", "fontModifiers", "badge", "tooltip" ], 
Client.IdfFieldValue.blobMimeTypes = {
TEXT: "text",
IMAGE: "image",
SIZE: "size",
EMPTY: "empty"
}, Client.IdfFieldValue.rowSelectorTypes = {
DOC_ERROR: 1,
DOC_UPDATED: 2,
INSERTED_DOC_ERROR: 3,
INSERTED_DOC_UPDATED: 4
}, Client.IdfFieldValue.errorTypes = {
NONE: 0,
ERROR: 1,
CONFIRM_WARNING: 2,
WARNING: 3
}, Client.IdfFieldValue.convertPropValues = function(e) {
let t;
if ((e = e || {}).index) {
for (var i of Client.IdfFieldValue.dynamicProps) e[i] = e[i] || "";
t = !0;
}
for (var n in e) switch (n) {
case Client.IdfFieldValue.transPropMap.idx:
case Client.IdfFieldValue.transPropMap.rse:
case Client.IdfFieldValue.transPropMap.ety:
e[n] = parseInt(e[n]);
break;

case Client.IdfFieldValue.transPropMap.vis:
case Client.IdfFieldValue.transPropMap.ena:
case Client.IdfFieldValue.transPropMap.aln:
t && "" === e[n] ? e[n] = -1 : e[n] = parseInt(e[n]);
}
}, Client.IdfFieldValue.prototype.realize = function(e, t, i) {
this.createChildren(e);
}, Client.IdfFieldValue.prototype.updateElement = function(e) {
this.parentPanel.creatingChildren && delete this.clientSide;
let t, i, n;
var s, o = {};
1 !== (e = e || {}).index || this.parentPanel.status !== Client.IdfPanel.statuses.qbe || Client.mainFrame.isIDF || this.updateQbeFilter(), 
e.skipWidgetApplyVisualStyle = !0, Client.mainFrame.isIDF && this.parentField.superActive && "text" in e && e.id && 0 < --this.chgTextCount && delete e.text, 
Client.Widget.prototype.updateElement.call(this, e), delete e.skipWidgetApplyVisualStyle, 
i = e.applyVisualStyle, delete e.applyVisualStyle, void 0 !== e.customChildrenConf && (this.customChildrenConf = e.customChildrenConf, 
o.customChildrenConf = !0, this.customChildrenConf.forEach(e => {
Client.mainFrame.translateProperties(e, Client.transPropMap);
var t = e.id.split(":");
this.index !== parseInt(t[1]) && (t[1] = this.index, e.id = t.join(":"));
})), void 0 !== e.mask && (this.mask = e.mask, o.mask = !0), this.parentField.smartLookup && "*" === e.text && delete e.text, 
void 0 !== e.text && (this.isInQbe() && this.parentField.controlType === Client.IdfField.controlTypes.CHECK && "" === e.text && (e.text = "---"), 
this.text = e.text, o.text = !0, o.aggregationLabel = !0, o.mask = !0, this.errorText) && !e.errorText && (e.errorText = "", 
e.errorType = Client.IdfFieldValue.errorTypes.NONE), void 0 !== e.visible && e.visible !== this.visible && (this.visible = e.visible, 
t = !0), void 0 !== e.enabled && (this.enabled = e.enabled, o.enabled = !0, i = !0), 
void 0 !== e.errorText && (this.errorText = e.errorText, o.tooltip = !0, n = !0), 
void 0 !== e.rowErrorText && (this.rowErrorText = e.rowErrorText, o.tooltip = !0, 
n = !0), void 0 !== e.errorType && (this.errorType = e.errorType, i = !0), void 0 !== e.tooltip && (o.tooltip = !0), 
void 0 !== e.blobMime && (this.blobMime = e.blobMime), void 0 !== e.htmlBlobMime && (this.htmlBlobMime = e.htmlBlobMime), 
void 0 !== e.blobUrl && (this.blobUrl = e.blobUrl), void 0 !== e.alignment && (this.alignment = e.alignment, 
o.alignment = !0), void 0 !== e.backColor && (this.backColor = e.backColor, o.backColor = !0, 
i = !0), void 0 !== e.color && (this.color = e.color, o.color = !0), void 0 !== e.fontModifiers && (this.fontModifiers = e.fontModifiers, 
o.fontModifiers = !0), void 0 !== e.className && (this.className = e.className, 
o.className = !0), void 0 !== e.badge && (o.badge = !0), void 0 !== e.valueList && (this.valueList = e.valueList, 
(this.parentField.smartLookup || this.parentField.hasValueSource) && (this.valueList.disableCache = Math.random()), 
o.valueList = !0), void 0 !== e.controlType && (o.controlType = !0), void 0 !== e.rowSelectorType && ((s = this.parentPanel.getFirstInListField()) && this.parentField !== s ? (delete this.rowSelectorType, 
s.getValueByIndex(this.index)?.updateElement({
rowSelectorType: e.rowSelectorType
})) : (this.rowSelectorType = e.rowSelectorType, this.updateRowSelectorIcon())), 
void 0 !== e.style && (Client.Widget.updateCustomStyle({
styleToUpdate: this.listCustomStyle,
newStyle: e.style
}), t = !0), t && this.parentPanel.calcLayout(), i && this.applyVisualStyle(), n && this.updateErrorStatus(), 
this.updateControls(o);
}, Client.IdfFieldValue.prototype.onEvent = function(e) {
var t = [];
if (e.content instanceof Array && this.customElement && !this.customElement.subFrameId) t.push(...this.customElement.onEvent(e)), 
t.forEach(e => {
e.content.oid = this.id, e.content.ace = this.parentField.id;
}); else switch (t.push(...Client.Widget.prototype.onEvent.call(this, e)), e.id) {
case "chgProp":
this.customElement && !this.customElement.subFrameId && (t.push(...this.customElement.onEvent(e)), 
e.content.name === Client[this.customElement._class].defaultBindingProperty) && ((e = JSON.parse(JSON.stringify(e))).content.name = "value", 
e.content.value += ""), "value" === e.content.name ? t.push(...this.handleChange(e)) : "filter" === e.content.name ? t.push(...this.parentField.handleComboFilter(e)) : "errorText" === e.content.name ? (e.obj = this.parentField.id, 
e.content.index = this.getIndex(!0), t.push(e)) : "checked" === e.content.name && e.obj === this.multiSelCheckbox?.id && t.push(...this.parentPanel.handleDataRowSelection(e.content.value, this.getIndex(!0)));
break;

case "onKey":
t.push(...this.handleActivate(e));
break;

case "onClick":
case "onDblclick":
case "onContextmenu":
"onClick" === e.id && this.rowsGroup && this.rowsGroupHeaderId ? (t.push(...this.rowsGroup.onEvent(e)), 
this.updateRowsGroupHeader({
expanded: !0
})) : (t.push(...this.parentPanel.handleDataRowClick(e, this)), e.obj === this.rowSelectorId || "onContextmenu" === e.id && !this.parentPanel.activateOnRightClick || e.content.srcEvent.defaultPrevented || t.push(...this.handleActivate(e)));
break;

case "onBlobCommand":
t.push(...this.handleBlobCommand(e));
break;

case "onFocusin":
case "onFocusout":
t.push(...this.handleFocus(e));
break;

case "onDragover":
var i = this.getSourceControl(e);
e.content.srcEvent.preventDefault(), e.content.srcEvent.dataTransfer.dropEffect = i?.canAcceptDrop(e.content.srcEvent) ? "move" : "none";
}
if (this.customChildrenConf) {
var n = Client.Utils.findElementFromDomObj(e.content.srcEvent?.target);
if (!n?.events?.includes(e.id) && "chgProp" !== e.id) return t;
e.content.srcEvent?.stopPropagation(), t.push({
id: "fireEvent",
obj: this.parentField.id,
content: {
srcId: e.id,
row: this.getIndex(!0),
srcObjId: ("chgProp" === e.id ? this : n).id
}
});
}
return t;
}, Client.IdfFieldValue.prototype.clone = function(e, t, i) {
e = Client.Widget.prototype.clone.call(this, e, t, i);
return e.parent = this.parent, e.parentField = this.parentField, e.parentPanel = this.parentPanel, 
e.parentField.addValue(e), e;
}, Client.IdfFieldValue.prototype.createRowSelectorConfig = function() {
var e = this.parentPanel.getListRowOffset() ? " offset-col" : "", t = this.parentPanel.showRowSelector ? " first-visible-col" : "", e = this.createElementConfig({
c: "IonCol",
className: "panel-list-col row-selector-col" + e + t,
xs: "auto",
events: [ "onClick", "onDblClick" ],
visible: this.parentPanel.showRowSelector
}), {
icon: t,
cssClass: i
} = this.getRowSelectorProps(), i = this.createElementConfig({
c: "IonButton",
className: "row-selector" + (i ? " " + i : ""),
icon: t,
visible: !this.isRowQbe
});
return e.children.push(i), this.rowSelectorId = e.id, e;
}, Client.IdfFieldValue.prototype.createListConfig = function() {
var e = this.parentField.createControlConfig(!1, this.index), t = this.createElementConfig(e.container), e = this.createElementConfig(e.control);
return t.children.push(e), this.listContainerId = t.id, this.listControlId = e.id, 
t;
}, Client.IdfFieldValue.prototype.createRowsGroupHeaderConfig = function() {
var e = this.createElementConfig({
c: "IonCol",
className: "panel-list-col group-header-col",
tabIndex: 0,
xs: "auto",
events: [ "onClick" ]
}), t = this.createElementConfig({
c: "IonButton",
className: "group-exp-icon"
}), i = (e.children.push(t), this.createElementConfig({
c: "IonText",
type: "span",
innerText: this.rowsGroup?.label || ""
}));
return e.children.push(i), this.rowsGroupHeaderId = e.id, this.rowsGroupHeaderTextId = i.id, 
this.expandRowsGroupButtonId = t.id, e;
}, Client.IdfFieldValue.prototype.getIndex = function(e) {
let t = this.index;
return this.parentField.isStatic() || 0 === t || this.parentPanel.hasGroupedRows() && !this.rowsGroup && (t = e ? this.parentPanel.groupedRowsRoot.groupedIndexToRealIndex(t) : this.parentPanel.groupedRowsRoot.realIndexToGroupedIndex(t)), 
t;
}, Client.IdfFieldValue.prototype.getVisualStyle = function() {
return (-1 !== this.visualStyle ? this : this.parentField).visualStyle;
}, Client.IdfFieldValue.prototype.getControlType = function() {
let e;
var t = Client.eleMap[this.listControlId];
return t ? e = t.getType() : this.outListControl ? e = this.outListControl.getType() : this.formControl && (e = this.formControl.getType()), 
e;
}, Client.IdfFieldValue.prototype.getValueList = function() {
return this.valueList || this.parentField.valueList;
}, Client.IdfFieldValue.prototype.getAlignment = function() {
let e = -1 !== this.alignment ? this.alignment : void 0;
var t = -1 !== this.parentField.alignment ? this.parentField.alignment : void 0, i = Client.IdfVisualStyle.getByIndex(this.getVisualStyle());
return (e = e || t || i?.getAlignment()) && e !== Client.IdfVisualStyle.alignments.AUTO || (e = this.parentField.isRightAligned() ? Client.IdfVisualStyle.alignments.RIGHT : Client.IdfVisualStyle.alignments.LEFT), 
e = this.isRowQbe ? Client.IdfVisualStyle.alignments.LEFT : e;
}, Client.IdfFieldValue.prototype.isClickable = function() {
return this.parentField.isHyperLink || Client.IdfVisualStyle.getByIndex(this.getVisualStyle())?.getHyperLinkFlag();
}, Client.IdfFieldValue.prototype.getRowSelectorProps = function() {
let e, t = "";
if (this.isRowQbe) e = "remove-circle"; else switch (this.rowSelectorType) {
case Client.IdfFieldValue.rowSelectorTypes.DOC_ERROR:
case Client.IdfFieldValue.rowSelectorTypes.INSERTED_DOC_ERROR:
e = "close-circle", t = "error";
break;

case Client.IdfFieldValue.rowSelectorTypes.DOC_UPDATED:
case Client.IdfFieldValue.rowSelectorTypes.INSERTED_DOC_UPDATED:
e = "medical", t = "updated";
break;

default:
e = "arrow-round-forward";
}
return {
icon: e,
cssClass: t
};
}, Client.IdfFieldValue.prototype.updateRowSelectorIcon = function() {
var e, t, i = Client.eleMap[this.rowSelectorId];
i && ({
icon: e,
cssClass: t
} = this.getRowSelectorProps(), i = i.elements[0], Client.Widget.setIconImage({
image: e,
el: i
}), Client.Widget.updateElementClassName(i, "updated", "updated" !== t), Client.Widget.updateElementClassName(i, "error", "error" !== t));
}, Client.IdfFieldValue.prototype.updateMultiSelVisibility = function(e) {
var t, i, n = Client.eleMap[this.rowSelectorId];
n && (t = n.elements[0], e ? (Client.Widget.updateObject(t, {
visible: !1
}), e = this.parentPanel.isNewRow(this.index) || this.isInQbe(), this.multiSelCheckbox || (i = this.createElementConfig({
c: "IonCheckbox",
className: "control-checkbox"
}), this.multiSelCheckbox = n.insertBefore({
child: i
})), Client.Widget.updateObject(this.multiSelCheckbox, {
disabled: e
})) : (Client.Widget.updateObject(t, {
visible: !0
}), this.multiSelCheckbox && (n.removeChild(this.multiSelCheckbox), delete this.multiSelCheckbox)));
}, Client.IdfFieldValue.prototype.selectRow = function(e) {
this.rowSelectorId && Client.Widget.updateObject(this.multiSelCheckbox, {
checked: e
});
}, Client.IdfFieldValue.prototype.showClearFiltersButton = function(e) {
var t;
this.rowSelectorId && this.isRowQbe && (t = e ? Client.Widget.getHTMLTooltip("", e ? Client.IdfResources.t("FIL_CLEARALLFILTERS") : "") : null, 
Client.Widget.updateObject(Client.eleMap[this.rowSelectorId].elements[0], {
visible: e,
tooltip: t
}));
}, Client.IdfFieldValue.prototype.setListLayout = function(e) {
var t, i = Client.eleMap[this.listContainerId];
i && (t = !this.parentPanel.hasDynamicHeightRows() && 1 === this.parentField.listNumRows || this.isInQbe(), 
Client.Widget.updateStyle(i, this.listStyle, e.style), this.isRowQbe || Client.Widget.updateStyle(i, this.listStyle, this.listCustomStyle), 
void 0 !== e.xs && Client.Widget.updateObject(i, {
xs: e.xs
}), Client.Widget.updateElementClassName(i, "fixed-col", !this.listStyle.left), 
Client.Widget.updateElementClassName(i, "fixed-height-col", !t), (i = Client.eleMap[this.rowSelectorId]) && (t = {
height: e.style.height,
left: this.parentPanel.fixedColumns ? 0 : ""
}, Client.Widget.updateStyle(i, this.rowSelectorStyle, t), Client.Widget.updateElementClassName(i, "fixed-col", !this.parentPanel.fixedColumns)), 
t = Client.eleMap[this.rowsGroupHeaderId]) && (i = {
height: e.style.height,
paddingLeft: this.rowsGroup ? 5 + 15 * this.rowsGroup.level + "px" : "",
display: this.rowsGroup ? "" : "none"
}, Client.Widget.updateStyle(t, this.rowsGroupHeaderStyle, i), this.updateRowsGroupHeader({
expanded: !0
}));
}, Client.IdfFieldValue.prototype.clearControls = function() {
this.outListContainer && (this.elements.splice(this.elements.findIndex(e => e === this.outListContainer)), 
this.outListContainer.parent = this.parentField, this.outListContainer.parentWidget = this.parentField), 
delete this.outListContainer, delete this.outListControl, this.formContainer && (this.elements.splice(this.elements.findIndex(e => e === this.formContainer)), 
this.formContainer.parent = this.parentField, this.formContainer.parentWidget = this.parentField), 
delete this.formContainer, delete this.formControl;
}, Client.IdfFieldValue.prototype.assignControls = function(e) {
e.outListContainer && (this.outListContainer = e.outListContainer, this.outListControl = e.outListControl, 
this.elements.push(this.outListContainer), (this.outListContainer.parent = this).outListContainer.parentWidget = this), 
e.formContainer && (this.formContainer = e.formContainer, this.formControl = e.formControl, 
this.elements.push(this.formContainer), (this.formContainer.parent = this).formContainer.parentWidget = this), 
this.updateControls({
all: !0,
skipInList: !0
}), this.updateControls({
customChildrenConf: !0
}), this.updateControls({
subFrameConf: !0
}), this.updateErrorStatus(!0);
}, Client.IdfFieldValue.prototype.applyVisualStyle = function() {
var t, i = {
objType: "field",
list: !1,
readOnly: !this.parentField.isEnabled(this.index),
qbe: this.isInQbe() && !this.parentField.isStatic() && (!this.parentField.isLookup() || this.parentField.autoLookup || this.parentField.smartLookup),
error: this.errorType === Client.IdfFieldValue.errorTypes.ERROR,
warning: this.errorType === Client.IdfFieldValue.errorTypes.WARNING || this.errorType === Client.IdfFieldValue.errorTypes.CONFIRM_WARNING
}, e = (this.formContainer && (this.applyBackgroundColor(this.formContainer, this.parentField.formValueStyle), 
this.addVisualStyleClasses(this.formContainer, i)), Client.eleMap[this.listContainerId]);
if (this.outListContainer) {
let e = this.parentField.outListValueStyle;
-1 !== this.parentField.aggregateOfField && (t = this.parentField.getAggregatedFieldParent(), 
e = t.aggregateContainerStyle), this.applyBackgroundColor(this.outListContainer, e), 
this.addVisualStyleClasses(this.outListContainer, i);
} else if (e) if (this.rowsGroup) this.addVisualStyleClasses(e, {
objType: "rowsgroup"
}); else {
i.list = !0, i.alternate = this.index % 2 == 0, i.activeRow = this.index === this.parentPanel.getActiveRowIndex(), 
0 !== this.index && this.applyBackgroundColor(e, this.listStyle), this.addVisualStyleClasses(e, i);
var n = Client.eleMap[this.rowSelectorId];
if (n && (this.addVisualStyleClasses(n, i), 1 < this.parentPanel.numSubRows)) for (let e = 1; e < this.parentPanel.numSubRows; e++) this.addVisualStyleClasses(n.parent.parent.elements[e].elements[0], i);
}
this.updateControls({
visualStyle: !0
});
}, Client.IdfFieldValue.prototype.applyBackgroundColor = function(e, t) {
var i;
Client.mainFrame.isIDF && ((i = {}).backgroundColor = this.backColor, "" !== this.backColor && !this.parentField.isStatic() || void 0 === this.parentField.backColor || (i.backgroundColor = this.parentField.backColor), 
Client.Widget.updateStyle(e, t, i));
}, Client.IdfFieldValue.prototype.isBackgroundApplied = function() {
return !0;
}, Client.IdfFieldValue.prototype.updateControls = function(e, i) {
if (i = i || {}, !this.parentField.isInList() || this.parentPanel.layout !== Client.IdfPanel.layouts.list || this.parentPanel.viewportListFields.includes(this.parentField.id) || i.force) {
i = (e = e || {}).all;
let t;
i ? (t = Client.IdfFieldValue.controlProps.slice(), this.customElement && !this.customElement.subFrameId && (t = t.concat(Object.keys(this.customElement.customProps)))) : (t = Object.keys(e)).push("enabled");
var n = this.isInQbe(), s = {};
for (let e = 0; e < t.length; e++) {
var o = t[e];
if ("enabled" === o) {
var l = this.parentField.isStatic() ? this.parentField.enabled : this.parentField.isEnabled(this.index);
this.parentField.isButton(this) ? s.enabled = l || this.parentField.activableDisabled : s.enabled = l;
} else if ("text" === o) s.value = (Client.mainFrame.isEditing() && 0 !== this.index ? this.parentField.getEditorText(this.index) : this.text) ?? "", 
s.blobMime = this.blobMime, s.htmlBlobMime = this.htmlBlobMime, s.blobUrl = this.blobUrl; else if ("type" === o) s.contentEditable = !this.parentField.isStatic(); else if ("useHtml" === o) s.useHtml = this.parentField.isStatic(); else if ("visualStyle" === o) s.visualStyle = this.getVisualStyle(); else if ([ "smartLookup", "autoLookup", "hasValueSource" ].includes(o)) s.comboType = this.parentField.getComboType(); else if ("alignment" === o) {
l = this.getAlignment();
l && (s.alignment = l);
} else if ("image" === o) s.image = this.parentPanel.showFieldImageInValue ? this.parentField.image : void 0; else if ("imageResizeMode" === o) s.imageResizeMode = this.convertImageResizeMode(); else if ("canSort" === o) s.canSort = this.parentField.isSortable(); else if ("isHyperLink" === o) s.clickable = this.isClickable(); else if ("maxLength" !== o || !n) if ("controlType" === o) s.type = this.parentField.controlType; else if ("rowHeightResize" === o) s.heightResize = this.parentPanel.hasDynamicHeightRows(); else if ("customElement" === o) this.customElement && !this.customElement.subFrameId && (s.customElement = this.customElement); else if ("valueList" === o) {
let e = this.valueList ?? this.parentField.valueList;
e = e && JSON.parse(JSON.stringify(e)), this.parentField.valueList && (e.isStatic = !0), 
s.valueList = e;
} else "aggregationLabel" === o ? (Client.IdfField.isNumeric(this.parentField.dataType) || Client.IdfField.isDateOrTime(this.parentField.dataType)) && (s.maskPrefix = this.rowsGroup ? this.parentField.aggregationLabel : "") : Client.IdfFieldValue.dynamicProps.includes(o) ? (s[o] = this[o], 
"" !== this[o] && -1 !== this[o] || void 0 === this.parentField[o] || this.rowsGroup && "mask" !== o || (s[o] = this.parentField[o]), 
"className" === o && (s.classNameOnParent = !0)) : "customChildrenConf" === o ? s.customChildrenConf = this.customChildrenConf?.slice() || this.customChildrenConf : "subFrameConf" === o ? (s.subFrameConf = this.subFrameConf || this.parentField.subFrameConf, 
!s.subFrameConf && this.customElement?.subFrameId && (this.subFrameConf = this.parentIdfView?.getSubFrame(this.customElement.subFrameId), 
s.subFrameConf = this.subFrameConf)) : this.customElement && !this.customElement.subFrameId && this.customElement.customProps[o] ? s[o] = this.customElement[o] : s[o] = this[o] ?? this.parentField[o];
}
this.parentField.dataType === Client.IdfField.dataTypes.BLOB && (e.updateBlobCommands || i) && (a = this.getBlobCommands(), 
s.uploadBlobEnabled = a.upload, s.deleteBlobEnabled = a.delete, s.viewBlobEnabled = a.view), 
(e.isInQbe || i) && (s.isInQbe = n, Client.mainFrame.isIDF) && this.parentField.dataType === Client.IdfField.dataTypes.DATETIME && (s.dataType = n ? Client.IdfField.dataTypes.DATE : Client.IdfField.dataTypes.DATETIME);
var a = {
...s
}, r = {
...s
};
return (s.container || i) && (a.container = this.parentField.isInList() ? Client.eleMap[this.listContainerId] : this.outListContainer, 
r.container = this.formContainer), s.listNumRows && (a.numRows = s.listNumRows), 
s.formNumRows && (r.numRows = s.formNumRows), (e.tooltip || i) && (a.tooltip = this.getTooltip(), 
r.tooltip = this.getTooltip(!0)), (e.customChildrenConf || i) && (this.parentPanel.layout === Client.IdfPanel.layouts.form && (this.parentField.isStatic() || this.index === this.parentPanel.getActiveRowIndex()) || (r.customChildrenConf = null), 
r.customChildrenConf || Client.mainFrame.isEditing() && !this.parentField.isVisible()) && (a.customChildrenConf = null), 
(e.subFrameConf || i) && (this.parentPanel.layout !== Client.IdfPanel.layouts.list && (this.parentField.isStatic() || this.index === this.parentPanel.getActiveRowIndex()) || (r.subFrameConf = null), 
r.subFrameConf) && (a.subFrameConf = null), void 0 !== s.value && (a.skipEmptyComboList = this.parentPanel.layout === Client.IdfPanel.layouts.form, 
r.skipEmptyComboList = !a.skipEmptyComboList), (s.heightResize || i) && (this.parentField.isInList() || delete a.heightResize, 
delete r.heightResize), a.forceEditType = this.parentField.isInList() && (n || this.parentPanel.isNewRow(this.index)), 
e.listClassName && void 0 !== this.parentField.listClassName && (a.className = this.parentField.listClassName), 
this.parentField.isInList() ? e.skipInList || Client.eleMap[this.listControlId]?.updateElement(a) : this.outListControl?.updateElement(a), 
this.formControl?.updateElement(r), !0;
}
}, Client.IdfFieldValue.prototype.updateVisibility = function(e) {
var t, i;
(e || -1 === this.parentField.aggregateOfField) && (t = this.isVisible(e), e || ((i = Client.eleMap[this.listContainerId]) ? (this.parentField.isVisible() ? Client.Widget.updateStyle(i, this.listStyle, {
display: "flex",
visibility: t ? "visible" : "hidden"
}) : Client.Widget.updateStyle(i, this.listStyle, {
display: t ? "flex" : "none",
visibility: "visible"
}), Client.Widget.updateElementClassName(i, "first-visible-col", this.parentPanel.getFirstVisibleField({
inList: !0,
checkRowSelector: !0
}) !== this.parentField), Client.Widget.updateElementClassName(i, "last-visible-col", this.parentPanel.getLastVisibleField({
inList: !0,
checkRowSelector: !0
}) !== this.parentField)) : this.outListContainer && (this.parentPanel.getListFieldColumn(this.parentField.id).visible = t, 
i = Client.eleMap[this.parentField.listParentColConf.id], Client.Widget.updateStyle(i, this.parentField.outListParentColStyle, {
display: t ? "flex" : "none"
}))), e) && this.formContainer && (this.parentPanel.getFormFieldColumn(this.parentField.id).visible = t, 
i = Client.eleMap[this.parentField.formParentColConf.id], Client.Widget.updateStyle(i, this.parentField.formParentColStyle, {
display: t ? "flex" : "none"
}));
}, Client.IdfFieldValue.prototype.isVisible = function(e) {
return !!this.parentField.isVisible(e) && !!this.visible;
}, Client.IdfFieldValue.prototype.isEnabled = function() {
if (this.rowsGroup) return !1;
let e = !!this.enabled;
return e = -1 === this.enabled ? this.parentField.enabled : e;
}, Client.IdfFieldValue.prototype.isInQbe = function() {
return this.parentPanel.status === Client.IdfPanel.statuses.qbe && 1 === this.getIndex(!0) || this.isRowQbe;
}, Client.IdfFieldValue.prototype.handleChange = function(s) {
var e = [];
if (this.parentField.dataType !== Client.IdfField.dataTypes.BLOB) {
var o = this.getSourceControl(s);
if (o) {
var l = o.getType();
if (Client.IdfField.isNumeric(this.parentField.dataType) && l === Client.IdfField.controlTypes.EDIT) {
var t = o.getMask(), i = o.getMaskType();
if (mask_mask(this.text, t, i) === mask_mask(s.content.value, t, i)) return e;
}
t = this.parentField.smartLookup && "*" === s.content.value;
if (s.content.value !== this.text || t) {
let n;
if (t) n = "*"; else if (s.isComboFilter) n = s.content.value, this.parentField.autoLookup && "" === n && this.updateElement({
text: ""
}); else {
let e = s.content.value;
this.parentField.smartLookup && (e = o.control.lastDescription), this.updateElement({
text: e
}), n = o.getValueToSend();
}
if (this.isRowQbe) s.content.value = n, e.push(...this.parentField.handleQbeFilter(s)); else if (Client.mainFrame.isIDF) {
s.isComboFilter || (s.immediate = !o.isListOwner() && o.isCombo()), o.customElement && (s.immediate = !0);
let t = 0, i;
l !== Client.IdfField.controlTypes.EDIT || this.parentField.superActive || (i = Client.IdfMessagesPump.defaultDelay), 
(this.parentField.superActive || s.immediate) && (t = Client.IdfMessagesPump.eventTypes.IMMEDIATE, 
i = Client.IdfMessagesPump.superActiveDelay), this.parentField.superActive && n.trim() !== n && (i = Client.IdfMessagesPump.whiteSpaceDelay), 
this.parentField.superActive && (this.chgTextCount = (this.chgTextCount || 0) + 1), 
e.push({
id: "chg",
content: {
par1: n
}
}), e.forEach(e => {
e.def = this.parentField.changeEventDef | t, e.delay = i, e.updateStartTime = !!this.parentField.superActive, 
e.content.oid = this.id;
});
} else e.push({
obj: this.parentField.id,
id: "chgProp",
content: {
name: "text",
value: n,
index: this.getIndex(!0),
clid: Client.id
}
});
}
}
}
return e;
}, Client.IdfFieldValue.prototype.handleActivate = function(i) {
var n = [];
if (i.content = i.content || {}, !this.parentField.isStatic() || this.parentField.isButton() || this.isClickable()) {
var e = this.parentField.isStatic() ? this.parentField.enabled : this.parentField.isEnabled(this.index);
if (e || this.parentField.activableDisabled) {
var s = this.getSourceControl(i), o = s.getType();
let t = s.isActivatorClick(i);
if (!(t && s.isCombo() && s.control?.displayTimerId)) if (!Client.mainFrame.isEditing() && (this.isRowQbe && t || 114 === i.content.keyCode)) this.parentField.openFilterPopup(); else if (!this.isRowQbe) {
var l = i.content.keyCode === Client.IdfPanel.FKActField + 111, o = (l && (t = !0), 
o === Client.IdfField.controlTypes.BUTTON), o = o && (e || this.parentField.activableDisabled) || !o && this.parentField.canActivate && (t || [ "onDblclick", "onContextmenu" ].includes(i.id)) && (e || this.parentField.activableDisabled) || this.isClickable();
if (o || this.parentField.hasValueSource && this.parentField.command) if (this.parentField.command) n.push(...Client.eleMap[this.parentField.command].handleClick(i)); else {
let e;
!o && t && this.parentField.hasValueSource && (e = !0), n.push(...this.activateField(i, {
waitingForList: e,
isFunctionKey: l,
isActivatorClick: t
}));
} else t && s.isCombo() && !s.isComboOpen() && n.push(...this.parentField.activateCombo(i));
}
}
}
return n;
}, Client.IdfFieldValue.prototype.activateField = function(t, e) {
var i = [], n = this.getSourceControl(t), {
waitingForList: e,
isFunctionKey: s,
isActivatorClick: o
} = e;
if (Client.mainFrame.isIDF) {
n.waitingForList = e;
n = this.parentField.isStatic() ? "cap" : void 0, e = (this.parentField.isStatic() ? this.parentField : this).id;
i.push({
id: "clk",
def: this.parentField.clickEventDef,
content: {
oid: e,
xck: t.content.offsetX,
yck: t.content.offsetY,
par1: n
}
});
} else if (!this.parentField.isStatic()) {
let e = Client.IdfField.activationReasons.ACTIVATOR_CLICK;
"onDblclick" === t.id ? e = Client.IdfField.activationReasons.DOUBLECLICK : "onContextmenu" === t.id ? e = o ? Client.IdfField.activationReasons.ACTIVATOR_RIGHTCLICK : Client.IdfField.activationReasons.RIGHTCLICK : s && (e = Client.IdfField.activationReasons.FUNCTIONKEY), 
i.push({
id: "onActivated",
obj: this.parentField.id,
content: {
reason: e
}
});
}
return i;
}, Client.IdfFieldValue.prototype.getBlobCommands = function() {
var e = {
upload: this.parentPanel.isCommandEnabled(Client.IdfPanel.commands.CMD_BLOBEDIT),
delete: this.parentPanel.isCommandEnabled(Client.IdfPanel.commands.CMD_BLOBDELETE),
view: this.parentPanel.isCommandEnabled(Client.IdfPanel.commands.CMD_BLOBSAVEAS)
}, t = this.blobMime || Client.IdfFieldValue.blobMimeTypes.EMPTY;
return (!this.parentField.isEnabled(this.index) || this.parentPanel.status === Client.IdfPanel.statuses.qbe || this.parentPanel.isNewRow() && Client.mainFrame.isIDF) && (e.upload = !1, 
e.delete = !1), t === Client.IdfFieldValue.blobMimeTypes.EMPTY && (e.view = !1, 
e.delete = !1), e;
}, Client.IdfFieldValue.prototype.handleBlobCommand = function(t) {
let i = [];
switch (t.content.command) {
case Client.IdfControl.blobCommands.UPLOAD:
this.handleBlobUpload(t);
break;

case Client.IdfControl.blobCommands.DELETE:
var e = {
type: Client.Widget.msgTypes.CONFIRM,
text: Client.IdfResources.t("PAN_MSG_ConfirmDeleteBLOB", [ this.parentField.header ])
};
Client.Widget.showMessageBox(e, e => {
1 === e && (i.push(...this.handleBlobDelete(t)), Client.mainFrame.sendEvents(i));
});
break;

case Client.IdfControl.blobCommands.DOWNLOAD:
case Client.IdfControl.blobCommands.VIEW:
t.command = t.content.command, i.push(...this.handleBlobDownload(t));
}
return i;
}, Client.IdfFieldValue.prototype.handleBlobUpload = function(o) {
let i = "";
var l = [];
for (let t = 0; t < o.content.files.length; t++) {
var n = o.content.files[t];
let e = !1;
if ((e = "*.*" === this.parentField.uploadExtensions || this.parentField.uploadExtensions.split(",").map(e => e.split(".").pop()).includes(n.name.split(".").pop())) || (i = (i += i ? Client.IdfResources.t("SWF_ER_FILENOTSEND") : "") + ("<br>" + n.name + " : " + Client.IdfResources.t("SWF_ER_VALIDATIONFAILED"))), 
n.size) {
if (n.size > this.parentField.maxUploadSize) {
e = !1;
let t = this.parentField.maxUploadSize;
var s = [ "B", "KB", "MB", "GB" ];
for (let e = 0; e < s.length; e++) if (this.parentField.maxUploadSize < Math.pow(1024, e + 1)) {
t = Math.round(this.parentField.maxUploadSize / Math.pow(1024, e), 0) + " " + s[e];
break;
}
i = (i += i ? Client.IdfResources.t("SWF_ER_FILENOTSEND") : "") + ("<br>" + n.name + " : " + Client.IdfResources.t("SWF_ER_FILESIZEEXCEEDED") + " (max " + t + ")");
}
} else e = !1, i = (i += i ? Client.IdfResources.t("SWF_ER_FILENOTSEND") : "") + ("<br>" + n.name + " : " + Client.IdfResources.t("SWF_ER_VALIDATIONFAILED"));
e && l.push(n);
}
if (i) Client.mainFrame.isIDF ? Client.Widget.showMessageBox({
type: Client.Widget.msgTypes.ALERT,
text: i
}) : (console.warn(i), Client.mainFrame.sendEvents([ {
obj: this.parentField.id,
id: "onUploadError",
content: i.replaceAll("<br>", "\n").trim()
} ])); else {
let s = this.parentField.multiUpload ? "IWFiles" : "IWUpload";
if (Client.idfOffline || !Client.mainFrame.isIDF && !this.parentField.multiUpload) for (let e = 0; e < o.content.files.length; e++) {
let i = o.content.files[e];
var t = new FileReader();
t.onload = e => {
var t = [];
Client.mainFrame.isIDF ? t.push({
id: s,
def: Client.IdfMessagesPump.eventTypes.ACTIVE,
content: {
par1: this.parentField.id,
par2: i.name,
par3: i.type,
par4: e.target.result,
par5: i.size
}
}) : t.push({
obj: this.parentField.id,
id: "chgProp",
content: {
name: "text",
value: e.target.result,
index: this.getIndex(!0),
clid: Client.id
}
}), Client.mainFrame.sendEvents(t);
}, t.readAsDataURL(i);
} else {
let e, n;
if (Client.mainFrame.isIDF) {
e = `?WCI=${s}&WCE=` + this.parentField.id, n = Client.mainFrame.messagesPump.createRequest();
var a = Client.eleMap[o.obj]?.getRootObject();
n.uploaderId = a.id;
let i = document.getElementById(n.uploaderId);
i && i.classList.add("multiupload-progress"), n.addEventListener("load", () => {
if (200 === n.status) {
i && (i.classList.remove("multiupload-progress"), i.style.backgroundSize = "");
let e = n.responseText || "";
0 === e.indexOf("pppppp") && (e = e.substr(256, e.length - 256));
var t = new DOMParser().parseFromString(e, "text/xml");
Client.mainFrame.handleIDFResponse(n.reqCode, t);
}
}, !1), n.upload.addEventListener("progress", e => {
var t;
e.lengthComputable && (e = Math.ceil(e.loaded / e.total * 100), t = document.getElementById(n.uploaderId)) && t.style.setProperty("background-size", e + "% 100%", "important");
}), n.upload.addEventListener("error", e => {
i && (i.classList.remove("multiupload-progress"), i.style.backgroundSize = "");
});
} else this.parentField.events.includes("onUpload") && (Client.isOffline() ? (a = [ {
obj: this.parentField.id,
id: "fireOnUpload",
content: l
} ], Client.mainFrame.sendEvents(a)) : (e = Client.Utils.getRESTQueryString({
msgType: "input-upload",
objId: this.parentField.id
}), n = new XMLHttpRequest()));
if (n) {
let i = new FormData();
l.forEach((e, t) => i.append("file" + t, e, e.name)), n.open("POST", e, !0), n.send(i);
}
}
}
}, Client.IdfFieldValue.prototype.handleBlobDelete = function(e) {
var t = [];
return Client.mainFrame.isIDF ? t.push({
id: "pantb",
def: this.parentPanel.toolbarEventDef,
content: {
oid: this.parentPanel.id,
obn: "delblob" + this.parentField.index
}
}) : t.push({
obj: this.parentField.id,
id: "chgProp",
content: {
name: "text",
index: this.getIndex(!0),
clid: Client.id
}
}), t;
}, Client.IdfFieldValue.prototype.handleBlobDownload = function(e) {
var t = [];
return t.push({
id: "fireOnDownloadBlob",
obj: this.parentPanel.id,
content: {
field: this.parentField.index,
row: this.getIndex(!0) - 1,
command: e.command
}
}), t;
}, Client.IdfFieldValue.prototype.handleFocus = function(e) {
var t, i = [];
switch (e.id) {
case "onFocusin":
Client.Utils.findElementFromDomObj(e.content.srcEvent.srcElement)?.parentWidget === this && this.focus(), 
this.parentPanel.layout === Client.IdfPanel.layouts.list ? (this.parentPanel.lastFocusedFieldValueInList = this).parentField.isStatic() || i.push(...this.parentPanel.handleRowChange(this.index)) : this.parentPanel.lastFocusedFieldInForm = this.parentField;
break;

case "onFocusout":
!Client.IdfMessagesPump.isActiveEvent(this.parentField.changeEventDef) && !this.isRowQbe || Client.IdfMessagesPump.isActiveEvent(this.parentPanel.focusEventDef) || Client.mainFrame.messagesPump?.sendEvents(!0);
}
return Client.mainFrame.isIDF ? i.push({
id: "fev",
def: this.parentPanel.focusEventDef,
delay: 250,
content: {
oid: this.parentPanel.id,
obn: this.parentField.index,
par1: "onFocusin" === e.id ? "1" : "0"
}
}) : this.parentField.events.includes(t = "onFocusin" === e.id ? "onFocus" : "onBlur") && i.push({
id: "fireOnFocus",
obj: this.parentPanel.id,
content: {
field: this.parentField.index,
row: this.getIndex(!0) - 1,
eventName: t
}
}), i;
}, Client.IdfFieldValue.prototype.handleSelectionChange = function(e) {
return this.parentField.handleSelectionChange(e);
}, Client.IdfFieldValue.prototype.updateQbeFilter = function() {
let t = this.parentField.qbeFilter;
!t && !this.parentField.autoLookup || this.valueList || this.parentField.requestQBECombo(), 
this.getControlType() !== Client.IdfField.controlTypes.CHECK || this.parentField.qbeFilter || (t = "---");
var e = Client.eleMap[this.listControlId];
if (this.parentField.smartLookup) if (this.parentField.qbeFilter instanceof Array) {
t = "";
var i = e.getComboNameSeparator();
for (let e = 0; e < this.parentField.qbeFilter.length; e++) t += (0 < t.length ? i : "") + this.parentField.qbeFilter[e].name;
} else -1 !== this.parentField.qbeFilter.indexOf("fld:") && (t = e.getComboValueFromRValue(this.parentField.qbeFilter));
this.updateElement({
text: t
});
}, Client.IdfFieldValue.prototype.getSourceControl = function(e) {
let t;
switch (e.obj) {
case this.listContainerId:
case this.listControlId:
t = Client.eleMap[this.listControlId];
break;

case this.outListContainer?.id:
case this.outListControl?.id:
t = this.outListControl;
break;

case this.formContainer?.id:
case this.formControl?.id:
t = this.formControl;
}
return t;
}, Client.IdfFieldValue.prototype.focus = function(e) {
let t;
(t = this.parentPanel.layout === Client.IdfPanel.layouts.list ? Client.eleMap[this.listControlId] || this.outListControl : this.formControl) && (t.focus(e), 
this.parentPanel.layout === Client.IdfPanel.layouts.list ? this.parentPanel.lastFocusedFieldValueInList = this : this.parentPanel.lastFocusedFieldInForm = this.parentField);
}, Client.IdfFieldValue.prototype.getPopupTarget = function() {
return this.parentPanel.layout === Client.IdfPanel.layouts.list ? Client.eleMap[this.listContainerId] || this.outListContainer : this.formContainer;
}, Client.IdfFieldValue.prototype.focusNearControl = function(e) {
return e = Object.assign({
fieldValue: this
}, e), this.parentPanel.focusNearControl(e);
}, Client.IdfFieldValue.prototype.openCombo = function() {
let e;
(e = this.parentPanel.layout === Client.IdfPanel.layouts.list ? this.parentField.isInList() ? Client.eleMap[this.listControlId] : this.outListControl : this.formControl)?.updateElement({
openCombo: !0
});
}, Client.IdfFieldValue.prototype.close = function(e, t) {
Client.mainFrame.isEditing() || (e = !1), Client.Widget.prototype.close.call(this, e, t), 
e && (Client.eleMap[this.listContainerId]?.close(e), Client.eleMap[this.listControlId]?.close(e), 
Client.eleMap[this.rowSelectorId]?.close(e), Client.eleMap[this.rowsGroupHeaderId]?.close(e), 
Client.eleMap[this.rowBreakerId]?.close(e), this.outListControl?.close(e), this.formControl?.close(e)), 
this.parentPanel.lastFocusedFieldValueInList === this && delete this.parentPanel.lastFocusedFieldValueInList;
}, Client.IdfFieldValue.prototype.resetCachedStyles = function() {
this.listStyle = {}, this.rowSelectorStyle = {}, this.rowsGroupHeaderStyle = {};
}, Client.IdfFieldValue.prototype.updateErrorStatus = function(e) {
var t = this.rowErrorText || this.errorText;
Client.Widget.updateElementClassName(this.formContainer, "panel-invalid-value", !t), 
this.parentField.isInList() && e || (e = this.parentField.isInList() ? Client.eleMap[this.listContainerId] : this.outListContainer, 
Client.Widget.updateElementClassName(e, "panel-invalid-value", !t));
}, Client.IdfFieldValue.prototype.getTooltip = function(e) {
let t = null, i = "", n = e ? this.parentField.formHeader : this.parentField.listHeader, s = this.rowErrorText || this.errorText || "";
return s ? (i = "error", this.rowErrorText && (n = "")) : !(s = this.tooltip || "") && this.parentPanel.tooltipOnEachRow && (s = this.parentField.tooltip || ""), 
s && ((t = Client.Widget.getHTMLTooltip(n, s)).theme = i), t = Client.mainFrame.idfMobile ? !e && this.tooltip ? "<h6>" + this.tooltip + "</h6>" : "" : t;
}, Client.IdfFieldValue.prototype.insertBefore = function(t) {
if (Client.mainFrame.isIDF) return Client.Element.prototype.insertBefore.call(this, t);
let e = this.parentField.customChildrenConf.length - 1;
t.sib && (sibindex = this.parentField.customChildrenConf.findIndex(e => e.id === t.sib), 
-1 === e) && (e = this.parentField.customChildrenConf.length - 1);
var i = this.customChildrenConf?.slice() || [], n = Object.assign({}, t.child);
n.id = this.parentField.id + ":" + this.index + ":el" + (e + 1), i.splice(e, 0, n), 
this.updateElement({
customChildrenConf: i
});
}, Client.IdfFieldValue.prototype.removeChild = function(t) {
if (Client.mainFrame.isIDF) return Client.Element.prototype.insertBefore.call(this, t);
var e, i, n = this.parentField.customChildrenConf.findIndex(e => e.id === t.id);
-1 !== n && ((i = (e = this.customChildrenConf?.slice() || [])[n])._remove = !0, 
this.updateElement({
customChildrenConf: e
}), delete i._remove, e.splice(n, 1), this.updateElement({
customChildrenConf: e
}));
}, Client.IdfFieldValue.prototype.updateTemplate = function(e) {
let {
obj: t,
props: i
} = e;
var n, e = this.parentField.customChildrenConf.findIndex(e => e.id === t);
-1 !== e && (n = this.customChildrenConf?.slice() || [], Client.eleMap[n[e].id]?.updateElement(Object.assign({}, i)));
}, Client.IdfFieldValue.prototype.updateRowsGroupHeader = function(e) {
e.expanded && Client.Widget.updateObject(Client.eleMap[this.expandRowsGroupButtonId], {
icon: this.rowsGroup?.expanded ? "remove" : "add"
}), e.label && Client.Widget.updateObject(Client.eleMap[this.rowsGroupHeaderTextId], {
innerText: this.rowsGroup?.label || ""
});
}, Client.IdfFieldValue.prototype.convertImageResizeMode = function() {
let e;
switch (this.parentField.imageResizeMode) {
case Client.IdfField.stretches.REPEAT:
e = Client.IdfControl.stretches.REPEAT;
break;

case Client.IdfField.stretches.FIT:
e = Client.IdfControl.stretches.FILL;
break;

case Client.IdfField.stretches.CENTER:
e = Client.IdfControl.stretches.CENTER;
}
return e;
}, Client || {}), Client = (Client.IdfFilterPopup = function(e, t, i) {
var n, s;
this.field = e.field, this.valueList = this.field.valueList, this.controlType = this.getFieldControlType(), 
this.filterTypeControls = [], this.filterValueControls = [], this.filterBetweenControls = [], 
this.filterItems = [], this.filterItemCloseButtons = [], this.controlType === Client.IdfField.controlTypes.COMBO && (n = this.field.qbeFilter || "", 
s = this.field.smartLookup && n.includes(Client.IdfControl.rValueSeparator) ? Client.IdfControl.rValueSeparator : this.field.comboSeparator, 
this.comboSelection = n ? n.split(s) : []), Client.Widget.call(this, e, t, i);
}, Client.IdfFilterPopup.prototype = new Client.Widget(), Client.IdfFilterPopup.filterTypes = {
VALUE: 1,
STARTS: 2,
NOTSTARTS: 3,
ENDS: 4,
NOTENDS: 5,
CONTAINS: 6,
NOTCONTAINS: 7,
DIFFERENT: 8,
MAJOR: 9,
MINOR: 10,
BETWEEN: 11,
EMPTY: 12,
NOTEMPTY: 13
}, Client.IdfFilterPopup.prototype.createElementsConfig = function() {
let e;
e = this.field.parent.layout === Client.IdfPanel.layouts.list ? this.field.isInList() ? this.field.listContainerId : this.field.outListContainerId : this.field.formContainerId;
var t = {
mode: "popup",
autoclose: !0,
ref: {
id: Client.eleMap[e].getRootObject().id,
offset: this.field.parent.canUseRowQbe() ? Client.eleMap[this.field.parent.qbeRowConf.id].getRootObject().offsetHeight : 1,
position: "bottom-left"
},
width: "400px",
height: "376px",
extcls: "filter-popup-modal"
};
Client.mainFrame.device.isMobile || Client.mainFrame.idfMobile || Client.mainFrame.device.isMobilePreview || (t.animation = !1), 
this.viewConf = this.createElementConfig({
type: "view",
options: t,
elements: []
}), this.pageConf = this.createElementConfig({
c: "IonPage",
className: "filter-popup-page",
events: [ "onkeyup" ]
}), this.viewConf.elements.push(this.pageConf), this.createHeaderConfig(), this.createContentConfig(), 
this.createFooterConfig();
}, Client.IdfFilterPopup.prototype.createHeaderConfig = function() {
var e = this.createElementConfig({
c: "IonHeader",
className: "filter-popup-header"
}), t = (this.pageConf.children.push(e), this.createElementConfig({
c: "IonNavBar",
className: "filter-popup-navbar",
backButton: !0,
events: [ "onBackButton" ]
})), e = (e.children.push(t), Client.Widget.getHTMLForCaption(this.field.listHeader)), e = (this.titleConf = this.createElementConfig({
c: "IonTitle",
className: "filter-popup-title",
innerHTML: e
}), t.children.push(this.titleConf), this.createElementConfig({
c: "IonButtons",
className: "filter-popup-navbar-buttons"
}));
t.children.push(e), this.closeButtonConf = this.createElementConfig({
c: "IonButton",
icon: "close",
className: "filter-popup-close-button",
events: [ "onClick" ]
}), e.children.push(this.closeButtonConf);
}, Client.IdfFilterPopup.prototype.createFooterConfig = function() {
var e = this.createElementConfig({
c: "IonFooter",
className: "filter-popup-footer"
});
this.pageConf.children.push(e), this.applyButtonConf = this.createElementConfig({
c: "IonButton",
label: Client.IdfResources.t("FIL_DOFILTER"),
className: "filter-popup-footer-button main-action",
events: [ "onClick" ]
}), e.children.push(this.applyButtonConf), this.clearButtonConf = this.createElementConfig({
c: "IonButton",
label: Client.IdfResources.t("FIL_CLEARFILTER"),
className: "filter-popup-footer-button",
events: [ "onClick" ]
}), e.children.push(this.clearButtonConf);
}, Client.IdfFilterPopup.prototype.createContentConfig = function() {
this.contentConf = this.createElementConfig({
c: "IonContent",
className: "filter-popup-content"
}), this.pageConf.children.push(this.contentConf), this.field.parent.searchMode === Client.IdfPanel.searchModes.header && (this.field.isSortable() && this.createSortConfig(), 
this.field.parent.canGroup) && this.field.parent.showGroups && this.createSortConfig(!0), 
this.filtersAreaConf = this.createElementConfig({
c: "Container",
className: "filter-popup-filters-area"
}), this.contentConf.children.push(this.filtersAreaConf);
}, Client.IdfFilterPopup.prototype.createSortConfig = function(e) {
var t = this.field[e ? "groupingMode" : "sortMode"], i = this.createElementConfig({
c: "Container",
className: "filter-popup-item sort"
}), n = (this.contentConf.children.push(i), e ? Client.IdfResources.t("FIL_GROUP_CAPTION") : Client.IdfResources.t("FIL_SORT_CAPTION")), n = this.createElementConfig({
c: "IonText",
type: "span",
innerText: n,
className: "filter-popup-sort-text"
}), n = (i.children.push(n), this.createElementConfig({
c: "IonButtons",
className: "filter-popup-sort-buttons"
})), i = (i.children.push(n), this.createElementConfig({
c: "IonButton",
icon: "arrow-dropup",
className: "filter-popup-button" + (t === Client.IdfField.sortModes.ASC ? " active" : ""),
events: [ "onClick" ]
})), i = (n.children.push(i), e ? this.groupingAscButtonId = i.id : this.sortAscButtonId = i.id, 
this.createElementConfig({
c: "IonButton",
icon: "arrow-dropdown",
className: "filter-popup-button" + (t === Client.IdfField.sortModes.DESC ? " active" : ""),
events: [ "onClick" ]
})), t = (n.children.push(i), e ? this.groupingDescButtonId = i.id : this.sortDescButtonId = i.id, 
this.field.sortMode !== Client.IdfField.sortModes.NONE), i = this.field.groupingMode !== Client.IdfField.groupingModes.NONE;
(e && i || !e && t) && (i = e ? Client.IdfResources.t("FIL_DEGROUP_LABEL") : Client.IdfResources.t("FIL_SORT_CLEAR"), 
t = this.createElementConfig({
c: "IonButton",
label: i,
className: "filter-popup-button",
events: [ "onClick" ]
}), n.children.push(t), e ? this.clearGroupingButtonId = t.id : this.clearSortButtonId = t.id);
}, Client.IdfFilterPopup.prototype.realize = function(e, t, i) {
this.createElementsConfig(e), Client.mainFrame.openView(this.viewConf), this.createFilters();
}, Client.IdfFilterPopup.prototype.onEvent = function(t) {
var e, i, n = Client.Widget.prototype.onEvent.call(this, t);
switch (t.id) {
case "onClick":
t.obj === this.closeButtonConf.id ? this.close(!0) : t.obj === this.applyButtonConf.id ? n.push(...this.handleApplyFilter()) : t.obj === this.clearButtonConf.id ? n.push(...this.handleApplyFilter(!0)) : t.obj === this.sortAscButtonId ? n.push(...this.handleSort({
sortMode: Client.IdfField.sortModes.ASC
})) : t.obj === this.sortDescButtonId ? n.push(...this.handleSort({
sortMode: Client.IdfField.sortModes.DESC
})) : t.obj === this.clearSortButtonId ? n.push(...this.handleSort({
sortMode: Client.IdfField.sortModes.NONE
})) : t.obj === this.groupingAscButtonId ? n.push(...this.handleGrouping(Client.IdfField.groupingModes.ASC)) : t.obj === this.groupingDescButtonId ? n.push(...this.handleGrouping(Client.IdfField.groupingModes.DESC)) : t.obj === this.clearGroupingButtonId ? n.push(...this.handleGrouping(Client.IdfField.groupingModes.NONE)) : (e = this.filterItemCloseButtons.find(e => e.id === t.obj), 
i = this.filterItemCloseButtons.findIndex(e => e.id === t.obj), e && (this.filterItems[i].close(!0), 
this.filterItems.splice(i, 1), this.filterItemCloseButtons.splice(i, 1), this.filterTypeControls.splice(i, 1), 
this.filterValueControls.splice(i, 1), this.filterBetweenControls.splice(i, 1), 
this.filterValueControls[this.filterValueControls.length - 1]?.focus()));
break;

case "chgProp":
if ("value" === t.content.name) n.push(...this.handleChange(t)); else if ("checked" === t.content.name && this.valueList && (this.field.isCombo() || this.field.autoLookup)) {
var s = this.filterValueControls[0].getRootObject(!0).elements.filter(e => e.elements[0].getRootObject().checked);
for (let e = 0; e < this.valueList.items.length; e++) {
var o = this.valueList.items[e];
let t = this.field.smartLookup ? o.rValue : o.value.toString();
var o = this.comboSelection.indexOf(t), l = s.find(e => this.field.smartLookup ? e.getRootObject().itemRValue === t : e.getRootObject().itemValue.toString() === t);
l && -1 === o ? this.comboSelection.push(t) : l || -1 === o || this.comboSelection.splice(o, 1);
}
}
break;

case "onBackButton":
n.push(...this.handleApplyFilter());
break;

case "onKeyup":
n.push(...this.handleKeyUp(t));
}
return n;
}, Client.IdfFilterPopup.prototype.createFilterItem = function(e) {
e = e || {};
var t, i = this.needEditControl(), n = Client.eleMap[this.filtersAreaConf.id];
let s, o, l;
[ Client.IdfField.controlTypes.CHECK, Client.IdfField.controlTypes.OPTION ].includes(this.controlType) || (t = this.createElementConfig({
c: "Container",
className: "filter-popup-item" + (i ? "" : " search")
}), s = this.view.createElement(t, n, this.view), n.elements.push(s), o = s, l = s, 
i && (t = this.createElementConfig({
c: "Container",
className: "filter-popup-type"
}), n = this.view.createElement(t, s, this.view), s.elements.push(n), t = this.createElementConfig({
c: "Container",
className: "filter-popup-value"
}), t = this.view.createElement(t, s, this.view), s.elements.push(t), o = n, l = t), 
this.filterItems.push(s), this.createFilterTypeControl(e.type, o)), this.createFilterValueControl(e, l), 
i && (n = {
c: "IonButton",
icon: "close-circle",
style: {
visibility: e.value || Client.IdfFilterPopup.isEmptyOrNotEmpty(e.type) ? "visible" : "hidden"
},
className: "generic-btn filter-popup-remove-item-button",
events: [ "onClick" ]
}, t = this.createElementConfig(n), i = this.view.createElement(t, s, this.view), 
s.elements.push(i), this.filterItemCloseButtons.push(i));
}, Client.IdfFilterPopup.prototype.getFilterTypes = function() {
var e, t, i = [];
return Client.IdfField.isNumeric(this.field.dataType) || Client.IdfField.isDateOrTime(this.field.dataType) ? (i.push({
value: Client.IdfFilterPopup.filterTypes.VALUE,
name: Client.IdfResources.t("FIL_VALUE")
}), i.push({
value: Client.IdfFilterPopup.filterTypes.DIFFERENT,
name: Client.IdfResources.t("FIL_DIFFERENT")
}), i.push({
value: Client.IdfFilterPopup.filterTypes.MAJOR,
name: Client.IdfResources.t("FIL_MAJOR")
}), i.push({
value: Client.IdfFilterPopup.filterTypes.MINOR,
name: Client.IdfResources.t("FIL_MINOR")
}), i.push({
value: Client.IdfFilterPopup.filterTypes.BETWEEN,
name: Client.IdfResources.t("FIL_BETWEEN")
})) : (e = Client.mainFrame.isIDF && ";" === this.field.comboSeparator && this.field.QBELike, 
t = !Client.mainFrame.isIDF && this.field.searchMode !== Client.IdfField.searchModes.NOLIKE, 
e ? (i.push({
value: Client.IdfFilterPopup.filterTypes.STARTS,
name: Client.IdfResources.t("FIL_STARTS")
}), i.push({
value: Client.IdfFilterPopup.filterTypes.ENDS,
name: Client.IdfResources.t("FIL_ENDS")
}), i.push({
value: Client.IdfFilterPopup.filterTypes.CONTAINS,
name: Client.IdfResources.t("FIL_CONTAINS")
})) : t && (i.push({
value: Client.IdfFilterPopup.filterTypes.STARTS,
name: Client.IdfResources.t("FIL_STARTS")
}), i.push({
value: Client.IdfFilterPopup.filterTypes.NOTSTARTS,
name: Client.IdfResources.t("FIL_NOTSTARTS")
}), i.push({
value: Client.IdfFilterPopup.filterTypes.ENDS,
name: Client.IdfResources.t("FIL_ENDS")
}), i.push({
value: Client.IdfFilterPopup.filterTypes.NOTENDS,
name: Client.IdfResources.t("FIL_NOTENDS")
}), i.push({
value: Client.IdfFilterPopup.filterTypes.CONTAINS,
name: Client.IdfResources.t("FIL_CONTAINS")
}), i.push({
value: Client.IdfFilterPopup.filterTypes.NOTCONTAINS,
name: Client.IdfResources.t("FIL_NOTCONTAINS")
})), i.push({
value: Client.IdfFilterPopup.filterTypes.VALUE,
name: Client.IdfResources.t("FIL_VALUE")
}), t || i.push({
value: Client.IdfFilterPopup.filterTypes.DIFFERENT,
name: Client.IdfResources.t("FIL_DIFFERENT")
})), i.push({
value: Client.IdfFilterPopup.filterTypes.EMPTY,
name: Client.IdfResources.t("FIL_EMPTY")
}), i.push({
value: Client.IdfFilterPopup.filterTypes.NOTEMPTY,
name: Client.IdfResources.t("FIL_NOTEMPTY")
}), i;
}, Client.IdfFilterPopup.prototype.createFilterTypeControl = function(e, t) {
var i = this.needEditControl(), n = this.getFilterTypes(), e = {
c: "IdfControl",
dataType: i ? this.field.dataType : Client.IdfField.dataTypes.TEXT,
enabled: !0,
noFilter: !0,
activatorImage: i ? "" : "search",
activableDisabled: i,
visualStyle: this.field.getVisualStyle(),
type: i ? Client.IdfField.controlTypes.COMBO : Client.IdfField.controlTypes.EDIT,
useInput: !i,
placeholder: i ? "" : Client.IdfResources.t("FIL_SEARCH_PLACE"),
valueList: i ? {
items: n,
isStatic: !0
} : void 0,
value: i ? e || n[0].value : void 0,
container: t,
className: "filter-popup-type-control",
comboClass: "filter-popup-combo",
readOnly: i,
superActive: !0
}, n = this.createElementConfig(e), i = this.view.createElement(n, t, this.view);
this.elements.push(i), this.filterTypeControls.push(i);
}, Client.IdfFilterPopup.prototype.createFilterValueControl = function(e, t) {
let i = Client.IdfField.controlTypes.CHECKLIST, n = "filter-popup-checklist", s = !1, o = Client.eleMap[this.filtersAreaConf.id];
this.needEditControl() ? (i = Client.IdfField.controlTypes.EDIT, n = Client.IdfFilterPopup.isEmptyOrNotEmpty(e.type) ? "" : "filter-popup-value-control", 
s = !0, e.type === Client.IdfFilterPopup.filterTypes.BETWEEN && (n += " filter-popup-value-between-control"), 
o = t) : this.controlType === Client.IdfField.controlTypes.CHECK && (i = Client.IdfField.controlTypes.OPTION);
var t = {
c: "IdfControl",
dataType: this.field.dataType === Client.IdfField.dataTypes.DATETIME ? Client.IdfField.dataTypes.DATE : this.field.dataType,
enabled: !Client.IdfFilterPopup.isEmptyOrNotEmpty(e.type),
canActivate: !1,
type: i,
comboSeparator: this.field.comboSeparator,
value: e.value || "",
valueList: this.valueList,
className: n,
container: o,
heightResize: !1,
numRows: 1,
maxLength: 999,
contentEditable: s
}, l = this.createElementConfig(t), l = this.view.createElement(l, o, this.view);
this.elements.push(l), this.filterValueControls.push(l), (Client.IdfField.isNumeric(this.field.dataType) || Client.IdfField.isDateOrTime(this.field.dataType)) && (t.value = e.toValue || "", 
l = e.type === Client.IdfFilterPopup.filterTypes.BETWEEN, t.visible = l, e = this.createElementConfig(t), 
t = this.view.createElement(e, o, this.view), Client.Widget.updateObject(t.activator, {
visible: l
}), this.elements.push(t), this.filterBetweenControls.push(t));
}, Client.IdfFilterPopup.prototype.createFilters = function() {
var e = this.field.qbeFilter || "", t = this.parseFilters(e) || [];
if (this.needEditControl()) {
for (let e = 0; e < t.length; e++) this.createFilterItem(t[e]);
this.createFilterItem(), this.filterValueControls[this.filterValueControls.length - 1]?.focus();
} else this.createFilterItem(t[0]), this.filterTypeControls[this.filterTypeControls.length - 1]?.focus(), 
this.controlType !== Client.IdfField.controlTypes.COMBO || this.field.valueList || Client.mainFrame.sendEvents(this.field.handleQbeCombo({
popupId: this.id
}));
}, Client.IdfFilterPopup.prototype.handleChange = function(t) {
var i = this.filterTypeControls.find(e => e.id === t.obj);
let e = this.filterValueControls.find(e => e.id === t.obj);
var n = this.filterBetweenControls.find(e => e.id === t.obj);
let s;
n && (e = n);
n = this.filterTypeControls.findIndex(e => e.id === t.obj);
if (i) {
if (this.controlType !== Client.IdfField.controlTypes.EDIT) {
var o = [];
if (void 0 === t.content.value) {
if (i.type !== Client.IdfField.controlTypes.EDIT) return o;
t.content.value = i.getValueToSend().trim();
}
return this.field.valueList || this.field.hasValueSource || this.field.autoLookup ? this.filterValueControls[n].updateElement({
filter: t.content.value.toLowerCase()
}) : o.push(...this.field.handleQbeCombo({
text: t.content.value,
popupId: this.id
})), o;
}
var o = i.getValueToSend(), l = Client.IdfFilterPopup.isEmptyOrNotEmpty(o), a = {};
a.value = l ? "" : void 0, a.enabled = !l, a.className = l ? "" : "filter-popup-value-control";
let e = !1;
o === Client.IdfFilterPopup.filterTypes.BETWEEN && (a.className += " filter-popup-value-between-control", 
e = !0), this.filterValueControls[n].updateElement(Object.assign({}, a));
o = this.filterBetweenControls[n];
o?.updateElement({
visible: e,
className: a.className
}), o?.activator?.updateElement({
visible: e
}), s = this.filterValueControls[n], l && (s = this.filterTypeControls[n]);
} else e && e.updateElement({
value: t.content.value,
style: {
visibility: "visible"
}
});
a = this.filterTypeControls[this.filterTypeControls.length - 1], o = this.filterValueControls[this.filterValueControls.length - 1], 
l = this.filterBetweenControls[this.filterBetweenControls.length - 1], n = a?.getValueToSend(), 
a = o.getValueToSend(), o = l?.getValueToSend(), l = Client.IdfFilterPopup.isEmptyOrNotEmpty(n);
if (n !== Client.IdfFilterPopup.filterTypes.BETWEEN || !e || a && o) {
if (i && l || e && a && this.needEditControl()) {
for (let e = 0; e < this.filterItemCloseButtons.length; e++) this.filterItemCloseButtons[e].updateElement({
style: {
visibility: "visible"
}
});
this.createFilterItem(), s = this.filterValueControls[this.filterValueControls.length - 1];
}
} else s = this.filterBetweenControls[this.filterBetweenControls.length - 1];
return void 0 !== s && requestAnimationFrame(() => s.focus()), [];
}, Client.IdfFilterPopup.prototype.handleApplyFilter = function(e) {
let n = "";
if (!e) for (let i = 0; i < this.filterValueControls.length; i++) {
var t = this.filterTypeControls[i], s = this.filterValueControls[i], o = t?.getValueToSend(), t = s.getValueToSend(), l = "string" == typeof t ? t.trim() : t;
if ("Invalid date" !== l && (l || Client.IdfFilterPopup.isEmptyOrNotEmpty(o))) switch (this.controlType) {
case Client.IdfField.controlTypes.EDIT:
let e, t = !0;
o === Client.IdfFilterPopup.filterTypes.BETWEEN && (e = this.filterBetweenControls[i].getValueToSend(), 
t = !!e), t && (n += (0 < i ? this.field.comboSeparator : "") + this.stringifyFilter({
type: o,
value: l,
toValue: e
}));
break;

case Client.IdfField.controlTypes.CHECK:
n = l;
break;

default:
l = this.comboSelection || l, n += this.stringifyFilter({
type: Client.IdfFilterPopup.filterTypes.VALUE,
value: l
});
}
}
var i = this.filterValueControls[0];
if (i?.getType() === Client.IdfField.controlTypes.CHECKLIST && !this.field.valueList && this.field.parent.canUseRowQbe() && !e) {
var a = this.field.getValueByIndex(0), r = Client.eleMap[a.listControlId];
let t = this.comboSelection;
var d = this.originalValueList.items.filter(e => {
e = this.field.smartLookup ? e.rValue : e.value.toString();
return t.includes(e);
}).map(e => this.originalValueList.decodeColumn ? e.name.split("|")[this.originalValueList.decodeColumn - 1] : e.name).join(r.getComboNameSeparator());
r.control.lastChange = d, r.control.lastDescription = d, a.updateElement({
text: this.field.smartLookup ? d : t.join(i.comboSeparator)
}), r.isListOwner() || r.emptyComboList(!0);
}
a = this.field.handleQbeFilter({
obj: i?.id,
content: {
name: "value",
value: n,
filterPopup: !0,
clear: e
}
});
if (this.field.smartLookup) {
this.field.updateElement({
qbeFilter: n
});
var h = this.field.parent;
for (let e = 0; e < h.fields.length; e++) {
var c = h.fields[e];
c.type === this.field.type && c.updateElement({
qbeFilter: n
});
}
}
return this.close(!0), a;
}, Client.IdfFilterPopup.prototype.handleSort = function(e) {
return this.close(!0), this.field.handleSort(e);
}, Client.IdfFilterPopup.prototype.handleGrouping = function(e) {
return this.close(!0), this.field.handleGrouping(e);
}, Client.IdfFilterPopup.isEmptyOrNotEmpty = function(e) {
return e === Client.IdfFilterPopup.filterTypes.EMPTY || e === Client.IdfFilterPopup.filterTypes.NOTEMPTY;
}, Client.IdfFilterPopup.prototype.parseFilters = function(l) {
if (!l) return [];
let e = this.field.comboSeparator;
this.field.smartLookup && -1 !== l.indexOf(Client.IdfControl.rValueSeparator) && (e = Client.IdfControl.rValueSeparator);
var i = l.split(e);
l = [];
for (let t = 0; t < i.length; t++) {
let o = i[t];
if (o) {
var n, s = o.substring(0, o.length - 1), a = o.substring(1, o.length - 1), r = o.substring(1);
if (this.field.smartLookup) this.valueList && (n = this.valueList.items.find(e => e.rValue === o)) && (l[0] || l.push({
type: Client.IdfFilterPopup.filterTypes.VALUE,
value: ""
}), l[0].value += (0 < t ? this.field.comboSeparator : "") + n.value); else if (o.startsWith("#*") && o.endsWith("*")) l.push({
type: Client.IdfFilterPopup.filterTypes.NOTCONTAINS,
value: a.substring(1)
}); else if (o.startsWith("#*")) l.push({
type: Client.IdfFilterPopup.filterTypes.NOTENDS,
value: r.substring(1)
}); else if (o.startsWith("#") && o.endsWith("*")) l.push({
type: Client.IdfFilterPopup.filterTypes.NOTSTARTS,
value: s.substring(1)
}); else if (o.startsWith("*") && o.endsWith("*")) l.push({
type: Client.IdfFilterPopup.filterTypes.CONTAINS,
value: a
}); else if (o.startsWith("*")) l.push({
type: Client.IdfFilterPopup.filterTypes.ENDS,
value: r
}); else if (o.endsWith("*")) l.push({
type: Client.IdfFilterPopup.filterTypes.STARTS,
value: s
}); else if (o.startsWith("#")) l.push({
type: Client.IdfFilterPopup.filterTypes.DIFFERENT,
value: r
}); else if (o.startsWith(">")) l.push({
type: Client.IdfFilterPopup.filterTypes.MAJOR,
value: r
}); else if (o.startsWith("<")) l.push({
type: Client.IdfFilterPopup.filterTypes.MINOR,
value: r
}); else if (-1 !== o.indexOf(":")) if (this.field.dataType === Client.IdfField.dataTypes.TIME && 1 === (o.match(/:/g) || []).length) l.push({
type: Client.IdfFilterPopup.filterTypes.VALUE,
value: o
}); else {
let t, i, n = this.field.dataType === Client.IdfField.dataTypes.TIME, s;
for (let e = 0; e < o.length; e++) {
var d = o[e];
if (" " === d) n = !0; else if (":" === d) {
if (!n || s) {
t = o.substring(0, e), i = o.substring(e + 1);
break;
}
s = !0;
}
}
l.push({
type: Client.IdfFilterPopup.filterTypes.BETWEEN,
value: t,
toValue: i
});
} else if ("!" === o) l.push({
type: Client.IdfFilterPopup.filterTypes.EMPTY
}); else if ("." === o) l.push({
type: Client.IdfFilterPopup.filterTypes.NOTEMPTY
}); else if (o.startsWith("=")) l.push({
type: Client.IdfFilterPopup.filterTypes.VALUE,
value: r
}); else {
let e = Client.IdfFilterPopup.filterTypes.VALUE;
this.needEditControl() ? (!Client.IdfField.isText(this.field.dataType) || !Client.mainFrame.wep?.panelLikeSearch && Client.mainFrame.isIDF || (e = 1 !== Client.mainFrame.wep?.panelLikeMode && Client.mainFrame.isIDF ? Client.IdfFilterPopup.filterTypes.CONTAINS : Client.IdfFilterPopup.filterTypes.STARTS), 
l.push({
type: e,
value: o
})) : (l[0] || l.push({
type: e,
value: ""
}), l[0].value += (0 < t ? this.field.comboSeparator : "") + o);
}
}
}
return l;
}, Client.IdfFilterPopup.prototype.stringifyFilter = function(t) {
let i = "";
switch (t.type) {
case Client.IdfFilterPopup.filterTypes.VALUE:
if (Client.IdfField.isDateOrTime(this.field.dataType) || Client.IdfField.isNumeric(this.field.dataType) && this.controlType !== Client.IdfField.controlTypes.COMBO) i = t.value; else if (this.controlType === Client.IdfField.controlTypes.EDIT) i = "=" + t.value; else {
var n = this.field.smartLookup ? Client.IdfControl.rValueSeparator : this.field.comboSeparator;
for (let e = 0; e < t.value.length; e++) i += (0 < e ? n : "") + t.value[e];
}
break;

case Client.IdfFilterPopup.filterTypes.STARTS:
i = t.value + "*";
break;

case Client.IdfFilterPopup.filterTypes.NOTSTARTS:
i = "#" + t.value + "*";
break;

case Client.IdfFilterPopup.filterTypes.ENDS:
i = "*" + t.value;
break;

case Client.IdfFilterPopup.filterTypes.NOTENDS:
i = "#*" + t.value;
break;

case Client.IdfFilterPopup.filterTypes.CONTAINS:
i = "*" + t.value + "*";
break;

case Client.IdfFilterPopup.filterTypes.NOTCONTAINS:
i = "#*" + t.value + "*";
break;

case Client.IdfFilterPopup.filterTypes.DIFFERENT:
i = "#" + t.value;
break;

case Client.IdfFilterPopup.filterTypes.MAJOR:
i = ">" + t.value;
break;

case Client.IdfFilterPopup.filterTypes.MINOR:
i = "<" + t.value;
break;

case Client.IdfFilterPopup.filterTypes.BETWEEN:
i = t.value + ":" + t.toValue;
break;

case Client.IdfFilterPopup.filterTypes.EMPTY:
i = "!";
break;

case Client.IdfFilterPopup.filterTypes.NOTEMPTY:
i = ".";
}
return i;
}, Client.IdfFilterPopup.prototype.close = function(e, t) {
Client.eleMap[this.viewConf.id].close(), Client.Widget.prototype.close.call(this, e, t), 
this.field.parent.focus();
}, Client.IdfFilterPopup.prototype.updateValueList = function(e) {
if (this.valueList = e, this.originalValueList || (this.originalValueList = e), 
!this.width && this.valueList.headers) {
let i = [], t = this.valueList.headers.split("|");
t.forEach((e, t) => i[t] = e.length);
for (let e = 0; e < this.valueList.items.length; e++) {
var s = this.valueList.items[e];
(t = s.name.split("|")).forEach((e, t) => {
e.length > i[t] && (i[t] = e.length);
});
}
let n = 0;
i.forEach(e => n += e), this.width = Math.max(8 * n, 400), Client.eleMap[this.viewConf.id].dialog.wrapperObj.style.width = this.width + "px";
}
e = this.stringifyFilter({
type: Client.IdfFilterPopup.filterTypes.VALUE,
value: this.comboSelection
}), e = this.parseFilters(e)[0] || {};
this.filterValueControls[0].close(!0), this.filterValueControls.splice(0, 1), this.createFilterValueControl(e);
}, Client.IdfFilterPopup.prototype.needEditControl = function() {
return ![ Client.IdfField.controlTypes.CHECK, Client.IdfField.controlTypes.OPTION, Client.IdfField.controlTypes.COMBO ].includes(this.controlType);
}, Client.IdfFilterPopup.prototype.getFieldControlType = function() {
let e = this.field.getControlType();
switch (e) {
case Client.IdfField.controlTypes.AUTO:
e = this.field.valueList || this.field.hasValueSource || this.field.smartLookup || this.field.getValueByIndex(this.field.parent.getActiveRowIndex())?.valueList ? Client.IdfField.controlTypes.COMBO : Client.IdfField.controlTypes.EDIT;
break;

case Client.IdfField.controlTypes.OPTION:
case Client.IdfField.controlTypes.CHECK:
this.field.valueList || (e = Client.IdfField.controlTypes.EDIT);
}
return e;
}, Client.IdfFilterPopup.prototype.handleKeyUp = function(e) {
return e.obj === this.pageConf.id && 27 === e.content.keyCode && this.close(!0), 
[];
}, Client || {}), Client = (Client.IdfTabbedView = function(e, t, i) {
e = Object.assign({
clickEventDef: Client.IdfMessagesPump?.eventTypes.ACTIVE,
changePageAnimationDef: Client.IdfWebEntryPoint.getAnimationDefault("tab"),
onlyContent: !0
}, e), Client.IdfFrame.call(this, e, t, i);
e = this.view.createElement(this.dropMenuButtonConf, Client.eleMap[this.tabsContainerConf.id], this.view), 
t = Client.eleMap[this.tabsContainerConf.id].tabbar;
t.insertBefore(e.getRootObject(), t.firstChild), e.updateElement({
visible: this.showDropDownButton()
});
}, Client.IdfTabbedView.prototype = new Client.IdfFrame(), Client.IdfTabbedView.getRequirements = Client.IdfFrame.getRequirements, 
Client.IdfTabbedView.transPropMap = Object.assign({}, Client.IdfFrame.transPropMap, {
sel: "selectedPage",
pla: "placement",
hid: "hiddenTabs",
cpa: "changePageAnimationDef"
}), Client.IdfTabbedView.place = {
TOP: 1,
BOTTOM: 3
}, Client.IdfTabbedView.tabDropLimit = 12, Client.IdfTabbedView.convertPropValues = function(e) {
for (var t in Client.IdfFrame.convertPropValues(e = e || {}), e) switch (t) {
case Client.IdfTabbedView.transPropMap.hid:
e[t] = "1" === e[t];
break;

case Client.IdfTabbedView.transPropMap.sel:
e[t] = parseInt(e[t], 10) - 1;
break;

case Client.IdfTabbedView.transPropMap.pla:
e[t] = parseInt(e[t], 10);
}
}, Client.IdfTabbedView.prototype.createElementsConfig = function(e) {
Client.IdfFrame.prototype.createElementsConfig.call(this, e), this.tabsContainerConf = this.createElementConfig({
c: "IonTabs",
className: "tabbed-view-box",
ignoreTabbar: !0
}), this.contentContainerConf.children.push(this.tabsContainerConf), this.dropMenuButtonConf = this.createElementConfig({
c: "IonButton",
icon: "arrow-dropdown",
className: "generic-btn tab-dropdown-button",
events: [ "onClick" ]
});
var e = "vela" === Client.mainFrame.idfTheme, t = Client.IdfWebEntryPoint.getAnimationByDef(this.changePageAnimationDef);
t && !e && (this.tabsContainerConf.animations = [ {
trigger: "change",
...t
} ]);
}, Client.IdfTabbedView.prototype.appendChildObject = function(e, t) {
var i = Client.eleMap[this.tabsContainerConf.id];
i.appendChildObject(e, t), i.elements.push(e), e.parent = i, Client.eleMap[this.dropMenuButtonConf.id]?.updateElement({
visible: this.showDropDownButton()
});
}, Client.IdfTabbedView.prototype.updateElement = function(e) {
var t = Client.eleMap[this.tabsContainerConf.id];
Client.IdfFrame.prototype.updateElement.call(this, e = e || {}), void 0 !== e.selectedPage && (this.selectedPage = e.selectedPage, 
t.updateElement({
selectedPage: e.selectedPage
}), this.elements[this.selectedPage].focus()), void 0 !== e.placement && (this.placement = e.placement, 
t.updateElement({
placement: e.placement === Client.IdfTabbedView.place.BOTTOM ? "bottom" : "top"
})), void 0 !== e.hiddenTabs && (this.hiddenTabs = e.hiddenTabs, Client.Widget.updateElementClassName(t, "only-content", !this.hiddenTabs));
}, Client.IdfTabbedView.prototype.deletePage = function(t) {
t.close();
let i = this.elements || [];
for (let e = 0; e < i.length; e++) if (i[e] === t) {
i.splice(e, 1);
break;
}
var e = Client.eleMap[this.tabsContainerConf.id];
if (e) {
i = e.elements || [];
for (let e = 0; e < i.length; e++) if (i[e] === t) {
i.splice(e, 1);
break;
}
}
Client.eleMap[this.dropMenuButtonConf.id]?.updateElement({
visible: this.showDropDownButton()
});
}, Client.IdfTabbedView.prototype.onEvent = function(e) {
var t = Client.IdfFrame.prototype.onEvent.call(this, e);
switch (e.id) {
case "chgProp":
"selectedPage" === e.content.name && (this.selectedPage = e.content.value, this.elements[this.selectedPage]?.elements[0]?.delayResize && Client.mainFrame.sendEvents(this.elements[this.selectedPage].elements[0].handleResize()), 
this.elements[this.selectedPage]?.elements[0]?.delayedUpdate && this.elements[this.selectedPage].elements[0].handleDelayedUpdate(), 
Client.mainFrame.isIDF) && t.push({
id: "tab",
def: this.clickEventDef,
content: {
oid: this.elements[this.selectedPage].id,
obn: this.id
}
}), Client.mainFrame.isIDF || (e.obj = this.id, t.push(e));
break;

case "onChangePage":
Client.mainFrame.isIDF || (e.obj = this.id, t.push(e));
break;

case "onClick":
if (e.obj === this.dropMenuButtonConf.id) {
var i, n, s = Client.eleMap[this.tabsContainerConf.id].tabbar.getBoundingClientRect(), o = [], s = {
style: "tab-list-controls",
buttons: o,
rect: {
top: s.top + s.height,
left: s.left
}
};
for (let e = 0; e < this.elements.length; e++) this.elements[e] instanceof Client.IdfTab && this.elements[e]?.visible && (i = Client.Widget.extractCaptionData(this.elements[e].caption), 
n = {
id: e,
text: i.caption
}, e === this.selectedPage && (n.focus = !0, n.cssClass = "active-page"), i.icon && Client.Widget.isIconImage(i.icon) && (n.icon = i.icon), 
o.push(n));
Client.IonHelper.createAlert(s, (e, t, i) => {
var n;
null !== e && (n = [], this.updateElement({
selectedPage: e
}), (this.elements[this.selectedPage]?.mainObjects[0]?.linkObj)?.scrollIntoView({
behavior: "smooth",
block: "nearest",
inline: "center"
}), Client.mainFrame.isIDF ? n.push({
id: "tab",
def: this.clickEventDef,
content: {
oid: this.elements[this.selectedPage].id,
obn: this.id
}
}) : n.push({
id: "chgProp",
obj: this.id,
content: {
name: "selectedPage",
value: this.selectedPage
}
}), 0 < n.length) && Client.mainFrame.sendEvents(n);
});
}
}
return t;
}, Client.IdfTabbedView.prototype.getRootObject = function(e) {
var t = this.mainObjects[0];
return e ? t : t.domObj;
}, Client.IdfTabbedView.prototype.getClickDetail = function(e, t) {
e = Client.IdfFrame.prototype.getClickDetail.call(this, e, t);
return Client.mainFrame.isIDF ? e.par4 = t?.id : t instanceof Client.IdfTab && (e.tab = t.index), 
e;
}, Client.IdfTabbedView.prototype.getTabbarHeight = function() {
return this.tabbarHeight || 0;
}, Client.IdfTabbedView.prototype.calcDimensions = function() {
Client.IdfFrame.prototype.calcDimensions.call(this);
var e = Client.eleMap[this.tabsContainerConf.id].tabbar;
this.tabbarHeight = e.offsetHeight, 0 !== this.tabbarHeight && (e = getComputedStyle(e), 
this.tabbarHeight += (parseInt(e.marginTop) || 0) + (parseInt(e.marginBottom) || 0));
}, Client.IdfTabbedView.prototype.close = function(e, t) {
Client.IdfFrame.prototype.close.call(this, e, t), delete this.dropMenuButtonConf;
}, Client.IdfTabbedView.prototype.showDropDownButton = function() {
return !Client.mainFrame.idfMobile && this.elements.length >= Client.IdfTabbedView.tabDropLimit;
}, Client || {}), Client = (Client.IdfTab = function(e, t, i) {
e = Object.assign({
image: "",
tooltip: "",
caption: ""
}, e), Client.Widget.call(this, e, t, i);
}, Client.IdfTab.prototype = new Client.Widget(), Client.IdfTab.transPropMap = Object.assign({}, Client.IdfFrame.transPropMap, {
img: "image",
con: "contentId",
dcl: "deletePage"
}), Client.IdfTab.convertPropValues = function(e) {
for (var t in e = e || {}) t === Client.IdfTab.transPropMap.dcl && (e[t] = "1" === e[t]);
}, Object.defineProperty(Client.IdfTab.prototype, "index", {
get: function() {
return this.parent.elements.indexOf(this);
}
}), Client.IdfTab.prototype.realize = function(e, t, i) {
var n = this.createElementConfig({
c: "IonTab",
className: "tabbed-view-tab"
});
this.mainObjects.push(i.createElement(n, t, i)), this.createChildren(e);
}, Client.IdfTab.prototype.createChildren = function(e) {
var t;
this.contentId && (t = this.parentIdfView?.getSubFrame(this.contentId)) && (t.isSubFrame = !0, 
e.children.push(t)), Client.Widget.prototype.createChildren.call(this, e);
}, Client.IdfTab.prototype.updateElement = function(e) {
Client.Widget.prototype.updateElement.call(this, e = e || {});
var t, i = {}, n = this.getRootObject(!0);
for (t in e) {
var s = e[t];
switch (t) {
case "caption":
i.title = Client.Widget.getHTMLForCaption(s);
var o = Client.Widget.extractCaptionData(s);
i.tooltip || (i.tooltip = o.caption);
break;

case "badge":
i.badge = s;
break;

case "tooltip":
i.tooltip = s;
break;

case "visible":
this.visible = s, i.visible = s;
break;

case "image":
this.image = s, Client.Widget.isIconImage(this.image) || n.iconObj.setAttribute("bck", this.image ? "bck" : ""), 
Client.Widget.setIconImage({
image: this.image,
el: n,
innerObj: n.iconObj
});
break;

case "deletePage":
this.parent.deletePage(this);
}
}
n.updateElement(i);
}, Client.IdfTab.prototype.isActiveTab = function() {
return this.parent.elements[this.parent.selectedPage] === this;
}, Client.IdfTab.prototype.acceptsDrop = function(e) {
return this.parent.canDrop;
}, Client.IdfTab.prototype.isDraggable = function(e) {
return this.parent.canDrag;
}, Client.IdfTab.prototype.getSupportedTransformOperation = function(e, t, i, n) {
return Client.Widget.prototype.getSupportedTransformOperation.call(this, e, t, i, this.getRootObject(!0).linkObj);
}, Client.IdfTab.prototype.getTransformOperationTargetObj = function(e, t) {
return this.getRootObject(!0).linkObj;
}, Client.IdfTab.prototype.focus = function(e) {
this.elements[0].focus(e);
}, Client || {}), Client = (Client.IdfTimerList = function(e, t, i) {
e = Object.assign({
id: "tmh"
}, e), Client.mainFrame.wep.timerList = this, Client.Widget.call(this, e, t, i);
}, Client.IdfTimerList.prototype = new Client.Widget(), Client.IdfTimerList.prototype.realize = function(e, t, i) {
this.createChildren(e);
}, Client || {}), Client = (Client.IdfTimer = function(e, t, i) {
this.ticksCount = 0, e = Object.assign({
viewId: void 0,
ticks: 0,
interval: 0,
enabled: !1,
tickEventDef: Client.mainFrame.isIDF ? Client.IdfMessagesPump.eventTypes.ACTIVE : void 0
}, e), Client.Widget.call(this, e, t, i);
}, Client.IdfTimer.prototype = new Client.Widget(), Client.IdfTimer.transPropMap = {
frm: "viewId",
num: "ticks",
int: "interval",
ena: "enabled",
tke: "tickEventDef"
}, Client.IdfTimer.convertPropValues = function(e) {
for (var t in e = e || {}) switch (t) {
case Client.IdfTimer.transPropMap.frm:
e[t] && (e[t] = "frm:" + parseInt(e[t]));
break;

case Client.IdfTimer.transPropMap.num:
case Client.IdfTimer.transPropMap.int:
case Client.IdfTimer.transPropMap.tke:
e[t] = parseInt(e[t]);
break;

case Client.IdfTimer.transPropMap.ena:
e[t] = "1" === e[t];
}
}, Client.IdfTimer.prototype.updateElement = function(e) {
for (var t in Client.Widget.prototype.updateElement.call(this, e), e) {
var i = e[t];
switch (t) {
case "ticks":
this.setTicks(i);
break;

case "interval":
this.setInterval(i);
break;

case "enabled":
this.setEnabled(i);
}
}
}, Client.IdfTimer.prototype.setTicks = function(e) {
this.ticks = e, this.check();
}, Client.IdfTimer.prototype.setInterval = function(e) {
this.interval = e, this.timer && this.createInterval();
}, Client.IdfTimer.prototype.setEnabled = function(e) {
this.enabled = e, this.enabled ? this.createInterval() : this.clearInterval();
}, Client.IdfTimer.prototype.check = function() {
this.enabled && 0 < this.ticks && this.ticksCount >= this.ticks && this.clearInterval();
}, Client.IdfTimer.prototype.createInterval = function() {
this.clearInterval(), this.timer = setInterval(Client.IdfTimer.prototype.onTick.bind(this), this.interval);
}, Client.IdfTimer.prototype.clearInterval = function() {
this.timer && clearInterval(this.timer), delete this.timer, this.ticksCount = 0;
}, Client.IdfTimer.prototype.onTick = function() {
this.ticksCount++;
var e = {
id: "timer",
def: this.tickEventDef,
content: {
oid: this.id
}
};
Client.mainFrame.sendEvents([ e ]), this.check();
}, Client || {}), Client = (Client.IdfTree = function(e, t, i) {
e = Object.assign({
vertical: !0,
dragDrop: !1,
activateOnExpand: !0,
enableMultipleSelection: !1,
activeMultipleSelection: !1,
clickEventDef: Client.IdfMessagesPump?.eventTypes.ACTIVE,
expandEventDef: Client.IdfMessagesPump?.eventTypes.ACTIVE,
checkEventDef: Client.IdfMessagesPump?.eventTypes.DEFERRED,
expandAnimationDef: Client.IdfWebEntryPoint.getAnimationDefault("tree")
}, e), Client.IdfFrame.call(this, e, t, i);
}, Client.IdfTree.prototype = new Client.IdfFrame(), Client.IdfTree.getRequirements = Client.IdfFrame.getRequirements, 
Client.IdfTree.transPropMap = Object.assign({}, Client.IdfFrame.transPropMap, {
mul: "enableMultipleSelection",
aoe: "activateOnExpand",
cms: "popupMenu",
sel: "selectedNode",
act: "activeMultipleSelection",
ded: "dragDrop",
xpc: "expandEventDef",
chc: "checkEventDef",
exa: "expandAnimationDef"
}), Client.IdfTree.convertPropValues = function(e) {
for (var t in Client.IdfFrame.convertPropValues(e = e || {}), e) switch (t) {
case Client.IdfTree.transPropMap.mul:
case Client.IdfTree.transPropMap.aoe:
case Client.IdfTree.transPropMap.act:
case Client.IdfTree.transPropMap.ded:
e[t] = "1" === e[t];
}
}, Client.IdfTree.prototype.createElementsConfig = function(e) {
Client.IdfFrame.prototype.createElementsConfig.call(this, e), Client.mainFrame.idfMobile ? (this.treeContainerConf = this.createElementConfig({
c: "AltContainer",
className: "tree-content-main-list",
selectedPage: 0
}), this.treeContainerConf.animations = [ {
trigger: "change",
type: "slide",
easing: "ease",
duration: 350,
delay: 0,
from: "left"
} ], this.levelContainersConf = [], this.levelContainersConf.push(this.createElementConfig({
c: "IonList",
className: "tree-content-main-list",
noLines: !1
})), this.treeContainerConf.children.push(this.levelContainersConf[0])) : this.treeContainerConf = this.createElementConfig({
c: "IonList",
className: "tree-content-main-list",
noLines: !0,
events: [ "onDragstart", "onDragenter", "onDragover", "onDragleave", "onDragend", "onDrop" ]
}), this.contentContainerConf.children.push(this.treeContainerConf);
}, Client.IdfTree.prototype.createToolbarConfig = function() {
Client.IdfFrame.prototype.createToolbarConfig.call(this), Client.mainFrame.idfMobile && (this.backTreeButtonConf = this.createElementConfig({
c: "IonButton",
icon: "arrow-back",
className: "generic-btn frame-toolbar-btn tree-back-btn",
events: [ "onClick" ],
visible: !1
}), this.toolbarConf.children.splice(1, 0, this.backTreeButtonConf));
}, Client.IdfTree.prototype.getRootObject = function(e) {
var t;
return this.moving ? Client.IdfFrame.prototype.getRootObject.call(this, e) : (t = Client.eleMap[(Client.mainFrame.idfMobile ? this.levelContainersConf[0] : this.treeContainerConf).id], 
e ? t : t.domObj);
}, Client.IdfTree.prototype.updateElement = function(e) {
for (var t in Client.IdfFrame.prototype.updateElement.call(this, e = e || {}), e) {
var i = e[t];
switch (t) {
case "popupMenu":
this.popupMenu = i;
break;

case "enableMultipleSelection":
this.setEnableMultipleSelection(i);
break;

case "activeMultipleSelection":
this.setActiveMultipleSelection(i);
break;

case "activateOnExpand":
this.activateOnExpand = i;
break;

case "selectedNode":
this.setSelectedNode(i);
break;

case "dragDrop":
this.setDragDrop(i);
break;

case "enabled":
this.setEnabled(i);
}
}
e.updateToolbar && this.updateToolbar();
}, Client.IdfTree.prototype.setEnableMultipleSelection = function(e) {
this.enableMultipleSelection = e;
e = Client.eleMap[this.treeContainerConf.id];
Client.Widget.updateElementClassName(e, "enable-selection", !this.enableMultipleSelection);
}, Client.IdfTree.prototype.setActiveMultipleSelection = function(e) {
this.activeMultipleSelection = e, this.checkEventDef = this.activeMultipleSelection ? Client.IdfMessagesPump.eventTypes.ACTIVE : Client.IdfMessagesPump.eventTypes.DEFERRED;
}, Client.IdfTree.prototype.setSelectedNode = function(e, t) {
this.selectedNode !== e && (Client.eleMap[this.selectedNode]?.setSelectedNode(!1), 
this.selectedNode = e, Client.eleMap[this.selectedNode]?.setSelectedNode(!0), t) && !Client.mainFrame.isIDF && Client.mainFrame.sendEvents([ {
obj: this.id,
id: "chgProp",
content: {
name: "selectedNode",
value: this.selectedNode,
clid: Client.id
}
} ]);
}, Client.IdfTree.prototype.setDragDrop = function(e) {
this.dragDrop = e, this.realizing || this.elements.forEach(e => e.setDraggable(this.dragDrop && !1 !== this.canDrag, !0));
}, Client.IdfTree.prototype.setEnabled = function(e) {
this.realizing || this.elements.forEach(e => e.setEnabled(this.enabled, !0));
}, Client.IdfTree.prototype.getLevelContainer = function(t) {
if (this.levelContainersConf) {
let e = t - 1;
if ((e = e < 0 ? 0 : e) >= this.levelContainersConf.length) for (var i = Client.eleMap[this.treeContainerConf.id]; e >= this.levelContainersConf.length; ) this.levelContainersConf.push(this.createElementConfig({
c: "Container",
className: "tree-content-lvl",
visible: !1
})), i.elements.push(this.view.createElement(this.levelContainersConf[this.levelContainersConf.length - 1], i, this.view));
return Client.eleMap[this.levelContainersConf[e].id];
}
}, Client.IdfTree.prototype.navigateToLevel = function(e) {
var t = Client.eleMap[this.treeContainerConf.id];
t.updateElement({
selectedPage: e
}), Client.eleMap[this.backTreeButtonConf.id].updateElement({
visible: 0 !== t.selectedPage
}), this.updateToolbar();
}, Client.IdfTree.prototype.onEvent = function(e) {
var t = Client.IdfFrame.prototype.onEvent.call(this, e);
switch (e.id) {
case "onClick":
this.backTreeButtonConf && e.obj === this.backTreeButtonConf.id && this.expandedNode && (Client.eleMap[this.expandedNode].updateElement({
expanded: !1,
retarded: !0
}), Client.mainFrame.isIDF ? t.push({
id: "trnexp",
def: this.expandEventDef,
content: {
oid: this.expandedNode
}
}) : t.push({
obj: this.expandedNode,
id: "onExpandNode",
content: {
expanded: !1
}
}), delete this.expandedNode);
break;

case "onDragstart":
this.handleDragStart(e);
break;

case "onDragenter":
this.handleDragEnter(e);
break;

case "onDragover":
this.handleDragOver(e);
break;

case "onDragleave":
this.handleDragLeave(e);
break;

case "onDrop":
t.push(...this.handleDrop(e));
}
return t;
}, Client.IdfTree.isDroppableNode = function(e) {
return e.classList.contains("treenode-header-label");
}, Client.IdfTree.prototype.handleDragStart = function(e) {
var e = e.content.srcEvent, t = Client.eleMap[e.target.id].parentWidget;
e.dataTransfer.setData("text", t.id), e.dataTransfer.effectAllowed = "copy";
}, Client.IdfTree.prototype.handleDragEnter = function(e) {
e = e.content.srcEvent;
Client.IdfTree.isDroppableNode(e.target) && (e.preventDefault(), e.target.classList.add("tree-drop-hover"), 
e.dataTransfer.dropEffect = "copy");
}, Client.IdfTree.prototype.handleDragOver = function(e) {
e = e.content.srcEvent;
Client.IdfTree.isDroppableNode(e.target) && (e.preventDefault(), e.dataTransfer.dropEffect = "copy");
}, Client.IdfTree.prototype.handleDragLeave = function(e) {
e.content.srcEvent.target.classList.remove("tree-drop-hover");
}, Client.IdfTree.prototype.handleDrop = function(e) {
var e = e.content.srcEvent, t = Client.eleMap[e.dataTransfer.getData("text")], i = Client.eleMap[e.target.id].parentWidget, e = (e.target.classList.remove("tree-drop-hover"), 
[]);
return Client.mainFrame.isIDF ? e.push({
id: "drp",
def: Client.IdfMessagesPump?.eventTypes.ACTIVE,
content: {
oid: i.id,
obn: t.id
}
}) : e.push({
id: "onDrop",
obj: this.id,
content: {
dragId: t.id,
dropId: i.id
}
}), e;
}, Client.IdfTree.prototype.resetCache = function() {
for (let e = 0; e < this.elements.length; e++) {
var t = this.elements[e];
this.removeChild(t), e--;
}
}, Client.IdfTree.prototype.updateToolbar = function() {
if (Client.IdfFrame.prototype.updateToolbar.call(this), Client.mainFrame.idfMobile) {
let e = this.caption || "";
var t;
this.expandedNode && (t = Client.eleMap[this.expandedNode], e = t.expanded ? t.caption : e), 
Client.eleMap[this.captionConf.id].updateElement({
innerText: e
}), this.parentIdfView?.checkMobileButtons();
}
}, Client.IdfTree.prototype.getClickDetail = function(e, t) {
e = Client.IdfFrame.prototype.getClickDetail.call(this, e, t);
let i = -1;
return t instanceof Client.IdfTreeNode && (i = t.id), Client.mainFrame.isIDF ? e.par4 = i : e.node = i, 
e;
}, Client.IdfTree.prototype.acceptsDrop = function(e) {
return !1;
}, Client.IdfTree.prototype.resetTree = function() {
this.elements.forEach(e => e.collapseBranch());
}, Client || {});

Client.IdfTreeNode = function(e, t, i) {
var n = t instanceof Client.IdfTree ? t : t.parentTree;
e = Object.assign({
expanded: !1,
alreadyExpanded: !1,
canCheck: !0,
selected: !1,
image: "",
badge: "",
caption: "",
tooltip: "",
draggable: n.dragDrop && !1 !== n.canDrag,
enabled: n.enabled
}, e), this.level = t instanceof Client.IdfTree ? 1 : t.level + 1, Client.mainFrame.isEditing() && (e.expanded = !0), 
Client.Widget.call(this, e, t, i), n.selectedNode === this.id && this.setSelectedNode(!0);
}, Client.IdfTreeNode.prototype = new Client.Widget(), Client.IdfTreeNode.transPropMap = Object.assign({}, Client.Widget.transPropMap, {
aex: "alreadyExpanded",
exp: "expanded",
cch: "canCheck",
sel: "selected",
img: "image"
}), Client.IdfTreeNode.convertPropValues = function(e) {
for (var t in e = e || {}) switch (t) {
case Client.IdfTreeNode.transPropMap.aex:
case Client.IdfTreeNode.transPropMap.exp:
case Client.IdfTreeNode.transPropMap.cch:
case Client.IdfTreeNode.transPropMap.sel:
e[t] = "1" === e[t] || !0 === e[t];
}
}, Client.IdfTreeNode.prototype.createElementsConfig = function() {
this.treeContainerConf = this.createElementConfig({
c: "Container",
className: "treenode-container",
events: [ "onContextmenu" ]
}), this.headerContainerConf = this.createElementConfig({
c: "IonItem",
className: "treenode-header"
}), this.treeContainerConf.children.push(this.headerContainerConf), this.collapseButtonConf = this.createElementConfig({
c: "IonButton",
iconPosition: "only",
clear: "true",
className: "treenode-exp-icon"
}), this.headerContainerConf.children.push(this.collapseButtonConf), this.spacerButtonConf = this.createElementConfig({
c: "Container",
visible: !1,
className: "treenode-spacer"
});
var e = this.createElementConfig({
c: "Container",
className: "treenode-spacer-inner"
});
this.spacerButtonConf.children.push(e), this.headerContainerConf.children.push(this.spacerButtonConf), 
this.checkConf = this.createElementConfig({
c: "IonCheckbox",
className: "treenode-check"
}), this.headerContainerConf.children.push(this.checkConf), this.nodeLabel = this.createElementConfig({
c: "IonLabel",
className: "treenode-header-label"
}), this.headerContainerConf.children.push(this.nodeLabel), this.nodeBadge = this.createElementConfig({
c: "IonBadge",
visible: !1,
className: "treenode-badge"
}), this.headerContainerConf.children.push(this.nodeBadge), Client.mainFrame.idfMobile ? (this.headerContainerConf.events = [ "onClick" ], 
this.contentBoxConf = this.createElementConfig({
c: "IonList",
className: "treenode-content",
noLines: !1
})) : (this.contentBoxConf = this.createElementConfig({
c: "IonList",
className: "treenode-content collapsible-container",
noLines: !0
}), this.contentBoxConf.animations = [ {
trigger: "animation",
prop: "collapseElement",
duration: 250
}, {
trigger: "animation",
prop: "expandElement",
duration: 250
} ], this.treeContainerConf.children.push(this.contentBoxConf), this.collapseButtonConf.events = [ "onClick" ], 
this.nodeLabel.events = [ "onClick" ]);
}, Client.IdfTreeNode.prototype.realize = function(e, t, i) {
this.createElementsConfig(e), this.mainObjects.push(i.createElement(this.treeContainerConf, t, i)), 
Client.mainFrame.idfMobile && i.createElement(this.contentBoxConf, this.parentTree.getLevelContainer(this.level + 1), i), 
this.createChildren(e), t instanceof Client.IdfTreeNode && t.appendChildTreeNode();
}, Client.IdfTreeNode.prototype.updateElement = function(e) {
for (var t in Client.Widget.prototype.updateElement.call(this, e = e || {}), e) {
var i = e[t];
switch (t) {
case "alreadyExpanded":
this.alreadyExpanded = i;
break;

case "expanded":
this.setExpanded(i);
break;

case "image":
this.setImage(i);
break;

case "caption":
this.setCaption(i);
break;

case "tooltip":
this.setTooltip(i);
break;

case "canCheck":
this.setCanCheck(i);
break;

case "selected":
this.setSelected(i);
break;

case "badge":
this.setBadge(i);
break;

case "className":
this.setClassName(i);
break;

case "draggable":
this.setDraggable(i);
break;

case "enabled":
this.setEnabled(i);
}
}
this.showExpansionIcon();
}, Client.IdfTreeNode.prototype.setExpanded = function(e) {
var t = this.expanded;
this.expanded = e, Client.eleMap[this.collapseButtonConf.id].updateElement({
icon: Client.mainFrame.idfMobile ? "arrow-dropright" : this.expanded ? "remove" : "add"
});
let i = Client.eleMap[this.contentBoxConf.id];
Client.mainFrame.idfMobile ? (this.expanded ? setTimeout(() => {
i.updateElement({
visible: !0
});
}, 300) : i.updateElement({
visible: !1
}), t !== this.expanded && ((e = this.parentTree).expandedNode = this.id, e.navigateToLevel(this.expanded ? this.level : this.level - 1))) : (Client.Widget.updateElementClassName(i, "expanded", !this.expanded), 
Client.Widget.updateElementClassName(i, "collapsed", this.expanded));
}, Client.IdfTreeNode.prototype.setImage = function(e) {
this.image = e;
var t, e = Client.eleMap[this.headerContainerConf.id];
this.image ? (this.imageObj || (t = this.createElementConfig({
c: "IonThumbnail",
visible: "false",
className: "treenode-img"
}), this.imageObj = e.insertBefore({
child: t,
sib: this.nodeLabel.id
})), this.imageObj.updateElement({
src: (Client.mainFrame.isIDF ? "images/" : "") + this.image
})) : this.imageObj && (e.removeChild(this.imageObj), delete this.imageObj);
}, Client.IdfTreeNode.prototype.setCaption = function(e) {
Client.eleMap[this.nodeLabel.id].updateElement({
innerHTML: Client.Widget.getHTMLForCaption(this.caption)
});
}, Client.IdfTreeNode.prototype.setTooltip = function(e) {
Client.eleMap[this.headerContainerConf.id].updateElement({
title: this.tooltip
});
}, Client.IdfTreeNode.prototype.setCanCheck = function(e) {
this.canCheck = e, Client.eleMap[this.checkConf.id].updateElement({
disabled: !this.canCheck
});
}, Client.IdfTreeNode.prototype.setSelected = function(e) {
this.selected = e, Client.eleMap[this.checkConf.id].updateElement({
checked: this.selected
});
}, Client.IdfTreeNode.prototype.setBadge = function(e) {
Client.eleMap[this.nodeBadge.id].updateElement({
innerText: this.badge,
visible: !!this.badge
});
}, Client.IdfTreeNode.prototype.setClassName = function(e) {
var t = Client.eleMap[this.treeContainerConf.id];
Client.Widget.updateElementClassName(t, this.className, !0), this.className = e, 
Client.Widget.updateElementClassName(t, this.className);
}, Client.IdfTreeNode.prototype.setDraggable = function(i, e) {
var t = Client.eleMap[this.nodeLabel.id];
if (t.updateElement({
draggable: i ? "true" : ""
}), t.domObj.classList.toggle("tree-draggable", i), e) {
let t = this.parentTree.enabled;
this.elements?.forEach(e => e.setDraggable(i && t, !0));
}
}, Client.IdfTreeNode.prototype.setEnabled = function(t, e) {
Client.eleMap[this.checkConf.id].updateElement({
disabled: !t
});
var i = Client.eleMap[this.headerContainerConf.id];
Client.Widget.updateElementClassName(i, "disabled", !this.enabled), this.setDraggable(this.parentTree.dragDrop && !1 !== this.parentTree.canDrag && t), 
e && this.elements?.forEach(e => e.setEnabled(t, !0));
}, Client.IdfTreeNode.prototype.setSelectedNode = function(e) {
Client.Widget.updateElementClassName(Client.eleMap[this.headerContainerConf.id], "treenode-sel-item", !e);
}, Client.IdfTreeNode.prototype.appendChildObject = function(e, t) {
var i = Client.eleMap[this.contentBoxConf.id];
i.appendChildObject(e, t), i.elements.push(e), e.parent = i;
}, Client.IdfTreeNode.prototype.appendChildTreeNode = function(e) {
this.showExpansionIcon();
}, Client.IdfTreeNode.prototype.showExpansionIcon = function() {
let e = 0 < this.elements?.length || Client.mainFrame.isEditing(), t = (Client.mainFrame.isIDF && (e = e || !this.alreadyExpanded), 
Client.eleMap[this.collapseButtonConf.id]);
t.updateElement({
visible: e
}), (t = Client.eleMap[this.spacerButtonConf.id]).updateElement({
visible: !e
});
}, Client.IdfTreeNode.prototype.onEvent = function(e) {
var t = Client.Widget.prototype.onEvent.call(this, e);
if (this.parentTree.enabled) switch (e.id) {
case "onClick":
!Client.mainFrame.idfMobile || e.obj !== this.headerContainerConf.id && e.obj !== this.nodeLabel.id || (e.obj = this.collapseButtonConf.id), 
e.obj === this.collapseButtonConf.id && t.push(...this.handleCollapseButtonClick(e)), 
e.obj === this.nodeLabel.id && t.push(...this.handleLabelClick(e));
break;

case "chgProp":
e.obj === this.checkConf.id && t.push(...this.handleCheckChange(e));
break;

case "onContextmenu":
t.push(...this.handleContextMenu(e));
}
return t;
}, Client.IdfTreeNode.prototype.handleCollapseButtonClick = function(e) {
var t = [], i = !Client.mainFrame.isIDF || this.expanded || !this.elements?.length && !this.alreadyExpanded || this.elements?.length;
return i && (!Client.mainFrame.isIDF || this.alreadyExpanded || this.elements?.length) && this.updateElement({
expanded: !this.expanded
}), this.alreadyExpanded = !0, this.parentTree.activateOnExpand && (this.parentTree.setSelectedNode(this.id, !0), 
Client.mainFrame.isIDF || t.push({
id: "onActivateNode",
obj: this.id
})), Client.mainFrame.isIDF ? i && t.push({
id: "trnexp",
def: this.parentTree.expandEventDef,
content: {
oid: this.id
}
}) : t.push({
obj: this.id,
id: "onExpandNode",
content: {
expanded: this.expanded
}
}), t;
}, Client.IdfTreeNode.prototype.handleLabelClick = function(e) {
var t = [];
return this.parentTree.setSelectedNode(this.id, !0), Client.mainFrame.isIDF ? t.push({
id: "clk",
def: this.parentTree.clickEventDef,
content: {
oid: this.id
}
}) : t.push({
obj: this.id,
id: "onActivateNode"
}), t;
}, Client.IdfTreeNode.prototype.handleCheckChange = function(e) {
var t = [];
return Client.mainFrame.isIDF ? t.push({
obj: this.id,
def: this.parentTree.checkEventDef,
id: "chg",
content: {
oid: this.id,
obn: "check",
par1: e.content.value ? "on" : ""
}
}) : (e.obj = this.id, e.content.name = "selected", t.push(e), t.push({
obj: this.id,
id: "onChangeSelection",
content: {
selected: e.content.value
}
})), t;
}, Client.IdfTreeNode.prototype.handleContextMenu = function(e) {
var t = [];
return this.parentTree.popupMenu && !e.content.srcEvent.justHandled && (e.content.srcEvent.justHandled = !0, 
Client.mainFrame.isIDF) && t.push({
id: "rclk",
def: this.parentTree.clickEventDef,
content: {
oid: this.id,
par1: this.parentTree.popupMenu
}
}), t;
}, Object.defineProperty(Client.IdfTreeNode.prototype, "parentTree", {
get: function() {
return this.parent instanceof Client.IdfTree ? this.parent : this.parent instanceof Client.IdfTreeNode ? this.parent.parentTree : void 0;
}
}), Client.IdfTreeNode.createConfigFromXml = function(t) {
var i = {};
if (t.childNodes && 0 < t.childNodes.length) {
i.childrenNodes = [];
for (let e = 0; e < t.childNodes.length; e++) {
var n = Client.Widget.createConfigFromXml(t.childNodes[e]);
n && i.childrenNodes.push(n);
}
}
return i;
}, Client.IdfTreeNode.prototype.resetCache = function() {
this.elements?.slice().forEach(e => this.removeChild(e));
}, Client.IdfTreeNode.prototype.getPopupTarget = function() {
return Client.eleMap[this.nodeLabel.id].getRootObject();
}, Client.IdfTreeNode.prototype.isDraggable = function(e) {
return this.parentTree.canDrag && this.parentTree.enabled && !this.parentTree.dragDrop;
}, Client.IdfTreeNode.prototype.acceptsDrop = function(e) {
return this.parentTree.canDrop && this.parentTree.enabled && !this.parentTree.dragDrop;
}, Client.IdfTreeNode.prototype.getTransformOperationTargetObj = function(e, t) {
return Client.eleMap[this.nodeLabel.id].getRootObject();
}, Client.IdfTreeNode.prototype.collapseBranch = function() {
this.elements.forEach(e => e.collapseBranch()), this.setExpanded(!1);
};
//# sourceMappingURL=appclient.min.js.map